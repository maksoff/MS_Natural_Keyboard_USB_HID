
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800949c  0800949c  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  0800949c  0800949c  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800949c  0800949c  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  200001a8  0800964c  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  0800964c  00020fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001affc  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042ef  00000000  00000000  0003b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001458  00000000  00000000  0003f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001298  00000000  00000000  00040918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c5f6  00000000  00000000  00041bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014a5b  00000000  00000000  0005e1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009190d  00000000  00000000  00072c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010450e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a8  00000000  00000000  0010458c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080092ec 	.word	0x080092ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	080092ec 	.word	0x080092ec

0800014c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000152:	4b21      	ldr	r3, [pc, #132]	; (80001d8 <_DoInit+0x8c>)
 8000154:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2202      	movs	r2, #2
 800015a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2202      	movs	r2, #2
 8000160:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a1d      	ldr	r2, [pc, #116]	; (80001dc <_DoInit+0x90>)
 8000166:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a1d      	ldr	r2, [pc, #116]	; (80001e0 <_DoInit+0x94>)
 800016c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a14      	ldr	r2, [pc, #80]	; (80001dc <_DoInit+0x90>)
 800018c:	649a      	str	r2, [r3, #72]	; 0x48
  p->aDown[0].pBuffer       = _acDownBuffer;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <_DoInit+0x98>)
 8000192:	64da      	str	r2, [r3, #76]	; 0x4c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2210      	movs	r2, #16
 8000198:	651a      	str	r2, [r3, #80]	; 0x50
  p->aDown[0].RdOff         = 0u;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	659a      	str	r2, [r3, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	655a      	str	r2, [r3, #84]	; 0x54
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	65da      	str	r2, [r3, #92]	; 0x5c
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3307      	adds	r3, #7
 80001b0:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <_DoInit+0x9c>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <_DoInit+0xa0>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2220      	movs	r2, #32
 80001ca:	719a      	strb	r2, [r3, #6]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000064c 	.word	0x2000064c
 80001dc:	08009304 	.word	0x08009304
 80001e0:	200001c4 	.word	0x200001c4
 80001e4:	200005c4 	.word	0x200005c4
 80001e8:	08009310 	.word	0x08009310
 80001ec:	08009314 	.word	0x08009314

080001f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	429a      	cmp	r2, r3
 8000212:	d905      	bls.n	8000220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	3b01      	subs	r3, #1
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	e007      	b.n	8000230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	6939      	ldr	r1, [r7, #16]
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	1acb      	subs	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3b01      	subs	r3, #1
 800022e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	bf28      	it	cs
 800023e:	4613      	movcs	r3, r2
 8000240:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000242:	69fa      	ldr	r2, [r7, #28]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4293      	cmp	r3, r2
 8000248:	bf28      	it	cs
 800024a:	4613      	movcs	r3, r2
 800024c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	4413      	add	r3, r2
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4618      	mov	r0, r3
 800025c:	f009 f832 	bl	80092c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	4413      	add	r3, r2
 8000266:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	4413      	add	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1b5      	bne.n	8000206 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800029a:	69bb      	ldr	r3, [r7, #24]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002c0:	69ba      	ldr	r2, [r7, #24]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d90e      	bls.n	80002e6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	4413      	add	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f008 fff5 	bl	80092c4 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80002e4:	e01a      	b.n	800031c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4413      	add	r3, r2
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f008 ffe4 	bl	80092c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4619      	mov	r1, r3
 8000312:	f008 ffd7 	bl	80092c4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	429a      	cmp	r2, r3
 800033e:	d808      	bhi.n	8000352 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	4413      	add	r3, r2
 800034c:	3b01      	subs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e004      	b.n	800035c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	4618      	mov	r0, r3
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4613      	mov	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	4413      	add	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <SEGGER_RTT_WriteNoLock+0x98>)
 8000386:	4413      	add	r3, r2
 8000388:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d017      	beq.n	80003c2 <SEGGER_RTT_WriteNoLock+0x5a>
 8000392:	2b01      	cmp	r3, #1
 8000394:	d302      	bcc.n	800039c <SEGGER_RTT_WriteNoLock+0x34>
 8000396:	2b02      	cmp	r3, #2
 8000398:	d023      	beq.n	80003e2 <SEGGER_RTT_WriteNoLock+0x7a>
 800039a:	e029      	b.n	80003f0 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800039c:	6978      	ldr	r0, [r7, #20]
 800039e:	f7ff ffc1 	bl	8000324 <_GetAvailWriteSpace>
 80003a2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003a4:	693a      	ldr	r2, [r7, #16]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d202      	bcs.n	80003b2 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003b0:	e021      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	69b9      	ldr	r1, [r7, #24]
 80003ba:	6978      	ldr	r0, [r7, #20]
 80003bc:	f7ff ff72 	bl	80002a4 <_WriteNoCheck>
    break;
 80003c0:	e019      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c2:	6978      	ldr	r0, [r7, #20]
 80003c4:	f7ff ffae 	bl	8000324 <_GetAvailWriteSpace>
 80003c8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4293      	cmp	r3, r2
 80003d0:	bf28      	it	cs
 80003d2:	4613      	movcs	r3, r2
 80003d4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80003d6:	69fa      	ldr	r2, [r7, #28]
 80003d8:	69b9      	ldr	r1, [r7, #24]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff62 	bl	80002a4 <_WriteNoCheck>
    break;
 80003e0:	e009      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	69b9      	ldr	r1, [r7, #24]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff02 	bl	80001f0 <_WriteBlocking>
 80003ec:	61f8      	str	r0, [r7, #28]
    break;
 80003ee:	e002      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
    break;
 80003f4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80003f6:	69fb      	ldr	r3, [r7, #28]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000064c 	.word	0x2000064c

08000404 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <SEGGER_RTT_Write+0x44>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <SEGGER_RTT_Write+0x18>
 8000418:	f7ff fe98 	bl	800014c <_DoInit>
  SEGGER_RTT_LOCK();
 800041c:	f3ef 8311 	mrs	r3, BASEPRI
 8000420:	f04f 0120 	mov.w	r1, #32
 8000424:	f381 8811 	msr	BASEPRI, r1
 8000428:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f7ff ff9a 	bl	8000368 <SEGGER_RTT_WriteNoLock>
 8000434:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800043c:	693b      	ldr	r3, [r7, #16]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	2000064c 	.word	0x2000064c

0800044c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  _DoInit();
 8000450:	f7ff fe7c 	bl	800014c <_DoInit>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	d80e      	bhi.n	8000494 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	4413      	add	r3, r2
 800047e:	78fa      	ldrb	r2, [r7, #3]
 8000480:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	d115      	bne.n	80004cc <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6918      	ldr	r0, [r3, #16]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	461a      	mov	r2, r3
 80004ae:	f7ff ffa9 	bl	8000404 <SEGGER_RTT_Write>
 80004b2:	4602      	mov	r2, r0
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d004      	beq.n	80004c6 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f04f 32ff 	mov.w	r2, #4294967295
 80004c2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80004c4:	e002      	b.n	80004cc <_StoreChar+0x74>
      p->Cnt = 0u;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80004e6:	2301      	movs	r3, #1
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004ee:	e007      	b.n	8000500 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80004f0:	6a3a      	ldr	r2, [r7, #32]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f8:	623b      	str	r3, [r7, #32]
    Width++;
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3301      	adds	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	d2f3      	bcs.n	80004f0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	429a      	cmp	r2, r3
 800050e:	d901      	bls.n	8000514 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d125      	bne.n	800056a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000520:	2b00      	cmp	r3, #0
 8000522:	d022      	beq.n	800056a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b00      	cmp	r3, #0
 800052c:	d005      	beq.n	800053a <_PrintUnsigned+0x66>
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_PrintUnsigned+0x66>
        c = '0';
 8000534:	2330      	movs	r3, #48	; 0x30
 8000536:	76fb      	strb	r3, [r7, #27]
 8000538:	e001      	b.n	800053e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800053a:	2320      	movs	r3, #32
 800053c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800053e:	e00b      	b.n	8000558 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000542:	3b01      	subs	r3, #1
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8000546:	7efb      	ldrb	r3, [r7, #27]
 8000548:	4619      	mov	r1, r3
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f7ff ff84 	bl	8000458 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db07      	blt.n	8000568 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d005      	beq.n	800056a <_PrintUnsigned+0x96>
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000562:	429a      	cmp	r2, r3
 8000564:	d3ec      	bcc.n	8000540 <_PrintUnsigned+0x6c>
 8000566:	e000      	b.n	800056a <_PrintUnsigned+0x96>
          break;
 8000568:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db55      	blt.n	800061e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d903      	bls.n	8000580 <_PrintUnsigned+0xac>
        NumDigits--;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	e009      	b.n	8000594 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000584:	fbb2 f3f3 	udiv	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d200      	bcs.n	8000594 <_PrintUnsigned+0xc0>
          break;
 8000592:	e005      	b.n	80005a0 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800059e:	e7e8      	b.n	8000572 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <_PrintUnsigned+0x154>)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f7ff ff48 	bl	8000458 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db08      	blt.n	80005e2 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80005d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1df      	bne.n	80005a0 <_PrintUnsigned+0xcc>
 80005e0:	e000      	b.n	80005e4 <_PrintUnsigned+0x110>
        break;
 80005e2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80005e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d017      	beq.n	800061e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80005ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d014      	beq.n	800061e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80005f4:	e00a      	b.n	800060c <_PrintUnsigned+0x138>
          FieldWidth--;
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	3b01      	subs	r3, #1
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80005fc:	2120      	movs	r1, #32
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f7ff ff2a 	bl	8000458 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db07      	blt.n	800061c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <_PrintUnsigned+0x14a>
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000616:	429a      	cmp	r2, r3
 8000618:	d3ed      	bcc.n	80005f6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800061a:	e000      	b.n	800061e <_PrintUnsigned+0x14a>
            break;
 800061c:	bf00      	nop
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	0800937c 	.word	0x0800937c

0800062c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	bfb8      	it	lt
 8000640:	425b      	neglt	r3, r3
 8000642:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000648:	e007      	b.n	800065a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000652:	613b      	str	r3, [r7, #16]
    Width++;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3301      	adds	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	429a      	cmp	r2, r3
 8000660:	daf3      	bge.n	800064a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	429a      	cmp	r2, r3
 8000668:	d901      	bls.n	800066e <_PrintInt+0x42>
    Width = NumDigits;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <_PrintInt+0x5e>
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db04      	blt.n	8000684 <_PrintInt+0x58>
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <_PrintInt+0x5e>
    FieldWidth--;
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3b01      	subs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <_PrintInt+0x6e>
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d01c      	beq.n	80006d4 <_PrintInt+0xa8>
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d117      	bne.n	80006d4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d014      	beq.n	80006d4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006aa:	e00a      	b.n	80006c2 <_PrintInt+0x96>
        FieldWidth--;
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80006b2:	2120      	movs	r1, #32
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fecf 	bl	8000458 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db07      	blt.n	80006d2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <_PrintInt+0xa8>
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3ed      	bcc.n	80006ac <_PrintInt+0x80>
 80006d0:	e000      	b.n	80006d4 <_PrintInt+0xa8>
          break;
 80006d2:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db4a      	blt.n	8000772 <_PrintInt+0x146>
    if (v < 0) {
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da07      	bge.n	80006f2 <_PrintInt+0xc6>
      v = -v;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	425b      	negs	r3, r3
 80006e6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80006e8:	212d      	movs	r1, #45	; 0x2d
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff feb4 	bl	8000458 <_StoreChar>
 80006f0:	e008      	b.n	8000704 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80006fc:	212b      	movs	r1, #43	; 0x2b
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff feaa 	bl	8000458 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db32      	blt.n	8000772 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	2b00      	cmp	r3, #0
 8000714:	d01f      	beq.n	8000756 <_PrintInt+0x12a>
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11a      	bne.n	8000756 <_PrintInt+0x12a>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d117      	bne.n	8000756 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d014      	beq.n	8000756 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800072c:	e00a      	b.n	8000744 <_PrintInt+0x118>
            FieldWidth--;
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	3b01      	subs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000734:	2130      	movs	r1, #48	; 0x30
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff fe8e 	bl	8000458 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db07      	blt.n	8000754 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <_PrintInt+0x12a>
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3ed      	bcc.n	800072e <_PrintInt+0x102>
 8000752:	e000      	b.n	8000756 <_PrintInt+0x12a>
              break;
 8000754:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db09      	blt.n	8000772 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff feb1 	bl	80004d4 <_PrintUnsigned>
      }
    }
  }
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a2      	sub	sp, #136	; 0x88
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000792:	2300      	movs	r3, #0
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80007ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8161 	beq.w	8000a78 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 80007b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007ba:	2b25      	cmp	r3, #37	; 0x25
 80007bc:	f040 814f 	bne.w	8000a5e <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80007c0:	2300      	movs	r3, #0
 80007c2:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 80007d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007d4:	3b23      	subs	r3, #35	; 0x23
 80007d6:	2b0d      	cmp	r3, #13
 80007d8:	d83e      	bhi.n	8000858 <SEGGER_RTT_vprintf+0xdc>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <SEGGER_RTT_vprintf+0x64>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	08000849 	.word	0x08000849
 80007e4:	08000859 	.word	0x08000859
 80007e8:	08000859 	.word	0x08000859
 80007ec:	08000859 	.word	0x08000859
 80007f0:	08000859 	.word	0x08000859
 80007f4:	08000859 	.word	0x08000859
 80007f8:	08000859 	.word	0x08000859
 80007fc:	08000859 	.word	0x08000859
 8000800:	08000839 	.word	0x08000839
 8000804:	08000859 	.word	0x08000859
 8000808:	08000819 	.word	0x08000819
 800080c:	08000859 	.word	0x08000859
 8000810:	08000859 	.word	0x08000859
 8000814:	08000829 	.word	0x08000829
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	673b      	str	r3, [r7, #112]	; 0x70
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	3301      	adds	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e01a      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	673b      	str	r3, [r7, #112]	; 0x70
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	e012      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	673b      	str	r3, [r7, #112]	; 0x70
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	e00a      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	673b      	str	r3, [r7, #112]	; 0x70
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3301      	adds	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e002      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000858:	2300      	movs	r3, #0
 800085a:	67bb      	str	r3, [r7, #120]	; 0x78
 800085c:	bf00      	nop
        }
      } while (v);
 800085e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1b1      	bne.n	80007c8 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000864:	2300      	movs	r3, #0
 8000866:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000874:	2b2f      	cmp	r3, #47	; 0x2f
 8000876:	d912      	bls.n	800089e <SEGGER_RTT_vprintf+0x122>
 8000878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800087c:	2b39      	cmp	r3, #57	; 0x39
 800087e:	d80e      	bhi.n	800089e <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000896:	4413      	add	r3, r2
 8000898:	3b30      	subs	r3, #48	; 0x30
 800089a:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 800089c:	e7e4      	b.n	8000868 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800089e:	2300      	movs	r3, #0
 80008a0:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 80008aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008ae:	2b2e      	cmp	r3, #46	; 0x2e
 80008b0:	d11d      	bne.n	80008ee <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 80008c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008c4:	2b2f      	cmp	r3, #47	; 0x2f
 80008c6:	d912      	bls.n	80008ee <SEGGER_RTT_vprintf+0x172>
 80008c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008cc:	2b39      	cmp	r3, #57	; 0x39
 80008ce:	d80e      	bhi.n	80008ee <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80008d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	461a      	mov	r2, r3
 80008e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008e6:	4413      	add	r3, r2
 80008e8:	3b30      	subs	r3, #48	; 0x30
 80008ea:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 80008ec:	e7e4      	b.n	80008b8 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80008f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008fa:	2b6c      	cmp	r3, #108	; 0x6c
 80008fc:	d003      	beq.n	8000906 <SEGGER_RTT_vprintf+0x18a>
 80008fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000902:	2b68      	cmp	r3, #104	; 0x68
 8000904:	d107      	bne.n	8000916 <SEGGER_RTT_vprintf+0x19a>
          c = *sFormat;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          sFormat++;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
        if ((c == 'l') || (c == 'h')) {
 8000914:	e7ef      	b.n	80008f6 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800091a:	2b64      	cmp	r3, #100	; 0x64
 800091c:	d028      	beq.n	8000970 <SEGGER_RTT_vprintf+0x1f4>
 800091e:	2b64      	cmp	r3, #100	; 0x64
 8000920:	dc07      	bgt.n	8000932 <SEGGER_RTT_vprintf+0x1b6>
 8000922:	2b58      	cmp	r3, #88	; 0x58
 8000924:	d04a      	beq.n	80009bc <SEGGER_RTT_vprintf+0x240>
 8000926:	2b63      	cmp	r3, #99	; 0x63
 8000928:	d00f      	beq.n	800094a <SEGGER_RTT_vprintf+0x1ce>
 800092a:	2b25      	cmp	r3, #37	; 0x25
 800092c:	f000 808c 	beq.w	8000a48 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8000930:	e091      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8000932:	2b73      	cmp	r3, #115	; 0x73
 8000934:	d055      	beq.n	80009e2 <SEGGER_RTT_vprintf+0x266>
 8000936:	2b73      	cmp	r3, #115	; 0x73
 8000938:	dc02      	bgt.n	8000940 <SEGGER_RTT_vprintf+0x1c4>
 800093a:	2b70      	cmp	r3, #112	; 0x70
 800093c:	d071      	beq.n	8000a22 <SEGGER_RTT_vprintf+0x2a6>
        break;
 800093e:	e08a      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8000940:	2b75      	cmp	r3, #117	; 0x75
 8000942:	d028      	beq.n	8000996 <SEGGER_RTT_vprintf+0x21a>
 8000944:	2b78      	cmp	r3, #120	; 0x78
 8000946:	d039      	beq.n	80009bc <SEGGER_RTT_vprintf+0x240>
        break;
 8000948:	e085      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1d19      	adds	r1, r3, #4
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6011      	str	r1, [r2, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800095a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 800095e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fd75 	bl	8000458 <_StoreChar>
        break;
 800096e:	e072      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1d19      	adds	r1, r3, #4
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6011      	str	r1, [r2, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800097e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800098c:	220a      	movs	r2, #10
 800098e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000990:	f7ff fe4c 	bl	800062c <_PrintInt>
        break;
 8000994:	e05f      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1d19      	adds	r1, r3, #4
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	6011      	str	r1, [r2, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80009a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80009a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80009aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b4:	220a      	movs	r2, #10
 80009b6:	f7ff fd8d 	bl	80004d4 <_PrintUnsigned>
        break;
 80009ba:	e04c      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1d19      	adds	r1, r3, #4
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6011      	str	r1, [r2, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80009ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80009cc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80009d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009da:	2210      	movs	r2, #16
 80009dc:	f7ff fd7a 	bl	80004d4 <_PrintUnsigned>
        break;
 80009e0:	e039      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 80009f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80009f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009fa:	3301      	adds	r3, #1
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80009fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 8000a06:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd21 	bl	8000458 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dae9      	bge.n	80009f0 <SEGGER_RTT_vprintf+0x274>
        break;
 8000a1c:	e01b      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
              break;
 8000a1e:	bf00      	nop
        break;
 8000a20:	e019      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1d19      	adds	r1, r3, #4
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	6011      	str	r1, [r2, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000a30:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000a32:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2308      	movs	r3, #8
 8000a40:	2210      	movs	r2, #16
 8000a42:	f7ff fd47 	bl	80004d4 <_PrintUnsigned>
        break;
 8000a46:	e006      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 8000a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a4c:	2125      	movs	r1, #37	; 0x25
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd02 	bl	8000458 <_StoreChar>
        break;
 8000a54:	bf00      	nop
      }
      sFormat++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	e007      	b.n	8000a6e <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 8000a5e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000a62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fcf5 	bl	8000458 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f6bf ae94 	bge.w	800079e <SEGGER_RTT_vprintf+0x22>
 8000a76:	e000      	b.n	8000a7a <SEGGER_RTT_vprintf+0x2fe>
      break;
 8000a78:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dd0d      	ble.n	8000a9c <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fcb8 	bl	8000404 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a98:	4413      	add	r3, r2
 8000a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3780      	adds	r7, #128	; 0x80
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop

08000aa8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000aa8:	b40e      	push	{r1, r2, r3}
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	461a      	mov	r2, r3
 8000abe:	69f9      	ldr	r1, [r7, #28]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe5b 	bl	800077c <SEGGER_RTT_vprintf>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad2:	b003      	add	sp, #12
 8000ad4:	4770      	bx	lr
	...

08000ad8 <EEE_erase>:
#include "main.h"
#include "gpio.h"
#include "eee.h"

void EEE_erase(uint8_t page)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <EEE_erase+0x58>)
 8000aea:	f002 fa28 	bl	8002f3e <HAL_GPIO_WritePin>

	HAL_FLASH_Unlock();
 8000aee:	f001 ff25 	bl	800293c <HAL_FLASH_Unlock>
   /* Fill EraseInit structure*/
   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <EEE_erase+0x5c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
   EraseInitStruct.PageAddress = PAGE_START(page);
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000afe:	331c      	adds	r3, #28
 8000b00:	02db      	lsls	r3, r3, #11
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <EEE_erase+0x5c>)
 8000b04:	6093      	str	r3, [r2, #8]
   EraseInitStruct.NbPages     = PAGES_PRO_PROGRAM;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <EEE_erase+0x5c>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	60da      	str	r2, [r3, #12]

   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	4808      	ldr	r0, [pc, #32]	; (8000b34 <EEE_erase+0x5c>)
 8000b14:	f001 fffa 	bl	8002b0c <HAL_FLASHEx_Erase>
   {
	 /*Error occurred while page erase.*/
	  // TODO process error //return HAL_FLASH_GetError ();
   }
	HAL_FLASH_Lock();
 8000b18:	f001 ff36 	bl	8002988 <HAL_FLASH_Lock>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <EEE_erase+0x58>)
 8000b24:	f002 fa0b 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40011000 	.word	0x40011000
 8000b34:	200005d4 	.word	0x200005d4

08000b38 <EEE_write>:

void EEE_write(uint8_t page, uint16_t pos, uint32_t data)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	603a      	str	r2, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	460b      	mov	r3, r1
 8000b46:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4e:	4810      	ldr	r0, [pc, #64]	; (8000b90 <EEE_write+0x58>)
 8000b50:	f002 f9f5 	bl	8002f3e <HAL_GPIO_WritePin>
	HAL_FLASH_Unlock();
 8000b54:	f001 fef2 	bl	800293c <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE_START(page) + (uint32_t)pos*sizeof(data), data) != HAL_OK)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000b5e:	331c      	adds	r3, #28
 8000b60:	025a      	lsls	r2, r3, #9
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	0099      	lsls	r1, r3, #2
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f04f 0400 	mov.w	r4, #0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4623      	mov	r3, r4
 8000b72:	2002      	movs	r0, #2
 8000b74:	f001 fe72 	bl	800285c <HAL_FLASH_Program>
	{
	/* Error occurred while writing data in Flash memory*/
	 // TODO check error. and lock flash return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
 8000b78:	f001 ff06 	bl	8002988 <HAL_FLASH_Lock>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4803      	ldr	r0, [pc, #12]	; (8000b90 <EEE_write+0x58>)
 8000b84:	f002 f9db 	bl	8002f3e <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	40011000 	.word	0x40011000

08000b94 <EEE_read>:

uint32_t EEE_read(uint8_t page, uint16_t pos)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80bb      	strh	r3, [r7, #4]
	uint32_t data;
	data = *(__IO uint32_t *)(PAGE_START(page) + (uint32_t)pos*sizeof(data));
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000baa:	331c      	adds	r3, #28
 8000bac:	025a      	lsls	r2, r3, #9
 8000bae:	88bb      	ldrh	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
	return data;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0310 	and.w	r3, r3, #16
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a49      	ldr	r2, [pc, #292]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000bf6:	f043 0320 	orr.w	r3, r3, #32
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0320 	and.w	r3, r3, #32
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a43      	ldr	r2, [pc, #268]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a3d      	ldr	r2, [pc, #244]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <MX_GPIO_Init+0x158>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3e:	4838      	ldr	r0, [pc, #224]	; (8000d20 <MX_GPIO_Init+0x15c>)
 8000c40:	f002 f97d 	bl	8002f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	4836      	ldr	r0, [pc, #216]	; (8000d24 <MX_GPIO_Init+0x160>)
 8000c4c:	f002 f977 	bl	8002f3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0310 	add.w	r3, r7, #16
 8000c66:	4619      	mov	r1, r3
 8000c68:	482d      	ldr	r0, [pc, #180]	; (8000d20 <MX_GPIO_Init+0x15c>)
 8000c6a:	f001 fff7 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000c6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c74:	2303      	movs	r3, #3
 8000c76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4828      	ldr	r0, [pc, #160]	; (8000d20 <MX_GPIO_Init+0x15c>)
 8000c80:	f001 ffec 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c84:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000c88:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4619      	mov	r1, r3
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <MX_GPIO_Init+0x160>)
 8000c96:	f001 ffe1 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c9a:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000c9e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	4619      	mov	r1, r3
 8000caa:	481f      	ldr	r0, [pc, #124]	; (8000d28 <MX_GPIO_Init+0x164>)
 8000cac:	f001 ffd6 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4816      	ldr	r0, [pc, #88]	; (8000d24 <MX_GPIO_Init+0x160>)
 8000cca:	f001 ffc7 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_GPIO_Init+0x168>)
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_GPIO_Init+0x164>)
 8000ce4:	f001 ffba 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480a      	ldr	r0, [pc, #40]	; (8000d28 <MX_GPIO_Init+0x164>)
 8000cfe:	f001 ffad 	bl	8002c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2101      	movs	r1, #1
 8000d06:	2017      	movs	r0, #23
 8000d08:	f001 fd71 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d0c:	2017      	movs	r0, #23
 8000d0e:	f001 fd8a 	bl	8002826 <HAL_NVIC_EnableIRQ>

}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40011000 	.word	0x40011000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	10210000 	.word	0x10210000

08000d30 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <data_low+0x44>)
 8000d3e:	f002 f8fe 	bl	8002f3e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d52:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4803      	ldr	r0, [pc, #12]	; (8000d74 <data_low+0x44>)
 8000d66:	f001 ff79 	bl	8002c5c <HAL_GPIO_Init>
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40010c00 	.word	0x40010c00

08000d78 <clock_low>:

void clock_low(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <clock_low+0x44>)
 8000d86:	f002 f8da 	bl	8002f3e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2302      	movs	r3, #2
 8000da6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <clock_low+0x44>)
 8000dae:	f001 ff55 	bl	8002c5c <HAL_GPIO_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40010c00 	.word	0x40010c00

08000dc0 <data_release>:

void data_release(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <data_release+0x34>)
 8000de6:	f001 ff39 	bl	8002c5c <HAL_GPIO_Init>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40010c00 	.word	0x40010c00

08000df8 <clock_release>:

void clock_release(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <clock_release+0x34>)
 8000e12:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <clock_release+0x38>)
 8000e1e:	f001 ff1d 	bl	8002c5c <HAL_GPIO_Init>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	10210000 	.word	0x10210000
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 8000e3e:	4bb5      	ldr	r3, [pc, #724]	; (8001114 <matrix_scan+0x2e0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 8000e44:	2106      	movs	r1, #6
 8000e46:	201f      	movs	r0, #31
 8000e48:	f000 f98c 	bl	8001164 <matrix_is_on>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <matrix_scan+0x24>
        matrix_break(PAUSE);
 8000e52:	20fe      	movs	r0, #254	; 0xfe
 8000e54:	f000 f9f4 	bl	8001240 <matrix_break>
    }

	if (code == 0)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 817c 	beq.w	8001158 <matrix_scan+0x324>
		return;

	switch (state) {
 8000e60:	4bad      	ldr	r3, [pc, #692]	; (8001118 <matrix_scan+0x2e4>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b0d      	cmp	r3, #13
 8000e66:	f200 8172 	bhi.w	800114e <matrix_scan+0x31a>
 8000e6a:	a201      	add	r2, pc, #4	; (adr r2, 8000e70 <matrix_scan+0x3c>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000ea9 	.word	0x08000ea9
 8000e74:	08000fa5 	.word	0x08000fa5
 8000e78:	08000f29 	.word	0x08000f29
 8000e7c:	08000ff5 	.word	0x08000ff5
 8000e80:	08001059 	.word	0x08001059
 8000e84:	08001071 	.word	0x08001071
 8000e88:	08001089 	.word	0x08001089
 8000e8c:	080010a1 	.word	0x080010a1
 8000e90:	080010b9 	.word	0x080010b9
 8000e94:	080010d1 	.word	0x080010d1
 8000e98:	080010e9 	.word	0x080010e9
 8000e9c:	08001107 	.word	0x08001107
 8000ea0:	08001125 	.word	0x08001125
 8000ea4:	0800113b 	.word	0x0800113b
		case INIT:
			switch (code) {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b84      	cmp	r3, #132	; 0x84
 8000eac:	d01f      	beq.n	8000eee <matrix_scan+0xba>
 8000eae:	2b84      	cmp	r3, #132	; 0x84
 8000eb0:	dc04      	bgt.n	8000ebc <matrix_scan+0x88>
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d022      	beq.n	8000efc <matrix_scan+0xc8>
 8000eb6:	2b83      	cmp	r3, #131	; 0x83
 8000eb8:	d012      	beq.n	8000ee0 <matrix_scan+0xac>
 8000eba:	e025      	b.n	8000f08 <matrix_scan+0xd4>
 8000ebc:	2be1      	cmp	r3, #225	; 0xe1
 8000ebe:	d00b      	beq.n	8000ed8 <matrix_scan+0xa4>
 8000ec0:	2bf0      	cmp	r3, #240	; 0xf0
 8000ec2:	d005      	beq.n	8000ed0 <matrix_scan+0x9c>
 8000ec4:	2be0      	cmp	r3, #224	; 0xe0
 8000ec6:	d11f      	bne.n	8000f08 <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 8000ec8:	4b93      	ldr	r3, [pc, #588]	; (8001118 <matrix_scan+0x2e4>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
					break;
 8000ece:	e02a      	b.n	8000f26 <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000ed0:	4b91      	ldr	r3, [pc, #580]	; (8001118 <matrix_scan+0x2e4>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
					break;
 8000ed6:	e026      	b.n	8000f26 <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 8000ed8:	4b8f      	ldr	r3, [pc, #572]	; (8001118 <matrix_scan+0x2e4>)
 8000eda:	2204      	movs	r2, #4
 8000edc:	701a      	strb	r2, [r3, #0]
					break;
 8000ede:	e022      	b.n	8000f26 <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000ee0:	2083      	movs	r0, #131	; 0x83
 8000ee2:	f000 f95b 	bl	800119c <matrix_make>
					state = INIT;
 8000ee6:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <matrix_scan+0x2e4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
					break;
 8000eec:	e01b      	b.n	8000f26 <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000eee:	20fc      	movs	r0, #252	; 0xfc
 8000ef0:	f000 f954 	bl	800119c <matrix_make>
					state = INIT;
 8000ef4:	4b88      	ldr	r3, [pc, #544]	; (8001118 <matrix_scan+0x2e4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
					break;
 8000efa:	e014      	b.n	8000f26 <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000efc:	f000 f9f4 	bl	80012e8 <matrix_clear>
					state = INIT;
 8000f00:	4b85      	ldr	r3, [pc, #532]	; (8001118 <matrix_scan+0x2e4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
					break;
 8000f06:	e00e      	b.n	8000f26 <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db04      	blt.n	8000f1a <matrix_scan+0xe6>
						matrix_make(code);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f942 	bl	800119c <matrix_make>
 8000f18:	e001      	b.n	8000f1e <matrix_scan+0xea>
					} else {
						matrix_clear();
 8000f1a:	f000 f9e5 	bl	80012e8 <matrix_clear>
					}
					state = INIT;
 8000f1e:	4b7e      	ldr	r3, [pc, #504]	; (8001118 <matrix_scan+0x2e4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f24:	e116      	b.n	8001154 <matrix_scan+0x320>
 8000f26:	e115      	b.n	8001154 <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b59      	cmp	r3, #89	; 0x59
 8000f2c:	d00d      	beq.n	8000f4a <matrix_scan+0x116>
 8000f2e:	2b59      	cmp	r3, #89	; 0x59
 8000f30:	dc04      	bgt.n	8000f3c <matrix_scan+0x108>
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d01c      	beq.n	8000f70 <matrix_scan+0x13c>
 8000f36:	2b12      	cmp	r3, #18
 8000f38:	d007      	beq.n	8000f4a <matrix_scan+0x116>
 8000f3a:	e020      	b.n	8000f7e <matrix_scan+0x14a>
 8000f3c:	2b83      	cmp	r3, #131	; 0x83
 8000f3e:	d010      	beq.n	8000f62 <matrix_scan+0x12e>
 8000f40:	2bf0      	cmp	r3, #240	; 0xf0
 8000f42:	d00a      	beq.n	8000f5a <matrix_scan+0x126>
 8000f44:	2b7e      	cmp	r3, #126	; 0x7e
 8000f46:	d004      	beq.n	8000f52 <matrix_scan+0x11e>
 8000f48:	e019      	b.n	8000f7e <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000f4a:	4b73      	ldr	r3, [pc, #460]	; (8001118 <matrix_scan+0x2e4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
					break;
 8000f50:	e027      	b.n	8000fa2 <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 8000f52:	4b71      	ldr	r3, [pc, #452]	; (8001118 <matrix_scan+0x2e4>)
 8000f54:	220b      	movs	r2, #11
 8000f56:	701a      	strb	r2, [r3, #0]
					break;
 8000f58:	e023      	b.n	8000fa2 <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <matrix_scan+0x2e4>)
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	701a      	strb	r2, [r3, #0]
					break;
 8000f60:	e01f      	b.n	8000fa2 <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 8000f62:	2083      	movs	r0, #131	; 0x83
 8000f64:	f000 f91a 	bl	800119c <matrix_make>
					state = INIT;
 8000f68:	4b6b      	ldr	r3, [pc, #428]	; (8001118 <matrix_scan+0x2e4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]
					break;
 8000f6e:	e018      	b.n	8000fa2 <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f000 f913 	bl	800119c <matrix_make>
					state = INIT;
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <matrix_scan+0x2e4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
					break;
 8000f7c:	e011      	b.n	8000fa2 <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db07      	blt.n	8000f96 <matrix_scan+0x162>
						matrix_make(code|0x80);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f904 	bl	800119c <matrix_make>
 8000f94:	e001      	b.n	8000f9a <matrix_scan+0x166>
					} else {
						matrix_clear();
 8000f96:	f000 f9a7 	bl	80012e8 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000f9a:	4b5f      	ldr	r3, [pc, #380]	; (8001118 <matrix_scan+0x2e4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fa0:	e0d8      	b.n	8001154 <matrix_scan+0x320>
 8000fa2:	e0d7      	b.n	8001154 <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b84      	cmp	r3, #132	; 0x84
 8000fa8:	d00a      	beq.n	8000fc0 <matrix_scan+0x18c>
 8000faa:	2bf0      	cmp	r3, #240	; 0xf0
 8000fac:	d00f      	beq.n	8000fce <matrix_scan+0x19a>
 8000fae:	2b83      	cmp	r3, #131	; 0x83
 8000fb0:	d110      	bne.n	8000fd4 <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 8000fb2:	2083      	movs	r0, #131	; 0x83
 8000fb4:	f000 f944 	bl	8001240 <matrix_break>
					state = INIT;
 8000fb8:	4b57      	ldr	r3, [pc, #348]	; (8001118 <matrix_scan+0x2e4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
					break;
 8000fbe:	e018      	b.n	8000ff2 <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000fc0:	20fc      	movs	r0, #252	; 0xfc
 8000fc2:	f000 f93d 	bl	8001240 <matrix_break>
					state = INIT;
 8000fc6:	4b54      	ldr	r3, [pc, #336]	; (8001118 <matrix_scan+0x2e4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
					break;
 8000fcc:	e011      	b.n	8000ff2 <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000fce:	f000 f98b 	bl	80012e8 <matrix_clear>
					//clear_keyboard();
					break;
 8000fd2:	e00e      	b.n	8000ff2 <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db04      	blt.n	8000fe6 <matrix_scan+0x1b2>
					matrix_break(code);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f92e 	bl	8001240 <matrix_break>
 8000fe4:	e001      	b.n	8000fea <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 8000fe6:	f000 f97f 	bl	80012e8 <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 8000fea:	4b4b      	ldr	r3, [pc, #300]	; (8001118 <matrix_scan+0x2e4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ff0:	e0b0      	b.n	8001154 <matrix_scan+0x320>
 8000ff2:	e0af      	b.n	8001154 <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d009      	beq.n	800100e <matrix_scan+0x1da>
 8000ffa:	2b12      	cmp	r3, #18
 8000ffc:	dc02      	bgt.n	8001004 <matrix_scan+0x1d0>
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d010      	beq.n	8001024 <matrix_scan+0x1f0>
 8001002:	e016      	b.n	8001032 <matrix_scan+0x1fe>
 8001004:	2b59      	cmp	r3, #89	; 0x59
 8001006:	d002      	beq.n	800100e <matrix_scan+0x1da>
 8001008:	2b83      	cmp	r3, #131	; 0x83
 800100a:	d004      	beq.n	8001016 <matrix_scan+0x1e2>
 800100c:	e011      	b.n	8001032 <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 800100e:	4b42      	ldr	r3, [pc, #264]	; (8001118 <matrix_scan+0x2e4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
					break;
 8001014:	e01f      	b.n	8001056 <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 8001016:	2083      	movs	r0, #131	; 0x83
 8001018:	f000 f912 	bl	8001240 <matrix_break>
					state = INIT;
 800101c:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <matrix_scan+0x2e4>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
					break;
 8001022:	e018      	b.n	8001056 <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 8001024:	2003      	movs	r0, #3
 8001026:	f000 f90b 	bl	8001240 <matrix_break>
					state = INIT;
 800102a:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <matrix_scan+0x2e4>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
					break;
 8001030:	e011      	b.n	8001056 <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db07      	blt.n	800104a <matrix_scan+0x216>
						matrix_break(code|0x80);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8fc 	bl	8001240 <matrix_break>
 8001048:	e001      	b.n	800104e <matrix_scan+0x21a>
					} else {
						matrix_clear();
 800104a:	f000 f94d 	bl	80012e8 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <matrix_scan+0x2e4>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001054:	e07e      	b.n	8001154 <matrix_scan+0x320>
 8001056:	e07d      	b.n	8001154 <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b14      	cmp	r3, #20
 800105c:	d104      	bne.n	8001068 <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <matrix_scan+0x2e4>)
 8001060:	2205      	movs	r2, #5
 8001062:	701a      	strb	r2, [r3, #0]
					break;
 8001064:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8001066:	e075      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <matrix_scan+0x2e4>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
			break;
 800106e:	e071      	b.n	8001154 <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b77      	cmp	r3, #119	; 0x77
 8001074:	d104      	bne.n	8001080 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <matrix_scan+0x2e4>)
 8001078:	2206      	movs	r2, #6
 800107a:	701a      	strb	r2, [r3, #0]
					break;
 800107c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800107e:	e069      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <matrix_scan+0x2e4>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
			break;
 8001086:	e065      	b.n	8001154 <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	2be1      	cmp	r3, #225	; 0xe1
 800108c:	d104      	bne.n	8001098 <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <matrix_scan+0x2e4>)
 8001090:	2207      	movs	r2, #7
 8001092:	701a      	strb	r2, [r3, #0]
					break;
 8001094:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8001096:	e05d      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <matrix_scan+0x2e4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
			break;
 800109e:	e059      	b.n	8001154 <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2bf0      	cmp	r3, #240	; 0xf0
 80010a4:	d104      	bne.n	80010b0 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <matrix_scan+0x2e4>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	701a      	strb	r2, [r3, #0]
					break;
 80010ac:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80010ae:	e051      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <matrix_scan+0x2e4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
			break;
 80010b6:	e04d      	b.n	8001154 <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b14      	cmp	r3, #20
 80010bc:	d104      	bne.n	80010c8 <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <matrix_scan+0x2e4>)
 80010c0:	2209      	movs	r2, #9
 80010c2:	701a      	strb	r2, [r3, #0]
					break;
 80010c4:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80010c6:	e045      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <matrix_scan+0x2e4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
			break;
 80010ce:	e041      	b.n	8001154 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2bf0      	cmp	r3, #240	; 0xf0
 80010d4:	d104      	bne.n	80010e0 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <matrix_scan+0x2e4>)
 80010d8:	220a      	movs	r2, #10
 80010da:	701a      	strb	r2, [r3, #0]
					break;
 80010dc:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80010de:	e039      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <matrix_scan+0x2e4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
			break;
 80010e6:	e035      	b.n	8001154 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2b77      	cmp	r3, #119	; 0x77
 80010ec:	d107      	bne.n	80010fe <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 80010ee:	20fe      	movs	r0, #254	; 0xfe
 80010f0:	f000 f854 	bl	800119c <matrix_make>
					state = INIT;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <matrix_scan+0x2e4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					break;
 80010fa:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80010fc:	e02a      	b.n	8001154 <matrix_scan+0x320>
					state = INIT;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <matrix_scan+0x2e4>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
			break;
 8001104:	e026      	b.n	8001154 <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2be0      	cmp	r3, #224	; 0xe0
 800110a:	d107      	bne.n	800111c <matrix_scan+0x2e8>
				state = E0_7E_E0;
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <matrix_scan+0x2e4>)
 800110e:	220c      	movs	r2, #12
 8001110:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8001112:	e01f      	b.n	8001154 <matrix_scan+0x320>
 8001114:	20000604 	.word	0x20000604
 8001118:	20000605 	.word	0x20000605
				state = INIT;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <matrix_scan+0x32c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
			break;
 8001122:	e017      	b.n	8001154 <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2bf0      	cmp	r3, #240	; 0xf0
 8001128:	d103      	bne.n	8001132 <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <matrix_scan+0x32c>)
 800112c:	220d      	movs	r2, #13
 800112e:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8001130:	e010      	b.n	8001154 <matrix_scan+0x320>
				state = INIT;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <matrix_scan+0x32c>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
			break;
 8001138:	e00c      	b.n	8001154 <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b7e      	cmp	r3, #126	; 0x7e
 800113e:	d102      	bne.n	8001146 <matrix_scan+0x312>
				matrix_make(PAUSE);
 8001140:	20fe      	movs	r0, #254	; 0xfe
 8001142:	f000 f82b 	bl	800119c <matrix_make>
			state = INIT;
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <matrix_scan+0x32c>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			break;
 800114c:	e002      	b.n	8001154 <matrix_scan+0x320>
		default:
			state = INIT;
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <matrix_scan+0x32c>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 8001154:	bf00      	nop
 8001156:	e000      	b.n	800115a <matrix_scan+0x326>
		return;
 8001158:	bf00      	nop
}
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000605 	.word	0x20000605

08001164 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <matrix_is_on+0x34>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	b25a      	sxtb	r2, r3
 800117c:	79bb      	ldrb	r3, [r7, #6]
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	4013      	ands	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200005e4 	.word	0x200005e4

0800119c <matrix_make>:
}



void matrix_make(uint8_t code)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	4619      	mov	r1, r3
 80011b6:	4610      	mov	r0, r2
 80011b8:	f7ff ffd4 	bl	8001164 <matrix_is_on>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d135      	bne.n	800122e <matrix_make+0x92>
	    matrix[ROW(code)] |= 1<<COL(code);
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <matrix_make+0x9c>)
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b25a      	sxtb	r2, r3
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b259      	sxtb	r1, r3
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	08db      	lsrs	r3, r3, #3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	b2c9      	uxtb	r1, r1
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <matrix_make+0x9c>)
 80011ee:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <matrix_make+0xa0>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	08db      	lsrs	r3, r3, #3
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	b2db      	uxtb	r3, r3
 8001204:	4619      	mov	r1, r3
 8001206:	4610      	mov	r0, r2
 8001208:	f000 fafc 	bl	8001804 <keymap_key_to_keycode>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2bf0      	cmp	r3, #240	; 0xf0
 8001214:	d902      	bls.n	800121c <matrix_make+0x80>
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2bf4      	cmp	r3, #244	; 0xf4
 800121a:	d904      	bls.n	8001226 <matrix_make+0x8a>
	    	prog_push_code(code, 1);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f8a7 	bl	8001374 <prog_push_code>
		register_code(keycode);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fb01 	bl	8001830 <register_code>
    }

}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200005e4 	.word	0x200005e4
 800123c:	20000604 	.word	0x20000604

08001240 <matrix_break>:

void matrix_break(uint8_t code)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	08db      	lsrs	r3, r3, #3
 800124e:	b2da      	uxtb	r2, r3
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	b2db      	uxtb	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff ff82 	bl	8001164 <matrix_is_on>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d037      	beq.n	80012d6 <matrix_break+0x96>
        matrix[ROW(code)] &= ~(1<<COL(code));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	08db      	lsrs	r3, r3, #3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <matrix_break+0xa0>)
 8001270:	5c9b      	ldrb	r3, [r3, r2]
 8001272:	b25a      	sxtb	r2, r3
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	2101      	movs	r1, #1
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	b25b      	sxtb	r3, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	b25b      	sxtb	r3, r3
 8001286:	4013      	ands	r3, r2
 8001288:	b259      	sxtb	r1, r3
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	b2c9      	uxtb	r1, r1
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <matrix_break+0xa0>)
 8001296:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <matrix_break+0xa4>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4619      	mov	r1, r3
 80012ae:	4610      	mov	r0, r2
 80012b0:	f000 faa8 	bl	8001804 <keymap_key_to_keycode>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2bf0      	cmp	r3, #240	; 0xf0
 80012bc:	d902      	bls.n	80012c4 <matrix_break+0x84>
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	2bf4      	cmp	r3, #244	; 0xf4
 80012c2:	d904      	bls.n	80012ce <matrix_break+0x8e>
	    	prog_push_code(code, 0);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f853 	bl	8001374 <prog_push_code>
		unregister_code(keycode);
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fb7f 	bl	80019d4 <unregister_code>
    }
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200005e4 	.word	0x200005e4
 80012e4:	20000604 	.word	0x20000604

080012e8 <matrix_clear>:

void matrix_clear(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e006      	b.n	8001302 <matrix_clear+0x1a>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <matrix_clear+0x2c>)
 80012f8:	2100      	movs	r1, #0
 80012fa:	54d1      	strb	r1, [r2, r3]
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	3301      	adds	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b1f      	cmp	r3, #31
 8001306:	d9f5      	bls.n	80012f4 <matrix_clear+0xc>
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	200005e4 	.word	0x200005e4

08001318 <is_prog_error>:

static uint8_t current_code = 0;
static uint16_t current_pos = 0;
static uint32_t last_prog_time = 0;

uint8_t is_prog_error(void) { return prog_error; }
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
 800131c:	4b02      	ldr	r3, [pc, #8]	; (8001328 <is_prog_error+0x10>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000608 	.word	0x20000608

0800132c <is_disco_time>:
uint8_t is_prog_in_progress(void) { return programming_in_progress; }
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }

uint8_t is_disco_time(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <is_disco_time+0x3c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d009      	beq.n	800134c <is_disco_time+0x20>
 8001338:	f001 f956 	bl	80025e8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <is_disco_time+0x3c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001348:	4293      	cmp	r3, r2
 800134a:	d807      	bhi.n	800135c <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <is_disco_time+0x40>)
 800134e:	781b      	ldrb	r3, [r3, #0]
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <is_disco_time+0x44>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <is_disco_time+0x34>
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <is_disco_time+0x36>
 8001360:	2300      	movs	r3, #0
 8001362:	b2db      	uxtb	r3, r3
}
 8001364:	4618      	mov	r0, r3
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000060c 	.word	0x2000060c
 800136c:	20000606 	.word	0x20000606
 8001370:	20000607 	.word	0x20000607

08001374 <prog_push_code>:
 * 8 last bits -> code
 *
 * All written inverted (so empty flash 0xffff -> transforms to 0x0000, which means no code last code)
 */
void prog_push_code(uint8_t code, uint8_t make)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	460a      	mov	r2, r1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	4613      	mov	r3, r2
 8001382:	71bb      	strb	r3, [r7, #6]
	uint32_t packet = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
	if (!programming_in_progress)
 8001388:	4b2c      	ldr	r3, [pc, #176]	; (800143c <prog_push_code+0xc8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d04e      	beq.n	800142e <prog_push_code+0xba>
		return;
#ifdef DEBUG
	SEGGER_RTT_printf(0, "%X \n", code);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	461a      	mov	r2, r3
 8001394:	492a      	ldr	r1, [pc, #168]	; (8001440 <prog_push_code+0xcc>)
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff fb86 	bl	8000aa8 <SEGGER_RTT_printf>
#endif
	if (current_pos > PROG_MAX_POS - PROG_STEPS_TO_ERROR)
 800139c:	4b29      	ldr	r3, [pc, #164]	; (8001444 <prog_push_code+0xd0>)
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 80013a4:	d902      	bls.n	80013ac <prog_push_code+0x38>
		prog_error = 1;
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <prog_push_code+0xd4>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
	if (current_pos == PROG_MAX_POS)
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <prog_push_code+0xd0>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b4:	d03d      	beq.n	8001432 <prog_push_code+0xbe>
		return;
	if (last_prog_time)
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <prog_push_code+0xd8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d011      	beq.n	80013e2 <prog_push_code+0x6e>
	{
		packet = HAL_GetTick() - last_prog_time;
 80013be:	f001 f913 	bl	80025e8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <prog_push_code+0xd8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	60fb      	str	r3, [r7, #12]
		if (packet >= (1 << 23))
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80013d2:	d302      	bcc.n	80013da <prog_push_code+0x66>
			packet = ~0;
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	60fb      	str	r3, [r7, #12]
		packet = (packet >> PROG_TIME_MULT) << 9; // divide 64 and shift time to the right
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	60fb      	str	r3, [r7, #12]
	}
	if (packet == 0)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <prog_push_code+0x7a>
		packet = (1<<9);
 80013e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ec:	60fb      	str	r3, [r7, #12]
	last_prog_time = HAL_GetTick();
 80013ee:	f001 f8fb 	bl	80025e8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <prog_push_code+0xd8>)
 80013f6:	601a      	str	r2, [r3, #0]
	if (make)
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <prog_push_code+0x92>
		packet |= (1<<8);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	60fb      	str	r3, [r7, #12]
	packet |= code;
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
	EEE_write(current_code - KP_START, current_pos++, ~packet);
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <prog_push_code+0xdc>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	330f      	adds	r3, #15
 8001414:	b2d8      	uxtb	r0, r3
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <prog_push_code+0xd0>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	b291      	uxth	r1, r2
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <prog_push_code+0xd0>)
 8001420:	8011      	strh	r1, [r2, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	43d2      	mvns	r2, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fb86 	bl	8000b38 <EEE_write>
 800142c:	e002      	b.n	8001434 <prog_push_code+0xc0>
		return;
 800142e:	bf00      	nop
 8001430:	e000      	b.n	8001434 <prog_push_code+0xc0>
		return;
 8001432:	bf00      	nop
}
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000606 	.word	0x20000606
 8001440:	0800931c 	.word	0x0800931c
 8001444:	20000616 	.word	0x20000616
 8001448:	20000608 	.word	0x20000608
 800144c:	20000618 	.word	0x20000618
 8001450:	20000614 	.word	0x20000614

08001454 <prog_pop_code>:


void prog_pop_code(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	uint32_t packet;
	if (!prog_is_running)
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <prog_pop_code+0xc0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d052      	beq.n	8001508 <prog_pop_code+0xb4>
		return;
	if (next_time < HAL_GetTick())
 8001462:	f001 f8c1 	bl	80025e8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <prog_pop_code+0xc4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d94e      	bls.n	800150e <prog_pop_code+0xba>
	{
		if ((packet = ~EEE_read(current_code - KP_START, current_pos++)))
 8001470:	4b2a      	ldr	r3, [pc, #168]	; (800151c <prog_pop_code+0xc8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	330f      	adds	r3, #15
 8001476:	b2d8      	uxtb	r0, r3
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <prog_pop_code+0xcc>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	b291      	uxth	r1, r2
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <prog_pop_code+0xcc>)
 8001482:	8011      	strh	r1, [r2, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff fb85 	bl	8000b94 <EEE_read>
 800148a:	4603      	mov	r3, r0
 800148c:	43db      	mvns	r3, r3
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d02d      	beq.n	80014f2 <prog_pop_code+0x9e>
		{
			if (packet & (1<<8))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <prog_pop_code+0x58>
				matrix_make((uint8_t)(packet & 0xFF));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe79 	bl	800119c <matrix_make>
 80014aa:	e004      	b.n	80014b6 <prog_pop_code+0x62>
			else
				matrix_break((uint8_t)(packet & 0xFF));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fec5 	bl	8001240 <matrix_break>

			if (current_pos < PROG_MAX_POS)
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <prog_pop_code+0xcc>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014be:	d218      	bcs.n	80014f2 <prog_pop_code+0x9e>
			{
				packet = ~EEE_read(current_code - KP_START, current_pos);
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <prog_pop_code+0xc8>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	330f      	adds	r3, #15
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <prog_pop_code+0xcc>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4610      	mov	r0, r2
 80014d0:	f7ff fb60 	bl	8000b94 <EEE_read>
 80014d4:	4603      	mov	r3, r0
 80014d6:	43db      	mvns	r3, r3
 80014d8:	607b      	str	r3, [r7, #4]
				next_time = HAL_GetTick() + ((packet>>9)<<PROG_TIME_MULT);
 80014da:	f001 f885 	bl	80025e8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0a5b      	lsrs	r3, r3, #9
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	4413      	add	r3, r2
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <prog_pop_code+0xc4>)
 80014ea:	6013      	str	r3, [r2, #0]
				if (packet)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <prog_pop_code+0xb8>
					return; // completed successfully, wait next step
			}
		}

		prog_is_running = 0;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <prog_pop_code+0xc0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
		current_pos = 0;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <prog_pop_code+0xcc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	801a      	strh	r2, [r3, #0]
		next_time = 0;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <prog_pop_code+0xc4>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
		return;
 8001504:	bf00      	nop
 8001506:	e002      	b.n	800150e <prog_pop_code+0xba>
		return;
 8001508:	bf00      	nop
 800150a:	e000      	b.n	800150e <prog_pop_code+0xba>
					return; // completed successfully, wait next step
 800150c:	bf00      	nop
	}

}
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000607 	.word	0x20000607
 8001518:	20000610 	.word	0x20000610
 800151c:	20000614 	.word	0x20000614
 8001520:	20000616 	.word	0x20000616

08001524 <reset_prog>:

void reset_prog(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
	current_pos = 0;
 8001528:	4b07      	ldr	r3, [pc, #28]	; (8001548 <reset_prog+0x24>)
 800152a:	2200      	movs	r2, #0
 800152c:	801a      	strh	r2, [r3, #0]
	last_prog_time = 0;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <reset_prog+0x28>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
	prog_error = 0;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <reset_prog+0x2c>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
	next_time = 0;
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <reset_prog+0x30>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	20000616 	.word	0x20000616
 800154c:	20000618 	.word	0x20000618
 8001550:	20000608 	.word	0x20000608
 8001554:	20000610 	.word	0x20000610

08001558 <prog_pressed>:

void prog_pressed(uint8_t code)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	if (key_timer)
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <prog_pressed+0x44>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d111      	bne.n	800158e <prog_pressed+0x36>
		return; // another prog key pressed!
	// TODO detect if we are in programming or program is running, and compare code
	if (programming_in_progress && (code != current_code))
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <prog_pressed+0x48>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <prog_pressed+0x24>
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <prog_pressed+0x4c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	79fa      	ldrb	r2, [r7, #7]
 8001578:	429a      	cmp	r2, r3
 800157a:	d10a      	bne.n	8001592 <prog_pressed+0x3a>
		return; // ignore key_press from over keys
	current_code = code; // remember this code!
 800157c:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <prog_pressed+0x4c>)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	7013      	strb	r3, [r2, #0]
	key_timer = HAL_GetTick();
 8001582:	f001 f831 	bl	80025e8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <prog_pressed+0x44>)
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e002      	b.n	8001594 <prog_pressed+0x3c>
		return; // another prog key pressed!
 800158e:	bf00      	nop
 8001590:	e000      	b.n	8001594 <prog_pressed+0x3c>
		return; // ignore key_press from over keys
 8001592:	bf00      	nop
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000060c 	.word	0x2000060c
 80015a0:	20000606 	.word	0x20000606
 80015a4:	20000614 	.word	0x20000614

080015a8 <prog_released>:

void prog_released(uint8_t code)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	if (code != current_code)
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <prog_released+0x7c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d12f      	bne.n	800161c <prog_released+0x74>
		return; // we are in programming, ignore other prog buttons
	if (key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)))
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <prog_released+0x80>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <prog_released+0x44>
 80015c4:	f001 f810 	bl	80025e8 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <prog_released+0x80>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d909      	bls.n	80015ec <prog_released+0x44>
	{
		// key pressed long, start programming
		programming_in_progress = 1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <prog_released+0x84>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
		EEE_erase(code - KP_START);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	330f      	adds	r3, #15
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fa77 	bl	8000ad8 <EEE_erase>
 80015ea:	e013      	b.n	8001614 <prog_released+0x6c>
	}
	else
	{
		// key pressed short, stop programming or do some nice things
		if (programming_in_progress)
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <prog_released+0x84>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <prog_released+0x54>
		{
			programming_in_progress = 0;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <prog_released+0x84>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e00b      	b.n	8001614 <prog_released+0x6c>
		}
		else
		{
			reset_prog();
 80015fc:	f7ff ff92 	bl	8001524 <reset_prog>
			prog_is_running = !prog_is_running;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <prog_released+0x88>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	461a      	mov	r2, r3
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <prog_released+0x88>)
 8001612:	701a      	strb	r2, [r3, #0]
		}
	}
	key_timer = 0;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <prog_released+0x80>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e000      	b.n	800161e <prog_released+0x76>
		return; // we are in programming, ignore other prog buttons
 800161c:	bf00      	nop
}
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000614 	.word	0x20000614
 8001628:	2000060c 	.word	0x2000060c
 800162c:	20000606 	.word	0x20000606
 8001630:	20000607 	.word	0x20000607

08001634 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

static void send_system(uint16_t data)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <send_system+0x4c>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	88fa      	ldrh	r2, [r7, #6]
 8001644:	429a      	cmp	r2, r3
 8001646:	d017      	beq.n	8001678 <send_system+0x44>
	last_data = data;
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <send_system+0x4c>)
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 800164e:	2302      	movs	r3, #2
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 8001658:	bf00      	nop
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <send_system+0x50>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0fb      	beq.n	800165a <send_system+0x26>
	ready_to_send = 0;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <send_system+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2203      	movs	r2, #3
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <send_system+0x54>)
 8001672:	f006 f96d 	bl	8007950 <USBD_HID_SendReport>
 8001676:	e000      	b.n	800167a <send_system+0x46>
	if (data == last_data) return;
 8001678:	bf00      	nop
}
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000620 	.word	0x20000620
 8001684:	20000000 	.word	0x20000000
 8001688:	20000810 	.word	0x20000810

0800168c <send_consumer>:

static void send_consumer(uint16_t data)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <send_consumer+0x4c>)
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	429a      	cmp	r2, r3
 800169e:	d017      	beq.n	80016d0 <send_consumer+0x44>
	last_data = data;
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <send_consumer+0x4c>)
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 80016a6:	2303      	movs	r3, #3
 80016a8:	733b      	strb	r3, [r7, #12]
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 80016b0:	bf00      	nop
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <send_consumer+0x50>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0fb      	beq.n	80016b2 <send_consumer+0x26>
	ready_to_send = 0;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <send_consumer+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2203      	movs	r2, #3
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <send_consumer+0x54>)
 80016ca:	f006 f941 	bl	8007950 <USBD_HID_SendReport>
 80016ce:	e000      	b.n	80016d2 <send_consumer+0x46>
	if (data == last_data) return;
 80016d0:	bf00      	nop
}
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000622 	.word	0x20000622
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000810 	.word	0x20000810

080016e4 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <add_mods+0x24>)
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <add_mods+0x24>)
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	2000061c 	.word	0x2000061c

0800170c <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	43db      	mvns	r3, r3
 800171c:	b25a      	sxtb	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <del_mods+0x2c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b25b      	sxtb	r3, r3
 8001724:	4013      	ands	r3, r2
 8001726:	b25b      	sxtb	r3, r3
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b03      	ldr	r3, [pc, #12]	; (8001738 <del_mods+0x2c>)
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	2000061c 	.word	0x2000061c

0800173c <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 800174a:	23ff      	movs	r3, #255	; 0xff
 800174c:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 800174e:	e01b      	b.n	8001788 <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <add_key_byte+0x80>)
 8001756:	4413      	add	r3, r2
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	429a      	cmp	r2, r3
 800175e:	d018      	beq.n	8001792 <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 8001760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d108      	bne.n	800177c <add_key_byte+0x40>
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <add_key_byte+0x80>)
 8001770:	4413      	add	r3, r2
 8001772:	78db      	ldrb	r3, [r3, #3]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <add_key_byte+0x40>
            empty = i;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 800177c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178c:	2b05      	cmp	r3, #5
 800178e:	dddf      	ble.n	8001750 <add_key_byte+0x14>
 8001790:	e000      	b.n	8001794 <add_key_byte+0x58>
            break;
 8001792:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	2b06      	cmp	r3, #6
 800179a:	d10a      	bne.n	80017b2 <add_key_byte+0x76>
        if (empty != -1) {
 800179c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 80017a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <add_key_byte+0x80>)
 80017ac:	4413      	add	r3, r2
 80017ae:	79fa      	ldrb	r2, [r7, #7]
 80017b0:	70da      	strb	r2, [r3, #3]
        }
    }
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	200006c4 	.word	0x200006c4

080017c0 <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e00e      	b.n	80017ee <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <del_key_byte+0x40>)
 80017d4:	4413      	add	r3, r2
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d104      	bne.n	80017e8 <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <del_key_byte+0x40>)
 80017e2:	4413      	add	r3, r2
 80017e4:	2200      	movs	r2, #0
 80017e6:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	3301      	adds	r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d9ed      	bls.n	80017d0 <del_key_byte+0x10>
        }
    }
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200006c4 	.word	0x200006c4

08001804 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	4904      	ldr	r1, [pc, #16]	; (800182c <keymap_key_to_keycode+0x28>)
 800181a:	00d2      	lsls	r2, r2, #3
 800181c:	440a      	add	r2, r1
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	0800938c 	.word	0x0800938c

08001830 <register_code>:


void register_code(uint8_t code)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80c5 	beq.w	80019cc <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2bf0      	cmp	r3, #240	; 0xf0
 8001846:	d906      	bls.n	8001856 <register_code+0x26>
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2bf4      	cmp	r3, #244	; 0xf4
 800184c:	d803      	bhi.n	8001856 <register_code+0x26>
	{
    	prog_pressed(code);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe81 	bl	8001558 <prog_pressed>
	}

    if (code == KC_LOGOFF)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2bf0      	cmp	r3, #240	; 0xf0
 800185a:	d108      	bne.n	800186e <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 800185c:	2008      	movs	r0, #8
 800185e:	f7ff ff41 	bl	80016e4 <add_mods>
    	add_key_byte(KC_L);
 8001862:	200f      	movs	r0, #15
 8001864:	f7ff ff6a 	bl	800173c <add_key_byte>
	    send_keyboard_report();
 8001868:	f000 f9fe 	bl	8001c68 <send_keyboard_report>
 800186c:	e0af      	b.n	80019ce <register_code+0x19e>
    }
    else if IS_KEY(code)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d909      	bls.n	8001888 <register_code+0x58>
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2ba4      	cmp	r3, #164	; 0xa4
 8001878:	d806      	bhi.n	8001888 <register_code+0x58>
    {
	    add_key_byte(code);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5d 	bl	800173c <add_key_byte>
	    send_keyboard_report();
 8001882:	f000 f9f1 	bl	8001c68 <send_keyboard_report>
 8001886:	e0a2      	b.n	80019ce <register_code+0x19e>
    }
    else if IS_MOD(code) {
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2bdf      	cmp	r3, #223	; 0xdf
 800188c:	d90f      	bls.n	80018ae <register_code+0x7e>
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2be7      	cmp	r3, #231	; 0xe7
 8001892:	d80c      	bhi.n	80018ae <register_code+0x7e>
        add_mods(MOD_BIT(code));
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	2201      	movs	r2, #1
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff1e 	bl	80016e4 <add_mods>
        send_keyboard_report();
 80018a8:	f000 f9de 	bl	8001c68 <send_keyboard_report>
 80018ac:	e08f      	b.n	80019ce <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2ba4      	cmp	r3, #164	; 0xa4
 80018b2:	d916      	bls.n	80018e2 <register_code+0xb2>
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	2ba7      	cmp	r3, #167	; 0xa7
 80018b8:	d813      	bhi.n	80018e2 <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	2ba5      	cmp	r3, #165	; 0xa5
 80018be:	d00b      	beq.n	80018d8 <register_code+0xa8>
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2ba6      	cmp	r3, #166	; 0xa6
 80018c4:	d006      	beq.n	80018d4 <register_code+0xa4>
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2ba7      	cmp	r3, #167	; 0xa7
 80018ca:	d101      	bne.n	80018d0 <register_code+0xa0>
 80018cc:	2383      	movs	r3, #131	; 0x83
 80018ce:	e004      	b.n	80018da <register_code+0xaa>
 80018d0:	2300      	movs	r3, #0
 80018d2:	e002      	b.n	80018da <register_code+0xaa>
 80018d4:	2382      	movs	r3, #130	; 0x82
 80018d6:	e000      	b.n	80018da <register_code+0xaa>
 80018d8:	2381      	movs	r3, #129	; 0x81
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff feaa 	bl	8001634 <send_system>
 80018e0:	e075      	b.n	80019ce <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	2ba7      	cmp	r3, #167	; 0xa7
 80018e6:	d972      	bls.n	80019ce <register_code+0x19e>
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	2bba      	cmp	r3, #186	; 0xba
 80018ec:	d86f      	bhi.n	80019ce <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2ba8      	cmp	r3, #168	; 0xa8
 80018f2:	d066      	beq.n	80019c2 <register_code+0x192>
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	2ba9      	cmp	r3, #169	; 0xa9
 80018f8:	d061      	beq.n	80019be <register_code+0x18e>
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2baa      	cmp	r3, #170	; 0xaa
 80018fe:	d05c      	beq.n	80019ba <register_code+0x18a>
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2bab      	cmp	r3, #171	; 0xab
 8001904:	d057      	beq.n	80019b6 <register_code+0x186>
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2bac      	cmp	r3, #172	; 0xac
 800190a:	d052      	beq.n	80019b2 <register_code+0x182>
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2bad      	cmp	r3, #173	; 0xad
 8001910:	d04d      	beq.n	80019ae <register_code+0x17e>
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2bb0      	cmp	r3, #176	; 0xb0
 8001916:	d048      	beq.n	80019aa <register_code+0x17a>
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	2bae      	cmp	r3, #174	; 0xae
 800191c:	d043      	beq.n	80019a6 <register_code+0x176>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2baf      	cmp	r3, #175	; 0xaf
 8001922:	d03d      	beq.n	80019a0 <register_code+0x170>
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2bb1      	cmp	r3, #177	; 0xb1
 8001928:	d037      	beq.n	800199a <register_code+0x16a>
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2bb2      	cmp	r3, #178	; 0xb2
 800192e:	d031      	beq.n	8001994 <register_code+0x164>
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2bb3      	cmp	r3, #179	; 0xb3
 8001934:	d02b      	beq.n	800198e <register_code+0x15e>
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2bb4      	cmp	r3, #180	; 0xb4
 800193a:	d025      	beq.n	8001988 <register_code+0x158>
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2bb5      	cmp	r3, #181	; 0xb5
 8001940:	d01f      	beq.n	8001982 <register_code+0x152>
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	2bb6      	cmp	r3, #182	; 0xb6
 8001946:	d019      	beq.n	800197c <register_code+0x14c>
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2bb7      	cmp	r3, #183	; 0xb7
 800194c:	d013      	beq.n	8001976 <register_code+0x146>
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2bb8      	cmp	r3, #184	; 0xb8
 8001952:	d00d      	beq.n	8001970 <register_code+0x140>
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	2bb9      	cmp	r3, #185	; 0xb9
 8001958:	d007      	beq.n	800196a <register_code+0x13a>
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2bba      	cmp	r3, #186	; 0xba
 800195e:	d102      	bne.n	8001966 <register_code+0x136>
 8001960:	f240 232a 	movw	r3, #554	; 0x22a
 8001964:	e02e      	b.n	80019c4 <register_code+0x194>
 8001966:	2300      	movs	r3, #0
 8001968:	e02c      	b.n	80019c4 <register_code+0x194>
 800196a:	f240 2327 	movw	r3, #551	; 0x227
 800196e:	e029      	b.n	80019c4 <register_code+0x194>
 8001970:	f240 2326 	movw	r3, #550	; 0x226
 8001974:	e026      	b.n	80019c4 <register_code+0x194>
 8001976:	f240 2325 	movw	r3, #549	; 0x225
 800197a:	e023      	b.n	80019c4 <register_code+0x194>
 800197c:	f44f 7309 	mov.w	r3, #548	; 0x224
 8001980:	e020      	b.n	80019c4 <register_code+0x194>
 8001982:	f240 2323 	movw	r3, #547	; 0x223
 8001986:	e01d      	b.n	80019c4 <register_code+0x194>
 8001988:	f240 2321 	movw	r3, #545	; 0x221
 800198c:	e01a      	b.n	80019c4 <register_code+0x194>
 800198e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001992:	e017      	b.n	80019c4 <register_code+0x194>
 8001994:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8001998:	e014      	b.n	80019c4 <register_code+0x194>
 800199a:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 800199e:	e011      	b.n	80019c4 <register_code+0x194>
 80019a0:	f240 1383 	movw	r3, #387	; 0x183
 80019a4:	e00e      	b.n	80019c4 <register_code+0x194>
 80019a6:	23cd      	movs	r3, #205	; 0xcd
 80019a8:	e00c      	b.n	80019c4 <register_code+0x194>
 80019aa:	23cc      	movs	r3, #204	; 0xcc
 80019ac:	e00a      	b.n	80019c4 <register_code+0x194>
 80019ae:	23b7      	movs	r3, #183	; 0xb7
 80019b0:	e008      	b.n	80019c4 <register_code+0x194>
 80019b2:	23b6      	movs	r3, #182	; 0xb6
 80019b4:	e006      	b.n	80019c4 <register_code+0x194>
 80019b6:	23b5      	movs	r3, #181	; 0xb5
 80019b8:	e004      	b.n	80019c4 <register_code+0x194>
 80019ba:	23ea      	movs	r3, #234	; 0xea
 80019bc:	e002      	b.n	80019c4 <register_code+0x194>
 80019be:	23e9      	movs	r3, #233	; 0xe9
 80019c0:	e000      	b.n	80019c4 <register_code+0x194>
 80019c2:	23e2      	movs	r3, #226	; 0xe2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fe61 	bl	800168c <send_consumer>
 80019ca:	e000      	b.n	80019ce <register_code+0x19e>
        return;
 80019cc:	bf00      	nop
    }
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <unregister_code>:

void unregister_code(uint8_t code)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d049      	beq.n	8001a78 <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2bf0      	cmp	r3, #240	; 0xf0
 80019e8:	d906      	bls.n	80019f8 <unregister_code+0x24>
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	2bf4      	cmp	r3, #244	; 0xf4
 80019ee:	d803      	bhi.n	80019f8 <unregister_code+0x24>
	{
    	prog_released(code);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fdd8 	bl	80015a8 <prog_released>
	}

    if (code == KC_LOGOFF)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2bf0      	cmp	r3, #240	; 0xf0
 80019fc:	d108      	bne.n	8001a10 <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 80019fe:	2008      	movs	r0, #8
 8001a00:	f7ff fe84 	bl	800170c <del_mods>
    	del_key_byte(KC_L);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f7ff fedb 	bl	80017c0 <del_key_byte>
    	send_keyboard_report();
 8001a0a:	f000 f92d 	bl	8001c68 <send_keyboard_report>
 8001a0e:	e034      	b.n	8001a7a <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d909      	bls.n	8001a2a <unregister_code+0x56>
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2ba4      	cmp	r3, #164	; 0xa4
 8001a1a:	d806      	bhi.n	8001a2a <unregister_code+0x56>
        del_key_byte(code);
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fece 	bl	80017c0 <del_key_byte>
        send_keyboard_report();
 8001a24:	f000 f920 	bl	8001c68 <send_keyboard_report>
 8001a28:	e027      	b.n	8001a7a <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2bdf      	cmp	r3, #223	; 0xdf
 8001a2e:	d90f      	bls.n	8001a50 <unregister_code+0x7c>
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2be7      	cmp	r3, #231	; 0xe7
 8001a34:	d80c      	bhi.n	8001a50 <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe61 	bl	800170c <del_mods>
        send_keyboard_report();
 8001a4a:	f000 f90d 	bl	8001c68 <send_keyboard_report>
 8001a4e:	e014      	b.n	8001a7a <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2ba4      	cmp	r3, #164	; 0xa4
 8001a54:	d906      	bls.n	8001a64 <unregister_code+0x90>
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2ba7      	cmp	r3, #167	; 0xa7
 8001a5a:	d803      	bhi.n	8001a64 <unregister_code+0x90>
	    send_system(0);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fde9 	bl	8001634 <send_system>
 8001a62:	e00a      	b.n	8001a7a <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	2ba7      	cmp	r3, #167	; 0xa7
 8001a68:	d907      	bls.n	8001a7a <unregister_code+0xa6>
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2bba      	cmp	r3, #186	; 0xba
 8001a6e:	d804      	bhi.n	8001a7a <unregister_code+0xa6>
    	send_consumer(0);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fe0b 	bl	800168c <send_consumer>
 8001a76:	e000      	b.n	8001a7a <unregister_code+0xa6>
        return;
 8001a78:	bf00      	nop
	}
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_time = 0;
	static uint8_t blinking = 0;
	static uint8_t last_blink = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 8001a84:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <process_keyboard_USB+0x140>)
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <process_keyboard_USB+0x144>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d031      	beq.n	8001af4 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <process_keyboard_USB+0x148>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 8001a98:	4b4b      	ldr	r3, [pc, #300]	; (8001bc8 <process_keyboard_USB+0x148>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 8001a9e:	4b4b      	ldr	r3, [pc, #300]	; (8001bcc <process_keyboard_USB+0x14c>)
 8001aa0:	22fa      	movs	r2, #250	; 0xfa
 8001aa2:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <process_keyboard_USB+0x144>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <process_keyboard_USB+0x150>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2209      	movs	r2, #9
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4846      	ldr	r0, [pc, #280]	; (8001bd4 <process_keyboard_USB+0x154>)
 8001aba:	f005 ff49 	bl	8007950 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <process_keyboard_USB+0x144>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	425a      	negs	r2, r3
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	f002 020f 	and.w	r2, r2, #15
 8001ace:	bf58      	it	pl
 8001ad0:	4253      	negpl	r3, r2
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <process_keyboard_USB+0x144>)
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e00c      	b.n	8001af4 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 8001ada:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <process_keyboard_USB+0x14c>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <process_keyboard_USB+0x14c>)
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <process_keyboard_USB+0x14c>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <process_keyboard_USB+0x148>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
	}

	if (is_disco_time())
 8001af4:	f7ff fc1a 	bl	800132c <is_disco_time>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d04d      	beq.n	8001b9a <process_keyboard_USB+0x11a>
	{
		if (!blinking)
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <process_keyboard_USB+0x158>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d107      	bne.n	8001b16 <process_keyboard_USB+0x96>
		{
			blinking = 1;
 8001b06:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <process_keyboard_USB+0x158>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
			blink_time = HAL_GetTick();
 8001b0c:	f000 fd6c 	bl	80025e8 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <process_keyboard_USB+0x15c>)
 8001b14:	601a      	str	r2, [r3, #0]
		}

		if (((HAL_GetTick() - blink_time)&(1<<8))&&last_blink)
 8001b16:	f000 fd67 	bl	80025e8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <process_keyboard_USB+0x15c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <process_keyboard_USB+0xd8>
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <process_keyboard_USB+0x160>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <process_keyboard_USB+0xd8>
		{
			last_blink = 0;
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <process_keyboard_USB+0x160>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <process_keyboard_USB+0x164>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001b3e:	f7ff fbeb 	bl	8001318 <is_prog_error>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <process_keyboard_USB+0xd0>
				leds_PS2(PS2_LED_CAPS_LOCK|PS2_LED_NUM_LOCK);
 8001b48:	2006      	movs	r0, #6
 8001b4a:	f000 fab7 	bl	80020bc <leds_PS2>
			if (is_prog_error())
 8001b4e:	e034      	b.n	8001bba <process_keyboard_USB+0x13a>
			else
				leds_PS2(PS2_LED_CAPS_LOCK);
 8001b50:	2004      	movs	r0, #4
 8001b52:	f000 fab3 	bl	80020bc <leds_PS2>
			if (is_prog_error())
 8001b56:	e030      	b.n	8001bba <process_keyboard_USB+0x13a>
		}
		else if ((!((HAL_GetTick() - blink_time)&(1<<8)))&&(!last_blink))
 8001b58:	f000 fd46 	bl	80025e8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <process_keyboard_USB+0x15c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d126      	bne.n	8001bba <process_keyboard_USB+0x13a>
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <process_keyboard_USB+0x160>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d122      	bne.n	8001bba <process_keyboard_USB+0x13a>
		{
			last_blink = 1;
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <process_keyboard_USB+0x160>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <process_keyboard_USB+0x164>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001b80:	f7ff fbca 	bl	8001318 <is_prog_error>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <process_keyboard_USB+0x112>
				leds_PS2(0);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f000 fa96 	bl	80020bc <leds_PS2>
	{
		blinking = 0;
		leds_updated = 1;
		leds_PS2(leds_data);
	}
}
 8001b90:	e013      	b.n	8001bba <process_keyboard_USB+0x13a>
				leds_PS2(PS2_LED_NUM_LOCK);
 8001b92:	2002      	movs	r0, #2
 8001b94:	f000 fa92 	bl	80020bc <leds_PS2>
}
 8001b98:	e00f      	b.n	8001bba <process_keyboard_USB+0x13a>
	else if (blinking)
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <process_keyboard_USB+0x158>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <process_keyboard_USB+0x13a>
		blinking = 0;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <process_keyboard_USB+0x158>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
		leds_updated = 1;
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <process_keyboard_USB+0x164>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <process_keyboard_USB+0x168>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 fa82 	bl	80020bc <leds_PS2>
}
 8001bb8:	e7ff      	b.n	8001bba <process_keyboard_USB+0x13a>
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000061d 	.word	0x2000061d
 8001bc4:	2000061e 	.word	0x2000061e
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000002 	.word	0x20000002
 8001bd0:	200006d0 	.word	0x200006d0
 8001bd4:	20000810 	.word	0x20000810
 8001bd8:	20000624 	.word	0x20000624
 8001bdc:	20000628 	.word	0x20000628
 8001be0:	2000062c 	.word	0x2000062c
 8001be4:	20000761 	.word	0x20000761
 8001be8:	20000760 	.word	0x20000760

08001bec <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <USB_HID_buffer_sent_Callback+0x14>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000000 	.word	0x20000000

08001c04 <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <kbuf_push+0x58>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	425a      	negs	r2, r3
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	f002 020f 	and.w	r2, r2, #15
 8001c1c:	bf58      	it	pl
 8001c1e:	4253      	negpl	r3, r2
 8001c20:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <kbuf_push+0x5c>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d011      	beq.n	8001c50 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <kbuf_push+0x58>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <kbuf_push+0x60>)
 8001c34:	460b      	mov	r3, r1
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6810      	ldr	r0, [r2, #0]
 8001c40:	6851      	ldr	r1, [r2, #4]
 8001c42:	6018      	str	r0, [r3, #0]
 8001c44:	6059      	str	r1, [r3, #4]
 8001c46:	7a12      	ldrb	r2, [r2, #8]
 8001c48:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <kbuf_push+0x58>)
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	7013      	strb	r3, [r2, #0]
    }
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000061d 	.word	0x2000061d
 8001c60:	2000061e 	.word	0x2000061e
 8001c64:	200006d0 	.word	0x200006d0

08001c68 <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <send_keyboard_report+0x1c>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <send_keyboard_report+0x20>)
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <send_keyboard_report+0x1c>)
 8001c78:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 8001c7a:	4802      	ldr	r0, [pc, #8]	; (8001c84 <send_keyboard_report+0x1c>)
 8001c7c:	f7ff ffc2 	bl	8001c04 <kbuf_push>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	200006c4 	.word	0x200006c4
 8001c88:	2000061c 	.word	0x2000061c

08001c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c90:	f000 fc52 	bl	8002538 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c94:	f000 f824 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c98:	f7fe ff94 	bl	8000bc4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001c9c:	f006 ff3a 	bl	8008b14 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001ca0:	f000 fbb6 	bl	8002410 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001ca4:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <main+0x4c>)
 8001ca6:	f003 f9d7 	bl	8005058 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 8001caa:	20fa      	movs	r0, #250	; 0xfa
 8001cac:	f000 fb70 	bl	8002390 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <main+0x50>)
 8001cb8:	f001 f941 	bl	8002f3e <HAL_GPIO_WritePin>
  reset_us_counter();
 8001cbc:	f000 fb86 	bl	80023cc <reset_us_counter>
  init_PS2();
 8001cc0:	f000 f96e 	bl	8001fa0 <init_PS2>

#ifdef DEBUG
  SEGGER_RTT_Init();
 8001cc4:	f7fe fbc2 	bl	800044c <SEGGER_RTT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001cc8:	f000 fa54 	bl	8002174 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8001ccc:	f7ff fed8 	bl	8001a80 <process_keyboard_USB>
	  _delay_ms(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f000 fb5d 	bl	8002390 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001cd6:	e7f7      	b.n	8001cc8 <main+0x3c>
 8001cd8:	200007a4 	.word	0x200007a4
 8001cdc:	40010800 	.word	0x40010800

08001ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cea:	2228      	movs	r2, #40	; 0x28
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f007 faf3 	bl	80092da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d22:	2302      	movs	r3, #2
 8001d24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001d2c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fc9e 	bl	8004678 <HAL_RCC_OscConfig>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d42:	f000 f828 	bl	8001d96 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d46:	230f      	movs	r3, #15
 8001d48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2101      	movs	r1, #1
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 ff08 	bl	8004b78 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d6e:	f000 f812 	bl	8001d96 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d72:	2310      	movs	r3, #16
 8001d74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f864 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d8a:	f000 f804 	bl	8001d96 <Error_Handler>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3750      	adds	r7, #80	; 0x50
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x6>
	...

08001da0 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db0:	f040 80e6 	bne.w	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8001db4:	4b74      	ldr	r3, [pc, #464]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d060      	beq.n	8001e7e <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8001dbc:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d109      	bne.n	8001dd8 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8001dc4:	4b70      	ldr	r3, [pc, #448]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8001dca:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001dd0:	4b6f      	ldr	r3, [pc, #444]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
				return;
 8001dd6:	e0d3      	b.n	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dda:	f993 3000 	ldrsb.w	r3, [r3]
 8001dde:	2b07      	cmp	r3, #7
 8001de0:	dc1b      	bgt.n	8001e1a <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8001de2:	4b6c      	ldr	r3, [pc, #432]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b68      	ldr	r3, [pc, #416]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dea:	f993 3000 	ldrsb.w	r3, [r3]
 8001dee:	fa42 f303 	asr.w	r3, r2, r3
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00c      	beq.n	8001e14 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e0c:	701a      	strb	r2, [r3, #0]
					data_release();
 8001e0e:	f7fe ffd7 	bl	8000dc0 <data_release>
 8001e12:	e02a      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8001e14:	f7fe ff8c 	bl	8000d30 <data_low>
 8001e18:	e027      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d109      	bne.n	8001e38 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8001e24:	4b5a      	ldr	r3, [pc, #360]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d102      	bne.n	8001e32 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8001e2c:	f7fe ffc8 	bl	8000dc0 <data_release>
 8001e30:	e01b      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8001e32:	f7fe ff7d 	bl	8000d30 <data_low>
 8001e36:	e018      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8001e38:	4b54      	ldr	r3, [pc, #336]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e3a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d102      	bne.n	8001e48 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8001e42:	f7fe ffbd 	bl	8000dc0 <data_release>
 8001e46:	e010      	b.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e4a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d10b      	bne.n	8001e6a <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8001e52:	f7fe ffb5 	bl	8000dc0 <data_release>
				sendMode = 0;
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
				return;
 8001e68:	e08a      	b.n	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8001e6a:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	b25a      	sxtb	r2, r3
 8001e78:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e7a:	701a      	strb	r2, [r3, #0]
			return;
 8001e7c:	e080      	b.n	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8001e7e:	20c8      	movs	r0, #200	; 0xc8
 8001e80:	f000 fab0 	bl	80023e4 <check_us_counter>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8001e90:	f000 fa9c 	bl	80023cc <reset_us_counter>
			if (bitNr == 0)
 8001e94:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10e      	bne.n	8001ebc <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea2:	483d      	ldr	r0, [pc, #244]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001ea4:	f001 f834 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d167      	bne.n	8001f7e <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e056      	b.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8001ebc:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001ebe:	f993 3000 	ldrsb.w	r3, [r3]
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	dc1f      	bgt.n	8001f06 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001ed0:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed6:	4830      	ldr	r0, [pc, #192]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001ed8:	f001 f81a 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d043      	beq.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001eee:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001ef0:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e031      	b.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001f08:	f993 3000 	ldrsb.w	r3, [r3]
 8001f0c:	2b09      	cmp	r3, #9
 8001f0e:	d112      	bne.n	8001f36 <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f14:	4820      	ldr	r0, [pc, #128]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001f16:	f000 fffb 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d024      	beq.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e019      	b.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001f38:	f993 3000 	ldrsb.w	r3, [r3]
 8001f3c:	2b0a      	cmp	r3, #10
 8001f3e:	d114      	bne.n	8001f6a <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8001f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f44:	4814      	ldr	r0, [pc, #80]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001f46:	f000 ffe3 	bl	8002f10 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_GPIO_EXTI_Callback+0x1c2>
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d004      	beq.n	8001f62 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 f93d 	bl	80021dc <buf_push>
				bitNr = 0;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
				return;
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	b25a      	sxtb	r2, r3
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 8001f7e:	bf00      	nop
	}
}
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000062d 	.word	0x2000062d
 8001f8c:	2000062f 	.word	0x2000062f
 8001f90:	20000633 	.word	0x20000633
 8001f94:	2000062e 	.word	0x2000062e
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	20000634 	.word	0x20000634

08001fa0 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8001fa6:	20ff      	movs	r0, #255	; 0xff
 8001fa8:	f000 f820 	bl	8001fec <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8001fac:	f000 f8c4 	bl	8002138 <wait_response_PS2>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2bfa      	cmp	r3, #250	; 0xfa
 8001fb4:	d004      	beq.n	8001fc0 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8001fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fba:	f000 f9e9 	bl	8002390 <_delay_ms>
		send_PS2(PS2_RESET);
 8001fbe:	e7f2      	b.n	8001fa6 <init_PS2+0x6>
			break;
 8001fc0:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001fc2:	2364      	movs	r3, #100	; 0x64
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e007      	b.n	8001fd8 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8001fc8:	f000 f8b6 	bl	8002138 <wait_response_PS2>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2baa      	cmp	r3, #170	; 0xaa
 8001fd0:	d006      	beq.n	8001fe0 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	71fb      	strb	r3, [r7, #7]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f4      	bne.n	8001fc8 <init_PS2+0x28>
			break;
	}
}
 8001fde:	e000      	b.n	8001fe2 <init_PS2+0x42>
			break;
 8001fe0:	bf00      	nop
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <send_PS2+0x3c>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
	clock_low();
 8001ffc:	f7fe febc 	bl	8000d78 <clock_low>
	bitNr = 0;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <send_PS2+0x40>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <send_PS2+0x44>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 800200c:	2064      	movs	r0, #100	; 0x64
 800200e:	f000 f9ca 	bl	80023a6 <_delay_us>

	data_low();
 8002012:	f7fe fe8d 	bl	8000d30 <data_low>
	_delay_us(10);
 8002016:	200a      	movs	r0, #10
 8002018:	f000 f9c5 	bl	80023a6 <_delay_us>
	clock_release();
 800201c:	f7fe feec 	bl	8000df8 <clock_release>
}
 8002020:	bf00      	nop
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	2000062d 	.word	0x2000062d
 800202c:	2000062f 	.word	0x2000062f
 8002030:	2000062e 	.word	0x2000062e

08002034 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	f043 0304 	orr.w	r3, r3, #4
 8002052:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SET_LEDS_Callback+0x5c>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <SET_LEDS_Callback+0x60>)
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	7013      	strb	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000761 	.word	0x20000761
 8002094:	20000760 	.word	0x20000760

08002098 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	3301      	adds	r3, #1
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <USBD_Sleep_Callback+0x20>)
 80020aa:	701a      	strb	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	20000630 	.word	0x20000630

080020bc <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <leds_PS2+0x78>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d029      	beq.n	8002122 <leds_PS2+0x66>
		return;
	if (buf_has_data())
 80020ce:	f000 f8d9 	bl	8002284 <buf_has_data>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d126      	bne.n	8002126 <leds_PS2+0x6a>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <leds_PS2+0x78>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 5; i > 0; i--){
 80020de:	2305      	movs	r3, #5
 80020e0:	73fb      	strb	r3, [r7, #15]
 80020e2:	e01a      	b.n	800211a <leds_PS2+0x5e>
		send_PS2(PS2_SET_LED);
 80020e4:	20ed      	movs	r0, #237	; 0xed
 80020e6:	f7ff ff81 	bl	8001fec <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 80020ea:	f000 f825 	bl	8002138 <wait_response_PS2>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2bfa      	cmp	r3, #250	; 0xfa
 80020f2:	d003      	beq.n	80020fc <leds_PS2+0x40>
		{
			_delay_ms(20);
 80020f4:	2014      	movs	r0, #20
 80020f6:	f000 f94b 	bl	8002390 <_delay_ms>
			continue;
 80020fa:	e00b      	b.n	8002114 <leds_PS2+0x58>
		}
		send_PS2(led);
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff ff74 	bl	8001fec <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8002104:	f000 f818 	bl	8002138 <wait_response_PS2>
 8002108:	4603      	mov	r3, r0
 800210a:	2bfa      	cmp	r3, #250	; 0xfa
 800210c:	d00d      	beq.n	800212a <leds_PS2+0x6e>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 800210e:	2014      	movs	r0, #20
 8002110:	f000 f93e 	bl	8002390 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	3b01      	subs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e1      	bne.n	80020e4 <leds_PS2+0x28>
 8002120:	e004      	b.n	800212c <leds_PS2+0x70>
		return;
 8002122:	bf00      	nop
 8002124:	e002      	b.n	800212c <leds_PS2+0x70>
		return; // do nothing if buffer is not clear - user input is more important!
 8002126:	bf00      	nop
 8002128:	e000      	b.n	800212c <leds_PS2+0x70>
			return;
 800212a:	bf00      	nop
	}
}
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000761 	.word	0x20000761

08002138 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 800213e:	2319      	movs	r3, #25
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	e00a      	b.n	800215a <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 8002144:	f000 f89e 	bl	8002284 <buf_has_data>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 f91e 	bl	8002390 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3b01      	subs	r3, #1
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f1      	bne.n	8002144 <wait_response_PS2+0xc>
 8002160:	e000      	b.n	8002164 <wait_response_PS2+0x2c>
			break;
 8002162:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 8002164:	f000 f864 	bl	8002230 <buf_pop>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	if (sleep)
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <process_PS2+0x5c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d012      	beq.n	80021a6 <process_PS2+0x32>
	{
		leds_updated = 1;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <process_PS2+0x60>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <process_PS2+0x5c>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d103      	bne.n	8002196 <process_PS2+0x22>
		{
			leds_PS2(0);
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff ff94 	bl	80020bc <leds_PS2>
 8002194:	e004      	b.n	80021a0 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <process_PS2+0x64>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff8e 	bl	80020bc <leds_PS2>
		}
		sleep = 0;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <process_PS2+0x5c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 80021a6:	f000 f86d 	bl	8002284 <buf_has_data>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <process_PS2+0x4a>
		matrix_scan(buf_pop());
 80021b0:	f000 f83e 	bl	8002230 <buf_pop>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fe3c 	bl	8000e34 <matrix_scan>
 80021bc:	e004      	b.n	80021c8 <process_PS2+0x54>
	else
		leds_PS2(leds_data);
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <process_PS2+0x64>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff7a 	bl	80020bc <leds_PS2>
	prog_pop_code();
 80021c8:	f7ff f944 	bl	8001454 <prog_pop_code>
}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000630 	.word	0x20000630
 80021d4:	20000761 	.word	0x20000761
 80021d8:	20000760 	.word	0x20000760

080021dc <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <buf_push+0x48>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	425a      	negs	r2, r3
 80021ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80021f6:	bf58      	it	pl
 80021f8:	4253      	negpl	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <buf_push+0x4c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	429a      	cmp	r2, r3
 8002204:	d008      	beq.n	8002218 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <buf_push+0x48>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <buf_push+0x50>)
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <buf_push+0x48>)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	7013      	strb	r3, [r2, #0]
    }
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	bc80      	pop	{r7}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000631 	.word	0x20000631
 8002228:	20000632 	.word	0x20000632
 800222c:	20000764 	.word	0x20000764

08002230 <buf_pop>:

uint8_t buf_pop(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <buf_pop+0x48>)
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <buf_pop+0x4c>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d012      	beq.n	800226c <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <buf_pop+0x4c>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <buf_pop+0x50>)
 800224e:	5c9b      	ldrb	r3, [r3, r2]
 8002250:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <buf_pop+0x4c>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	3301      	adds	r3, #1
 8002258:	425a      	negs	r2, r3
 800225a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800225e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002262:	bf58      	it	pl
 8002264:	4253      	negpl	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <buf_pop+0x4c>)
 800226a:	701a      	strb	r2, [r3, #0]
    }
    return val;
 800226c:	79fb      	ldrb	r3, [r7, #7]
}
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000631 	.word	0x20000631
 800227c:	20000632 	.word	0x20000632
 8002280:	20000764 	.word	0x20000764

08002284 <buf_has_data>:

uint8_t buf_has_data(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <buf_has_data+0x20>)
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <buf_has_data+0x24>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000631 	.word	0x20000631
 80022a8:	20000632 	.word	0x20000632

080022ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_MspInit+0x5c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4a14      	ldr	r2, [pc, #80]	; (8002308 <HAL_MspInit+0x5c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6193      	str	r3, [r2, #24]
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_MspInit+0x5c>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_MspInit+0x5c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_MspInit+0x5c>)
 80022d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_MspInit+0x5c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_MspInit+0x60>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4a04      	ldr	r2, [pc, #16]	; (800230c <HAL_MspInit+0x60>)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	40021000 	.word	0x40021000
 800230c:	40010000 	.word	0x40010000

08002310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <NMI_Handler+0x4>

08002316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <HardFault_Handler+0x4>

0800231c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <MemManage_Handler+0x4>

08002322 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002326:	e7fe      	b.n	8002326 <BusFault_Handler+0x4>

08002328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800232c:	e7fe      	b.n	800232c <UsageFault_Handler+0x4>

0800232e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002356:	f000 f935 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002366:	f000 ff4c 	bl	8003202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000cd4 	.word	0x20000cd4

08002374 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002378:	f44f 7080 	mov.w	r0, #256	; 0x100
 800237c:	f000 fdf8 	bl	8002f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f92f 	bl	80025fc <HAL_Delay>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 80023b0:	f000 f80c 	bl	80023cc <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 80023b4:	bf00      	nop
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f813 	bl	80023e4 <check_us_counter>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f8      	bne.n	80023b6 <_delay_us+0x10>
}
 80023c4:	bf00      	nop
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <reset_us_counter>:

inline void reset_us_counter(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80023d0:	4b03      	ldr	r3, [pc, #12]	; (80023e0 <reset_us_counter+0x14>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	200007a4 	.word	0x200007a4

080023e4 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <check_us_counter+0x28>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	bf8c      	ite	hi
 80023fc:	2301      	movhi	r3, #1
 80023fe:	2300      	movls	r3, #0
 8002400:	b2db      	uxtb	r3, r3
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	200007a4 	.word	0x200007a4

08002410 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <MX_TIM1_Init+0x98>)
 800242e:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <MX_TIM1_Init+0x9c>)
 8002430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8002432:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002434:	222f      	movs	r2, #47	; 0x2f
 8002436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <MX_TIM1_Init+0x98>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800243e:	4b1a      	ldr	r3, [pc, #104]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <MX_TIM1_Init+0x98>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002458:	4813      	ldr	r0, [pc, #76]	; (80024a8 <MX_TIM1_Init+0x98>)
 800245a:	f002 fdad 	bl	8004fb8 <HAL_TIM_Base_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002464:	f7ff fc97 	bl	8001d96 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800246e:	f107 0308 	add.w	r3, r7, #8
 8002472:	4619      	mov	r1, r3
 8002474:	480c      	ldr	r0, [pc, #48]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002476:	f002 fe39 	bl	80050ec <HAL_TIM_ConfigClockSource>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002480:	f7ff fc89 	bl	8001d96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800248c:	463b      	mov	r3, r7
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_TIM1_Init+0x98>)
 8002492:	f002 ffdb 	bl	800544c <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800249c:	f7ff fc7b 	bl	8001d96 <Error_Handler>
  }

}
 80024a0:	bf00      	nop
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200007a4 	.word	0x200007a4
 80024ac:	40012c00 	.word	0x40012c00

080024b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_TIM_Base_MspInit+0x34>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10b      	bne.n	80024da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024cc:	6193      	str	r3, [r2, #24]
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_TIM_Base_MspInit+0x38>)
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40021000 	.word	0x40021000

080024ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024ee:	e003      	b.n	80024f8 <LoopCopyDataInit>

080024f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024f6:	3104      	adds	r1, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002500:	d3f6      	bcc.n	80024f0 <CopyDataInit>
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002504:	e002      	b.n	800250c <LoopFillZerobss>

08002506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002508:	f842 3b04 	str.w	r3, [r2], #4

0800250c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800250e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002510:	d3f9      	bcc.n	8002506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002512:	f7ff ff37 	bl	8002384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002516:	f006 feb1 	bl	800927c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800251a:	f7ff fbb7 	bl	8001c8c <main>
  bx lr
 800251e:	4770      	bx	lr
  ldr r3, =_sidata
 8002520:	080094a4 	.word	0x080094a4
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002528:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 800252c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8002530:	20000fc0 	.word	0x20000fc0

08002534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_2_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <HAL_Init+0x28>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_Init+0x28>)
 8002542:	f043 0310 	orr.w	r3, r3, #16
 8002546:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002548:	2003      	movs	r0, #3
 800254a:	f000 f945 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254e:	2000      	movs	r0, #0
 8002550:	f000 f808 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002554:	f7ff feaa 	bl	80022ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x54>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x58>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	fbb3 f3f1 	udiv	r3, r3, r1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f95d 	bl	8002842 <HAL_SYSTICK_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00e      	b.n	80025b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d80a      	bhi.n	80025ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002598:	2200      	movs	r2, #0
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f000 f925 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <HAL_InitTick+0x5c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000004 	.word	0x20000004
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	20000008 	.word	0x20000008

080025c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_IncTick+0x1c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_IncTick+0x20>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <HAL_IncTick+0x20>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	200007ec 	.word	0x200007ec

080025e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return uwTick;
 80025ec:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <HAL_GetTick+0x10>)
 80025ee:	681b      	ldr	r3, [r3, #0]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	200007ec 	.word	0x200007ec

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fff0 	bl	80025e8 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Delay+0x40>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffe0 	bl	80025e8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000000c 	.word	0x2000000c

08002640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002650:	4b0c      	ldr	r3, [pc, #48]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x44>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <__NVIC_GetPriorityGrouping+0x18>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	0a1b      	lsrs	r3, r3, #8
 8002692:	f003 0307 	and.w	r3, r3, #7
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	db0b      	blt.n	80026ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 021f 	and.w	r2, r3, #31
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <__NVIC_EnableIRQ+0x34>)
 80026be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2001      	movs	r0, #1
 80026c6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	; (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	; (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff90 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff2d 	bl	8002640 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff42 	bl	8002688 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff90 	bl	8002730 <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5f 	bl	80026dc <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff35 	bl	80026a4 <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa2 	bl	8002794 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_FLASH_Program+0xd8>)
 8002878:	7e1b      	ldrb	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_FLASH_Program+0x26>
 800287e:	2302      	movs	r3, #2
 8002880:	e054      	b.n	800292c <HAL_FLASH_Program+0xd0>
 8002882:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <HAL_FLASH_Program+0xd8>)
 8002884:	2201      	movs	r2, #1
 8002886:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002888:	f24c 3050 	movw	r0, #50000	; 0xc350
 800288c:	f000 f8a8 	bl	80029e0 <FLASH_WaitForLastOperation>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d144      	bne.n	8002924 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80028a0:	2301      	movs	r3, #1
 80028a2:	757b      	strb	r3, [r7, #21]
 80028a4:	e007      	b.n	80028b6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d102      	bne.n	80028b2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80028ac:	2302      	movs	r3, #2
 80028ae:	757b      	strb	r3, [r7, #21]
 80028b0:	e001      	b.n	80028b6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80028b2:	2304      	movs	r3, #4
 80028b4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80028b6:	2300      	movs	r3, #0
 80028b8:	75bb      	strb	r3, [r7, #22]
 80028ba:	e02d      	b.n	8002918 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80028bc:	7dbb      	ldrb	r3, [r7, #22]
 80028be:	005a      	lsls	r2, r3, #1
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	eb02 0c03 	add.w	ip, r2, r3
 80028c6:	7dbb      	ldrb	r3, [r7, #22]
 80028c8:	0119      	lsls	r1, r3, #4
 80028ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ce:	f1c1 0620 	rsb	r6, r1, #32
 80028d2:	f1a1 0020 	sub.w	r0, r1, #32
 80028d6:	fa22 f401 	lsr.w	r4, r2, r1
 80028da:	fa03 f606 	lsl.w	r6, r3, r6
 80028de:	4334      	orrs	r4, r6
 80028e0:	fa23 f000 	lsr.w	r0, r3, r0
 80028e4:	4304      	orrs	r4, r0
 80028e6:	fa23 f501 	lsr.w	r5, r3, r1
 80028ea:	b2a3      	uxth	r3, r4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4660      	mov	r0, ip
 80028f0:	f000 f85a 	bl	80029a8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80028f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028f8:	f000 f872 	bl	80029e0 <FLASH_WaitForLastOperation>
 80028fc:	4603      	mov	r3, r0
 80028fe:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_FLASH_Program+0xdc>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	4a0c      	ldr	r2, [pc, #48]	; (8002938 <HAL_FLASH_Program+0xdc>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d107      	bne.n	8002922 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002912:	7dbb      	ldrb	r3, [r7, #22]
 8002914:	3301      	adds	r3, #1
 8002916:	75bb      	strb	r3, [r7, #22]
 8002918:	7dba      	ldrb	r2, [r7, #22]
 800291a:	7d7b      	ldrb	r3, [r7, #21]
 800291c:	429a      	cmp	r2, r3
 800291e:	d3cd      	bcc.n	80028bc <HAL_FLASH_Program+0x60>
 8002920:	e000      	b.n	8002924 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002922:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_FLASH_Program+0xd8>)
 8002926:	2200      	movs	r2, #0
 8002928:	761a      	strb	r2, [r3, #24]

  return status;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
}
 800292c:	4618      	mov	r0, r3
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002934:	200007f0 	.word	0x200007f0
 8002938:	40022000 	.word	0x40022000

0800293c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_FLASH_Unlock+0x40>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_FLASH_Unlock+0x40>)
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_FLASH_Unlock+0x44>)
 8002956:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_FLASH_Unlock+0x40>)
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <HAL_FLASH_Unlock+0x48>)
 800295c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_FLASH_Unlock+0x40>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800296e:	79fb      	ldrb	r3, [r7, #7]
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40022000 	.word	0x40022000
 8002980:	45670123 	.word	0x45670123
 8002984:	cdef89ab 	.word	0xcdef89ab

08002988 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_FLASH_Lock+0x1c>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_FLASH_Lock+0x1c>)
 8002992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002996:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40022000 	.word	0x40022000

080029a8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <FLASH_Program_HalfWord+0x30>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <FLASH_Program_HalfWord+0x34>)
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <FLASH_Program_HalfWord+0x34>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	887a      	ldrh	r2, [r7, #2]
 80029ca:	801a      	strh	r2, [r3, #0]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	200007f0 	.word	0x200007f0
 80029dc:	40022000 	.word	0x40022000

080029e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff fdfe 	bl	80025e8 <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80029ee:	e010      	b.n	8002a12 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f6:	d00c      	beq.n	8002a12 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <FLASH_WaitForLastOperation+0x2e>
 80029fe:	f7ff fdf3 	bl	80025e8 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d201      	bcs.n	8002a12 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e025      	b.n	8002a5e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1e8      	bne.n	80029f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002a1e:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a48:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <FLASH_WaitForLastOperation+0x88>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a54:	f000 f80a 	bl	8002a6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40022000 	.word	0x40022000

08002a6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	4a1f      	ldr	r2, [pc, #124]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002a8c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002aac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <FLASH_SetErrorCode+0x9c>)
 8002acc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002ace:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f240 1201 	movw	r2, #257	; 0x101
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d106      	bne.n	8002af2 <FLASH_SetErrorCode+0x86>
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	61d3      	str	r3, [r2, #28]
}  
 8002af0:	e002      	b.n	8002af8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <FLASH_SetErrorCode+0x98>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60d3      	str	r3, [r2, #12]
}  
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	200007f0 	.word	0x200007f0

08002b0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b1e:	4b2f      	ldr	r3, [pc, #188]	; (8002bdc <HAL_FLASHEx_Erase+0xd0>)
 8002b20:	7e1b      	ldrb	r3, [r3, #24]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_FLASHEx_Erase+0x1e>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e053      	b.n	8002bd2 <HAL_FLASHEx_Erase+0xc6>
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <HAL_FLASHEx_Erase+0xd0>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d116      	bne.n	8002b66 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b3c:	f7ff ff50 	bl	80029e0 <FLASH_WaitForLastOperation>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d141      	bne.n	8002bca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f000 f84c 	bl	8002be4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b4c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b50:	f7ff ff46 	bl	80029e0 <FLASH_WaitForLastOperation>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_FLASHEx_Erase+0xd4>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <HAL_FLASHEx_Erase+0xd4>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6113      	str	r3, [r2, #16]
 8002b64:	e031      	b.n	8002bca <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002b66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b6a:	f7ff ff39 	bl	80029e0 <FLASH_WaitForLastOperation>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d12a      	bne.n	8002bca <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	e019      	b.n	8002bb8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002b84:	68b8      	ldr	r0, [r7, #8]
 8002b86:	f000 f849 	bl	8002c1c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b8e:	f7ff ff27 	bl	80029e0 <FLASH_WaitForLastOperation>
 8002b92:	4603      	mov	r3, r0
 8002b94:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002b96:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_FLASHEx_Erase+0xd4>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <HAL_FLASHEx_Erase+0xd4>)
 8002b9c:	f023 0302 	bic.w	r3, r3, #2
 8002ba0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	601a      	str	r2, [r3, #0]
            break;
 8002bae:	e00c      	b.n	8002bca <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bb6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	029a      	lsls	r2, r3, #10
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3dc      	bcc.n	8002b84 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_FLASHEx_Erase+0xd0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	761a      	strb	r2, [r3, #24]

  return status;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200007f0 	.word	0x200007f0
 8002be0:	40022000 	.word	0x40022000

08002be4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <FLASH_MassErase+0x30>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <FLASH_MassErase+0x34>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	4a08      	ldr	r2, [pc, #32]	; (8002c18 <FLASH_MassErase+0x34>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <FLASH_MassErase+0x34>)
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <FLASH_MassErase+0x34>)
 8002c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c08:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	200007f0 	.word	0x200007f0
 8002c18:	40022000 	.word	0x40022000

08002c1c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <FLASH_PageErase+0x38>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <FLASH_PageErase+0x3c>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <FLASH_PageErase+0x3c>)
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002c36:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <FLASH_PageErase+0x3c>)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <FLASH_PageErase+0x3c>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <FLASH_PageErase+0x3c>)
 8002c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c46:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	200007f0 	.word	0x200007f0
 8002c58:	40022000 	.word	0x40022000

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	e127      	b.n	8002ec0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c70:	2201      	movs	r2, #1
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8116 	bne.w	8002eba <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b12      	cmp	r3, #18
 8002c94:	d034      	beq.n	8002d00 <HAL_GPIO_Init+0xa4>
 8002c96:	2b12      	cmp	r3, #18
 8002c98:	d80d      	bhi.n	8002cb6 <HAL_GPIO_Init+0x5a>
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d02b      	beq.n	8002cf6 <HAL_GPIO_Init+0x9a>
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d804      	bhi.n	8002cac <HAL_GPIO_Init+0x50>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d031      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d01c      	beq.n	8002ce4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002caa:	e048      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d043      	beq.n	8002d38 <HAL_GPIO_Init+0xdc>
 8002cb0:	2b11      	cmp	r3, #17
 8002cb2:	d01b      	beq.n	8002cec <HAL_GPIO_Init+0x90>
          break;
 8002cb4:	e043      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cb6:	4a89      	ldr	r2, [pc, #548]	; (8002edc <HAL_GPIO_Init+0x280>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d026      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cbc:	4a87      	ldr	r2, [pc, #540]	; (8002edc <HAL_GPIO_Init+0x280>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d806      	bhi.n	8002cd0 <HAL_GPIO_Init+0x74>
 8002cc2:	4a87      	ldr	r2, [pc, #540]	; (8002ee0 <HAL_GPIO_Init+0x284>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d020      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cc8:	4a86      	ldr	r2, [pc, #536]	; (8002ee4 <HAL_GPIO_Init+0x288>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d01d      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
          break;
 8002cce:	e036      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cd0:	4a85      	ldr	r2, [pc, #532]	; (8002ee8 <HAL_GPIO_Init+0x28c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d019      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cd6:	4a85      	ldr	r2, [pc, #532]	; (8002eec <HAL_GPIO_Init+0x290>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d016      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
 8002cdc:	4a84      	ldr	r2, [pc, #528]	; (8002ef0 <HAL_GPIO_Init+0x294>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <HAL_GPIO_Init+0xae>
          break;
 8002ce2:	e02c      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	623b      	str	r3, [r7, #32]
          break;
 8002cea:	e028      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	623b      	str	r3, [r7, #32]
          break;
 8002cf4:	e023      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	623b      	str	r3, [r7, #32]
          break;
 8002cfe:	e01e      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	330c      	adds	r3, #12
 8002d06:	623b      	str	r3, [r7, #32]
          break;
 8002d08:	e019      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d12:	2304      	movs	r3, #4
 8002d14:	623b      	str	r3, [r7, #32]
          break;
 8002d16:	e012      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d105      	bne.n	8002d2c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d20:	2308      	movs	r3, #8
 8002d22:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	611a      	str	r2, [r3, #16]
          break;
 8002d2a:	e008      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	615a      	str	r2, [r3, #20]
          break;
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2bff      	cmp	r3, #255	; 0xff
 8002d42:	d801      	bhi.n	8002d48 <HAL_GPIO_Init+0xec>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	e001      	b.n	8002d4c <HAL_GPIO_Init+0xf0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	2bff      	cmp	r3, #255	; 0xff
 8002d52:	d802      	bhi.n	8002d5a <HAL_GPIO_Init+0xfe>
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	e002      	b.n	8002d60 <HAL_GPIO_Init+0x104>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	3b08      	subs	r3, #8
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	210f      	movs	r1, #15
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	401a      	ands	r2, r3
 8002d72:	6a39      	ldr	r1, [r7, #32]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 8096 	beq.w	8002eba <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d8e:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6193      	str	r3, [r2, #24]
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <HAL_GPIO_Init+0x298>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002da6:	4a54      	ldr	r2, [pc, #336]	; (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_GPIO_Init+0x2a0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0x19e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00d      	beq.n	8002df6 <HAL_GPIO_Init+0x19a>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_GPIO_Init+0x2a8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_GPIO_Init+0x196>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a48      	ldr	r2, [pc, #288]	; (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d101      	bne.n	8002dee <HAL_GPIO_Init+0x192>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e004      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <HAL_GPIO_Init+0x1a0>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	f002 0203 	and.w	r2, r2, #3
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	4093      	lsls	r3, r2
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e0c:	493a      	ldr	r1, [pc, #232]	; (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4938      	ldr	r1, [pc, #224]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
 8002e32:	e006      	b.n	8002e42 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e34:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	4933      	ldr	r1, [pc, #204]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e4e:	4b2f      	ldr	r3, [pc, #188]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	492e      	ldr	r1, [pc, #184]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
 8002e5a:	e006      	b.n	8002e6a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4929      	ldr	r1, [pc, #164]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	4924      	ldr	r1, [pc, #144]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
 8002e82:	e006      	b.n	8002e92 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	491f      	ldr	r1, [pc, #124]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]
 8002eaa:	e006      	b.n	8002eba <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4915      	ldr	r1, [pc, #84]	; (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f47f aed0 	bne.w	8002c70 <HAL_GPIO_Init+0x14>
  }
}
 8002ed0:	bf00      	nop
 8002ed2:	372c      	adds	r7, #44	; 0x2c
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	10210000 	.word	0x10210000
 8002ee0:	10110000 	.word	0x10110000
 8002ee4:	10120000 	.word	0x10120000
 8002ee8:	10310000 	.word	0x10310000
 8002eec:	10320000 	.word	0x10320000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010800 	.word	0x40010800
 8002f00:	40010c00 	.word	0x40010c00
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	40010400 	.word	0x40010400

08002f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e001      	b.n	8002f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f54:	887a      	ldrh	r2, [r7, #2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	041a      	lsls	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	611a      	str	r2, [r3, #16]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe ff06 	bl	8001da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fa2:	b08b      	sub	sp, #44	; 0x2c
 8002fa4:	af06      	add	r7, sp, #24
 8002fa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0fd      	b.n	80031ae <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f005 fed8 	bl	8008d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f002 fabb 	bl	8005554 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	687e      	ldr	r6, [r7, #4]
 8002fe6:	466d      	mov	r5, sp
 8002fe8:	f106 0410 	add.w	r4, r6, #16
 8002fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	1d33      	adds	r3, r6, #4
 8002ff6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff8:	6838      	ldr	r0, [r7, #0]
 8002ffa:	f002 fa85 	bl	8005508 <USB_CoreInit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0ce      	b.n	80031ae <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fab6 	bl	8005588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]
 8003020:	e04c      	b.n	80030bc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	440b      	add	r3, r1
 8003032:	3301      	adds	r3, #1
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800304c:	7bfa      	ldrb	r2, [r7, #15]
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	b298      	uxth	r0, r3
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	3336      	adds	r3, #54	; 0x36
 8003060:	4602      	mov	r2, r0
 8003062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3303      	adds	r3, #3
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	333c      	adds	r3, #60	; 0x3c
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3ad      	bcc.n	8003022 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e044      	b.n	8003156 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	f203 1369 	addw	r3, r3, #361	; 0x169
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	3301      	adds	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b5      	bcc.n	80030cc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	687e      	ldr	r6, [r7, #4]
 8003168:	466d      	mov	r5, sp
 800316a:	f106 0410 	add.w	r4, r6, #16
 800316e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	1d33      	adds	r3, r6, #4
 8003178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	f002 fa10 	bl	80055a0 <USB_DevInit>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00d      	b.n	80031ae <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 f9aa 	bl	8007500 <USB_DevDisconnect>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_Start+0x16>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e016      	b.n	80031fa <HAL_PCD_Start+0x44>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f002 f9a5 	bl	8005528 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80031de:	2101      	movs	r1, #1
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f006 f814 	bl	800920e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f97e 	bl	80074ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b088      	sub	sp, #32
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 f980 	bl	8007514 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d102      	bne.n	8003226 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb4a 	bl	80038ba <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 f972 	bl	8007514 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323a:	d112      	bne.n	8003262 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800324e:	b292      	uxth	r2, r2
 8003250:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f005 fe0c 	bl	8008e72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800325a:	2100      	movs	r1, #0
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f925 	bl	80034ac <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f004 f954 	bl	8007514 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003276:	d10b      	bne.n	8003290 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003280:	b29a      	uxth	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800328a:	b292      	uxth	r2, r2
 800328c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f004 f93d 	bl	8007514 <USB_ReadInterrupts>
 800329a:	4603      	mov	r3, r0
 800329c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a4:	d10b      	bne.n	80032be <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b8:	b292      	uxth	r2, r2
 80032ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 f926 	bl	8007514 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d126      	bne.n	8003322 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0204 	bic.w	r2, r2, #4
 80032e6:	b292      	uxth	r2, r2
 80032e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0208 	bic.w	r2, r2, #8
 80032fe:	b292      	uxth	r2, r2
 8003300:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f005 fde3 	bl	8008ed0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331c:	b292      	uxth	r2, r2
 800331e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f004 f8f4 	bl	8007514 <USB_ReadInterrupts>
 800332c:	4603      	mov	r3, r0
 800332e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003336:	f040 8084 	bne.w	8003442 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800333a:	2300      	movs	r3, #0
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e011      	b.n	8003364 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	b292      	uxth	r2, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	f107 0120 	add.w	r1, r7, #32
 8003358:	440b      	add	r3, r1
 800335a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800335e:	7ffb      	ldrb	r3, [r7, #31]
 8003360:	3301      	adds	r3, #1
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d9ea      	bls.n	8003340 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003372:	b29a      	uxth	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	b292      	uxth	r2, r2
 800337e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800338a:	b29a      	uxth	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	b292      	uxth	r2, r2
 8003396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800339a:	bf00      	nop
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f6      	beq.n	800339c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c0:	b292      	uxth	r2, r2
 80033c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80033c6:	2300      	movs	r3, #0
 80033c8:	77fb      	strb	r3, [r7, #31]
 80033ca:	e010      	b.n	80033ee <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80033cc:	7ffb      	ldrb	r3, [r7, #31]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4611      	mov	r1, r2
 80033d4:	7ffa      	ldrb	r2, [r7, #31]
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	440a      	add	r2, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	f107 0120 	add.w	r1, r7, #32
 80033e0:	440b      	add	r3, r1
 80033e2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80033e6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80033e8:	7ffb      	ldrb	r3, [r7, #31]
 80033ea:	3301      	adds	r3, #1
 80033ec:	77fb      	strb	r3, [r7, #31]
 80033ee:	7ffb      	ldrb	r3, [r7, #31]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	d9eb      	bls.n	80033cc <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	b292      	uxth	r2, r2
 8003408:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341e:	b292      	uxth	r2, r2
 8003420:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800342c:	b29a      	uxth	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0204 	orr.w	r2, r2, #4
 8003436:	b292      	uxth	r2, r2
 8003438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f005 fd36 	bl	8008eae <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f004 f864 	bl	8007514 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003456:	d10e      	bne.n	8003476 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f005 fcf0 	bl	8008e56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f004 f84a 	bl	8007514 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d10b      	bne.n	80034a4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800349e:	b292      	uxth	r2, r2
 80034a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_PCD_SetAddress+0x1a>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e013      	b.n	80034ee <HAL_PCD_SetAddress+0x42>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 fff1 	bl	80074c6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	4608      	mov	r0, r1
 8003500:	4611      	mov	r1, r2
 8003502:	461a      	mov	r2, r3
 8003504:	4603      	mov	r3, r0
 8003506:	70fb      	strb	r3, [r7, #3]
 8003508:	460b      	mov	r3, r1
 800350a:	803b      	strh	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003518:	2b00      	cmp	r3, #0
 800351a:	da0e      	bge.n	800353a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	705a      	strb	r2, [r3, #1]
 8003538:	e00e      	b.n	8003558 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353a:	78fb      	ldrb	r3, [r7, #3]
 800353c:	f003 0207 	and.w	r2, r3, #7
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003564:	883a      	ldrh	r2, [r7, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	78ba      	ldrb	r2, [r7, #2]
 800356e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003582:	78bb      	ldrb	r3, [r7, #2]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d102      	bne.n	800358e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_PCD_EP_Open+0xa6>
 8003598:	2302      	movs	r3, #2
 800359a:	e00e      	b.n	80035ba <HAL_PCD_EP_Open+0xc4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68f9      	ldr	r1, [r7, #12]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 f818 	bl	80055e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80035b8:	7afb      	ldrb	r3, [r7, #11]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	da0e      	bge.n	80035f4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d6:	78fb      	ldrb	r3, [r7, #3]
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	705a      	strb	r2, [r3, #1]
 80035f2:	e00e      	b.n	8003612 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 0207 	and.w	r2, r3, #7
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_PCD_EP_Close+0x6a>
 8003628:	2302      	movs	r3, #2
 800362a:	e00e      	b.n	800364a <HAL_PCD_EP_Close+0x88>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68f9      	ldr	r1, [r7, #12]
 800363a:	4618      	mov	r0, r3
 800363c:	f002 fb3a 	bl	8005cb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	f003 0207 	and.w	r2, r3, #7
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2200      	movs	r2, #0
 8003690:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	7afb      	ldrb	r3, [r7, #11]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	b2da      	uxtb	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d106      	bne.n	80036b6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6979      	ldr	r1, [r7, #20]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f002 fcec 	bl	800608c <USB_EPStartXfer>
 80036b4:	e005      	b.n	80036c2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fce5 	bl	800608c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	460b      	mov	r3, r1
 80036da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036dc:	7afb      	ldrb	r3, [r7, #11]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2201      	movs	r2, #1
 8003716:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003718:	7afb      	ldrb	r3, [r7, #11]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	b2da      	uxtb	r2, r3
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	4618      	mov	r0, r3
 8003736:	f002 fca9 	bl	800608c <USB_EPStartXfer>
 800373a:	e005      	b.n	8003748 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	4618      	mov	r0, r3
 8003744:	f002 fca2 	bl	800608c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	f003 0207 	and.w	r2, r3, #7
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d901      	bls.n	8003770 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e04c      	b.n	800380a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da0e      	bge.n	8003796 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	705a      	strb	r2, [r3, #1]
 8003794:	e00c      	b.n	80037b0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_PCD_EP_SetStall+0x7e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e01c      	b.n	800380a <HAL_PCD_EP_SetStall+0xb8>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fd74 	bl	80072cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d108      	bne.n	8003800 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80037f8:	4619      	mov	r1, r3
 80037fa:	4610      	mov	r0, r2
 80037fc:	f003 fe99 	bl	8007532 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	460b      	mov	r3, r1
 800381c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d901      	bls.n	8003830 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e040      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003830:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003834:	2b00      	cmp	r3, #0
 8003836:	da0e      	bge.n	8003856 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003838:	78fb      	ldrb	r3, [r7, #3]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	705a      	strb	r2, [r3, #1]
 8003854:	e00e      	b.n	8003874 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	f003 0207 	and.w	r2, r3, #7
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	4413      	add	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_PCD_EP_ClrStall+0x82>
 8003890:	2302      	movs	r3, #2
 8003892:	e00e      	b.n	80038b2 <HAL_PCD_EP_ClrStall+0xa0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68f9      	ldr	r1, [r7, #12]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 fd62 	bl	800736c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b08e      	sub	sp, #56	; 0x38
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038c2:	e2df      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038cc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80038da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f040 8158 	bne.w	8003b94 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d152      	bne.n	8003994 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	81fb      	strh	r3, [r7, #14]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	89fb      	ldrh	r3, [r7, #14]
 8003906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800390a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800390e:	b29b      	uxth	r3, r3
 8003910:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	3302      	adds	r3, #2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	441a      	add	r2, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f005 fa64 	bl	8008e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 828e 	beq.w	8003e84 <PCD_EP_ISR_Handler+0x5ca>
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8289 	bne.w	8003e84 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003978:	b2db      	uxtb	r3, r3
 800397a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800397e:	b2da      	uxtb	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b292      	uxth	r2, r2
 8003986:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003992:	e277      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80039a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d034      	beq.n	8003a18 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4413      	add	r3, r2
 80039c2:	3306      	adds	r3, #6
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6812      	ldr	r2, [r2, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f003 fdef 	bl	80075d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80039fe:	4013      	ands	r3, r2
 8003a00:	823b      	strh	r3, [r7, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	8a3a      	ldrh	r2, [r7, #16]
 8003a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f005 f9d9 	bl	8008dc8 <HAL_PCD_SetupStageCallback>
 8003a16:	e235      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003a18:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f280 8231 	bge.w	8003e84 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003a2e:	4013      	ands	r3, r2
 8003a30:	83bb      	strh	r3, [r7, #28]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	8bba      	ldrh	r2, [r7, #28]
 8003a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a3c:	b292      	uxth	r2, r2
 8003a3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	3306      	adds	r3, #6
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d019      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x1ee>
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	6959      	ldr	r1, [r3, #20]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f003 fd9f 	bl	80075d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	441a      	add	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f005 f9a2 	bl	8008dec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	4413      	add	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d112      	bne.n	8003af6 <PCD_EP_ISR_Handler+0x23c>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	881b      	ldrh	r3, [r3, #0]
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	801a      	strh	r2, [r3, #0]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	801a      	strh	r2, [r3, #0]
 8003af4:	e02f      	b.n	8003b56 <PCD_EP_ISR_Handler+0x29c>
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b3e      	cmp	r3, #62	; 0x3e
 8003afc:	d813      	bhi.n	8003b26 <PCD_EP_ISR_Handler+0x26c>
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <PCD_EP_ISR_Handler+0x25e>
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	3301      	adds	r3, #1
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	029b      	lsls	r3, r3, #10
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	801a      	strh	r2, [r3, #0]
 8003b24:	e017      	b.n	8003b56 <PCD_EP_ISR_Handler+0x29c>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <PCD_EP_ISR_Handler+0x286>
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	029b      	lsls	r3, r3, #10
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b66:	827b      	strh	r3, [r7, #18]
 8003b68:	8a7b      	ldrh	r3, [r7, #18]
 8003b6a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b6e:	827b      	strh	r3, [r7, #18]
 8003b70:	8a7b      	ldrh	r3, [r7, #18]
 8003b72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b76:	827b      	strh	r3, [r7, #18]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	8a7b      	ldrh	r3, [r7, #18]
 8003b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	8013      	strh	r3, [r2, #0]
 8003b92:	e177      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ba6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f280 80ea 	bge.w	8003d84 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	853b      	strh	r3, [r7, #40]	; 0x28
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003bda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bde:	b292      	uxth	r2, r2
 8003be0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003be2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	7b1b      	ldrb	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d122      	bne.n	8003c46 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	3306      	adds	r3, #6
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c28:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003c2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8087 	beq.w	8003d40 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	6959      	ldr	r1, [r3, #20]
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	88da      	ldrh	r2, [r3, #6]
 8003c3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c40:	f003 fcc6 	bl	80075d0 <USB_ReadPMA>
 8003c44:	e07c      	b.n	8003d40 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	78db      	ldrb	r3, [r3, #3]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d108      	bne.n	8003c60 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003c4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c50:	461a      	mov	r2, r3
 8003c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f923 	bl	8003ea0 <HAL_PCD_EP_DB_Receive>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003c5e:	e06f      	b.n	8003d40 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d021      	beq.n	8003cfe <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3302      	adds	r3, #2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003ce4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02a      	beq.n	8003d40 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	6959      	ldr	r1, [r3, #20]
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	891a      	ldrh	r2, [r3, #8]
 8003cf6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cf8:	f003 fc6a 	bl	80075d0 <USB_ReadPMA>
 8003cfc:	e020      	b.n	8003d40 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4413      	add	r3, r2
 8003d12:	3306      	adds	r3, #6
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d26:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003d28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	6959      	ldr	r1, [r3, #20]
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	895a      	ldrh	r2, [r3, #10]
 8003d3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d3c:	f003 fc48 	bl	80075d0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d46:	441a      	add	r2, r3
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d52:	441a      	add	r2, r3
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d004      	beq.n	8003d6a <PCD_EP_ISR_Handler+0x4b0>
 8003d60:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d206      	bcs.n	8003d78 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f005 f83b 	bl	8008dec <HAL_PCD_DataOutStageCallback>
 8003d76:	e005      	b.n	8003d84 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 f984 	bl	800608c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003d84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d07a      	beq.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003d8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	4613      	mov	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dbc:	843b      	strh	r3, [r7, #32]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	8c3b      	ldrh	r3, [r7, #32]
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	78db      	ldrb	r3, [r3, #3]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d108      	bne.n	8003df4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d146      	bne.n	8003e78 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003dea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d141      	bne.n	8003e78 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e1c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	8bfb      	ldrh	r3, [r7, #30]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d906      	bls.n	8003e36 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	699a      	ldr	r2, [r3, #24]
 8003e2c:	8bfb      	ldrh	r3, [r7, #30]
 8003e2e:	1ad2      	subs	r2, r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	619a      	str	r2, [r3, #24]
 8003e34:	e002      	b.n	8003e3c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f004 ffe9 	bl	8008e22 <HAL_PCD_DataInStageCallback>
 8003e50:	e018      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	8bfb      	ldrh	r3, [r7, #30]
 8003e58:	441a      	add	r2, r3
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	8bfb      	ldrh	r3, [r7, #30]
 8003e64:	441a      	add	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 f90b 	bl	800608c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003e76:	e005      	b.n	8003e84 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f91b 	bl	80040ba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	b21b      	sxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f6ff ad17 	blt.w	80038c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3738      	adds	r7, #56	; 0x38
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b088      	sub	sp, #32
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d07e      	beq.n	8003fb6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	8b7b      	ldrh	r3, [r7, #26]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d306      	bcc.n	8003efa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	8b7b      	ldrh	r3, [r7, #26]
 8003ef2:	1ad2      	subs	r2, r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	619a      	str	r2, [r3, #24]
 8003ef8:	e002      	b.n	8003f00 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d123      	bne.n	8003f50 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	833b      	strh	r3, [r7, #24]
 8003f24:	8b3b      	ldrh	r3, [r7, #24]
 8003f26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f2a:	833b      	strh	r3, [r7, #24]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8b3b      	ldrh	r3, [r7, #24]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01f      	beq.n	8003f9a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	82fb      	strh	r3, [r7, #22]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	8afb      	ldrh	r3, [r7, #22]
 8003f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003f9a:	8b7b      	ldrh	r3, [r7, #26]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8087 	beq.w	80040b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6959      	ldr	r1, [r3, #20]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	891a      	ldrh	r2, [r3, #8]
 8003fae:	8b7b      	ldrh	r3, [r7, #26]
 8003fb0:	f003 fb0e 	bl	80075d0 <USB_ReadPMA>
 8003fb4:	e07c      	b.n	80040b0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	3306      	adds	r3, #6
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fde:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	8b7b      	ldrh	r3, [r7, #26]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d306      	bcc.n	8003ff8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	699a      	ldr	r2, [r3, #24]
 8003fee:	8b7b      	ldrh	r3, [r7, #26]
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	619a      	str	r2, [r3, #24]
 8003ff6:	e002      	b.n	8003ffe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d123      	bne.n	800404e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	b29b      	uxth	r3, r3
 8004018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	83fb      	strh	r3, [r7, #30]
 8004022:	8bfb      	ldrh	r3, [r7, #30]
 8004024:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004028:	83fb      	strh	r3, [r7, #30]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	441a      	add	r2, r3
 8004038:	8bfb      	ldrh	r3, [r7, #30]
 800403a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404a:	b29b      	uxth	r3, r3
 800404c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800404e:	88fb      	ldrh	r3, [r7, #6]
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11f      	bne.n	8004098 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	83bb      	strh	r3, [r7, #28]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	441a      	add	r2, r3
 8004082:	8bbb      	ldrh	r3, [r7, #28]
 8004084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004090:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004094:	b29b      	uxth	r3, r3
 8004096:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004098:	8b7b      	ldrh	r3, [r7, #26]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6959      	ldr	r1, [r3, #20]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	895a      	ldrh	r2, [r3, #10]
 80040aa:	8b7b      	ldrh	r3, [r7, #26]
 80040ac:	f003 fa90 	bl	80075d0 <USB_ReadPMA>
    }
  }

  return count;
 80040b0:	8b7b      	ldrh	r3, [r7, #26]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3720      	adds	r7, #32
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b092      	sub	sp, #72	; 0x48
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	4613      	mov	r3, r2
 80040c6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8132 	beq.w	8004338 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	3302      	adds	r3, #2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004104:	429a      	cmp	r2, r3
 8004106:	d906      	bls.n	8004116 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800410e:	1ad2      	subs	r2, r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	619a      	str	r2, [r3, #24]
 8004114:	e002      	b.n	800411c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d12c      	bne.n	800417e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	4619      	mov	r1, r3
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f004 fe79 	bl	8008e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 822f 	beq.w	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	827b      	strh	r3, [r7, #18]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	441a      	add	r2, r3
 8004166:	8a7b      	ldrh	r3, [r7, #18]
 8004168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800416c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004178:	b29b      	uxth	r3, r3
 800417a:	8013      	strh	r3, [r2, #0]
 800417c:	e20d      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d01f      	beq.n	80041c8 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	441a      	add	r2, r3
 80041b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	f040 81e3 	bne.w	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041da:	441a      	add	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	69da      	ldr	r2, [r3, #28]
 80041e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041e6:	441a      	add	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d309      	bcc.n	800420c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	6a1a      	ldr	r2, [r3, #32]
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	1ad2      	subs	r2, r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	621a      	str	r2, [r3, #32]
 800420a:	e014      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8004214:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004216:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004220:	e009      	b.n	8004236 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d155      	bne.n	80042ea <HAL_PCD_EP_DB_Transmit+0x230>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	011a      	lsls	r2, r3, #4
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d112      	bne.n	8004292 <HAL_PCD_EP_DB_Transmit+0x1d8>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004276:	b29a      	uxth	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29a      	uxth	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	e047      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x268>
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b3e      	cmp	r3, #62	; 0x3e
 8004296:	d811      	bhi.n	80042bc <HAL_PCD_EP_DB_Transmit+0x202>
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_PCD_EP_DB_Transmit+0x1f4>
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	3301      	adds	r3, #1
 80042ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e032      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x268>
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x218>
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	3b01      	subs	r3, #1
 80042d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e01b      	b.n	8004322 <HAL_PCD_EP_DB_Transmit+0x268>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d117      	bne.n	8004322 <HAL_PCD_EP_DB_Transmit+0x268>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	623b      	str	r3, [r7, #32]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004300:	b29b      	uxth	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	4413      	add	r3, r2
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	011a      	lsls	r2, r3, #4
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	4413      	add	r3, r2
 8004314:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431c:	b29a      	uxth	r2, r3
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	891a      	ldrh	r2, [r3, #8]
 800432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004330:	b29b      	uxth	r3, r3
 8004332:	f003 f909 	bl	8007548 <USB_WritePMA>
 8004336:	e130      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004340:	b29b      	uxth	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	3306      	adds	r3, #6
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004360:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004368:	429a      	cmp	r2, r3
 800436a:	d306      	bcc.n	800437a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	619a      	str	r2, [r3, #24]
 8004378:	e002      	b.n	8004380 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2200      	movs	r2, #0
 800437e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d12c      	bne.n	80043e2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	4619      	mov	r1, r3
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f004 fd47 	bl	8008e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80fd 	bne.w	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
 80043e0:	e0db      	b.n	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11f      	bne.n	800442c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	441a      	add	r2, r3
 8004416:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800441c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004428:	b29b      	uxth	r3, r3
 800442a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004432:	2b01      	cmp	r3, #1
 8004434:	f040 80b1 	bne.w	800459a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800443e:	441a      	add	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	69da      	ldr	r2, [r3, #28]
 8004448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800444a:	441a      	add	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	429a      	cmp	r2, r3
 800445a:	d309      	bcc.n	8004470 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	1ad2      	subs	r2, r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	621a      	str	r2, [r3, #32]
 800446e:	e014      	b.n	800449a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d106      	bne.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8004478:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800447a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004484:	e009      	b.n	800449a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2200      	movs	r2, #0
 8004490:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d155      	bne.n	8004554 <HAL_PCD_EP_DB_Transmit+0x49a>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	647b      	str	r3, [r7, #68]	; 0x44
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044bc:	4413      	add	r3, r2
 80044be:	647b      	str	r3, [r7, #68]	; 0x44
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	011a      	lsls	r2, r3, #4
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	4413      	add	r3, r2
 80044ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d112      	bne.n	80044fc <HAL_PCD_EP_DB_Transmit+0x442>
 80044d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e044      	b.n	8004586 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004500:	d811      	bhi.n	8004526 <HAL_PCD_EP_DB_Transmit+0x46c>
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_PCD_EP_DB_Transmit+0x45e>
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	3301      	adds	r3, #1
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451a:	b29b      	uxth	r3, r3
 800451c:	029b      	lsls	r3, r3, #10
 800451e:	b29a      	uxth	r2, r3
 8004520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	e02f      	b.n	8004586 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_PCD_EP_DB_Transmit+0x482>
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	3b01      	subs	r3, #1
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	b29b      	uxth	r3, r3
 8004540:	029b      	lsls	r3, r3, #10
 8004542:	b29b      	uxth	r3, r3
 8004544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800454c:	b29a      	uxth	r2, r3
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e018      	b.n	8004586 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d114      	bne.n	8004586 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004564:	b29b      	uxth	r3, r3
 8004566:	461a      	mov	r2, r3
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	4413      	add	r3, r2
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	011a      	lsls	r2, r3, #4
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	4413      	add	r3, r2
 8004578:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800457c:	633b      	str	r3, [r7, #48]	; 0x30
 800457e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004580:	b29a      	uxth	r2, r3
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	6959      	ldr	r1, [r3, #20]
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	895a      	ldrh	r2, [r3, #10]
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	b29b      	uxth	r3, r3
 8004596:	f002 ffd7 	bl	8007548 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b4:	823b      	strh	r3, [r7, #16]
 80045b6:	8a3b      	ldrh	r3, [r7, #16]
 80045b8:	f083 0310 	eor.w	r3, r3, #16
 80045bc:	823b      	strh	r3, [r7, #16]
 80045be:	8a3b      	ldrh	r3, [r7, #16]
 80045c0:	f083 0320 	eor.w	r3, r3, #32
 80045c4:	823b      	strh	r3, [r7, #16]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	8a3b      	ldrh	r3, [r7, #16]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3748      	adds	r7, #72	; 0x48
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	817b      	strh	r3, [r7, #10]
 8004602:	4613      	mov	r3, r2
 8004604:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004606:	897b      	ldrh	r3, [r7, #10]
 8004608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004612:	897b      	ldrh	r3, [r7, #10]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e009      	b.n	800463e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800462a:	897a      	ldrh	r2, [r7, #10]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d107      	bne.n	8004654 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2200      	movs	r2, #0
 8004648:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	b29a      	uxth	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	80da      	strh	r2, [r3, #6]
 8004652:	e00b      	b.n	800466c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2201      	movs	r2, #1
 8004658:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	b29a      	uxth	r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	b29a      	uxth	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e26c      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 8087 	beq.w	80047a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004698:	4b92      	ldr	r3, [pc, #584]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d00c      	beq.n	80046be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046a4:	4b8f      	ldr	r3, [pc, #572]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d112      	bne.n	80046d6 <HAL_RCC_OscConfig+0x5e>
 80046b0:	4b8c      	ldr	r3, [pc, #560]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046bc:	d10b      	bne.n	80046d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046be:	4b89      	ldr	r3, [pc, #548]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d06c      	beq.n	80047a4 <HAL_RCC_OscConfig+0x12c>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d168      	bne.n	80047a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e246      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046de:	d106      	bne.n	80046ee <HAL_RCC_OscConfig+0x76>
 80046e0:	4b80      	ldr	r3, [pc, #512]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a7f      	ldr	r2, [pc, #508]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e02e      	b.n	800474c <HAL_RCC_OscConfig+0xd4>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10c      	bne.n	8004710 <HAL_RCC_OscConfig+0x98>
 80046f6:	4b7b      	ldr	r3, [pc, #492]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a7a      	ldr	r2, [pc, #488]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b78      	ldr	r3, [pc, #480]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a77      	ldr	r2, [pc, #476]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e01d      	b.n	800474c <HAL_RCC_OscConfig+0xd4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004718:	d10c      	bne.n	8004734 <HAL_RCC_OscConfig+0xbc>
 800471a:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a71      	ldr	r2, [pc, #452]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	4b6f      	ldr	r3, [pc, #444]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a6e      	ldr	r2, [pc, #440]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800472c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e00b      	b.n	800474c <HAL_RCC_OscConfig+0xd4>
 8004734:	4b6b      	ldr	r3, [pc, #428]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a6a      	ldr	r2, [pc, #424]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800473a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b68      	ldr	r3, [pc, #416]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a67      	ldr	r2, [pc, #412]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800474a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d013      	beq.n	800477c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004754:	f7fd ff48 	bl	80025e8 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fd ff44 	bl	80025e8 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e1fa      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	4b5d      	ldr	r3, [pc, #372]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCC_OscConfig+0xe4>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd ff34 	bl	80025e8 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd ff30 	bl	80025e8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1e6      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x10c>
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047b2:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 030c 	and.w	r3, r3, #12
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00b      	beq.n	80047d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047be:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d11c      	bne.n	8004804 <HAL_RCC_OscConfig+0x18c>
 80047ca:	4b46      	ldr	r3, [pc, #280]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d116      	bne.n	8004804 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	4b43      	ldr	r3, [pc, #268]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d005      	beq.n	80047ee <HAL_RCC_OscConfig+0x176>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e1ba      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ee:	4b3d      	ldr	r3, [pc, #244]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4939      	ldr	r1, [pc, #228]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004802:	e03a      	b.n	800487a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d020      	beq.n	800484e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480c:	4b36      	ldr	r3, [pc, #216]	; (80048e8 <HAL_RCC_OscConfig+0x270>)
 800480e:	2201      	movs	r2, #1
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fd fee9 	bl	80025e8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7fd fee5 	bl	80025e8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e19b      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	4927      	ldr	r1, [pc, #156]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004848:	4313      	orrs	r3, r2
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	e015      	b.n	800487a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <HAL_RCC_OscConfig+0x270>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd fec8 	bl	80025e8 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fd fec4 	bl	80025e8 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e17a      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	4b1d      	ldr	r3, [pc, #116]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03a      	beq.n	80048fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d019      	beq.n	80048c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800488e:	4b17      	ldr	r3, [pc, #92]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004894:	f7fd fea8 	bl	80025e8 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fd fea4 	bl	80025e8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e15a      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <HAL_RCC_OscConfig+0x26c>)
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0f0      	beq.n	800489c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048ba:	2001      	movs	r0, #1
 80048bc:	f000 faa8 	bl	8004e10 <RCC_Delay>
 80048c0:	e01c      	b.n	80048fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c2:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_RCC_OscConfig+0x274>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c8:	f7fd fe8e 	bl	80025e8 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ce:	e00f      	b.n	80048f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d0:	f7fd fe8a 	bl	80025e8 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d908      	bls.n	80048f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e140      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	42420000 	.word	0x42420000
 80048ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	4b9e      	ldr	r3, [pc, #632]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e9      	bne.n	80048d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80a6 	beq.w	8004a56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490e:	4b97      	ldr	r3, [pc, #604]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10d      	bne.n	8004936 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	4b94      	ldr	r3, [pc, #592]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4a93      	ldr	r2, [pc, #588]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004924:	61d3      	str	r3, [r2, #28]
 8004926:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004932:	2301      	movs	r3, #1
 8004934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004936:	4b8e      	ldr	r3, [pc, #568]	; (8004b70 <HAL_RCC_OscConfig+0x4f8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d118      	bne.n	8004974 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004942:	4b8b      	ldr	r3, [pc, #556]	; (8004b70 <HAL_RCC_OscConfig+0x4f8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a8a      	ldr	r2, [pc, #552]	; (8004b70 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800494e:	f7fd fe4b 	bl	80025e8 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004956:	f7fd fe47 	bl	80025e8 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b64      	cmp	r3, #100	; 0x64
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e0fd      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004968:	4b81      	ldr	r3, [pc, #516]	; (8004b70 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d106      	bne.n	800498a <HAL_RCC_OscConfig+0x312>
 800497c:	4b7b      	ldr	r3, [pc, #492]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a7a      	ldr	r2, [pc, #488]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	e02d      	b.n	80049e6 <HAL_RCC_OscConfig+0x36e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10c      	bne.n	80049ac <HAL_RCC_OscConfig+0x334>
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	4a75      	ldr	r2, [pc, #468]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	6213      	str	r3, [r2, #32]
 800499e:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	4a72      	ldr	r2, [pc, #456]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049a4:	f023 0304 	bic.w	r3, r3, #4
 80049a8:	6213      	str	r3, [r2, #32]
 80049aa:	e01c      	b.n	80049e6 <HAL_RCC_OscConfig+0x36e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b05      	cmp	r3, #5
 80049b2:	d10c      	bne.n	80049ce <HAL_RCC_OscConfig+0x356>
 80049b4:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	4a6c      	ldr	r2, [pc, #432]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	6213      	str	r3, [r2, #32]
 80049c0:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	6213      	str	r3, [r2, #32]
 80049cc:	e00b      	b.n	80049e6 <HAL_RCC_OscConfig+0x36e>
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	4a66      	ldr	r2, [pc, #408]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	6213      	str	r3, [r2, #32]
 80049da:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	4a63      	ldr	r2, [pc, #396]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 80049e0:	f023 0304 	bic.w	r3, r3, #4
 80049e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d015      	beq.n	8004a1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fd fdfb 	bl	80025e8 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fd fdf7 	bl	80025e8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e0ab      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0ee      	beq.n	80049f6 <HAL_RCC_OscConfig+0x37e>
 8004a18:	e014      	b.n	8004a44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7fd fde5 	bl	80025e8 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fd fde1 	bl	80025e8 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e095      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a38:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ee      	bne.n	8004a22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4a:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	4a47      	ldr	r2, [pc, #284]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8081 	beq.w	8004b62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a60:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 030c 	and.w	r3, r3, #12
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d061      	beq.n	8004b30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d146      	bne.n	8004b02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a74:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_OscConfig+0x4fc>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fdb5 	bl	80025e8 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fdb1 	bl	80025e8 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e067      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f0      	bne.n	8004a82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa8:	d108      	bne.n	8004abc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	492d      	ldr	r1, [pc, #180]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004abc:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a19      	ldr	r1, [r3, #32]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	430b      	orrs	r3, r1
 8004ace:	4927      	ldr	r1, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_OscConfig+0x4fc>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ada:	f7fd fd85 	bl	80025e8 <HAL_GetTick>
 8004ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae0:	e008      	b.n	8004af4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae2:	f7fd fd81 	bl	80025e8 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e037      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x46a>
 8004b00:	e02f      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <HAL_RCC_OscConfig+0x4fc>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fd fd6e 	bl	80025e8 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fd fd6a 	bl	80025e8 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e020      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x498>
 8004b2e:	e018      	b.n	8004b62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e013      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCC_OscConfig+0x4f4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
 8004b74:	42420060 	.word	0x42420060

08004b78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0d0      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b6a      	ldr	r3, [pc, #424]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d910      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4965      	ldr	r1, [pc, #404]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b63      	ldr	r3, [pc, #396]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0b8      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d020      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bde:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bec:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a52      	ldr	r2, [pc, #328]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bf6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b50      	ldr	r3, [pc, #320]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	494d      	ldr	r1, [pc, #308]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d040      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d115      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e07f      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b41      	ldr	r3, [pc, #260]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d109      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e073      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e06b      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c56:	4b39      	ldr	r3, [pc, #228]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f023 0203 	bic.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4936      	ldr	r1, [pc, #216]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fd fcbe 	bl	80025e8 <HAL_GetTick>
 8004c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	e00a      	b.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c70:	f7fd fcba 	bl	80025e8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e053      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b2d      	ldr	r3, [pc, #180]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 020c 	and.w	r2, r3, #12
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1eb      	bne.n	8004c70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d210      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f023 0207 	bic.w	r2, r3, #7
 8004cae:	4922      	ldr	r1, [pc, #136]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b20      	ldr	r3, [pc, #128]	; (8004d38 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e032      	b.n	8004d2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4916      	ldr	r1, [pc, #88]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	490e      	ldr	r1, [pc, #56]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d06:	f000 f821 	bl	8004d4c <HAL_RCC_GetSysClockFreq>
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	4a0a      	ldr	r2, [pc, #40]	; (8004d40 <HAL_RCC_ClockConfig+0x1c8>)
 8004d18:	5cd3      	ldrb	r3, [r2, r3]
 8004d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_RCC_ClockConfig+0x1cc>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCC_ClockConfig+0x1d0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fc1c 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40022000 	.word	0x40022000
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	0800948c 	.word	0x0800948c
 8004d44:	20000004 	.word	0x20000004
 8004d48:	20000008 	.word	0x20000008

08004d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d4c:	b490      	push	{r4, r7}
 8004d4e:	b08a      	sub	sp, #40	; 0x28
 8004d50:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d52:	4b2a      	ldr	r3, [pc, #168]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d54:	1d3c      	adds	r4, r7, #4
 8004d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d5c:	4b28      	ldr	r3, [pc, #160]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	2300      	movs	r3, #0
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d76:	4b23      	ldr	r3, [pc, #140]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d002      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x40>
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0x46>
 8004d8a:	e02d      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d8e:	623b      	str	r3, [r7, #32]
      break;
 8004d90:	e02d      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	0c9b      	lsrs	r3, r3, #18
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d9e:	4413      	add	r3, r2
 8004da0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004da4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004db0:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	0c5b      	lsrs	r3, r3, #17
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4a0f      	ldr	r2, [pc, #60]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dca:	fb02 f203 	mul.w	r2, r2, r3
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e004      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	623b      	str	r3, [r7, #32]
      break;
 8004de6:	e002      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dea:	623b      	str	r3, [r7, #32]
      break;
 8004dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dee:	6a3b      	ldr	r3, [r7, #32]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	; 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc90      	pop	{r4, r7}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	08009324 	.word	0x08009324
 8004e00:	08009334 	.word	0x08009334
 8004e04:	40021000 	.word	0x40021000
 8004e08:	007a1200 	.word	0x007a1200
 8004e0c:	003d0900 	.word	0x003d0900

08004e10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <RCC_Delay+0x34>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <RCC_Delay+0x38>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	0a5b      	lsrs	r3, r3, #9
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e2c:	bf00      	nop
  }
  while (Delay --);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	60fa      	str	r2, [r7, #12]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f9      	bne.n	8004e2c <RCC_Delay+0x1c>
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20000004 	.word	0x20000004
 8004e48:	10624dd3 	.word	0x10624dd3

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d07d      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6c:	4b4f      	ldr	r3, [pc, #316]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e78:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4a4b      	ldr	r2, [pc, #300]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e82:	61d3      	str	r3, [r2, #28]
 8004e84:	4b49      	ldr	r3, [pc, #292]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e90:	2301      	movs	r3, #1
 8004e92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e94:	4b46      	ldr	r3, [pc, #280]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d118      	bne.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea0:	4b43      	ldr	r3, [pc, #268]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a42      	ldr	r2, [pc, #264]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eac:	f7fd fb9c 	bl	80025e8 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fd fb98 	bl	80025e8 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	; 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e06d      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eda:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d02e      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d027      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef0:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f00:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f06:	4a29      	ldr	r2, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d014      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fd fb67 	bl	80025e8 <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	e00a      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fd fb63 	bl	80025e8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e036      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ee      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	4917      	ldr	r1, [pc, #92]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f58:	4b14      	ldr	r3, [pc, #80]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f70:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	490b      	ldr	r1, [pc, #44]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f8e:	4b07      	ldr	r3, [pc, #28]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	4904      	ldr	r1, [pc, #16]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	40007000 	.word	0x40007000
 8004fb4:	42420440 	.word	0x42420440

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e041      	b.n	800504e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fd fa66 	bl	80024b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 f930 	bl	800525c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e032      	b.n	80050d6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a18      	ldr	r2, [pc, #96]	; (80050e0 <HAL_TIM_Base_Start+0x88>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_Base_Start+0x48>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_Base_Start+0x48>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <HAL_TIM_Base_Start+0x8c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_Base_Start+0x48>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <HAL_TIM_Base_Start+0x90>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d111      	bne.n	80050c4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d010      	beq.n	80050d4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0201 	orr.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	e007      	b.n	80050d4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800

080050ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_TIM_ConfigClockSource+0x18>
 8005100:	2302      	movs	r3, #2
 8005102:	e0a6      	b.n	8005252 <HAL_TIM_ConfigClockSource+0x166>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005122:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800512a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d067      	beq.n	800520c <HAL_TIM_ConfigClockSource+0x120>
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d80b      	bhi.n	8005158 <HAL_TIM_ConfigClockSource+0x6c>
 8005140:	2b10      	cmp	r3, #16
 8005142:	d073      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
 8005144:	2b10      	cmp	r3, #16
 8005146:	d802      	bhi.n	800514e <HAL_TIM_ConfigClockSource+0x62>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d06f      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800514c:	e078      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800514e:	2b20      	cmp	r3, #32
 8005150:	d06c      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
 8005152:	2b30      	cmp	r3, #48	; 0x30
 8005154:	d06a      	beq.n	800522c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005156:	e073      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005158:	2b70      	cmp	r3, #112	; 0x70
 800515a:	d00d      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x8c>
 800515c:	2b70      	cmp	r3, #112	; 0x70
 800515e:	d804      	bhi.n	800516a <HAL_TIM_ConfigClockSource+0x7e>
 8005160:	2b50      	cmp	r3, #80	; 0x50
 8005162:	d033      	beq.n	80051cc <HAL_TIM_ConfigClockSource+0xe0>
 8005164:	2b60      	cmp	r3, #96	; 0x60
 8005166:	d041      	beq.n	80051ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005168:	e06a      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d066      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x152>
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005174:	d017      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005176:	e063      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6899      	ldr	r1, [r3, #8]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f000 f941 	bl	800540e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800519a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]
      break;
 80051a4:	e04c      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6899      	ldr	r1, [r3, #8]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f000 f92a 	bl	800540e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051c8:	609a      	str	r2, [r3, #8]
      break;
 80051ca:	e039      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	461a      	mov	r2, r3
 80051da:	f000 f8a1 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2150      	movs	r1, #80	; 0x50
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 f8f8 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 80051ea:	e029      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6859      	ldr	r1, [r3, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f000 f8bf 	bl	800537c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2160      	movs	r1, #96	; 0x60
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f8e8 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 800520a:	e019      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	461a      	mov	r2, r3
 800521a:	f000 f881 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2140      	movs	r1, #64	; 0x40
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f8d8 	bl	80053da <TIM_ITRx_SetConfig>
      break;
 800522a:	e009      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 f8cf 	bl	80053da <TIM_ITRx_SetConfig>
        break;
 800523c:	e000      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800523e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_Base_SetConfig+0xb8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x30>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x30>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a26      	ldr	r2, [pc, #152]	; (8005318 <TIM_Base_SetConfig+0xbc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x30>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a25      	ldr	r2, [pc, #148]	; (800531c <TIM_Base_SetConfig+0xc0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d108      	bne.n	800529e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	4313      	orrs	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <TIM_Base_SetConfig+0xb8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0x62>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0x62>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a19      	ldr	r2, [pc, #100]	; (8005318 <TIM_Base_SetConfig+0xbc>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0x62>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a18      	ldr	r2, [pc, #96]	; (800531c <TIM_Base_SetConfig+0xc0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a07      	ldr	r2, [pc, #28]	; (8005314 <TIM_Base_SetConfig+0xb8>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d103      	bne.n	8005304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	615a      	str	r2, [r3, #20]
}
 800530a:	bf00      	nop
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40000400 	.word	0x40000400
 800531c:	40000800 	.word	0x40000800

08005320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f023 0210 	bic.w	r2, r3, #16
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	031b      	lsls	r3, r3, #12
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f043 0307 	orr.w	r3, r3, #7
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	609a      	str	r2, [r3, #8]
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	431a      	orrs	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	4313      	orrs	r3, r2
 800543a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	609a      	str	r2, [r3, #8]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545c:	2b01      	cmp	r3, #1
 800545e:	d101      	bne.n	8005464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005460:	2302      	movs	r3, #2
 8005462:	e046      	b.n	80054f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a16      	ldr	r2, [pc, #88]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b0:	d009      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a12      	ldr	r2, [pc, #72]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a10      	ldr	r2, [pc, #64]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d10c      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40000400 	.word	0x40000400
 8005504:	40000800 	.word	0x40000800

08005508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005508:	b084      	sub	sp, #16
 800550a:	b480      	push	{r7}
 800550c:	b083      	sub	sp, #12
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	f107 0014 	add.w	r0, r7, #20
 8005516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	b004      	add	sp, #16
 8005526:	4770      	bx	lr

08005528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005538:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800553c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	b29a      	uxth	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800555c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005560:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	b29b      	uxth	r3, r3
 800556e:	43db      	mvns	r3, r3
 8005570:	b29b      	uxth	r3, r3
 8005572:	4013      	ands	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	bc80      	pop	{r7}
 800559e:	4770      	bx	lr

080055a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055a0:	b084      	sub	sp, #16
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	f107 0014 	add.w	r0, r7, #20
 80055ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	b004      	add	sp, #16
 80055de:	4770      	bx	lr

080055e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b09b      	sub	sp, #108	; 0x6c
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	2b03      	cmp	r3, #3
 8005610:	d81f      	bhi.n	8005652 <USB_ActivateEndpoint+0x72>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <USB_ActivateEndpoint+0x38>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	08005629 	.word	0x08005629
 800561c:	08005645 	.word	0x08005645
 8005620:	0800565b 	.word	0x0800565b
 8005624:	08005637 	.word	0x08005637
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005628:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800562c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005630:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005634:	e012      	b.n	800565c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005636:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800563a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800563e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005642:	e00b      	b.n	800565c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005644:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005648:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800564c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005650:	e004      	b.n	800565c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005658:	e000      	b.n	800565c <USB_ActivateEndpoint+0x7c>
      break;
 800565a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	441a      	add	r2, r3
 8005666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	b29a      	uxth	r2, r3
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	4313      	orrs	r3, r2
 800569e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	441a      	add	r2, r3
 80056ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	7b1b      	ldrb	r3, [r3, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 8149 	bne.w	8005960 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8084 	beq.w	80057e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	4413      	add	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	011a      	lsls	r2, r3, #4
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	88db      	ldrh	r3, [r3, #6]
 8005700:	085b      	lsrs	r3, r3, #1
 8005702:	b29b      	uxth	r3, r3
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	81fb      	strh	r3, [r7, #14]
 800571a:	89fb      	ldrh	r3, [r7, #14]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d01b      	beq.n	800575c <USB_ActivateEndpoint+0x17c>
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	81bb      	strh	r3, [r7, #12]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	89bb      	ldrh	r3, [r7, #12]
 8005748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800574c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005758:	b29b      	uxth	r3, r3
 800575a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	78db      	ldrb	r3, [r3, #3]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d020      	beq.n	80057a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4413      	add	r3, r2
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577a:	813b      	strh	r3, [r7, #8]
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	f083 0320 	eor.w	r3, r3, #32
 8005782:	813b      	strh	r3, [r7, #8]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	441a      	add	r2, r3
 800578e:	893b      	ldrh	r3, [r7, #8]
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
 80057a4:	e27f      	b.n	8005ca6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	817b      	strh	r3, [r7, #10]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	441a      	add	r2, r3
 80057c8:	897b      	ldrh	r3, [r7, #10]
 80057ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057da:	b29b      	uxth	r3, r3
 80057dc:	8013      	strh	r3, [r2, #0]
 80057de:	e262      	b.n	8005ca6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	4413      	add	r3, r2
 80057f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	011a      	lsls	r2, r3, #4
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	88db      	ldrh	r3, [r3, #6]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	b29b      	uxth	r3, r3
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	b29a      	uxth	r2, r3
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	4413      	add	r3, r2
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	4413      	add	r3, r2
 8005832:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005836:	623b      	str	r3, [r7, #32]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d112      	bne.n	8005866 <USB_ActivateEndpoint+0x286>
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800584a:	b29a      	uxth	r2, r3
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e02f      	b.n	80058c6 <USB_ActivateEndpoint+0x2e6>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b3e      	cmp	r3, #62	; 0x3e
 800586c:	d813      	bhi.n	8005896 <USB_ActivateEndpoint+0x2b6>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	663b      	str	r3, [r7, #96]	; 0x60
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <USB_ActivateEndpoint+0x2a8>
 8005882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005884:	3301      	adds	r3, #1
 8005886:	663b      	str	r3, [r7, #96]	; 0x60
 8005888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800588a:	b29b      	uxth	r3, r3
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	b29a      	uxth	r2, r3
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e017      	b.n	80058c6 <USB_ActivateEndpoint+0x2e6>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	663b      	str	r3, [r7, #96]	; 0x60
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <USB_ActivateEndpoint+0x2d0>
 80058aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ac:	3b01      	subs	r3, #1
 80058ae:	663b      	str	r3, [r7, #96]	; 0x60
 80058b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	029b      	lsls	r3, r3, #10
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	83fb      	strh	r3, [r7, #30]
 80058d4:	8bfb      	ldrh	r3, [r7, #30]
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01b      	beq.n	8005916 <USB_ActivateEndpoint+0x336>
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	4413      	add	r3, r2
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	83bb      	strh	r3, [r7, #28]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	441a      	add	r2, r3
 8005900:	8bbb      	ldrh	r3, [r7, #28]
 8005902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800590a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	b29b      	uxth	r3, r3
 8005914:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	837b      	strh	r3, [r7, #26]
 800592e:	8b7b      	ldrh	r3, [r7, #26]
 8005930:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005934:	837b      	strh	r3, [r7, #26]
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800593c:	837b      	strh	r3, [r7, #26]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	441a      	add	r2, r3
 8005948:	8b7b      	ldrh	r3, [r7, #26]
 800594a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595a:	b29b      	uxth	r3, r3
 800595c:	8013      	strh	r3, [r2, #0]
 800595e:	e1a2      	b.n	8005ca6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	b29b      	uxth	r3, r3
 800596e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	441a      	add	r2, r3
 8005984:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800598c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005990:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005998:	b29b      	uxth	r3, r3
 800599a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	65bb      	str	r3, [r7, #88]	; 0x58
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ac:	4413      	add	r3, r2
 80059ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	011a      	lsls	r2, r3, #4
 80059b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059be:	657b      	str	r3, [r7, #84]	; 0x54
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	891b      	ldrh	r3, [r3, #8]
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	653b      	str	r3, [r7, #80]	; 0x50
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e0:	4413      	add	r3, r2
 80059e2:	653b      	str	r3, [r7, #80]	; 0x50
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	895b      	ldrh	r3, [r3, #10]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a02:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f040 8091 	bne.w	8005b30 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005a1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01b      	beq.n	8005a5e <USB_ActivateEndpoint+0x47e>
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	441a      	add	r2, r3
 8005a48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01b      	beq.n	8005aae <USB_ActivateEndpoint+0x4ce>
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ac6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ac8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005acc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ace:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ad0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ad4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	441a      	add	r2, r3
 8005ae0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b0c:	867b      	strh	r3, [r7, #50]	; 0x32
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	441a      	add	r2, r3
 8005b18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	8013      	strh	r3, [r2, #0]
 8005b2e:	e0ba      	b.n	8005ca6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005b40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01d      	beq.n	8005b88 <USB_ActivateEndpoint+0x5a8>
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005b98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d01d      	beq.n	8005be0 <USB_ActivateEndpoint+0x600>
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	441a      	add	r2, r3
 8005bc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d024      	beq.n	8005c32 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c06:	f083 0320 	eor.w	r3, r3, #32
 8005c0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	441a      	add	r2, r3
 8005c18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	8013      	strh	r3, [r2, #0]
 8005c30:	e01d      	b.n	8005c6e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	376c      	adds	r7, #108	; 0x6c
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b08d      	sub	sp, #52	; 0x34
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	7b1b      	ldrb	r3, [r3, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f040 808e 	bne.w	8005de4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d044      	beq.n	8005d5a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	81bb      	strh	r3, [r7, #12]
 8005cde:	89bb      	ldrh	r3, [r7, #12]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01b      	beq.n	8005d20 <USB_DeactivateEndpoint+0x6c>
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cfe:	817b      	strh	r3, [r7, #10]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	441a      	add	r2, r3
 8005d0a:	897b      	ldrh	r3, [r7, #10]
 8005d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	813b      	strh	r3, [r7, #8]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	893b      	ldrh	r3, [r7, #8]
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
 8005d58:	e192      	b.n	8006080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	827b      	strh	r3, [r7, #18]
 8005d68:	8a7b      	ldrh	r3, [r7, #18]
 8005d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01b      	beq.n	8005daa <USB_DeactivateEndpoint+0xf6>
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	823b      	strh	r3, [r7, #16]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8a3b      	ldrh	r3, [r7, #16]
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	81fb      	strh	r3, [r7, #14]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8013      	strh	r3, [r2, #0]
 8005de2:	e14d      	b.n	8006080 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 80a5 	bne.w	8005f38 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	843b      	strh	r3, [r7, #32]
 8005dfc:	8c3b      	ldrh	r3, [r7, #32]
 8005dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01b      	beq.n	8005e3e <USB_DeactivateEndpoint+0x18a>
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	83fb      	strh	r3, [r7, #30]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	441a      	add	r2, r3
 8005e28:	8bfb      	ldrh	r3, [r7, #30]
 8005e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	83bb      	strh	r3, [r7, #28]
 8005e4c:	8bbb      	ldrh	r3, [r7, #28]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d01b      	beq.n	8005e8e <USB_DeactivateEndpoint+0x1da>
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	837b      	strh	r3, [r7, #26]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	8b7b      	ldrh	r3, [r7, #26]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea4:	833b      	strh	r3, [r7, #24]
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	441a      	add	r2, r3
 8005eb0:	8b3b      	ldrh	r3, [r7, #24]
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005edc:	82fb      	strh	r3, [r7, #22]
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	441a      	add	r2, r3
 8005ee8:	8afb      	ldrh	r3, [r7, #22]
 8005eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	82bb      	strh	r3, [r7, #20]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	8abb      	ldrh	r3, [r7, #20]
 8005f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	8013      	strh	r3, [r2, #0]
 8005f36:	e0a3      	b.n	8006080 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005f46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <USB_DeactivateEndpoint+0x2d4>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005f96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01b      	beq.n	8005fd8 <USB_DeactivateEndpoint+0x324>
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3734      	adds	r7, #52	; 0x34
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0c4      	sub	sp, #272	; 0x110
 8006090:	af00      	add	r7, sp, #0
 8006092:	1d3b      	adds	r3, r7, #4
 8006094:	6018      	str	r0, [r3, #0]
 8006096:	463b      	mov	r3, r7
 8006098:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800609a:	463b      	mov	r3, r7
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	785b      	ldrb	r3, [r3, #1]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	f040 8557 	bne.w	8006b54 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80060a6:	463b      	mov	r3, r7
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699a      	ldr	r2, [r3, #24]
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d905      	bls.n	80060c2 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80060b6:	463b      	mov	r3, r7
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060c0:	e004      	b.n	80060cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80060c2:	463b      	mov	r3, r7
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	7b1b      	ldrb	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d12c      	bne.n	8006130 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060d6:	463b      	mov	r3, r7
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6959      	ldr	r1, [r3, #20]
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	88da      	ldrh	r2, [r3, #6]
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	1d38      	adds	r0, r7, #4
 80060ea:	6800      	ldr	r0, [r0, #0]
 80060ec:	f001 fa2c 	bl	8007548 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060f0:	1d3b      	adds	r3, r7, #4
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	011a      	lsls	r2, r3, #4
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	601a      	str	r2, [r3, #0]
 800611e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006122:	b29a      	uxth	r2, r3
 8006124:	f107 0310 	add.w	r3, r7, #16
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	f000 bcdd 	b.w	8006aea <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006130:	463b      	mov	r3, r7
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	78db      	ldrb	r3, [r3, #3]
 8006136:	2b02      	cmp	r3, #2
 8006138:	f040 8347 	bne.w	80067ca <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	463b      	mov	r3, r7
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	f240 82eb 	bls.w	8006724 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800614e:	1d3b      	adds	r3, r7, #4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006168:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	463b      	mov	r3, r7
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800617e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006186:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800618a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618e:	b29b      	uxth	r3, r3
 8006190:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6a1a      	ldr	r2, [r3, #32]
 8006198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800619c:	1ad2      	subs	r2, r2, r3
 800619e:	463b      	mov	r3, r7
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80061a4:	1d3b      	adds	r3, r7, #4
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 8159 	beq.w	8006472 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	785b      	ldrb	r3, [r3, #1]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d164      	bne.n	800629a <USB_EPStartXfer+0x20e>
 80061d0:	1d3b      	adds	r3, r7, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d6:	1d3b      	adds	r3, r7, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061de:	b29b      	uxth	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	4413      	add	r3, r2
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061e8:	463b      	mov	r3, r7
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	011a      	lsls	r2, r3, #4
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	4413      	add	r3, r2
 80061f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d112      	bne.n	8006228 <USB_EPStartXfer+0x19c>
 8006202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800620c:	b29a      	uxth	r2, r3
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e054      	b.n	80062d2 <USB_EPStartXfer+0x246>
 8006228:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622c:	2b3e      	cmp	r3, #62	; 0x3e
 800622e:	d817      	bhi.n	8006260 <USB_EPStartXfer+0x1d4>
 8006230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800623a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <USB_EPStartXfer+0x1c4>
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624a:	3301      	adds	r3, #1
 800624c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	b29b      	uxth	r3, r3
 8006256:	029b      	lsls	r3, r3, #10
 8006258:	b29a      	uxth	r2, r3
 800625a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	e038      	b.n	80062d2 <USB_EPStartXfer+0x246>
 8006260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800626a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <USB_EPStartXfer+0x1f4>
 8006276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800627a:	3b01      	subs	r3, #1
 800627c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006284:	b29b      	uxth	r3, r3
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800628e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006292:	b29a      	uxth	r2, r3
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	e01b      	b.n	80062d2 <USB_EPStartXfer+0x246>
 800629a:	463b      	mov	r3, r7
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d116      	bne.n	80062d2 <USB_EPStartXfer+0x246>
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062b2:	4413      	add	r3, r2
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	463b      	mov	r3, r7
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	011a      	lsls	r2, r3, #4
 80062be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c0:	4413      	add	r3, r2
 80062c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062c6:	633b      	str	r3, [r7, #48]	; 0x30
 80062c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	895b      	ldrh	r3, [r3, #10]
 80062d8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062dc:	463b      	mov	r3, r7
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6959      	ldr	r1, [r3, #20]
 80062e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80062ec:	1d38      	adds	r0, r7, #4
 80062ee:	6800      	ldr	r0, [r0, #0]
 80062f0:	f001 f92a 	bl	8007548 <USB_WritePMA>
            ep->xfer_buff += len;
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062fe:	441a      	add	r2, r3
 8006300:	463b      	mov	r3, r7
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006306:	463b      	mov	r3, r7
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	463b      	mov	r3, r7
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d909      	bls.n	800632a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8006316:	463b      	mov	r3, r7
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006320:	1ad2      	subs	r2, r2, r3
 8006322:	463b      	mov	r3, r7
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	621a      	str	r2, [r3, #32]
 8006328:	e008      	b.n	800633c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2200      	movs	r2, #0
 800633a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800633c:	463b      	mov	r3, r7
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d164      	bne.n	8006410 <USB_EPStartXfer+0x384>
 8006346:	1d3b      	adds	r3, r7, #4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006354:	b29b      	uxth	r3, r3
 8006356:	461a      	mov	r2, r3
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	011a      	lsls	r2, r3, #4
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d112      	bne.n	800639e <USB_EPStartXfer+0x312>
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006382:	b29a      	uxth	r2, r3
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e057      	b.n	800644e <USB_EPStartXfer+0x3c2>
 800639e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063a2:	2b3e      	cmp	r3, #62	; 0x3e
 80063a4:	d817      	bhi.n	80063d6 <USB_EPStartXfer+0x34a>
 80063a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <USB_EPStartXfer+0x33a>
 80063bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c0:	3301      	adds	r3, #1
 80063c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	b29a      	uxth	r2, r3
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	801a      	strh	r2, [r3, #0]
 80063d4:	e03b      	b.n	800644e <USB_EPStartXfer+0x3c2>
 80063d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <USB_EPStartXfer+0x36a>
 80063ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063f0:	3b01      	subs	r3, #1
 80063f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	029b      	lsls	r3, r3, #10
 80063fe:	b29b      	uxth	r3, r3
 8006400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006408:	b29a      	uxth	r2, r3
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e01e      	b.n	800644e <USB_EPStartXfer+0x3c2>
 8006410:	463b      	mov	r3, r7
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d119      	bne.n	800644e <USB_EPStartXfer+0x3c2>
 800641a:	1d3b      	adds	r3, r7, #4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	1d3b      	adds	r3, r7, #4
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	4413      	add	r3, r2
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	011a      	lsls	r2, r3, #4
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	4413      	add	r3, r2
 800643e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006442:	623b      	str	r3, [r7, #32]
 8006444:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006448:	b29a      	uxth	r2, r3
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800644e:	463b      	mov	r3, r7
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	891b      	ldrh	r3, [r3, #8]
 8006454:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006458:	463b      	mov	r3, r7
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6959      	ldr	r1, [r3, #20]
 800645e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006462:	b29b      	uxth	r3, r3
 8006464:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006468:	1d38      	adds	r0, r7, #4
 800646a:	6800      	ldr	r0, [r0, #0]
 800646c:	f001 f86c 	bl	8007548 <USB_WritePMA>
 8006470:	e33b      	b.n	8006aea <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006472:	463b      	mov	r3, r7
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d164      	bne.n	8006546 <USB_EPStartXfer+0x4ba>
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800648a:	b29b      	uxth	r3, r3
 800648c:	461a      	mov	r2, r3
 800648e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006490:	4413      	add	r3, r2
 8006492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006494:	463b      	mov	r3, r7
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	011a      	lsls	r2, r3, #4
 800649c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800649e:	4413      	add	r3, r2
 80064a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80064a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d112      	bne.n	80064d4 <USB_EPStartXfer+0x448>
 80064ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e057      	b.n	8006584 <USB_EPStartXfer+0x4f8>
 80064d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d8:	2b3e      	cmp	r3, #62	; 0x3e
 80064da:	d817      	bhi.n	800650c <USB_EPStartXfer+0x480>
 80064dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <USB_EPStartXfer+0x470>
 80064f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f6:	3301      	adds	r3, #1
 80064f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006500:	b29b      	uxth	r3, r3
 8006502:	029b      	lsls	r3, r3, #10
 8006504:	b29a      	uxth	r2, r3
 8006506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006508:	801a      	strh	r2, [r3, #0]
 800650a:	e03b      	b.n	8006584 <USB_EPStartXfer+0x4f8>
 800650c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <USB_EPStartXfer+0x4a0>
 8006522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006526:	3b01      	subs	r3, #1
 8006528:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800652c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	e01e      	b.n	8006584 <USB_EPStartXfer+0x4f8>
 8006546:	463b      	mov	r3, r7
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d119      	bne.n	8006584 <USB_EPStartXfer+0x4f8>
 8006550:	1d3b      	adds	r3, r7, #4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	657b      	str	r3, [r7, #84]	; 0x54
 8006556:	1d3b      	adds	r3, r7, #4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006564:	4413      	add	r3, r2
 8006566:	657b      	str	r3, [r7, #84]	; 0x54
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	011a      	lsls	r2, r3, #4
 8006570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006572:	4413      	add	r3, r2
 8006574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006578:	653b      	str	r3, [r7, #80]	; 0x50
 800657a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800657e:	b29a      	uxth	r2, r3
 8006580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	891b      	ldrh	r3, [r3, #8]
 800658a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800658e:	463b      	mov	r3, r7
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6959      	ldr	r1, [r3, #20]
 8006594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006598:	b29b      	uxth	r3, r3
 800659a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800659e:	1d38      	adds	r0, r7, #4
 80065a0:	6800      	ldr	r0, [r0, #0]
 80065a2:	f000 ffd1 	bl	8007548 <USB_WritePMA>
            ep->xfer_buff += len;
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695a      	ldr	r2, [r3, #20]
 80065ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b0:	441a      	add	r2, r3
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80065b8:	463b      	mov	r3, r7
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d909      	bls.n	80065dc <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	621a      	str	r2, [r3, #32]
 80065da:	e008      	b.n	80065ee <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 80065dc:	463b      	mov	r3, r7
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
 80065f4:	463b      	mov	r3, r7
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d164      	bne.n	80066c8 <USB_EPStartXfer+0x63c>
 80065fe:	1d3b      	adds	r3, r7, #4
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660c:	b29b      	uxth	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006612:	4413      	add	r3, r2
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006620:	4413      	add	r3, r2
 8006622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006626:	63bb      	str	r3, [r7, #56]	; 0x38
 8006628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800662c:	2b00      	cmp	r3, #0
 800662e:	d112      	bne.n	8006656 <USB_EPStartXfer+0x5ca>
 8006630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663a:	b29a      	uxth	r2, r3
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e054      	b.n	8006700 <USB_EPStartXfer+0x674>
 8006656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800665a:	2b3e      	cmp	r3, #62	; 0x3e
 800665c:	d817      	bhi.n	800668e <USB_EPStartXfer+0x602>
 800665e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d004      	beq.n	800667e <USB_EPStartXfer+0x5f2>
 8006674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006678:	3301      	adds	r3, #1
 800667a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800667e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006682:	b29b      	uxth	r3, r3
 8006684:	029b      	lsls	r3, r3, #10
 8006686:	b29a      	uxth	r2, r3
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	e038      	b.n	8006700 <USB_EPStartXfer+0x674>
 800668e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006698:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669c:	f003 031f 	and.w	r3, r3, #31
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <USB_EPStartXfer+0x622>
 80066a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066a8:	3b01      	subs	r3, #1
 80066aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80066ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	029b      	lsls	r3, r3, #10
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e01b      	b.n	8006700 <USB_EPStartXfer+0x674>
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d116      	bne.n	8006700 <USB_EPStartXfer+0x674>
 80066d2:	1d3b      	adds	r3, r7, #4
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e0:	4413      	add	r3, r2
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	011a      	lsls	r2, r3, #4
 80066ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066f4:	643b      	str	r3, [r7, #64]	; 0x40
 80066f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006700:	463b      	mov	r3, r7
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	895b      	ldrh	r3, [r3, #10]
 8006706:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6959      	ldr	r1, [r3, #20]
 8006710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006714:	b29b      	uxth	r3, r3
 8006716:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800671a:	1d38      	adds	r0, r7, #4
 800671c:	6800      	ldr	r0, [r0, #0]
 800671e:	f000 ff13 	bl	8007548 <USB_WritePMA>
 8006722:	e1e2      	b.n	8006aea <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006724:	463b      	mov	r3, r7
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006748:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800674c:	1d3b      	adds	r3, r7, #4
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	463b      	mov	r3, r7
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800675e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800676a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676e:	b29b      	uxth	r3, r3
 8006770:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006772:	1d3b      	adds	r3, r7, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	663b      	str	r3, [r7, #96]	; 0x60
 8006778:	1d3b      	adds	r3, r7, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006780:	b29b      	uxth	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006786:	4413      	add	r3, r2
 8006788:	663b      	str	r3, [r7, #96]	; 0x60
 800678a:	463b      	mov	r3, r7
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	011a      	lsls	r2, r3, #4
 8006792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006794:	4413      	add	r3, r2
 8006796:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800679a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800679c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80067a6:	463b      	mov	r3, r7
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	891b      	ldrh	r3, [r3, #8]
 80067ac:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067b0:	463b      	mov	r3, r7
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6959      	ldr	r1, [r3, #20]
 80067b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80067c0:	1d38      	adds	r0, r7, #4
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	f000 fec0 	bl	8007548 <USB_WritePMA>
 80067c8:	e18f      	b.n	8006aea <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067ca:	1d3b      	adds	r3, r7, #4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	463b      	mov	r3, r7
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 808f 	beq.w	8006904 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067e6:	1d3b      	adds	r3, r7, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d164      	bne.n	80068c0 <USB_EPStartXfer+0x834>
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	673b      	str	r3, [r7, #112]	; 0x70
 80067fc:	1d3b      	adds	r3, r7, #4
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006804:	b29b      	uxth	r3, r3
 8006806:	461a      	mov	r2, r3
 8006808:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800680a:	4413      	add	r3, r2
 800680c:	673b      	str	r3, [r7, #112]	; 0x70
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	781b      	ldrb	r3, [r3, #0]
 8006814:	011a      	lsls	r2, r3, #4
 8006816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006818:	4413      	add	r3, r2
 800681a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800681e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d112      	bne.n	800684e <USB_EPStartXfer+0x7c2>
 8006828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006832:	b29a      	uxth	r2, r3
 8006834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006846:	b29a      	uxth	r2, r3
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	e054      	b.n	80068f8 <USB_EPStartXfer+0x86c>
 800684e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006852:	2b3e      	cmp	r3, #62	; 0x3e
 8006854:	d817      	bhi.n	8006886 <USB_EPStartXfer+0x7fa>
 8006856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800685a:	085b      	lsrs	r3, r3, #1
 800685c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006864:	f003 0301 	and.w	r3, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d004      	beq.n	8006876 <USB_EPStartXfer+0x7ea>
 800686c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006870:	3301      	adds	r3, #1
 8006872:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	b29b      	uxth	r3, r3
 800687c:	029b      	lsls	r3, r3, #10
 800687e:	b29a      	uxth	r2, r3
 8006880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	e038      	b.n	80068f8 <USB_EPStartXfer+0x86c>
 8006886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006894:	f003 031f 	and.w	r3, r3, #31
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <USB_EPStartXfer+0x81a>
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	3b01      	subs	r3, #1
 80068a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	029b      	lsls	r3, r3, #10
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068bc:	801a      	strh	r2, [r3, #0]
 80068be:	e01b      	b.n	80068f8 <USB_EPStartXfer+0x86c>
 80068c0:	463b      	mov	r3, r7
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d116      	bne.n	80068f8 <USB_EPStartXfer+0x86c>
 80068ca:	1d3b      	adds	r3, r7, #4
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d8:	4413      	add	r3, r2
 80068da:	67bb      	str	r3, [r7, #120]	; 0x78
 80068dc:	463b      	mov	r3, r7
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	011a      	lsls	r2, r3, #4
 80068e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068e6:	4413      	add	r3, r2
 80068e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ec:	677b      	str	r3, [r7, #116]	; 0x74
 80068ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068f8:	463b      	mov	r3, r7
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	895b      	ldrh	r3, [r3, #10]
 80068fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006902:	e097      	b.n	8006a34 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006904:	463b      	mov	r3, r7
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d168      	bne.n	80069e0 <USB_EPStartXfer+0x954>
 800690e:	1d3b      	adds	r3, r7, #4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006916:	1d3b      	adds	r3, r7, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800691e:	b29b      	uxth	r3, r3
 8006920:	461a      	mov	r2, r3
 8006922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006926:	4413      	add	r3, r2
 8006928:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	011a      	lsls	r2, r3, #4
 8006934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006938:	4413      	add	r3, r2
 800693a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800693e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d112      	bne.n	800696e <USB_EPStartXfer+0x8e2>
 8006948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006952:	b29a      	uxth	r2, r3
 8006954:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	b29b      	uxth	r3, r3
 800695e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006966:	b29a      	uxth	r2, r3
 8006968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800696a:	801a      	strh	r2, [r3, #0]
 800696c:	e05d      	b.n	8006a2a <USB_EPStartXfer+0x99e>
 800696e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006972:	2b3e      	cmp	r3, #62	; 0x3e
 8006974:	d817      	bhi.n	80069a6 <USB_EPStartXfer+0x91a>
 8006976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006980:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <USB_EPStartXfer+0x90a>
 800698c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006990:	3301      	adds	r3, #1
 8006992:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006996:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800699a:	b29b      	uxth	r3, r3
 800699c:	029b      	lsls	r3, r3, #10
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e041      	b.n	8006a2a <USB_EPStartXfer+0x99e>
 80069a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <USB_EPStartXfer+0x93a>
 80069bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069dc:	801a      	strh	r2, [r3, #0]
 80069de:	e024      	b.n	8006a2a <USB_EPStartXfer+0x99e>
 80069e0:	463b      	mov	r3, r7
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d11f      	bne.n	8006a2a <USB_EPStartXfer+0x99e>
 80069ea:	1d3b      	adds	r3, r7, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a02:	4413      	add	r3, r2
 8006a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a08:	463b      	mov	r3, r7
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	011a      	lsls	r2, r3, #4
 8006a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a28:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	891b      	ldrh	r3, [r3, #8]
 8006a30:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a34:	463b      	mov	r3, r7
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6959      	ldr	r1, [r3, #20]
 8006a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a44:	1d38      	adds	r0, r7, #4
 8006a46:	6800      	ldr	r0, [r0, #0]
 8006a48:	f000 fd7e 	bl	8007548 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006a4c:	463b      	mov	r3, r7
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d122      	bne.n	8006a9c <USB_EPStartXfer+0xa10>
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a70:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006a74:	1d3b      	adds	r3, r7, #4
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	463b      	mov	r3, r7
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	441a      	add	r2, r3
 8006a82:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	8013      	strh	r3, [r2, #0]
 8006a9a:	e026      	b.n	8006aea <USB_EPStartXfer+0xa5e>
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d121      	bne.n	8006aea <USB_EPStartXfer+0xa5e>
 8006aa6:	1d3b      	adds	r3, r7, #4
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	463b      	mov	r3, r7
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006ac4:	1d3b      	adds	r3, r7, #4
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	463b      	mov	r3, r7
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f107 020e 	add.w	r2, r7, #14
 8006b00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b08:	8013      	strh	r3, [r2, #0]
 8006b0a:	f107 030e 	add.w	r3, r7, #14
 8006b0e:	f107 020e 	add.w	r2, r7, #14
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	f082 0210 	eor.w	r2, r2, #16
 8006b18:	801a      	strh	r2, [r3, #0]
 8006b1a:	f107 030e 	add.w	r3, r7, #14
 8006b1e:	f107 020e 	add.w	r2, r7, #14
 8006b22:	8812      	ldrh	r2, [r2, #0]
 8006b24:	f082 0220 	eor.w	r2, r2, #32
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	1d3b      	adds	r3, r7, #4
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	463b      	mov	r3, r7
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	f107 030e 	add.w	r3, r7, #14
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
 8006b52:	e3b5      	b.n	80072c0 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b54:	463b      	mov	r3, r7
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	7b1b      	ldrb	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f040 8090 	bne.w	8006c80 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b60:	463b      	mov	r3, r7
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	463b      	mov	r3, r7
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d90e      	bls.n	8006b8e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006b70:	463b      	mov	r3, r7
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699a      	ldr	r2, [r3, #24]
 8006b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b84:	1ad2      	subs	r2, r2, r3
 8006b86:	463b      	mov	r3, r7
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	619a      	str	r2, [r3, #24]
 8006b8c:	e008      	b.n	8006ba0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006b8e:	463b      	mov	r3, r7
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006b98:	463b      	mov	r3, r7
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006ba0:	1d3b      	adds	r3, r7, #4
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ba8:	1d3b      	adds	r3, r7, #4
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bb8:	4413      	add	r3, r2
 8006bba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bbe:	463b      	mov	r3, r7
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	011a      	lsls	r2, r3, #4
 8006bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d116      	bne.n	8006c0a <USB_EPStartXfer+0xb7e>
 8006bdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e32c      	b.n	8007264 <USB_EPStartXfer+0x11d8>
 8006c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8006c10:	d818      	bhi.n	8006c44 <USB_EPStartXfer+0xbb8>
 8006c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c16:	085b      	lsrs	r3, r3, #1
 8006c18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d004      	beq.n	8006c32 <USB_EPStartXfer+0xba6>
 8006c28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e30f      	b.n	8007264 <USB_EPStartXfer+0x11d8>
 8006c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c48:	095b      	lsrs	r3, r3, #5
 8006c4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <USB_EPStartXfer+0xbd8>
 8006c5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006c64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	029b      	lsls	r3, r3, #10
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c7c:	801a      	strh	r2, [r3, #0]
 8006c7e:	e2f1      	b.n	8007264 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c80:	463b      	mov	r3, r7
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	78db      	ldrb	r3, [r3, #3]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	f040 818f 	bne.w	8006faa <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d175      	bne.n	8006d82 <USB_EPStartXfer+0xcf6>
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006cae:	4413      	add	r3, r2
 8006cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	011a      	lsls	r2, r3, #4
 8006cbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cca:	463b      	mov	r3, r7
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d116      	bne.n	8006d02 <USB_EPStartXfer+0xc76>
 8006cd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ce6:	801a      	strh	r2, [r3, #0]
 8006ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	e065      	b.n	8006dce <USB_EPStartXfer+0xd42>
 8006d02:	463b      	mov	r3, r7
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	2b3e      	cmp	r3, #62	; 0x3e
 8006d0a:	d81a      	bhi.n	8006d42 <USB_EPStartXfer+0xcb6>
 8006d0c:	463b      	mov	r3, r7
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d18:	463b      	mov	r3, r7
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d004      	beq.n	8006d30 <USB_EPStartXfer+0xca4>
 8006d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d3e:	801a      	strh	r2, [r3, #0]
 8006d40:	e045      	b.n	8006dce <USB_EPStartXfer+0xd42>
 8006d42:	463b      	mov	r3, r7
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	095b      	lsrs	r3, r3, #5
 8006d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d4e:	463b      	mov	r3, r7
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	f003 031f 	and.w	r3, r3, #31
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <USB_EPStartXfer+0xcda>
 8006d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d60:	3b01      	subs	r3, #1
 8006d62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	029b      	lsls	r3, r3, #10
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	e025      	b.n	8006dce <USB_EPStartXfer+0xd42>
 8006d82:	463b      	mov	r3, r7
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d120      	bne.n	8006dce <USB_EPStartXfer+0xd42>
 8006d8c:	1d3b      	adds	r3, r7, #4
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006da4:	4413      	add	r3, r2
 8006da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006daa:	463b      	mov	r3, r7
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	011a      	lsls	r2, r3, #4
 8006db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006dcc:	801a      	strh	r2, [r3, #0]
 8006dce:	1d3b      	adds	r3, r7, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d175      	bne.n	8006ecc <USB_EPStartXfer+0xe40>
 8006de0:	1d3b      	adds	r3, r7, #4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006de8:	1d3b      	adds	r3, r7, #4
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006df8:	4413      	add	r3, r2
 8006dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dfe:	463b      	mov	r3, r7
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	011a      	lsls	r2, r3, #4
 8006e06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e14:	463b      	mov	r3, r7
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d116      	bne.n	8006e4c <USB_EPStartXfer+0xdc0>
 8006e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e30:	801a      	strh	r2, [r3, #0]
 8006e32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	e061      	b.n	8006f10 <USB_EPStartXfer+0xe84>
 8006e4c:	463b      	mov	r3, r7
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b3e      	cmp	r3, #62	; 0x3e
 8006e54:	d81a      	bhi.n	8006e8c <USB_EPStartXfer+0xe00>
 8006e56:	463b      	mov	r3, r7
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e62:	463b      	mov	r3, r7
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <USB_EPStartXfer+0xdee>
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	3301      	adds	r3, #1
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	029b      	lsls	r3, r3, #10
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e041      	b.n	8006f10 <USB_EPStartXfer+0xe84>
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e98:	463b      	mov	r3, r7
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d104      	bne.n	8006eb0 <USB_EPStartXfer+0xe24>
 8006ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ec2:	b29a      	uxth	r2, r3
 8006ec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e021      	b.n	8006f10 <USB_EPStartXfer+0xe84>
 8006ecc:	463b      	mov	r3, r7
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d11c      	bne.n	8006f10 <USB_EPStartXfer+0xe84>
 8006ed6:	1d3b      	adds	r3, r7, #4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006eec:	463b      	mov	r3, r7
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	011a      	lsls	r2, r3, #4
 8006ef4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ef8:	4413      	add	r3, r2
 8006efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006efe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006f02:	463b      	mov	r3, r7
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006f0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f10:	463b      	mov	r3, r7
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 81a4 	beq.w	8007264 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f1c:	1d3b      	adds	r3, r7, #4
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f30:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <USB_EPStartXfer+0xebc>
 8006f3c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 8187 	bne.w	8007264 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f56:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f040 8180 	bne.w	8007264 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006f64:	1d3b      	adds	r3, r7, #4
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	463b      	mov	r3, r7
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	463b      	mov	r3, r7
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
 8006fa8:	e15c      	b.n	8007264 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	78db      	ldrb	r3, [r3, #3]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	f040 8155 	bne.w	8007260 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d90e      	bls.n	8006fe4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006fc6:	463b      	mov	r3, r7
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	463b      	mov	r3, r7
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	619a      	str	r2, [r3, #24]
 8006fe2:	e008      	b.n	8006ff6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006fe4:	463b      	mov	r3, r7
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006fee:	463b      	mov	r3, r7
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ff6:	463b      	mov	r3, r7
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	785b      	ldrb	r3, [r3, #1]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d16f      	bne.n	80070e0 <USB_EPStartXfer+0x1054>
 8007000:	1d3b      	adds	r3, r7, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007008:	1d3b      	adds	r3, r7, #4
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007018:	4413      	add	r3, r2
 800701a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800701e:	463b      	mov	r3, r7
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	011a      	lsls	r2, r3, #4
 8007026:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800702a:	4413      	add	r3, r2
 800702c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d116      	bne.n	800706a <USB_EPStartXfer+0xfde>
 800703c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29b      	uxth	r3, r3
 8007044:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007048:	b29a      	uxth	r2, r3
 800704a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800705c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007060:	b29a      	uxth	r2, r3
 8007062:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	e05f      	b.n	800712a <USB_EPStartXfer+0x109e>
 800706a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800706e:	2b3e      	cmp	r3, #62	; 0x3e
 8007070:	d818      	bhi.n	80070a4 <USB_EPStartXfer+0x1018>
 8007072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800707c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <USB_EPStartXfer+0x1006>
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800708c:	3301      	adds	r3, #1
 800708e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007096:	b29b      	uxth	r3, r3
 8007098:	029b      	lsls	r3, r3, #10
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	e042      	b.n	800712a <USB_EPStartXfer+0x109e>
 80070a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <USB_EPStartXfer+0x1038>
 80070ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070be:	3b01      	subs	r3, #1
 80070c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	029b      	lsls	r3, r3, #10
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070dc:	801a      	strh	r2, [r3, #0]
 80070de:	e024      	b.n	800712a <USB_EPStartXfer+0x109e>
 80070e0:	463b      	mov	r3, r7
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	785b      	ldrb	r3, [r3, #1]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d11f      	bne.n	800712a <USB_EPStartXfer+0x109e>
 80070ea:	1d3b      	adds	r3, r7, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070f2:	1d3b      	adds	r3, r7, #4
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007102:	4413      	add	r3, r2
 8007104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007108:	463b      	mov	r3, r7
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	011a      	lsls	r2, r3, #4
 8007110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007114:	4413      	add	r3, r2
 8007116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800711a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800711e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007122:	b29a      	uxth	r2, r3
 8007124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007128:	801a      	strh	r2, [r3, #0]
 800712a:	1d3b      	adds	r3, r7, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d16f      	bne.n	800721c <USB_EPStartXfer+0x1190>
 800713c:	1d3b      	adds	r3, r7, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714c:	b29b      	uxth	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007154:	4413      	add	r3, r2
 8007156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800715a:	463b      	mov	r3, r7
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	011a      	lsls	r2, r3, #4
 8007162:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007166:	4413      	add	r3, r2
 8007168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800716c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d116      	bne.n	80071a6 <USB_EPStartXfer+0x111a>
 8007178:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007184:	b29a      	uxth	r2, r3
 8007186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800719c:	b29a      	uxth	r2, r3
 800719e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	e05e      	b.n	8007264 <USB_EPStartXfer+0x11d8>
 80071a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071aa:	2b3e      	cmp	r3, #62	; 0x3e
 80071ac:	d818      	bhi.n	80071e0 <USB_EPStartXfer+0x1154>
 80071ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <USB_EPStartXfer+0x1142>
 80071c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c8:	3301      	adds	r3, #1
 80071ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	029b      	lsls	r3, r3, #10
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80071dc:	801a      	strh	r2, [r3, #0]
 80071de:	e041      	b.n	8007264 <USB_EPStartXfer+0x11d8>
 80071e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80071ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80071ee:	f003 031f 	and.w	r3, r3, #31
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d104      	bne.n	8007200 <USB_EPStartXfer+0x1174>
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fa:	3b01      	subs	r3, #1
 80071fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007204:	b29b      	uxth	r3, r3
 8007206:	029b      	lsls	r3, r3, #10
 8007208:	b29b      	uxth	r3, r3
 800720a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800720e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007212:	b29a      	uxth	r2, r3
 8007214:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007218:	801a      	strh	r2, [r3, #0]
 800721a:	e023      	b.n	8007264 <USB_EPStartXfer+0x11d8>
 800721c:	463b      	mov	r3, r7
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	785b      	ldrb	r3, [r3, #1]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d11e      	bne.n	8007264 <USB_EPStartXfer+0x11d8>
 8007226:	1d3b      	adds	r3, r7, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	461a      	mov	r2, r3
 8007232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007236:	4413      	add	r3, r2
 8007238:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	011a      	lsls	r2, r3, #4
 8007244:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007248:	4413      	add	r3, r2
 800724a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800724e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007252:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007256:	b29a      	uxth	r2, r3
 8007258:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800725c:	801a      	strh	r2, [r3, #0]
 800725e:	e001      	b.n	8007264 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e02e      	b.n	80072c2 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007264:	1d3b      	adds	r3, r7, #4
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	463b      	mov	r3, r7
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	b29b      	uxth	r3, r3
 8007276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800727a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007282:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007286:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800728a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800728e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007292:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007296:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	441a      	add	r2, r3
 80072a8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80072ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072bc:	b29b      	uxth	r3, r3
 80072be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f4:	81bb      	strh	r3, [r7, #12]
 80072f6:	89bb      	ldrh	r3, [r7, #12]
 80072f8:	f083 0310 	eor.w	r3, r3, #16
 80072fc:	81bb      	strh	r3, [r7, #12]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	441a      	add	r2, r3
 8007308:	89bb      	ldrh	r3, [r7, #12]
 800730a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800730e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731a:	b29b      	uxth	r3, r3
 800731c:	8013      	strh	r3, [r2, #0]
 800731e:	e01f      	b.n	8007360 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	81fb      	strh	r3, [r7, #14]
 8007338:	89fb      	ldrh	r3, [r7, #14]
 800733a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800733e:	81fb      	strh	r3, [r7, #14]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr

0800736c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	7b1b      	ldrb	r3, [r3, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 809d 	bne.w	80074ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d04c      	beq.n	8007422 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	823b      	strh	r3, [r7, #16]
 8007396:	8a3b      	ldrh	r3, [r7, #16]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d01b      	beq.n	80073d8 <USB_EPClearStall+0x6c>
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	81fb      	strh	r3, [r7, #14]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	441a      	add	r2, r3
 80073c2:	89fb      	ldrh	r3, [r7, #14]
 80073c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	78db      	ldrb	r3, [r3, #3]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d06c      	beq.n	80074ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f6:	81bb      	strh	r3, [r7, #12]
 80073f8:	89bb      	ldrh	r3, [r7, #12]
 80073fa:	f083 0320 	eor.w	r3, r3, #32
 80073fe:	81bb      	strh	r3, [r7, #12]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	441a      	add	r2, r3
 800740a:	89bb      	ldrh	r3, [r7, #12]
 800740c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741c:	b29b      	uxth	r3, r3
 800741e:	8013      	strh	r3, [r2, #0]
 8007420:	e04b      	b.n	80074ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	82fb      	strh	r3, [r7, #22]
 8007430:	8afb      	ldrh	r3, [r7, #22]
 8007432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d01b      	beq.n	8007472 <USB_EPClearStall+0x106>
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29b      	uxth	r3, r3
 8007448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007450:	82bb      	strh	r3, [r7, #20]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	441a      	add	r2, r3
 800745c:	8abb      	ldrh	r3, [r7, #20]
 800745e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007466:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800746a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746e:	b29b      	uxth	r3, r3
 8007470:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007488:	827b      	strh	r3, [r7, #18]
 800748a:	8a7b      	ldrh	r3, [r7, #18]
 800748c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007490:	827b      	strh	r3, [r7, #18]
 8007492:	8a7b      	ldrh	r3, [r7, #18]
 8007494:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007498:	827b      	strh	r3, [r7, #18]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	441a      	add	r2, r3
 80074a4:	8a7b      	ldrh	r3, [r7, #18]
 80074a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bc80      	pop	{r7}
 80074c4:	4770      	bx	lr

080074c6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b083      	sub	sp, #12
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	460b      	mov	r3, r1
 80074d0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007522:	b29b      	uxth	r3, r3
 8007524:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007526:	68fb      	ldr	r3, [r7, #12]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	bc80      	pop	{r7}
 8007530:	4770      	bx	lr

08007532 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007548:	b480      	push	{r7}
 800754a:	b08d      	sub	sp, #52	; 0x34
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	4611      	mov	r1, r2
 8007554:	461a      	mov	r2, r3
 8007556:	460b      	mov	r3, r1
 8007558:	80fb      	strh	r3, [r7, #6]
 800755a:	4613      	mov	r3, r2
 800755c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800755e:	88bb      	ldrh	r3, [r7, #4]
 8007560:	3301      	adds	r3, #1
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	005a      	lsls	r2, r3, #1
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800757a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007580:	e01e      	b.n	80075c0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	3301      	adds	r3, #1
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80075a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075aa:	3302      	adds	r3, #2
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	3302      	adds	r3, #2
 80075b2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	3301      	adds	r3, #1
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	3b01      	subs	r3, #1
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1dd      	bne.n	8007582 <USB_WritePMA+0x3a>
  }
}
 80075c6:	bf00      	nop
 80075c8:	3734      	adds	r7, #52	; 0x34
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bc80      	pop	{r7}
 80075ce:	4770      	bx	lr

080075d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b08b      	sub	sp, #44	; 0x2c
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4611      	mov	r1, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	460b      	mov	r3, r1
 80075e0:	80fb      	strh	r3, [r7, #6]
 80075e2:	4613      	mov	r3, r2
 80075e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075e6:	88bb      	ldrh	r3, [r7, #4]
 80075e8:	085b      	lsrs	r3, r3, #1
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	005a      	lsls	r2, r3, #1
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007602:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
 8007608:	e01b      	b.n	8007642 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	3302      	adds	r3, #2
 8007616:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	b2da      	uxtb	r2, r3
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	0a1b      	lsrs	r3, r3, #8
 800762a:	b2da      	uxtb	r2, r3
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3301      	adds	r3, #1
 8007634:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	3302      	adds	r3, #2
 800763a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	3b01      	subs	r3, #1
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e0      	bne.n	800760a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007648:	88bb      	ldrh	r3, [r7, #4]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	b2da      	uxtb	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	701a      	strb	r2, [r3, #0]
  }
}
 8007664:	bf00      	nop
 8007666:	372c      	adds	r7, #44	; 0x2c
 8007668:	46bd      	mov	sp, r7
 800766a:	bc80      	pop	{r7}
 800766c:	4770      	bx	lr
	...

08007670 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800767c:	2308      	movs	r3, #8
 800767e:	2203      	movs	r2, #3
 8007680:	2181      	movs	r1, #129	; 0x81
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fc99 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 800768e:	2301      	movs	r3, #1
 8007690:	2203      	movs	r2, #3
 8007692:	2101      	movs	r1, #1
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fc90 	bl	8008fba <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800769a:	2010      	movs	r0, #16
 800769c:	f001 fda2 	bl	80091e4 <USBD_static_malloc>
 80076a0:	4602      	mov	r2, r0
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 80076a8:	2301      	movs	r3, #1
 80076aa:	4a0b      	ldr	r2, [pc, #44]	; (80076d8 <USBD_HID_Init+0x68>)
 80076ac:	2101      	movs	r1, #1
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fd74 	bl	800919c <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 80076be:	2302      	movs	r3, #2
 80076c0:	e005      	b.n	80076ce <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c8:	2200      	movs	r2, #0
 80076ca:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000635 	.word	0x20000635

080076dc <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076ee:	2301      	movs	r3, #1
 80076f0:	4a06      	ldr	r2, [pc, #24]	; (800770c <USBD_HID_DataOut+0x30>)
 80076f2:	2101      	movs	r1, #1
 80076f4:	f7fb ffad 	bl	8003652 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <USBD_HID_DataOut+0x30>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fa fc99 	bl	8002034 <SET_LEDS_Callback>

	return USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000635 	.word	0x20000635

08007710 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800771c:	2181      	movs	r1, #129	; 0x81
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fc71 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	4618      	mov	r0, r3
 800773c:	f001 fd5e 	bl	80091fc <USBD_static_free>
    pdev->pClassData = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007764:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777e:	2b00      	cmp	r3, #0
 8007780:	d045      	beq.n	800780e <USBD_HID_Setup+0xba>
 8007782:	2b20      	cmp	r3, #32
 8007784:	f040 80d3 	bne.w	800792e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	3b02      	subs	r3, #2
 800778e:	2b09      	cmp	r3, #9
 8007790:	d835      	bhi.n	80077fe <USBD_HID_Setup+0xaa>
 8007792:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <USBD_HID_Setup+0x44>)
 8007794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007798:	080077ef 	.word	0x080077ef
 800779c:	080077cf 	.word	0x080077cf
 80077a0:	080077ff 	.word	0x080077ff
 80077a4:	080077ff 	.word	0x080077ff
 80077a8:	080077ff 	.word	0x080077ff
 80077ac:	080077ff 	.word	0x080077ff
 80077b0:	080077ff 	.word	0x080077ff
 80077b4:	080077ff 	.word	0x080077ff
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077c1 	.word	0x080077c1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	885b      	ldrh	r3, [r3, #2]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	601a      	str	r2, [r3, #0]
          break;
 80077cc:	e01e      	b.n	800780c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2201      	movs	r2, #1
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f937 	bl	8008a48 <USBD_CtlSendData>
          break;
 80077da:	e017      	b.n	800780c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	885b      	ldrh	r3, [r3, #2]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]
          break;
 80077ec:	e00e      	b.n	800780c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	3304      	adds	r3, #4
 80077f2:	2201      	movs	r2, #1
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f001 f926 	bl	8008a48 <USBD_CtlSendData>
          break;
 80077fc:	e006      	b.n	800780c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f8b7 	bl	8008974 <USBD_CtlError>
          ret = USBD_FAIL;
 8007806:	2302      	movs	r3, #2
 8007808:	75fb      	strb	r3, [r7, #23]
          break;
 800780a:	bf00      	nop
      }
      break;
 800780c:	e096      	b.n	800793c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b0b      	cmp	r3, #11
 8007814:	f200 8083 	bhi.w	800791e <USBD_HID_Setup+0x1ca>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBD_HID_Setup+0xcc>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007851 	.word	0x08007851
 8007824:	0800791f 	.word	0x0800791f
 8007828:	0800791f 	.word	0x0800791f
 800782c:	0800791f 	.word	0x0800791f
 8007830:	0800791f 	.word	0x0800791f
 8007834:	0800791f 	.word	0x0800791f
 8007838:	08007879 	.word	0x08007879
 800783c:	0800791f 	.word	0x0800791f
 8007840:	0800791f 	.word	0x0800791f
 8007844:	0800791f 	.word	0x0800791f
 8007848:	080078d1 	.word	0x080078d1
 800784c:	080078f9 	.word	0x080078f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007856:	2b03      	cmp	r3, #3
 8007858:	d107      	bne.n	800786a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800785a:	f107 030e 	add.w	r3, r7, #14
 800785e:	2202      	movs	r2, #2
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f001 f8f0 	bl	8008a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007868:	e060      	b.n	800792c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f881 	bl	8008974 <USBD_CtlError>
            ret = USBD_FAIL;
 8007872:	2302      	movs	r3, #2
 8007874:	75fb      	strb	r3, [r7, #23]
          break;
 8007876:	e059      	b.n	800792c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	885b      	ldrh	r3, [r3, #2]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	b29b      	uxth	r3, r3
 8007880:	2b22      	cmp	r3, #34	; 0x22
 8007882:	d108      	bne.n	8007896 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	88db      	ldrh	r3, [r3, #6]
 8007888:	2b73      	cmp	r3, #115	; 0x73
 800788a:	bf28      	it	cs
 800788c:	2373      	movcs	r3, #115	; 0x73
 800788e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8007890:	4b2d      	ldr	r3, [pc, #180]	; (8007948 <USBD_HID_Setup+0x1f4>)
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e015      	b.n	80078c2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	885b      	ldrh	r3, [r3, #2]
 800789a:	0a1b      	lsrs	r3, r3, #8
 800789c:	b29b      	uxth	r3, r3
 800789e:	2b21      	cmp	r3, #33	; 0x21
 80078a0:	d108      	bne.n	80078b4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <USBD_HID_Setup+0x1f8>)
 80078a4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	88db      	ldrh	r3, [r3, #6]
 80078aa:	2b09      	cmp	r3, #9
 80078ac:	bf28      	it	cs
 80078ae:	2309      	movcs	r3, #9
 80078b0:	83fb      	strh	r3, [r7, #30]
 80078b2:	e006      	b.n	80078c2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 f85c 	bl	8008974 <USBD_CtlError>
            ret = USBD_FAIL;
 80078bc:	2302      	movs	r3, #2
 80078be:	75fb      	strb	r3, [r7, #23]
            break;
 80078c0:	e034      	b.n	800792c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80078c2:	8bfb      	ldrh	r3, [r7, #30]
 80078c4:	461a      	mov	r2, r3
 80078c6:	69b9      	ldr	r1, [r7, #24]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 f8bd 	bl	8008a48 <USBD_CtlSendData>
          break;
 80078ce:	e02d      	b.n	800792c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d107      	bne.n	80078ea <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3308      	adds	r3, #8
 80078de:	2201      	movs	r2, #1
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 f8b0 	bl	8008a48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078e8:	e020      	b.n	800792c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 f841 	bl	8008974 <USBD_CtlError>
            ret = USBD_FAIL;
 80078f2:	2302      	movs	r3, #2
 80078f4:	75fb      	strb	r3, [r7, #23]
          break;
 80078f6:	e019      	b.n	800792c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d106      	bne.n	8007910 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	885b      	ldrh	r3, [r3, #2]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800790e:	e00d      	b.n	800792c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 f82e 	bl	8008974 <USBD_CtlError>
            ret = USBD_FAIL;
 8007918:	2302      	movs	r3, #2
 800791a:	75fb      	strb	r3, [r7, #23]
          break;
 800791c:	e006      	b.n	800792c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f827 	bl	8008974 <USBD_CtlError>
          ret = USBD_FAIL;
 8007926:	2302      	movs	r3, #2
 8007928:	75fb      	strb	r3, [r7, #23]
          break;
 800792a:	bf00      	nop
      }
      break;
 800792c:	e006      	b.n	800793c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f81f 	bl	8008974 <USBD_CtlError>
      ret = USBD_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	75fb      	strb	r3, [r7, #23]
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3720      	adds	r7, #32
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	200000e4 	.word	0x200000e4
 800794c:	200000cc 	.word	0x200000cc

08007950 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	4613      	mov	r3, r2
 800795c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007964:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796c:	2b03      	cmp	r3, #3
 800796e:	d10c      	bne.n	800798a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	7b1b      	ldrb	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2201      	movs	r2, #1
 800797c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	2181      	movs	r1, #129	; 0x81
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f001 fbe6 	bl	8009156 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2229      	movs	r2, #41	; 0x29
 80079a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80079a2:	4b03      	ldr	r3, [pc, #12]	; (80079b0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bc80      	pop	{r7}
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	20000048 	.word	0x20000048

080079b4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2229      	movs	r2, #41	; 0x29
 80079c0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80079c2:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bc80      	pop	{r7}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000074 	.word	0x20000074

080079d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2229      	movs	r2, #41	; 0x29
 80079e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80079e2:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	200000a0 	.word	0x200000a0

080079f4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8007a00:	f7fa f8f4 	bl	8001bec <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220a      	movs	r2, #10
 8007a24:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007a26:	4b03      	ldr	r3, [pc, #12]	; (8007a34 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	200000d8 	.word	0x200000d8

08007a38 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	e01a      	b.n	8007a86 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	79fa      	ldrb	r2, [r7, #7]
 8007a7c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f001 fa38 	bl	8008ef4 <USBD_LL_Init>

  return USBD_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b085      	sub	sp, #20
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d006      	beq.n	8007ab0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	683a      	ldr	r2, [r7, #0]
 8007aa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	e001      	b.n	8007ab4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bc80      	pop	{r7}
 8007abe:	4770      	bx	lr

08007ac0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fa5b 	bl	8008f84 <USBD_LL_Start>

  return USBD_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bc80      	pop	{r7}
 8007aea:	4770      	bx	lr

08007aec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007af8:	2302      	movs	r3, #2
 8007afa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	4611      	mov	r1, r2
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	4798      	blx	r3

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 feca 	bl	80088fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d00c      	beq.n	8007ba6 <USBD_LL_SetupStage+0x56>
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d302      	bcc.n	8007b96 <USBD_LL_SetupStage+0x46>
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d010      	beq.n	8007bb6 <USBD_LL_SetupStage+0x66>
 8007b94:	e017      	b.n	8007bc6 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9ca 	bl	8007f38 <USBD_StdDevReq>
      break;
 8007ba4:	e01a      	b.n	8007bdc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa2c 	bl	800800c <USBD_StdItfReq>
      break;
 8007bb4:	e012      	b.n	8007bdc <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa6a 	bl	8008098 <USBD_StdEPReq>
      break;
 8007bc4:	e00a      	b.n	8007bdc <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f001 fa35 	bl	8009044 <USBD_LL_StallEP>
      break;
 8007bda:	bf00      	nop
  }

  return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b086      	sub	sp, #24
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d14b      	bne.n	8007c92 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d134      	bne.n	8007c76 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d919      	bls.n	8007c4c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	1ad2      	subs	r2, r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d203      	bcs.n	8007c3a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	e002      	b.n	8007c40 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 ff2d 	bl	8008aa4 <USBD_CtlContinueRx>
 8007c4a:	e038      	b.n	8007cbe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d105      	bne.n	8007c6e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 ff2a 	bl	8008ac8 <USBD_CtlSendStatus>
 8007c74:	e023      	b.n	8007cbe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d11e      	bne.n	8007cbe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007c88:	2100      	movs	r1, #0
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f001 f9da 	bl	8009044 <USBD_LL_StallEP>
 8007c90:	e015      	b.n	8007cbe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00d      	beq.n	8007cba <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d108      	bne.n	8007cba <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	7afa      	ldrb	r2, [r7, #11]
 8007cb2:	4611      	mov	r1, r2
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	4798      	blx	r3
 8007cb8:	e001      	b.n	8007cbe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e000      	b.n	8007cc0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007cd6:	7afb      	ldrb	r3, [r7, #11]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d17f      	bne.n	8007ddc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d15c      	bne.n	8007da6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	68da      	ldr	r2, [r3, #12]
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d915      	bls.n	8007d24 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	1ad2      	subs	r2, r2, r3
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 feb5 	bl	8008a80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f001 fa3d 	bl	800919c <USBD_LL_PrepareReceive>
 8007d22:	e04e      	b.n	8007dc2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	6912      	ldr	r2, [r2, #16]
 8007d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d30:	fb02 f201 	mul.w	r2, r2, r1
 8007d34:	1a9b      	subs	r3, r3, r2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d11c      	bne.n	8007d74 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d316      	bcc.n	8007d74 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	689a      	ldr	r2, [r3, #8]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d20f      	bcs.n	8007d74 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d54:	2200      	movs	r2, #0
 8007d56:	2100      	movs	r1, #0
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 fe91 	bl	8008a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d66:	2300      	movs	r3, #0
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f001 fa15 	bl	800919c <USBD_LL_PrepareReceive>
 8007d72:	e026      	b.n	8007dc2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d105      	bne.n	8007d96 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007d96:	2180      	movs	r1, #128	; 0x80
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f001 f953 	bl	8009044 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fea5 	bl	8008aee <USBD_CtlReceiveStatus>
 8007da4:	e00d      	b.n	8007dc2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d004      	beq.n	8007dba <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f001 f941 	bl	8009044 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d11d      	bne.n	8007e08 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fe83 	bl	8007ad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007dda:	e015      	b.n	8007e08 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	695b      	ldr	r3, [r3, #20]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00d      	beq.n	8007e04 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d108      	bne.n	8007e04 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	7afa      	ldrb	r2, [r7, #11]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	4798      	blx	r3
 8007e02:	e001      	b.n	8007e08 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e04:	2302      	movs	r3, #2
 8007e06:	e000      	b.n	8007e0a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e1a:	2340      	movs	r3, #64	; 0x40
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f8ca 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2240      	movs	r2, #64	; 0x40
 8007e32:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e36:	2340      	movs	r3, #64	; 0x40
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2180      	movs	r1, #128	; 0x80
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 f8bc 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2240      	movs	r2, #64	; 0x40
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	6852      	ldr	r2, [r2, #4]
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	4611      	mov	r1, r2
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	4798      	blx	r3
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3708      	adds	r7, #8
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr

08007eb2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2204      	movs	r2, #4
 8007eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc80      	pop	{r7}
 8007ed8:	4770      	bx	lr

08007eda <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee8:	2b04      	cmp	r3, #4
 8007eea:	d105      	bne.n	8007ef8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr

08007f04 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d10b      	bne.n	8007f2e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f4e:	2b20      	cmp	r3, #32
 8007f50:	d004      	beq.n	8007f5c <USBD_StdDevReq+0x24>
 8007f52:	2b40      	cmp	r3, #64	; 0x40
 8007f54:	d002      	beq.n	8007f5c <USBD_StdDevReq+0x24>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <USBD_StdDevReq+0x34>
 8007f5a:	e04c      	b.n	8007ff6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
      break;
 8007f6a:	e049      	b.n	8008000 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b09      	cmp	r3, #9
 8007f72:	d83a      	bhi.n	8007fea <USBD_StdDevReq+0xb2>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <USBD_StdDevReq+0x44>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fcd 	.word	0x08007fcd
 8007f80:	08007fe1 	.word	0x08007fe1
 8007f84:	08007feb 	.word	0x08007feb
 8007f88:	08007fd7 	.word	0x08007fd7
 8007f8c:	08007feb 	.word	0x08007feb
 8007f90:	08007faf 	.word	0x08007faf
 8007f94:	08007fa5 	.word	0x08007fa5
 8007f98:	08007feb 	.word	0x08007feb
 8007f9c:	08007fc3 	.word	0x08007fc3
 8007fa0:	08007fb9 	.word	0x08007fb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f9d4 	bl	8008354 <USBD_GetDescriptor>
          break;
 8007fac:	e022      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fb37 	bl	8008624 <USBD_SetAddress>
          break;
 8007fb6:	e01d      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fb74 	bl	80086a8 <USBD_SetConfig>
          break;
 8007fc0:	e018      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbfd 	bl	80087c4 <USBD_GetConfig>
          break;
 8007fca:	e013      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fc2c 	bl	800882c <USBD_GetStatus>
          break;
 8007fd4:	e00e      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fc5a 	bl	8008892 <USBD_SetFeature>
          break;
 8007fde:	e009      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc69 	bl	80088ba <USBD_ClrFeature>
          break;
 8007fe8:	e004      	b.n	8007ff4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007fea:	6839      	ldr	r1, [r7, #0]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fcc1 	bl	8008974 <USBD_CtlError>
          break;
 8007ff2:	bf00      	nop
      }
      break;
 8007ff4:	e004      	b.n	8008000 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fcbb 	bl	8008974 <USBD_CtlError>
      break;
 8007ffe:	bf00      	nop
  }

  return ret;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008022:	2b20      	cmp	r3, #32
 8008024:	d003      	beq.n	800802e <USBD_StdItfReq+0x22>
 8008026:	2b40      	cmp	r3, #64	; 0x40
 8008028:	d001      	beq.n	800802e <USBD_StdItfReq+0x22>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d12a      	bne.n	8008084 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008034:	3b01      	subs	r3, #1
 8008036:	2b02      	cmp	r3, #2
 8008038:	d81d      	bhi.n	8008076 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	889b      	ldrh	r3, [r3, #4]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d813      	bhi.n	800806c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	88db      	ldrh	r3, [r3, #6]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d110      	bne.n	8008080 <USBD_StdItfReq+0x74>
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10d      	bne.n	8008080 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fd2f 	bl	8008ac8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800806a:	e009      	b.n	8008080 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 fc80 	bl	8008974 <USBD_CtlError>
          break;
 8008074:	e004      	b.n	8008080 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fc7b 	bl	8008974 <USBD_CtlError>
          break;
 800807e:	e000      	b.n	8008082 <USBD_StdItfReq+0x76>
          break;
 8008080:	bf00      	nop
      }
      break;
 8008082:	e004      	b.n	800808e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fc74 	bl	8008974 <USBD_CtlError>
      break;
 800808c:	bf00      	nop
  }

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	889b      	ldrh	r3, [r3, #4]
 80080aa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d004      	beq.n	80080c2 <USBD_StdEPReq+0x2a>
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d002      	beq.n	80080c2 <USBD_StdEPReq+0x2a>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <USBD_StdEPReq+0x3a>
 80080c0:	e13d      	b.n	800833e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	4798      	blx	r3
      break;
 80080d0:	e13a      	b.n	8008348 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080da:	2b20      	cmp	r3, #32
 80080dc:	d10a      	bne.n	80080f4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
 80080ec:	4603      	mov	r3, r0
 80080ee:	73fb      	strb	r3, [r7, #15]

        return ret;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
 80080f2:	e12a      	b.n	800834a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	785b      	ldrb	r3, [r3, #1]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d03e      	beq.n	800817a <USBD_StdEPReq+0xe2>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d002      	beq.n	8008106 <USBD_StdEPReq+0x6e>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d070      	beq.n	80081e6 <USBD_StdEPReq+0x14e>
 8008104:	e115      	b.n	8008332 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800810c:	2b02      	cmp	r3, #2
 800810e:	d002      	beq.n	8008116 <USBD_StdEPReq+0x7e>
 8008110:	2b03      	cmp	r3, #3
 8008112:	d015      	beq.n	8008140 <USBD_StdEPReq+0xa8>
 8008114:	e02b      	b.n	800816e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00c      	beq.n	8008136 <USBD_StdEPReq+0x9e>
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b80      	cmp	r3, #128	; 0x80
 8008120:	d009      	beq.n	8008136 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 ff8c 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 ff88 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008134:	e020      	b.n	8008178 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fc1b 	bl	8008974 <USBD_CtlError>
              break;
 800813e:	e01b      	b.n	8008178 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10e      	bne.n	8008166 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <USBD_StdEPReq+0xce>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	; 0x80
 8008152:	d008      	beq.n	8008166 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 ff6f 	bl	8009044 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fcae 	bl	8008ac8 <USBD_CtlSendStatus>

              break;
 800816c:	e004      	b.n	8008178 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fbff 	bl	8008974 <USBD_CtlError>
              break;
 8008176:	bf00      	nop
          }
          break;
 8008178:	e0e0      	b.n	800833c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008180:	2b02      	cmp	r3, #2
 8008182:	d002      	beq.n	800818a <USBD_StdEPReq+0xf2>
 8008184:	2b03      	cmp	r3, #3
 8008186:	d015      	beq.n	80081b4 <USBD_StdEPReq+0x11c>
 8008188:	e026      	b.n	80081d8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <USBD_StdEPReq+0x112>
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b80      	cmp	r3, #128	; 0x80
 8008194:	d009      	beq.n	80081aa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 ff52 	bl	8009044 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80081a0:	2180      	movs	r1, #128	; 0x80
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 ff4e 	bl	8009044 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081a8:	e01c      	b.n	80081e4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fbe1 	bl	8008974 <USBD_CtlError>
              break;
 80081b2:	e017      	b.n	80081e4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	885b      	ldrh	r3, [r3, #2]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d112      	bne.n	80081e2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80081c6:	7bbb      	ldrb	r3, [r7, #14]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 ff59 	bl	8009082 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc79 	bl	8008ac8 <USBD_CtlSendStatus>
              }
              break;
 80081d6:	e004      	b.n	80081e2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fbca 	bl	8008974 <USBD_CtlError>
              break;
 80081e0:	e000      	b.n	80081e4 <USBD_StdEPReq+0x14c>
              break;
 80081e2:	bf00      	nop
          }
          break;
 80081e4:	e0aa      	b.n	800833c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d002      	beq.n	80081f6 <USBD_StdEPReq+0x15e>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d032      	beq.n	800825a <USBD_StdEPReq+0x1c2>
 80081f4:	e097      	b.n	8008326 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d007      	beq.n	800820c <USBD_StdEPReq+0x174>
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b80      	cmp	r3, #128	; 0x80
 8008200:	d004      	beq.n	800820c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fbb5 	bl	8008974 <USBD_CtlError>
                break;
 800820a:	e091      	b.n	8008330 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800820c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008210:	2b00      	cmp	r3, #0
 8008212:	da0b      	bge.n	800822c <USBD_StdEPReq+0x194>
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	3310      	adds	r3, #16
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	3304      	adds	r3, #4
 800822a:	e00b      	b.n	8008244 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800822c:	7bbb      	ldrb	r3, [r7, #14]
 800822e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4413      	add	r3, r2
 8008242:	3304      	adds	r3, #4
 8008244:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2202      	movs	r2, #2
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fbf8 	bl	8008a48 <USBD_CtlSendData>
              break;
 8008258:	e06a      	b.n	8008330 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800825a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	da11      	bge.n	8008286 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	3318      	adds	r3, #24
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d117      	bne.n	80082ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fb78 	bl	8008974 <USBD_CtlError>
                  break;
 8008284:	e054      	b.n	8008330 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	f003 020f 	and.w	r2, r3, #15
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	440b      	add	r3, r1
 8008298:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d104      	bne.n	80082ac <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80082a2:	6839      	ldr	r1, [r7, #0]
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb65 	bl	8008974 <USBD_CtlError>
                  break;
 80082aa:	e041      	b.n	8008330 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	da0b      	bge.n	80082cc <USBD_StdEPReq+0x234>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	e00b      	b.n	80082e4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	3304      	adds	r3, #4
 80082e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <USBD_StdEPReq+0x25a>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d103      	bne.n	80082fa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	e00e      	b.n	8008318 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fede 	bl	80090c0 <USBD_LL_IsStallEP>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d003      	beq.n	8008312 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2201      	movs	r2, #1
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	e002      	b.n	8008318 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2202      	movs	r2, #2
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fb92 	bl	8008a48 <USBD_CtlSendData>
              break;
 8008324:	e004      	b.n	8008330 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fb23 	bl	8008974 <USBD_CtlError>
              break;
 800832e:	bf00      	nop
          }
          break;
 8008330:	e004      	b.n	800833c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008332:	6839      	ldr	r1, [r7, #0]
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb1d 	bl	8008974 <USBD_CtlError>
          break;
 800833a:	bf00      	nop
      }
      break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fb17 	bl	8008974 <USBD_CtlError>
      break;
 8008346:	bf00      	nop
  }

  return ret;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	0a1b      	lsrs	r3, r3, #8
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b01      	subs	r3, #1
 8008374:	2b06      	cmp	r3, #6
 8008376:	f200 8128 	bhi.w	80085ca <USBD_GetDescriptor+0x276>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <USBD_GetDescriptor+0x2c>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	0800839d 	.word	0x0800839d
 8008384:	080083b5 	.word	0x080083b5
 8008388:	080083f5 	.word	0x080083f5
 800838c:	080085cb 	.word	0x080085cb
 8008390:	080085cb 	.word	0x080085cb
 8008394:	0800856b 	.word	0x0800856b
 8008398:	08008597 	.word	0x08008597
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	7c12      	ldrb	r2, [r2, #16]
 80083a8:	f107 0108 	add.w	r1, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
      break;
 80083b2:	e112      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7c1b      	ldrb	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10d      	bne.n	80083d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	f107 0208 	add.w	r2, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3301      	adds	r3, #1
 80083d2:	2202      	movs	r2, #2
 80083d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80083d6:	e100      	b.n	80085da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e0:	f107 0208 	add.w	r2, r7, #8
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	2202      	movs	r2, #2
 80083f0:	701a      	strb	r2, [r3, #0]
      break;
 80083f2:	e0f2      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	885b      	ldrh	r3, [r3, #2]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	f200 80ac 	bhi.w	8008558 <USBD_GetDescriptor+0x204>
 8008400:	a201      	add	r2, pc, #4	; (adr r2, 8008408 <USBD_GetDescriptor+0xb4>)
 8008402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008406:	bf00      	nop
 8008408:	08008421 	.word	0x08008421
 800840c:	08008455 	.word	0x08008455
 8008410:	08008489 	.word	0x08008489
 8008414:	080084bd 	.word	0x080084bd
 8008418:	080084f1 	.word	0x080084f1
 800841c:	08008525 	.word	0x08008525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	7c12      	ldrb	r2, [r2, #16]
 8008438:	f107 0108 	add.w	r1, r7, #8
 800843c:	4610      	mov	r0, r2
 800843e:	4798      	blx	r3
 8008440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008442:	e091      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fa94 	bl	8008974 <USBD_CtlError>
            err++;
 800844c:	7afb      	ldrb	r3, [r7, #11]
 800844e:	3301      	adds	r3, #1
 8008450:	72fb      	strb	r3, [r7, #11]
          break;
 8008452:	e089      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	7c12      	ldrb	r2, [r2, #16]
 800846c:	f107 0108 	add.w	r1, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008476:	e077      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fa7a 	bl	8008974 <USBD_CtlError>
            err++;
 8008480:	7afb      	ldrb	r3, [r7, #11]
 8008482:	3301      	adds	r3, #1
 8008484:	72fb      	strb	r3, [r7, #11]
          break;
 8008486:	e06f      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084aa:	e05d      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa60 	bl	8008974 <USBD_CtlError>
            err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ba:	e055      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7c12      	ldrb	r2, [r2, #16]
 80084d4:	f107 0108 	add.w	r1, r7, #8
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084de:	e043      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa46 	bl	8008974 <USBD_CtlError>
            err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
          break;
 80084ee:	e03b      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008502:	695b      	ldr	r3, [r3, #20]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	7c12      	ldrb	r2, [r2, #16]
 8008508:	f107 0108 	add.w	r1, r7, #8
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008512:	e029      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa2c 	bl	8008974 <USBD_CtlError>
            err++;
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	3301      	adds	r3, #1
 8008520:	72fb      	strb	r3, [r7, #11]
          break;
 8008522:	e021      	b.n	8008568 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 0108 	add.w	r1, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008546:	e00f      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa12 	bl	8008974 <USBD_CtlError>
            err++;
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	3301      	adds	r3, #1
 8008554:	72fb      	strb	r3, [r7, #11]
          break;
 8008556:	e007      	b.n	8008568 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa0a 	bl	8008974 <USBD_CtlError>
          err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008566:	e038      	b.n	80085da <USBD_GetDescriptor+0x286>
 8008568:	e037      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	7c1b      	ldrb	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	f107 0208 	add.w	r2, r7, #8
 800857e:	4610      	mov	r0, r2
 8008580:	4798      	blx	r3
 8008582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008584:	e029      	b.n	80085da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008586:	6839      	ldr	r1, [r7, #0]
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 f9f3 	bl	8008974 <USBD_CtlError>
        err++;
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	3301      	adds	r3, #1
 8008592:	72fb      	strb	r3, [r7, #11]
      break;
 8008594:	e021      	b.n	80085da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	7c1b      	ldrb	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10d      	bne.n	80085ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a6:	f107 0208 	add.w	r2, r7, #8
 80085aa:	4610      	mov	r0, r2
 80085ac:	4798      	blx	r3
 80085ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3301      	adds	r3, #1
 80085b4:	2207      	movs	r2, #7
 80085b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085b8:	e00f      	b.n	80085da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f9d9 	bl	8008974 <USBD_CtlError>
        err++;
 80085c2:	7afb      	ldrb	r3, [r7, #11]
 80085c4:	3301      	adds	r3, #1
 80085c6:	72fb      	strb	r3, [r7, #11]
      break;
 80085c8:	e007      	b.n	80085da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f9d1 	bl	8008974 <USBD_CtlError>
      err++;
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	3301      	adds	r3, #1
 80085d6:	72fb      	strb	r3, [r7, #11]
      break;
 80085d8:	bf00      	nop
  }

  if (err != 0U)
 80085da:	7afb      	ldrb	r3, [r7, #11]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d11c      	bne.n	800861a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80085e0:	893b      	ldrh	r3, [r7, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <USBD_GetDescriptor+0x2b6>
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	88db      	ldrh	r3, [r3, #6]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	88da      	ldrh	r2, [r3, #6]
 80085f2:	893b      	ldrh	r3, [r7, #8]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bf28      	it	cs
 80085f8:	4613      	movcs	r3, r2
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80085fe:	893b      	ldrh	r3, [r7, #8]
 8008600:	461a      	mov	r2, r3
 8008602:	68f9      	ldr	r1, [r7, #12]
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa1f 	bl	8008a48 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	88db      	ldrh	r3, [r3, #6]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa58 	bl	8008ac8 <USBD_CtlSendStatus>
 8008618:	e000      	b.n	800861c <USBD_GetDescriptor+0x2c8>
    return;
 800861a:	bf00      	nop
    }
  }
}
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop

08008624 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	889b      	ldrh	r3, [r3, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d130      	bne.n	8008698 <USBD_SetAddress+0x74>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	88db      	ldrh	r3, [r3, #6]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12c      	bne.n	8008698 <USBD_SetAddress+0x74>
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	885b      	ldrh	r3, [r3, #2]
 8008642:	2b7f      	cmp	r3, #127	; 0x7f
 8008644:	d828      	bhi.n	8008698 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	885b      	ldrh	r3, [r3, #2]
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008658:	2b03      	cmp	r3, #3
 800865a:	d104      	bne.n	8008666 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f988 	bl	8008974 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008664:	e01c      	b.n	80086a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7bfa      	ldrb	r2, [r7, #15]
 800866a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800866e:	7bfb      	ldrb	r3, [r7, #15]
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fd50 	bl	8009118 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fa25 	bl	8008ac8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868c:	e008      	b.n	80086a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008696:	e003      	b.n	80086a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f96a 	bl	8008974 <USBD_CtlError>
  }
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	885b      	ldrh	r3, [r3, #2]
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	4b41      	ldr	r3, [pc, #260]	; (80087c0 <USBD_SetConfig+0x118>)
 80086ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80086bc:	4b40      	ldr	r3, [pc, #256]	; (80087c0 <USBD_SetConfig+0x118>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d904      	bls.n	80086ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f954 	bl	8008974 <USBD_CtlError>
 80086cc:	e075      	b.n	80087ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d002      	beq.n	80086de <USBD_SetConfig+0x36>
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d023      	beq.n	8008724 <USBD_SetConfig+0x7c>
 80086dc:	e062      	b.n	80087a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80086de:	4b38      	ldr	r3, [pc, #224]	; (80087c0 <USBD_SetConfig+0x118>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01a      	beq.n	800871c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80086e6:	4b36      	ldr	r3, [pc, #216]	; (80087c0 <USBD_SetConfig+0x118>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2203      	movs	r2, #3
 80086f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80086f8:	4b31      	ldr	r3, [pc, #196]	; (80087c0 <USBD_SetConfig+0x118>)
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff f9f4 	bl	8007aec <USBD_SetClassConfig>
 8008704:	4603      	mov	r3, r0
 8008706:	2b02      	cmp	r3, #2
 8008708:	d104      	bne.n	8008714 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f931 	bl	8008974 <USBD_CtlError>
            return;
 8008712:	e052      	b.n	80087ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9d7 	bl	8008ac8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800871a:	e04e      	b.n	80087ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 f9d3 	bl	8008ac8 <USBD_CtlSendStatus>
        break;
 8008722:	e04a      	b.n	80087ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008724:	4b26      	ldr	r3, [pc, #152]	; (80087c0 <USBD_SetConfig+0x118>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d112      	bne.n	8008752 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008734:	4b22      	ldr	r3, [pc, #136]	; (80087c0 <USBD_SetConfig+0x118>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <USBD_SetConfig+0x118>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff f9f0 	bl	8007b2a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9bc 	bl	8008ac8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008750:	e033      	b.n	80087ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <USBD_SetConfig+0x118>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d01d      	beq.n	800879c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4619      	mov	r1, r3
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff f9de 	bl	8007b2a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <USBD_SetConfig+0x118>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008778:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <USBD_SetConfig+0x118>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff f9b4 	bl	8007aec <USBD_SetClassConfig>
 8008784:	4603      	mov	r3, r0
 8008786:	2b02      	cmp	r3, #2
 8008788:	d104      	bne.n	8008794 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f8f1 	bl	8008974 <USBD_CtlError>
            return;
 8008792:	e012      	b.n	80087ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f997 	bl	8008ac8 <USBD_CtlSendStatus>
        break;
 800879a:	e00e      	b.n	80087ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f993 	bl	8008ac8 <USBD_CtlSendStatus>
        break;
 80087a2:	e00a      	b.n	80087ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8e4 	bl	8008974 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80087ac:	4b04      	ldr	r3, [pc, #16]	; (80087c0 <USBD_SetConfig+0x118>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7ff f9b9 	bl	8007b2a <USBD_ClrClassConfig>
        break;
 80087b8:	bf00      	nop
    }
  }
}
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000636 	.word	0x20000636

080087c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	88db      	ldrh	r3, [r3, #6]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d004      	beq.n	80087e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 f8cb 	bl	8008974 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80087de:	e021      	b.n	8008824 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	db17      	blt.n	800881a <USBD_GetConfig+0x56>
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	dd02      	ble.n	80087f4 <USBD_GetConfig+0x30>
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d00b      	beq.n	800880a <USBD_GetConfig+0x46>
 80087f2:	e012      	b.n	800881a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	3308      	adds	r3, #8
 80087fe:	2201      	movs	r2, #1
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f920 	bl	8008a48 <USBD_CtlSendData>
        break;
 8008808:	e00c      	b.n	8008824 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3304      	adds	r3, #4
 800880e:	2201      	movs	r2, #1
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f918 	bl	8008a48 <USBD_CtlSendData>
        break;
 8008818:	e004      	b.n	8008824 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8a9 	bl	8008974 <USBD_CtlError>
        break;
 8008822:	bf00      	nop
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800883c:	3b01      	subs	r3, #1
 800883e:	2b02      	cmp	r3, #2
 8008840:	d81e      	bhi.n	8008880 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	88db      	ldrh	r3, [r3, #6]
 8008846:	2b02      	cmp	r3, #2
 8008848:	d004      	beq.n	8008854 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f891 	bl	8008974 <USBD_CtlError>
        break;
 8008852:	e01a      	b.n	800888a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f043 0202 	orr.w	r2, r3, #2
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	330c      	adds	r3, #12
 8008874:	2202      	movs	r2, #2
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f8e5 	bl	8008a48 <USBD_CtlSendData>
      break;
 800887e:	e004      	b.n	800888a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008880:	6839      	ldr	r1, [r7, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f876 	bl	8008974 <USBD_CtlError>
      break;
 8008888:	bf00      	nop
  }
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	885b      	ldrh	r3, [r3, #2]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d106      	bne.n	80088b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f90b 	bl	8008ac8 <USBD_CtlSendStatus>
  }
}
 80088b2:	bf00      	nop
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b082      	sub	sp, #8
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ca:	3b01      	subs	r3, #1
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d80b      	bhi.n	80088e8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10c      	bne.n	80088f2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f8f1 	bl	8008ac8 <USBD_CtlSendStatus>
      }
      break;
 80088e6:	e004      	b.n	80088f2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 f842 	bl	8008974 <USBD_CtlError>
      break;
 80088f0:	e000      	b.n	80088f4 <USBD_ClrFeature+0x3a>
      break;
 80088f2:	bf00      	nop
  }
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	785a      	ldrb	r2, [r3, #1]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	3302      	adds	r3, #2
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	b29a      	uxth	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	3303      	adds	r3, #3
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b29b      	uxth	r3, r3
 8008926:	021b      	lsls	r3, r3, #8
 8008928:	b29b      	uxth	r3, r3
 800892a:	4413      	add	r3, r2
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	3304      	adds	r3, #4
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	b29a      	uxth	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	3305      	adds	r3, #5
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	b29b      	uxth	r3, r3
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	b29b      	uxth	r3, r3
 8008946:	4413      	add	r3, r2
 8008948:	b29a      	uxth	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	3306      	adds	r3, #6
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	b29a      	uxth	r2, r3
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	3307      	adds	r3, #7
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	b29b      	uxth	r3, r3
 8008962:	4413      	add	r3, r2
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	80da      	strh	r2, [r3, #6]

}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	bc80      	pop	{r7}
 8008972:	4770      	bx	lr

08008974 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800897e:	2180      	movs	r1, #128	; 0x80
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb5f 	bl	8009044 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008986:	2100      	movs	r1, #0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fb5b 	bl	8009044 <USBD_LL_StallEP>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b086      	sub	sp, #24
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	60b9      	str	r1, [r7, #8]
 80089a0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d032      	beq.n	8008a12 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f834 	bl	8008a1a <USBD_GetLen>
 80089b2:	4603      	mov	r3, r0
 80089b4:	3301      	adds	r3, #1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	75fa      	strb	r2, [r7, #23]
 80089c6:	461a      	mov	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4413      	add	r3, r2
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	7812      	ldrb	r2, [r2, #0]
 80089d0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	75fa      	strb	r2, [r7, #23]
 80089d8:	461a      	mov	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	2203      	movs	r2, #3
 80089e0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80089e2:	e012      	b.n	8008a0a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	1c5a      	adds	r2, r3, #1
 80089e8:	60fa      	str	r2, [r7, #12]
 80089ea:	7dfa      	ldrb	r2, [r7, #23]
 80089ec:	1c51      	adds	r1, r2, #1
 80089ee:	75f9      	strb	r1, [r7, #23]
 80089f0:	4611      	mov	r1, r2
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	440a      	add	r2, r1
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80089fa:	7dfb      	ldrb	r3, [r7, #23]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	75fa      	strb	r2, [r7, #23]
 8008a00:	461a      	mov	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d1e8      	bne.n	80089e4 <USBD_GetString+0x4e>
    }
  }
}
 8008a12:	bf00      	nop
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b085      	sub	sp, #20
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a26:	e005      	b.n	8008a34 <USBD_GetLen+0x1a>
  {
    len++;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3301      	adds	r3, #1
 8008a32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f5      	bne.n	8008a28 <USBD_GetLen+0xe>
  }

  return len;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bc80      	pop	{r7}
 8008a46:	4770      	bx	lr

08008a48 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	4613      	mov	r3, r2
 8008a54:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a5e:	88fa      	ldrh	r2, [r7, #6]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008a64:	88fa      	ldrh	r2, [r7, #6]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a6a:	88fb      	ldrh	r3, [r7, #6]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fb70 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a8e:	88fb      	ldrh	r3, [r7, #6]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fb5e 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fb6f 	bl	800919c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2204      	movs	r2, #4
 8008ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fb39 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b082      	sub	sp, #8
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2205      	movs	r2, #5
 8008afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008afe:	2300      	movs	r3, #0
 8008b00:	2200      	movs	r2, #0
 8008b02:	2100      	movs	r1, #0
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb49 	bl	800919c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	490e      	ldr	r1, [pc, #56]	; (8008b54 <MX_USB_DEVICE_Init+0x40>)
 8008b1c:	480e      	ldr	r0, [pc, #56]	; (8008b58 <MX_USB_DEVICE_Init+0x44>)
 8008b1e:	f7fe ff8b 	bl	8007a38 <USBD_Init>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b28:	f7f9 f935 	bl	8001d96 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008b2c:	490b      	ldr	r1, [pc, #44]	; (8008b5c <MX_USB_DEVICE_Init+0x48>)
 8008b2e:	480a      	ldr	r0, [pc, #40]	; (8008b58 <MX_USB_DEVICE_Init+0x44>)
 8008b30:	f7fe ffad 	bl	8007a8e <USBD_RegisterClass>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b3a:	f7f9 f92c 	bl	8001d96 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b3e:	4806      	ldr	r0, [pc, #24]	; (8008b58 <MX_USB_DEVICE_Init+0x44>)
 8008b40:	f7fe ffbe 	bl	8007ac0 <USBD_Start>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008b4a:	f7f9 f924 	bl	8001d96 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b4e:	bf00      	nop
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	20000158 	.word	0x20000158
 8008b58:	20000810 	.word	0x20000810
 8008b5c:	20000010 	.word	0x20000010

08008b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	6039      	str	r1, [r7, #0]
 8008b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	2212      	movs	r2, #18
 8008b70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b72:	4b03      	ldr	r3, [pc, #12]	; (8008b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	20000174 	.word	0x20000174

08008b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2204      	movs	r2, #4
 8008b94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b96:	4b03      	ldr	r3, [pc, #12]	; (8008ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bc80      	pop	{r7}
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	20000188 	.word	0x20000188

08008ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	6039      	str	r1, [r7, #0]
 8008bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	4907      	ldr	r1, [pc, #28]	; (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bbe:	4808      	ldr	r0, [pc, #32]	; (8008be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bc0:	f7ff fee9 	bl	8008996 <USBD_GetString>
 8008bc4:	e004      	b.n	8008bd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	4904      	ldr	r1, [pc, #16]	; (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8008bca:	4805      	ldr	r0, [pc, #20]	; (8008be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bcc:	f7ff fee3 	bl	8008996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bd0:	4b02      	ldr	r3, [pc, #8]	; (8008bdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000ad4 	.word	0x20000ad4
 8008be0:	08009338 	.word	0x08009338

08008be4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	4904      	ldr	r1, [pc, #16]	; (8008c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bf4:	4804      	ldr	r0, [pc, #16]	; (8008c08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bf6:	f7ff fece 	bl	8008996 <USBD_GetString>
  return USBD_StrDesc;
 8008bfa:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	20000ad4 	.word	0x20000ad4
 8008c08:	0800934c 	.word	0x0800934c

08008c0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	221a      	movs	r2, #26
 8008c1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c1e:	f000 f843 	bl	8008ca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c22:	4b02      	ldr	r3, [pc, #8]	; (8008c2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	2000018c 	.word	0x2000018c

08008c30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d105      	bne.n	8008c4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	4907      	ldr	r1, [pc, #28]	; (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c46:	4808      	ldr	r0, [pc, #32]	; (8008c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c48:	f7ff fea5 	bl	8008996 <USBD_GetString>
 8008c4c:	e004      	b.n	8008c58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4904      	ldr	r1, [pc, #16]	; (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c52:	4805      	ldr	r0, [pc, #20]	; (8008c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c54:	f7ff fe9f 	bl	8008996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000ad4 	.word	0x20000ad4
 8008c68:	08009360 	.word	0x08009360

08008c6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4907      	ldr	r1, [pc, #28]	; (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c82:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c84:	f7ff fe87 	bl	8008996 <USBD_GetString>
 8008c88:	e004      	b.n	8008c94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	4904      	ldr	r1, [pc, #16]	; (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c8e:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c90:	f7ff fe81 	bl	8008996 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000ad4 	.word	0x20000ad4
 8008ca4:	0800936c 	.word	0x0800936c

08008ca8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cae:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <Get_SerialNum+0x44>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cb4:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <Get_SerialNum+0x48>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <Get_SerialNum+0x4c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d009      	beq.n	8008ce2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cce:	2208      	movs	r2, #8
 8008cd0:	4909      	ldr	r1, [pc, #36]	; (8008cf8 <Get_SerialNum+0x50>)
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f814 	bl	8008d00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008cd8:	2204      	movs	r2, #4
 8008cda:	4908      	ldr	r1, [pc, #32]	; (8008cfc <Get_SerialNum+0x54>)
 8008cdc:	68b8      	ldr	r0, [r7, #8]
 8008cde:	f000 f80f 	bl	8008d00 <IntToUnicode>
  }
}
 8008ce2:	bf00      	nop
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	1ffff7e8 	.word	0x1ffff7e8
 8008cf0:	1ffff7ec 	.word	0x1ffff7ec
 8008cf4:	1ffff7f0 	.word	0x1ffff7f0
 8008cf8:	2000018e 	.word	0x2000018e
 8008cfc:	2000019e 	.word	0x2000019e

08008d00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b087      	sub	sp, #28
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
 8008d16:	e027      	b.n	8008d68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	0f1b      	lsrs	r3, r3, #28
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d80b      	bhi.n	8008d38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	0f1b      	lsrs	r3, r3, #28
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	440b      	add	r3, r1
 8008d30:	3230      	adds	r2, #48	; 0x30
 8008d32:	b2d2      	uxtb	r2, r2
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	e00a      	b.n	8008d4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	0f1b      	lsrs	r3, r3, #28
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	7dfb      	ldrb	r3, [r7, #23]
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	4619      	mov	r1, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	440b      	add	r3, r1
 8008d48:	3237      	adds	r2, #55	; 0x37
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d54:	7dfb      	ldrb	r3, [r7, #23]
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	3301      	adds	r3, #1
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d62:	7dfb      	ldrb	r3, [r7, #23]
 8008d64:	3301      	adds	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
 8008d68:	7dfa      	ldrb	r2, [r7, #23]
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3d3      	bcc.n	8008d18 <IntToUnicode+0x18>
  }
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
	...

08008d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a0d      	ldr	r2, [pc, #52]	; (8008dc0 <HAL_PCD_MspInit+0x44>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d113      	bne.n	8008db6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008d8e:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <HAL_PCD_MspInit+0x48>)
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	4a0c      	ldr	r2, [pc, #48]	; (8008dc4 <HAL_PCD_MspInit+0x48>)
 8008d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d98:	61d3      	str	r3, [r2, #28]
 8008d9a:	4b0a      	ldr	r3, [pc, #40]	; (8008dc4 <HAL_PCD_MspInit+0x48>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	2014      	movs	r0, #20
 8008dac:	f7f9 fd1f 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008db0:	2014      	movs	r0, #20
 8008db2:	f7f9 fd38 	bl	8002826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008db6:	bf00      	nop
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	40005c00 	.word	0x40005c00
 8008dc4:	40021000 	.word	0x40021000

08008dc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008ddc:	4619      	mov	r1, r3
 8008dde:	4610      	mov	r0, r2
 8008de0:	f7fe feb6 	bl	8007b50 <USBD_LL_SetupStage>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	440b      	add	r3, r1
 8008e0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	4619      	mov	r1, r3
 8008e16:	f7fe fee6 	bl	8007be6 <USBD_LL_DataOutStage>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b082      	sub	sp, #8
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	440b      	add	r3, r1
 8008e42:	333c      	adds	r3, #60	; 0x3c
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	f7fe ff3d 	bl	8007cc8 <USBD_LL_DataInStage>
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff f84d 	bl	8007f04 <USBD_LL_SOF>
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d001      	beq.n	8008e8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e86:	f7f8 ff86 	bl	8001d96 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008e90:	7bfa      	ldrb	r2, [r7, #15]
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fffd 	bl	8007e94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fe ffb6 	bl	8007e12 <USBD_LL_Reset>
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe fff8 	bl	8007eb2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	f7f9 f8e8 	bl	8002098 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f7f9 f8dd 	bl	8002098 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7fe fff8 	bl	8007eda <USBD_LL_Resume>
}
 8008eea:	bf00      	nop
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008efc:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <USBD_LL_Init+0x88>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1d      	ldr	r2, [pc, #116]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008f0c:	4b1b      	ldr	r3, [pc, #108]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f0e:	4a1c      	ldr	r2, [pc, #112]	; (8008f80 <USBD_LL_Init+0x8c>)
 8008f10:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008f12:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f14:	2208      	movs	r2, #8
 8008f16:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008f18:	4b18      	ldr	r3, [pc, #96]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008f1e:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f20:	2200      	movs	r2, #0
 8008f22:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008f24:	4b15      	ldr	r3, [pc, #84]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008f2a:	4b14      	ldr	r3, [pc, #80]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008f30:	4812      	ldr	r0, [pc, #72]	; (8008f7c <USBD_LL_Init+0x88>)
 8008f32:	f7fa f835 	bl	8002fa0 <HAL_PCD_Init>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008f3c:	f7f8 ff2b 	bl	8001d96 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f46:	2318      	movs	r3, #24
 8008f48:	2200      	movs	r2, #0
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	f7fb fb52 	bl	80045f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f56:	2358      	movs	r3, #88	; 0x58
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	f7fb fb4a 	bl	80045f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2181      	movs	r1, #129	; 0x81
 8008f6e:	f7fb fb41 	bl	80045f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000cd4 	.word	0x20000cd4
 8008f80:	40005c00 	.word	0x40005c00

08008f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fa f90b 	bl	80031b6 <HAL_PCD_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f93c 	bl	8009224 <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70bb      	strb	r3, [r7, #2]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	883a      	ldrh	r2, [r7, #0]
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	f7fa fa85 	bl	80034f6 <HAL_PCD_EP_Open>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f916 	bl	8009224 <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7fa facc 	bl	80035c2 <HAL_PCD_EP_Close>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f8f7 	bl	8009224 <USBD_Get_USB_Status>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903a:	7bbb      	ldrb	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7fa fb75 	bl	8003752 <HAL_PCD_EP_SetStall>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f8d8 	bl	8009224 <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fa fbb6 	bl	8003812 <HAL_PCD_EP_ClrStall>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8b9 	bl	8009224 <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da0c      	bge.n	80090f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	1c5a      	adds	r2, r3, #1
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	440b      	add	r3, r1
 80090f0:	3302      	adds	r3, #2
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	e00b      	b.n	800910e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f6:	78fb      	ldrb	r3, [r7, #3]
 80090f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fc:	68f9      	ldr	r1, [r7, #12]
 80090fe:	4613      	mov	r3, r2
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	440b      	add	r3, r1
 8009108:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800910c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bc80      	pop	{r7}
 8009116:	4770      	bx	lr

08009118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7fa f9b8 	bl	80034ac <HAL_PCD_SetAddress>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f86e 	bl	8009224 <USBD_Get_USB_Status>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914c:	7bbb      	ldrb	r3, [r7, #14]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	461a      	mov	r2, r3
 8009162:	460b      	mov	r3, r1
 8009164:	72fb      	strb	r3, [r7, #11]
 8009166:	4613      	mov	r3, r2
 8009168:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009178:	893b      	ldrh	r3, [r7, #8]
 800917a:	7af9      	ldrb	r1, [r7, #11]
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	f7fa faa5 	bl	80036cc <HAL_PCD_EP_Transmit>
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f84b 	bl	8009224 <USBD_Get_USB_Status>
 800918e:	4603      	mov	r3, r0
 8009190:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009192:	7dbb      	ldrb	r3, [r7, #22]
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b086      	sub	sp, #24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	461a      	mov	r2, r3
 80091a8:	460b      	mov	r3, r1
 80091aa:	72fb      	strb	r3, [r7, #11]
 80091ac:	4613      	mov	r3, r2
 80091ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091be:	893b      	ldrh	r3, [r7, #8]
 80091c0:	7af9      	ldrb	r1, [r7, #11]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	f7fa fa45 	bl	8003652 <HAL_PCD_EP_Receive>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f828 	bl	8009224 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <USBD_static_malloc+0x14>)
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr
 80091f8:	20000638 	.word	0x20000638

080091fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]

}
 8009204:	bf00      	nop
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr

0800920e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	460b      	mov	r3, r1
 8009218:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800921a:	bf00      	nop
 800921c:	370c      	adds	r7, #12
 800921e:	46bd      	mov	sp, r7
 8009220:	bc80      	pop	{r7}
 8009222:	4770      	bx	lr

08009224 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	4603      	mov	r3, r0
 800922c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800922e:	2300      	movs	r3, #0
 8009230:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	2b03      	cmp	r3, #3
 8009236:	d817      	bhi.n	8009268 <USBD_Get_USB_Status+0x44>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBD_Get_USB_Status+0x1c>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	08009251 	.word	0x08009251
 8009244:	08009257 	.word	0x08009257
 8009248:	0800925d 	.word	0x0800925d
 800924c:	08009263 	.word	0x08009263
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009250:	2300      	movs	r3, #0
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	e00b      	b.n	800926e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009256:	2302      	movs	r3, #2
 8009258:	73fb      	strb	r3, [r7, #15]
    break;
 800925a:	e008      	b.n	800926e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800925c:	2301      	movs	r3, #1
 800925e:	73fb      	strb	r3, [r7, #15]
    break;
 8009260:	e005      	b.n	800926e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009262:	2302      	movs	r3, #2
 8009264:	73fb      	strb	r3, [r7, #15]
    break;
 8009266:	e002      	b.n	800926e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009268:	2302      	movs	r3, #2
 800926a:	73fb      	strb	r3, [r7, #15]
    break;
 800926c:	bf00      	nop
  }
  return usb_status;
 800926e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	bc80      	pop	{r7}
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop

0800927c <__libc_init_array>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	2500      	movs	r5, #0
 8009280:	4e0c      	ldr	r6, [pc, #48]	; (80092b4 <__libc_init_array+0x38>)
 8009282:	4c0d      	ldr	r4, [pc, #52]	; (80092b8 <__libc_init_array+0x3c>)
 8009284:	1ba4      	subs	r4, r4, r6
 8009286:	10a4      	asrs	r4, r4, #2
 8009288:	42a5      	cmp	r5, r4
 800928a:	d109      	bne.n	80092a0 <__libc_init_array+0x24>
 800928c:	f000 f82e 	bl	80092ec <_init>
 8009290:	2500      	movs	r5, #0
 8009292:	4e0a      	ldr	r6, [pc, #40]	; (80092bc <__libc_init_array+0x40>)
 8009294:	4c0a      	ldr	r4, [pc, #40]	; (80092c0 <__libc_init_array+0x44>)
 8009296:	1ba4      	subs	r4, r4, r6
 8009298:	10a4      	asrs	r4, r4, #2
 800929a:	42a5      	cmp	r5, r4
 800929c:	d105      	bne.n	80092aa <__libc_init_array+0x2e>
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092a4:	4798      	blx	r3
 80092a6:	3501      	adds	r5, #1
 80092a8:	e7ee      	b.n	8009288 <__libc_init_array+0xc>
 80092aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ae:	4798      	blx	r3
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7f2      	b.n	800929a <__libc_init_array+0x1e>
 80092b4:	0800949c 	.word	0x0800949c
 80092b8:	0800949c 	.word	0x0800949c
 80092bc:	0800949c 	.word	0x0800949c
 80092c0:	080094a0 	.word	0x080094a0

080092c4 <memcpy>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	1e43      	subs	r3, r0, #1
 80092c8:	440a      	add	r2, r1
 80092ca:	4291      	cmp	r1, r2
 80092cc:	d100      	bne.n	80092d0 <memcpy+0xc>
 80092ce:	bd10      	pop	{r4, pc}
 80092d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d8:	e7f7      	b.n	80092ca <memcpy+0x6>

080092da <memset>:
 80092da:	4603      	mov	r3, r0
 80092dc:	4402      	add	r2, r0
 80092de:	4293      	cmp	r3, r2
 80092e0:	d100      	bne.n	80092e4 <memset+0xa>
 80092e2:	4770      	bx	lr
 80092e4:	f803 1b01 	strb.w	r1, [r3], #1
 80092e8:	e7f9      	b.n	80092de <memset+0x4>
	...

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
