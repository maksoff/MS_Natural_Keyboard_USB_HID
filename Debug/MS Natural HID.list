
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cac  08007cac  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08007cac  08007cac  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cac  08007cac  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cac  08007cac  00017cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08007cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000178  08007e2c  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  08007e2c  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168a9  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035a2  00000000  00000000  00036a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00039ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003b110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b169  00000000  00000000  0003c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011652  00000000  00000000  00057221  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f963  00000000  00000000  00068873  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f81d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004504  00000000  00000000  000f8254  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000178 	.word	0x20000178
 8000128:	00000000 	.word	0x00000000
 800012c:	08007b2c 	.word	0x08007b2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000017c 	.word	0x2000017c
 8000148:	08007b2c 	.word	0x08007b2c

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b50      	ldr	r3, [pc, #320]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4f      	ldr	r2, [pc, #316]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b4d      	ldr	r3, [pc, #308]	; (80002a4 <MX_GPIO_Init+0x158>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b4a      	ldr	r3, [pc, #296]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a49      	ldr	r2, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a43      	ldr	r2, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b41      	ldr	r3, [pc, #260]	; (80002a4 <MX_GPIO_Init+0x158>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001c8:	f001 fb07 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4836      	ldr	r0, [pc, #216]	; (80002ac <MX_GPIO_Init+0x160>)
 80001d4:	f001 fb01 	bl	80017da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001f2:	f001 f981 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <MX_GPIO_Init+0x15c>)
 8000208:	f001 f976 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000210:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <MX_GPIO_Init+0x160>)
 800021e:	f001 f96b 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000222:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000234:	f001 f960 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0x160>)
 8000252:	f001 f951 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_GPIO_Init+0x168>)
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x164>)
 800026c:	f001 f944 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000286:	f001 f937 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2017      	movs	r0, #23
 8000290:	f001 f8fb 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000294:	2017      	movs	r0, #23
 8000296:	f001 f914 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	10210000 	.word	0x10210000

080002b8 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <data_low+0x44>)
 80002c6:	f001 fa88 	bl	80017da <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80002d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <data_low+0x44>)
 80002ee:	f001 f903 	bl	80014f8 <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clock_low>:

void clock_low(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <clock_low+0x44>)
 800030e:	f001 fa64 	bl	80017da <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <clock_low+0x44>)
 8000336:	f001 f8df 	bl	80014f8 <HAL_GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <data_release>:

void data_release(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <data_release+0x34>)
 800036e:	f001 f8c3 	bl	80014f8 <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00

08000380 <clock_release>:

void clock_release(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000396:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <clock_release+0x34>)
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <clock_release+0x38>)
 80003a6:	f001 f8a7 	bl	80014f8 <HAL_GPIO_Init>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	10210000 	.word	0x10210000
 80003b8:	40010c00 	.word	0x40010c00

080003bc <keymap_key_to_keycode>:
static void matrix_break(uint8_t code);
static void matrix_clear(void);


uint8_t keymap_key_to_keycode(uint8_t row,uint8_t col)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	460a      	mov	r2, r1
 80003c6:	71fb      	strb	r3, [r7, #7]
 80003c8:	4613      	mov	r3, r2
 80003ca:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <keymap_key_to_keycode+0x28>)
 80003d2:	00d2      	lsls	r2, r2, #3
 80003d4:	440a      	add	r2, r1
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	08007b9c 	.word	0x08007b9c

080003e8 <register_code>:


// TODO to be deleted

void register_code(uint8_t x)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
	x = x;
	x = x;
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <unregister_code>:

void unregister_code(uint8_t x)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	x = x;
	x = x;
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 800041a:	4bb2      	ldr	r3, [pc, #712]	; (80006e4 <matrix_scan+0x2d4>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 8000420:	2106      	movs	r1, #6
 8000422:	201f      	movs	r0, #31
 8000424:	f000 f962 	bl	80006ec <matrix_is_on>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d002      	beq.n	8000434 <matrix_scan+0x24>
        matrix_break(PAUSE);
 800042e:	20fe      	movs	r0, #254	; 0xfe
 8000430:	f000 f9c2 	bl	80007b8 <matrix_break>
    }

	if (code == 0)
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f000 8150 	beq.w	80006dc <matrix_scan+0x2cc>
		return;

	switch (state) {
 800043c:	4baa      	ldr	r3, [pc, #680]	; (80006e8 <matrix_scan+0x2d8>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b0d      	cmp	r3, #13
 8000442:	f200 8146 	bhi.w	80006d2 <matrix_scan+0x2c2>
 8000446:	a201      	add	r2, pc, #4	; (adr r2, 800044c <matrix_scan+0x3c>)
 8000448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044c:	08000485 	.word	0x08000485
 8000450:	0800055d 	.word	0x0800055d
 8000454:	08000505 	.word	0x08000505
 8000458:	080005ad 	.word	0x080005ad
 800045c:	080005e5 	.word	0x080005e5
 8000460:	080005fd 	.word	0x080005fd
 8000464:	08000615 	.word	0x08000615
 8000468:	0800062d 	.word	0x0800062d
 800046c:	08000645 	.word	0x08000645
 8000470:	0800065d 	.word	0x0800065d
 8000474:	08000675 	.word	0x08000675
 8000478:	08000693 	.word	0x08000693
 800047c:	080006a9 	.word	0x080006a9
 8000480:	080006bf 	.word	0x080006bf
		case INIT:
			switch (code) {
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b84      	cmp	r3, #132	; 0x84
 8000488:	d01f      	beq.n	80004ca <matrix_scan+0xba>
 800048a:	2b84      	cmp	r3, #132	; 0x84
 800048c:	dc04      	bgt.n	8000498 <matrix_scan+0x88>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d022      	beq.n	80004d8 <matrix_scan+0xc8>
 8000492:	2b83      	cmp	r3, #131	; 0x83
 8000494:	d012      	beq.n	80004bc <matrix_scan+0xac>
 8000496:	e025      	b.n	80004e4 <matrix_scan+0xd4>
 8000498:	2be1      	cmp	r3, #225	; 0xe1
 800049a:	d00b      	beq.n	80004b4 <matrix_scan+0xa4>
 800049c:	2bf0      	cmp	r3, #240	; 0xf0
 800049e:	d005      	beq.n	80004ac <matrix_scan+0x9c>
 80004a0:	2be0      	cmp	r3, #224	; 0xe0
 80004a2:	d11f      	bne.n	80004e4 <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 80004a4:	4b90      	ldr	r3, [pc, #576]	; (80006e8 <matrix_scan+0x2d8>)
 80004a6:	2202      	movs	r2, #2
 80004a8:	701a      	strb	r2, [r3, #0]
					break;
 80004aa:	e02a      	b.n	8000502 <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 80004ac:	4b8e      	ldr	r3, [pc, #568]	; (80006e8 <matrix_scan+0x2d8>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
					break;
 80004b2:	e026      	b.n	8000502 <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 80004b4:	4b8c      	ldr	r3, [pc, #560]	; (80006e8 <matrix_scan+0x2d8>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	701a      	strb	r2, [r3, #0]
					break;
 80004ba:	e022      	b.n	8000502 <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 80004bc:	2083      	movs	r0, #131	; 0x83
 80004be:	f000 f931 	bl	8000724 <matrix_make>
					state = INIT;
 80004c2:	4b89      	ldr	r3, [pc, #548]	; (80006e8 <matrix_scan+0x2d8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	701a      	strb	r2, [r3, #0]
					break;
 80004c8:	e01b      	b.n	8000502 <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 80004ca:	20fc      	movs	r0, #252	; 0xfc
 80004cc:	f000 f92a 	bl	8000724 <matrix_make>
					state = INIT;
 80004d0:	4b85      	ldr	r3, [pc, #532]	; (80006e8 <matrix_scan+0x2d8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
					break;
 80004d6:	e014      	b.n	8000502 <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 80004d8:	f000 f9c0 	bl	800085c <matrix_clear>
					state = INIT;
 80004dc:	4b82      	ldr	r3, [pc, #520]	; (80006e8 <matrix_scan+0x2d8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
					break;
 80004e2:	e00e      	b.n	8000502 <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 80004e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	db04      	blt.n	80004f6 <matrix_scan+0xe6>
						matrix_make(code);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f918 	bl	8000724 <matrix_make>
 80004f4:	e001      	b.n	80004fa <matrix_scan+0xea>
					} else {
						matrix_clear();
 80004f6:	f000 f9b1 	bl	800085c <matrix_clear>
					}
					state = INIT;
 80004fa:	4b7b      	ldr	r3, [pc, #492]	; (80006e8 <matrix_scan+0x2d8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000500:	e0ea      	b.n	80006d8 <matrix_scan+0x2c8>
 8000502:	e0e9      	b.n	80006d8 <matrix_scan+0x2c8>
		case E0:    // E0-Prefixed
			switch (code) {
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b59      	cmp	r3, #89	; 0x59
 8000508:	d009      	beq.n	800051e <matrix_scan+0x10e>
 800050a:	2b59      	cmp	r3, #89	; 0x59
 800050c:	dc02      	bgt.n	8000514 <matrix_scan+0x104>
 800050e:	2b12      	cmp	r3, #18
 8000510:	d005      	beq.n	800051e <matrix_scan+0x10e>
 8000512:	e010      	b.n	8000536 <matrix_scan+0x126>
 8000514:	2b7e      	cmp	r3, #126	; 0x7e
 8000516:	d006      	beq.n	8000526 <matrix_scan+0x116>
 8000518:	2bf0      	cmp	r3, #240	; 0xf0
 800051a:	d008      	beq.n	800052e <matrix_scan+0x11e>
 800051c:	e00b      	b.n	8000536 <matrix_scan+0x126>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 800051e:	4b72      	ldr	r3, [pc, #456]	; (80006e8 <matrix_scan+0x2d8>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
					break;
 8000524:	e019      	b.n	800055a <matrix_scan+0x14a>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 8000526:	4b70      	ldr	r3, [pc, #448]	; (80006e8 <matrix_scan+0x2d8>)
 8000528:	220b      	movs	r2, #11
 800052a:	701a      	strb	r2, [r3, #0]
					break;
 800052c:	e015      	b.n	800055a <matrix_scan+0x14a>
				case 0xF0:
					state = E0_F0;
 800052e:	4b6e      	ldr	r3, [pc, #440]	; (80006e8 <matrix_scan+0x2d8>)
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
					break;
 8000534:	e011      	b.n	800055a <matrix_scan+0x14a>
				default:
					if (code < 0x80) {
 8000536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053a:	2b00      	cmp	r3, #0
 800053c:	db07      	blt.n	800054e <matrix_scan+0x13e>
						matrix_make(code|0x80);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000544:	b2db      	uxtb	r3, r3
 8000546:	4618      	mov	r0, r3
 8000548:	f000 f8ec 	bl	8000724 <matrix_make>
 800054c:	e001      	b.n	8000552 <matrix_scan+0x142>
					} else {
						matrix_clear();
 800054e:	f000 f985 	bl	800085c <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000552:	4b65      	ldr	r3, [pc, #404]	; (80006e8 <matrix_scan+0x2d8>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000558:	e0be      	b.n	80006d8 <matrix_scan+0x2c8>
 800055a:	e0bd      	b.n	80006d8 <matrix_scan+0x2c8>
		case F0:    // Break code
			switch (code) {
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b84      	cmp	r3, #132	; 0x84
 8000560:	d00a      	beq.n	8000578 <matrix_scan+0x168>
 8000562:	2bf0      	cmp	r3, #240	; 0xf0
 8000564:	d00f      	beq.n	8000586 <matrix_scan+0x176>
 8000566:	2b83      	cmp	r3, #131	; 0x83
 8000568:	d110      	bne.n	800058c <matrix_scan+0x17c>
				case 0x83:  // F7
					matrix_break(F7);
 800056a:	2083      	movs	r0, #131	; 0x83
 800056c:	f000 f924 	bl	80007b8 <matrix_break>
					state = INIT;
 8000570:	4b5d      	ldr	r3, [pc, #372]	; (80006e8 <matrix_scan+0x2d8>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
					break;
 8000576:	e018      	b.n	80005aa <matrix_scan+0x19a>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000578:	20fc      	movs	r0, #252	; 0xfc
 800057a:	f000 f91d 	bl	80007b8 <matrix_break>
					state = INIT;
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <matrix_scan+0x2d8>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
					break;
 8000584:	e011      	b.n	80005aa <matrix_scan+0x19a>
				case 0xF0:
					matrix_clear();
 8000586:	f000 f969 	bl	800085c <matrix_clear>
					//clear_keyboard();
					break;
 800058a:	e00e      	b.n	80005aa <matrix_scan+0x19a>
				default:
				if (code < 0x80) {
 800058c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	db04      	blt.n	800059e <matrix_scan+0x18e>
					matrix_break(code);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f90e 	bl	80007b8 <matrix_break>
 800059c:	e001      	b.n	80005a2 <matrix_scan+0x192>
				} else {
					matrix_clear();
 800059e:	f000 f95d 	bl	800085c <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 80005a2:	4b51      	ldr	r3, [pc, #324]	; (80006e8 <matrix_scan+0x2d8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005a8:	e096      	b.n	80006d8 <matrix_scan+0x2c8>
 80005aa:	e095      	b.n	80006d8 <matrix_scan+0x2c8>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	2b12      	cmp	r3, #18
 80005b0:	d001      	beq.n	80005b6 <matrix_scan+0x1a6>
 80005b2:	2b59      	cmp	r3, #89	; 0x59
 80005b4:	d104      	bne.n	80005c0 <matrix_scan+0x1b0>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80005b6:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <matrix_scan+0x2d8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
					break;
 80005bc:	bf00      	nop
						matrix_clear();
						//clear_keyboard();
					}
					state = INIT;
			}
			break;
 80005be:	e08b      	b.n	80006d8 <matrix_scan+0x2c8>
					if (code < 0x80) {
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db07      	blt.n	80005d8 <matrix_scan+0x1c8>
						matrix_break(code|0x80);
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f8f1 	bl	80007b8 <matrix_break>
 80005d6:	e001      	b.n	80005dc <matrix_scan+0x1cc>
						matrix_clear();
 80005d8:	f000 f940 	bl	800085c <matrix_clear>
					state = INIT;
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <matrix_scan+0x2d8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
			break;
 80005e2:	e079      	b.n	80006d8 <matrix_scan+0x2c8>
		// following are states of Pause
		case E1:
			switch (code) {
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b14      	cmp	r3, #20
 80005e8:	d104      	bne.n	80005f4 <matrix_scan+0x1e4>
				case 0x14:
					state = E1_14;
 80005ea:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <matrix_scan+0x2d8>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	701a      	strb	r2, [r3, #0]
					break;
 80005f0:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005f2:	e071      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <matrix_scan+0x2d8>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
			break;
 80005fa:	e06d      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14:
			switch (code) {
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b77      	cmp	r3, #119	; 0x77
 8000600:	d104      	bne.n	800060c <matrix_scan+0x1fc>
				case 0x77:
					state = E1_14_77;
 8000602:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <matrix_scan+0x2d8>)
 8000604:	2206      	movs	r2, #6
 8000606:	701a      	strb	r2, [r3, #0]
					break;
 8000608:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800060a:	e065      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <matrix_scan+0x2d8>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
			break;
 8000612:	e061      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14_77:
			switch (code) {
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2be1      	cmp	r3, #225	; 0xe1
 8000618:	d104      	bne.n	8000624 <matrix_scan+0x214>
				case 0xE1:
					state = E1_14_77_E1;
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <matrix_scan+0x2d8>)
 800061c:	2207      	movs	r2, #7
 800061e:	701a      	strb	r2, [r3, #0]
					break;
 8000620:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000622:	e059      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <matrix_scan+0x2d8>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
			break;
 800062a:	e055      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14_77_E1:
			switch (code) {
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2bf0      	cmp	r3, #240	; 0xf0
 8000630:	d104      	bne.n	800063c <matrix_scan+0x22c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <matrix_scan+0x2d8>)
 8000634:	2208      	movs	r2, #8
 8000636:	701a      	strb	r2, [r3, #0]
					break;
 8000638:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800063a:	e04d      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 800063c:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <matrix_scan+0x2d8>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e049      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0:
			switch (code) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b14      	cmp	r3, #20
 8000648:	d104      	bne.n	8000654 <matrix_scan+0x244>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <matrix_scan+0x2d8>)
 800064c:	2209      	movs	r2, #9
 800064e:	701a      	strb	r2, [r3, #0]
					break;
 8000650:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000652:	e041      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <matrix_scan+0x2d8>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			break;
 800065a:	e03d      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0_14:
			switch (code) {
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2bf0      	cmp	r3, #240	; 0xf0
 8000660:	d104      	bne.n	800066c <matrix_scan+0x25c>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <matrix_scan+0x2d8>)
 8000664:	220a      	movs	r2, #10
 8000666:	701a      	strb	r2, [r3, #0]
					break;
 8000668:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800066a:	e035      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <matrix_scan+0x2d8>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e031      	b.n	80006d8 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b77      	cmp	r3, #119	; 0x77
 8000678:	d107      	bne.n	800068a <matrix_scan+0x27a>
				case 0x77:
					matrix_make(PAUSE);
 800067a:	20fe      	movs	r0, #254	; 0xfe
 800067c:	f000 f852 	bl	8000724 <matrix_make>
					state = INIT;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <matrix_scan+0x2d8>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
					break;
 8000686:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000688:	e026      	b.n	80006d8 <matrix_scan+0x2c8>
					state = INIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <matrix_scan+0x2d8>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	e022      	b.n	80006d8 <matrix_scan+0x2c8>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2be0      	cmp	r3, #224	; 0xe0
 8000696:	d103      	bne.n	80006a0 <matrix_scan+0x290>
				state = E0_7E_E0;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <matrix_scan+0x2d8>)
 800069a:	220c      	movs	r2, #12
 800069c:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 800069e:	e01b      	b.n	80006d8 <matrix_scan+0x2c8>
				state = INIT;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <matrix_scan+0x2d8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
			break;
 80006a6:	e017      	b.n	80006d8 <matrix_scan+0x2c8>
		case E0_7E_E0:
			if (code == 0xF0)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	2bf0      	cmp	r3, #240	; 0xf0
 80006ac:	d103      	bne.n	80006b6 <matrix_scan+0x2a6>
				state = E0_7E_E0_F0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <matrix_scan+0x2d8>)
 80006b0:	220d      	movs	r2, #13
 80006b2:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80006b4:	e010      	b.n	80006d8 <matrix_scan+0x2c8>
				state = INIT;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <matrix_scan+0x2d8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
			break;
 80006bc:	e00c      	b.n	80006d8 <matrix_scan+0x2c8>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b7e      	cmp	r3, #126	; 0x7e
 80006c2:	d102      	bne.n	80006ca <matrix_scan+0x2ba>
				matrix_make(PAUSE);
 80006c4:	20fe      	movs	r0, #254	; 0xfe
 80006c6:	f000 f82d 	bl	8000724 <matrix_make>
			state = INIT;
 80006ca:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <matrix_scan+0x2d8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
			break;
 80006d0:	e002      	b.n	80006d8 <matrix_scan+0x2c8>
		default:
			state = INIT;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <matrix_scan+0x2d8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <matrix_scan+0x2ce>
		return;
 80006dc:	bf00      	nop
}
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001b4 	.word	0x200001b4
 80006e8:	200001b5 	.word	0x200001b5

080006ec <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <matrix_is_on+0x34>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4013      	ands	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000194 	.word	0x20000194

08000724 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff ffd4 	bl	80006ec <matrix_is_on>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d12d      	bne.n	80007a6 <matrix_make+0x82>
	    matrix[ROW(code)] |= 1<<COL(code);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <matrix_make+0x8c>)
 8000754:	5c9b      	ldrb	r3, [r3, r2]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b259      	sxtb	r1, r3
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	b2c9      	uxtb	r1, r1
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <matrix_make+0x8c>)
 8000776:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <matrix_make+0x90>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f7ff fe14 	bl	80003bc <keymap_key_to_keycode>
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
		if (KC_NUMLOCK != code)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2b53      	cmp	r3, #83	; 0x53
 800079c:	d003      	beq.n	80007a6 <matrix_make+0x82>
			register_code(code);
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe21 	bl	80003e8 <register_code>
    }

}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000194 	.word	0x20000194
 80007b4:	200001b4 	.word	0x200001b4

080007b8 <matrix_break>:

void matrix_break(uint8_t code)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f7ff ff8a 	bl	80006ec <matrix_is_on>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d036      	beq.n	800084c <matrix_break+0x94>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	08db      	lsrs	r3, r3, #3
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <matrix_break+0x9c>)
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	b25a      	sxtb	r2, r3
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	4013      	ands	r3, r2
 8000800:	b259      	sxtb	r1, r3
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	b2c9      	uxtb	r1, r1
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <matrix_break+0x9c>)
 800080e:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <matrix_break+0xa0>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4619      	mov	r1, r3
 8000826:	4610      	mov	r0, r2
 8000828:	f7ff fdc8 	bl	80003bc <keymap_key_to_keycode>
 800082c:	4603      	mov	r3, r0
 800082e:	71fb      	strb	r3, [r7, #7]
		if (KC_NUMLOCK == code)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	2b53      	cmp	r3, #83	; 0x53
 8000834:	d103      	bne.n	800083e <matrix_break+0x86>
			register_code(code);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fdd5 	bl	80003e8 <register_code>
		if (KC_NUMLOCK != code)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b53      	cmp	r3, #83	; 0x53
 8000842:	d003      	beq.n	800084c <matrix_break+0x94>
			unregister_code(code);
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fdd8 	bl	80003fc <unregister_code>
    }
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000194 	.word	0x20000194
 8000858:	200001b4 	.word	0x200001b4

0800085c <matrix_clear>:

void matrix_clear(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e006      	b.n	8000876 <matrix_clear+0x1a>
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	4a07      	ldr	r2, [pc, #28]	; (8000888 <matrix_clear+0x2c>)
 800086c:	2100      	movs	r1, #0
 800086e:	54d1      	strb	r1, [r2, r3]
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3301      	adds	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	2b1f      	cmp	r3, #31
 800087a:	d9f5      	bls.n	8000868 <matrix_clear+0xc>
}
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000194 	.word	0x20000194

0800088c <process_keyboard_USB>:
/*********************/

uint8_t ready_to_send = 1;

void process_keyboard_USB(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint16_t cnt = cnt_max;
	if (kbuf_has_data())
 8000890:	f000 f82a 	bl	80008e8 <kbuf_has_data>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d014      	beq.n	80008c4 <process_keyboard_USB+0x38>
	{
		if (ready_to_send)
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <process_keyboard_USB+0x3c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <process_keyboard_USB+0x1e>
		{
			cnt = cnt_max;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <process_keyboard_USB+0x40>)
 80008a4:	22fa      	movs	r2, #250	; 0xfa
 80008a6:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
		}
		else if (--cnt == 0) // timeout, just push this data
			ready_to_send = 1;
	}
}
 80008a8:	e00c      	b.n	80008c4 <process_keyboard_USB+0x38>
		else if (--cnt == 0) // timeout, just push this data
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <process_keyboard_USB+0x40>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <process_keyboard_USB+0x40>)
 80008b4:	801a      	strh	r2, [r3, #0]
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <process_keyboard_USB+0x40>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d102      	bne.n	80008c4 <process_keyboard_USB+0x38>
			ready_to_send = 1;
 80008be:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <process_keyboard_USB+0x3c>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	701a      	strb	r2, [r3, #0]
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000002 	.word	0x20000002

080008d0 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <USB_HID_buffer_sent_Callback+0x14>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000000 	.word	0x20000000

080008e8 <kbuf_has_data>:
    }
    return val;
}

uint8_t kbuf_has_data(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
    return (kbuf_head != kbuf_tail);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <kbuf_has_data+0x20>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <kbuf_has_data+0x24>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	bf14      	ite	ne
 80008f8:	2301      	movne	r3, #1
 80008fa:	2300      	moveq	r3, #0
 80008fc:	b2db      	uxtb	r3, r3
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	200001b6 	.word	0x200001b6
 800090c:	200001b7 	.word	0x200001b7

08000910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000914:	f000 fc5e 	bl	80011d4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000918:	f000 f82a 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091c:	f7ff fc16 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000920:	f006 fd24 	bl	800736c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000924:	f000 fbc2 	bl	80010ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000928:	480e      	ldr	r0, [pc, #56]	; (8000964 <main+0x54>)
 800092a:	f002 ffe3 	bl	80038f4 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 800092e:	20fa      	movs	r0, #250	; 0xfa
 8000930:	f000 fb7c 	bl	800102c <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <main+0x58>)
 800093c:	f000 ff4d 	bl	80017da <HAL_GPIO_WritePin>
  reset_us_counter();
 8000940:	f000 fb92 	bl	8001068 <reset_us_counter>
  init_PS2();
 8000944:	f000 f974 	bl	8000c30 <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <main+0x5c>)
 8000950:	f000 ff43 	bl	80017da <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000954:	f000 fa5e 	bl	8000e14 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8000958:	f7ff ff98 	bl	800088c <process_keyboard_USB>
	  _delay_ms(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f000 fb65 	bl	800102c <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000962:	e7f7      	b.n	8000954 <main+0x44>
 8000964:	2000021c 	.word	0x2000021c
 8000968:	40010800 	.word	0x40010800
 800096c:	40011000 	.word	0x40011000

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800097a:	2228      	movs	r2, #40	; 0x28
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f007 f8cc 	bl	8007b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80009bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 faa4 	bl	8002f14 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80009d2:	f000 f828 	bl	8000a26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fd0e 	bl	8003414 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80009fe:	f000 f812 	bl	8000a26 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a02:	2310      	movs	r3, #16
 8000a04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000a06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a0a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fe6a 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a1a:	f000 f804 	bl	8000a26 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3750      	adds	r7, #80	; 0x50
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x6>
	...

08000a30 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a40:	f040 80e6 	bne.w	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8000a44:	4b74      	ldr	r3, [pc, #464]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d060      	beq.n	8000b0e <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8000a4c:	4b72      	ldr	r3, [pc, #456]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d109      	bne.n	8000a68 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8000a54:	4b70      	ldr	r3, [pc, #448]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000a5a:	4b70      	ldr	r3, [pc, #448]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000a60:	4b6f      	ldr	r3, [pc, #444]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
				return;
 8000a66:	e0d3      	b.n	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8000a68:	4b6c      	ldr	r3, [pc, #432]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a6e:	2b07      	cmp	r3, #7
 8000a70:	dc1b      	bgt.n	8000aaa <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8000a72:	4b6c      	ldr	r3, [pc, #432]	; (8000c24 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b68      	ldr	r3, [pc, #416]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8000a7e:	fa42 f303 	asr.w	r3, r2, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00c      	beq.n	8000aa4 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8000a8a:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf0c      	ite	eq
 8000a92:	2301      	moveq	r3, #1
 8000a94:	2300      	movne	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000a9c:	701a      	strb	r2, [r3, #0]
					data_release();
 8000a9e:	f7ff fc53 	bl	8000348 <data_release>
 8000aa2:	e02a      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8000aa4:	f7ff fc08 	bl	80002b8 <data_low>
 8000aa8:	e027      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000aac:	f993 3000 	ldrsb.w	r3, [r3]
 8000ab0:	2b08      	cmp	r3, #8
 8000ab2:	d109      	bne.n	8000ac8 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8000ab4:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8000abc:	f7ff fc44 	bl	8000348 <data_release>
 8000ac0:	e01b      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8000ac2:	f7ff fbf9 	bl	80002b8 <data_low>
 8000ac6:	e018      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8000ac8:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000aca:	f993 3000 	ldrsb.w	r3, [r3]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d102      	bne.n	8000ad8 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8000ad2:	f7ff fc39 	bl	8000348 <data_release>
 8000ad6:	e010      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8000ad8:	4b50      	ldr	r3, [pc, #320]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ada:	f993 3000 	ldrsb.w	r3, [r3]
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d10b      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8000ae2:	f7ff fc31 	bl	8000348 <data_release>
				sendMode = 0;
 8000ae6:	4b4c      	ldr	r3, [pc, #304]	; (8000c18 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8000aec:	4b4c      	ldr	r3, [pc, #304]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000af2:	4b4a      	ldr	r3, [pc, #296]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
				return;
 8000af8:	e08a      	b.n	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8000afa:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000afc:	f993 3000 	ldrsb.w	r3, [r3]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	3301      	adds	r3, #1
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	b25a      	sxtb	r2, r3
 8000b08:	4b44      	ldr	r3, [pc, #272]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b0a:	701a      	strb	r2, [r3, #0]
			return;
 8000b0c:	e080      	b.n	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8000b0e:	20c8      	movs	r0, #200	; 0xc8
 8000b10:	f000 fab6 	bl	8001080 <check_us_counter>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 8000b1a:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8000b20:	f000 faa2 	bl	8001068 <reset_us_counter>
			if (bitNr == 0)
 8000b24:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b26:	f993 3000 	ldrsb.w	r3, [r3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10e      	bne.n	8000b4c <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b32:	483d      	ldr	r0, [pc, #244]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000b34:	f000 fe3a 	bl	80017ac <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d167      	bne.n	8000c0e <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000b44:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e056      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8000b4c:	4b33      	ldr	r3, [pc, #204]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b4e:	f993 3000 	ldrsb.w	r3, [r3]
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	dc1f      	bgt.n	8000b96 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000b60:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000b62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b66:	4830      	ldr	r0, [pc, #192]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000b68:	f000 fe20 	bl	80017ac <HAL_GPIO_ReadPin>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d043      	beq.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000b7e:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8000b80:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf0c      	ite	eq
 8000b88:	2301      	moveq	r3, #1
 8000b8a:	2300      	movne	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b23      	ldr	r3, [pc, #140]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	e031      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000b98:	f993 3000 	ldrsb.w	r3, [r3]
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d112      	bne.n	8000bc6 <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	4820      	ldr	r0, [pc, #128]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000ba6:	f000 fe01 	bl	80017ac <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d024      	beq.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e019      	b.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d114      	bne.n	8000bfa <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8000bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd4:	4814      	ldr	r0, [pc, #80]	; (8000c28 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000bd6:	f000 fde9 	bl	80017ac <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <HAL_GPIO_EXTI_Callback+0x1c2>
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f943 	bl	8000e78 <buf_push>
				bitNr = 0;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
				return;
 8000bf8:	e00a      	b.n	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	b25a      	sxtb	r2, r3
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 8000c0e:	bf00      	nop
	}
}
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001b8 	.word	0x200001b8
 8000c1c:	200001ba 	.word	0x200001ba
 8000c20:	200001be 	.word	0x200001be
 8000c24:	200001b9 	.word	0x200001b9
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	200001bf 	.word	0x200001bf

08000c30 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8000c36:	20ff      	movs	r0, #255	; 0xff
 8000c38:	f000 f820 	bl	8000c7c <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8000c3c:	f000 f8cc 	bl	8000dd8 <wait_response_PS2>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2bfa      	cmp	r3, #250	; 0xfa
 8000c44:	d004      	beq.n	8000c50 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8000c46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4a:	f000 f9ef 	bl	800102c <_delay_ms>
		send_PS2(PS2_RESET);
 8000c4e:	e7f2      	b.n	8000c36 <init_PS2+0x6>
			break;
 8000c50:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	e007      	b.n	8000c68 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8000c58:	f000 f8be 	bl	8000dd8 <wait_response_PS2>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2baa      	cmp	r3, #170	; 0xaa
 8000c60:	d006      	beq.n	8000c70 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f4      	bne.n	8000c58 <init_PS2+0x28>
			break;
	}
}
 8000c6e:	e000      	b.n	8000c72 <init_PS2+0x42>
			break;
 8000c70:	bf00      	nop
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <send_PS2+0x3c>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
	clock_low();
 8000c8c:	f7ff fb38 	bl	8000300 <clock_low>
	bitNr = 0;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <send_PS2+0x40>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <send_PS2+0x44>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f000 f9d0 	bl	8001042 <_delay_us>

	data_low();
 8000ca2:	f7ff fb09 	bl	80002b8 <data_low>
	_delay_us(10);
 8000ca6:	200a      	movs	r0, #10
 8000ca8:	f000 f9cb 	bl	8001042 <_delay_us>
	clock_release();
 8000cac:	f7ff fb68 	bl	8000380 <clock_release>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200001b8 	.word	0x200001b8
 8000cbc:	200001ba 	.word	0x200001ba
 8000cc0:	200001b9 	.word	0x200001b9

08000cc4 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d003      	beq.n	8000d08 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SET_LEDS_Callback+0x5c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <SET_LEDS_Callback+0x60>)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	7013      	strb	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200001d9 	.word	0x200001d9
 8000d24:	200001d8 	.word	0x200001d8

08000d28 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <USBD_Sleep_Callback+0x20>)
 8000d3a:	701a      	strb	r2, [r3, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200001bb 	.word	0x200001bb

08000d4c <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <leds_PS2+0x84>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d02f      	beq.n	8000dbe <leds_PS2+0x72>
		return;
	if (buf_has_data())
 8000d5e:	f000 f8df 	bl	8000f20 <buf_has_data>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d12c      	bne.n	8000dc2 <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <leds_PS2+0x84>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d74:	4817      	ldr	r0, [pc, #92]	; (8000dd4 <leds_PS2+0x88>)
 8000d76:	f000 fd30 	bl	80017da <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	73fb      	strb	r3, [r7, #15]
 8000d7e:	e01a      	b.n	8000db6 <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 8000d80:	20ed      	movs	r0, #237	; 0xed
 8000d82:	f7ff ff7b 	bl	8000c7c <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 8000d86:	f000 f827 	bl	8000dd8 <wait_response_PS2>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2bfa      	cmp	r3, #250	; 0xfa
 8000d8e:	d003      	beq.n	8000d98 <leds_PS2+0x4c>
		{
			_delay_ms(20);
 8000d90:	2014      	movs	r0, #20
 8000d92:	f000 f94b 	bl	800102c <_delay_ms>
			continue;
 8000d96:	e00b      	b.n	8000db0 <leds_PS2+0x64>
		}
		send_PS2(led);
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff6e 	bl	8000c7c <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8000da0:	f000 f81a 	bl	8000dd8 <wait_response_PS2>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2bfa      	cmp	r3, #250	; 0xfa
 8000da8:	d00d      	beq.n	8000dc6 <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 8000daa:	2014      	movs	r0, #20
 8000dac:	f000 f93e 	bl	800102c <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e1      	bne.n	8000d80 <leds_PS2+0x34>
 8000dbc:	e004      	b.n	8000dc8 <leds_PS2+0x7c>
		return;
 8000dbe:	bf00      	nop
 8000dc0:	e002      	b.n	8000dc8 <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <leds_PS2+0x7c>
			return;
 8000dc6:	bf00      	nop
	}
}
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001d9 	.word	0x200001d9
 8000dd4:	40011000 	.word	0x40011000

08000dd8 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 8000dde:	2319      	movs	r3, #25
 8000de0:	71fb      	strb	r3, [r7, #7]
 8000de2:	e00a      	b.n	8000dfa <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 8000de4:	f000 f89c 	bl	8000f20 <buf_has_data>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d109      	bne.n	8000e02 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 8000dee:	2001      	movs	r0, #1
 8000df0:	f000 f91c 	bl	800102c <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1f1      	bne.n	8000de4 <wait_response_PS2+0xc>
 8000e00:	e000      	b.n	8000e04 <wait_response_PS2+0x2c>
			break;
 8000e02:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 8000e04:	f000 f862 	bl	8000ecc <buf_pop>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	if (sleep)
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <process_PS2+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d012      	beq.n	8000e46 <process_PS2+0x32>
	{
		leds_updated = 1;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <process_PS2+0x5c>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <process_PS2+0x58>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d103      	bne.n	8000e36 <process_PS2+0x22>
		{
			leds_PS2(0);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff ff8c 	bl	8000d4c <leds_PS2>
 8000e34:	e004      	b.n	8000e40 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <process_PS2+0x60>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff86 	bl	8000d4c <leds_PS2>
		}
		sleep = 0;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <process_PS2+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 8000e46:	f000 f86b 	bl	8000f20 <buf_has_data>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8000e50:	f000 f83c 	bl	8000ecc <buf_pop>
 8000e54:	4603      	mov	r3, r0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fada 	bl	8000410 <matrix_scan>
	else
		leds_PS2(leds_data);
}
 8000e5c:	e004      	b.n	8000e68 <process_PS2+0x54>
		leds_PS2(leds_data);
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <process_PS2+0x60>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff72 	bl	8000d4c <leds_PS2>
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200001bb 	.word	0x200001bb
 8000e70:	200001d9 	.word	0x200001d9
 8000e74:	200001d8 	.word	0x200001d8

08000e78 <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <buf_push+0x48>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	425a      	negs	r2, r3
 8000e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e92:	bf58      	it	pl
 8000e94:	4253      	negpl	r3, r2
 8000e96:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <buf_push+0x4c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d008      	beq.n	8000eb4 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <buf_push+0x48>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <buf_push+0x50>)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <buf_push+0x48>)
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	7013      	strb	r3, [r2, #0]
    }
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200001bc 	.word	0x200001bc
 8000ec4:	200001bd 	.word	0x200001bd
 8000ec8:	200001dc 	.word	0x200001dc

08000ecc <buf_pop>:

uint8_t buf_pop(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <buf_pop+0x48>)
 8000ed8:	781a      	ldrb	r2, [r3, #0]
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <buf_pop+0x4c>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d012      	beq.n	8000f08 <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <buf_pop+0x4c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <buf_pop+0x50>)
 8000eea:	5c9b      	ldrb	r3, [r3, r2]
 8000eec:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 8000eee:	4b0a      	ldr	r3, [pc, #40]	; (8000f18 <buf_pop+0x4c>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	425a      	negs	r2, r3
 8000ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000efa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000efe:	bf58      	it	pl
 8000f00:	4253      	negpl	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <buf_pop+0x4c>)
 8000f06:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	200001bc 	.word	0x200001bc
 8000f18:	200001bd 	.word	0x200001bd
 8000f1c:	200001dc 	.word	0x200001dc

08000f20 <buf_has_data>:

uint8_t buf_has_data(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <buf_has_data+0x20>)
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <buf_has_data+0x24>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	bf14      	ite	ne
 8000f30:	2301      	movne	r3, #1
 8000f32:	2300      	moveq	r3, #0
 8000f34:	b2db      	uxtb	r3, r3
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200001bc 	.word	0x200001bc
 8000f44:	200001bd 	.word	0x200001bd

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a0e      	ldr	r2, [pc, #56]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_MspInit+0x60>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_MspInit+0x60>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f935 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001002:	f000 fd4c 	bl	8001a9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000072c 	.word	0x2000072c

08001010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001014:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001018:	f000 fbf8 	bl	800180c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}

08001020 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f92f 	bl	8001298 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 800104c:	f000 f80c 	bl	8001068 <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001050:	bf00      	nop
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f813 	bl	8001080 <check_us_counter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f8      	bne.n	8001052 <_delay_us+0x10>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <reset_us_counter>:

inline void reset_us_counter(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <reset_us_counter+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	2000021c 	.word	0x2000021c

08001080 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <check_us_counter+0x28>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	b29b      	uxth	r3, r3
 8001092:	88fa      	ldrh	r2, [r7, #6]
 8001094:	429a      	cmp	r2, r3
 8001096:	bf8c      	ite	hi
 8001098:	2301      	movhi	r3, #1
 800109a:	2300      	movls	r3, #0
 800109c:	b2db      	uxtb	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	2000021c 	.word	0x2000021c

080010ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_TIM1_Init+0x98>)
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <MX_TIM1_Init+0x9c>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_TIM1_Init+0x98>)
 80010d0:	222f      	movs	r2, #47	; 0x2f
 80010d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_TIM1_Init+0x98>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_TIM1_Init+0x98>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_TIM1_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_TIM1_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_TIM1_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_TIM1_Init+0x98>)
 80010f6:	f002 fbad 	bl	8003854 <HAL_TIM_Base_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001100:	f7ff fc91 	bl	8000a26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <MX_TIM1_Init+0x98>)
 8001112:	f002 fc39 	bl	8003988 <HAL_TIM_ConfigClockSource>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800111c:	f7ff fc83 	bl	8000a26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	4619      	mov	r1, r3
 800112c:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_TIM1_Init+0x98>)
 800112e:	f002 fddb 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001138:	f7ff fc75 	bl	8000a26 <Error_Handler>
  }

}
 800113c:	bf00      	nop
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000021c 	.word	0x2000021c
 8001148:	40012c00 	.word	0x40012c00

0800114c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_TIM_Base_MspInit+0x34>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10b      	bne.n	8001176 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 8001164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001168:	6193      	str	r3, [r2, #24]
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_TIM_Base_MspInit+0x38>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	40012c00 	.word	0x40012c00
 8001184:	40021000 	.word	0x40021000

08001188 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001188:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800118a:	e003      	b.n	8001194 <LoopCopyDataInit>

0800118c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800118e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001190:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001192:	3104      	adds	r1, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001198:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800119c:	d3f6      	bcc.n	800118c <CopyDataInit>
  ldr r2, =_sbss
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80011a0:	e002      	b.n	80011a8 <LoopFillZerobss>

080011a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80011a4:	f842 3b04 	str.w	r3, [r2], #4

080011a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011ac:	d3f9      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011ae:	f7ff ff37 	bl	8001020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f006 fc8f 	bl	8007ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011b6:	f7ff fbab 	bl	8000910 <main>
  bx lr
 80011ba:	4770      	bx	lr
  ldr r3, =_sidata
 80011bc:	08007cb4 	.word	0x08007cb4
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011c4:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 80011c8:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 80011cc:	20000a18 	.word	0x20000a18

080011d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC1_2_IRQHandler>
	...

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f945 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff feaa 	bl	8000f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f95d 	bl	80014de <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f925 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000004 	.word	0x20000004
 8001258:	2000000c 	.word	0x2000000c
 800125c:	20000008 	.word	0x20000008

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000264 	.word	0x20000264

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000264 	.word	0x20000264

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_Delay+0x40>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000000c 	.word	0x2000000c

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff90 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff2d 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff42 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff35 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e127      	b.n	800175c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800150c:	2201      	movs	r2, #1
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8116 	bne.w	8001756 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b12      	cmp	r3, #18
 8001530:	d034      	beq.n	800159c <HAL_GPIO_Init+0xa4>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d80d      	bhi.n	8001552 <HAL_GPIO_Init+0x5a>
 8001536:	2b02      	cmp	r3, #2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x9a>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d804      	bhi.n	8001548 <HAL_GPIO_Init+0x50>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d031      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d01c      	beq.n	8001580 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001546:	e048      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001548:	2b03      	cmp	r3, #3
 800154a:	d043      	beq.n	80015d4 <HAL_GPIO_Init+0xdc>
 800154c:	2b11      	cmp	r3, #17
 800154e:	d01b      	beq.n	8001588 <HAL_GPIO_Init+0x90>
          break;
 8001550:	e043      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001552:	4a89      	ldr	r2, [pc, #548]	; (8001778 <HAL_GPIO_Init+0x280>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d026      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001558:	4a87      	ldr	r2, [pc, #540]	; (8001778 <HAL_GPIO_Init+0x280>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d806      	bhi.n	800156c <HAL_GPIO_Init+0x74>
 800155e:	4a87      	ldr	r2, [pc, #540]	; (800177c <HAL_GPIO_Init+0x284>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d020      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001564:	4a86      	ldr	r2, [pc, #536]	; (8001780 <HAL_GPIO_Init+0x288>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01d      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800156a:	e036      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800156c:	4a85      	ldr	r2, [pc, #532]	; (8001784 <HAL_GPIO_Init+0x28c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001572:	4a85      	ldr	r2, [pc, #532]	; (8001788 <HAL_GPIO_Init+0x290>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d016      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001578:	4a84      	ldr	r2, [pc, #528]	; (800178c <HAL_GPIO_Init+0x294>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800157e:	e02c      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e028      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e023      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e01e      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	330c      	adds	r3, #12
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e019      	b.n	80015da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ae:	2304      	movs	r3, #4
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e012      	b.n	80015da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	611a      	str	r2, [r3, #16]
          break;
 80015c6:	e008      	b.n	80015da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	615a      	str	r2, [r3, #20]
          break;
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2bff      	cmp	r3, #255	; 0xff
 80015de:	d801      	bhi.n	80015e4 <HAL_GPIO_Init+0xec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	e001      	b.n	80015e8 <HAL_GPIO_Init+0xf0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d802      	bhi.n	80015f6 <HAL_GPIO_Init+0xfe>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x104>
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3b08      	subs	r3, #8
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	210f      	movs	r1, #15
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8096 	beq.w	8001756 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162a:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_GPIO_Init+0x298>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_GPIO_Init+0x298>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b56      	ldr	r3, [pc, #344]	; (8001790 <HAL_GPIO_Init+0x298>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001642:	4a54      	ldr	r2, [pc, #336]	; (8001794 <HAL_GPIO_Init+0x29c>)
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x19e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4a      	ldr	r2, [pc, #296]	; (800179c <HAL_GPIO_Init+0x2a4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x19a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x196>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x192>
 8001686:	2303      	movs	r3, #3
 8001688:	e006      	b.n	8001698 <HAL_GPIO_Init+0x1a0>
 800168a:	2304      	movs	r3, #4
 800168c:	e004      	b.n	8001698 <HAL_GPIO_Init+0x1a0>
 800168e:	2302      	movs	r3, #2
 8001690:	e002      	b.n	8001698 <HAL_GPIO_Init+0x1a0>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x1a0>
 8001696:	2300      	movs	r3, #0
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	f002 0203 	and.w	r2, r2, #3
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	4093      	lsls	r3, r2
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016a8:	493a      	ldr	r1, [pc, #232]	; (8001794 <HAL_GPIO_Init+0x29c>)
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	3302      	adds	r3, #2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d006      	beq.n	80016d0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016c2:	4b39      	ldr	r3, [pc, #228]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4938      	ldr	r1, [pc, #224]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
 80016ce:	e006      	b.n	80016de <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4933      	ldr	r1, [pc, #204]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016da:	4013      	ands	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ea:	4b2f      	ldr	r3, [pc, #188]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	492e      	ldr	r1, [pc, #184]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	43db      	mvns	r3, r3
 8001700:	4929      	ldr	r1, [pc, #164]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001702:	4013      	ands	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001712:	4b25      	ldr	r3, [pc, #148]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	4924      	ldr	r1, [pc, #144]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
 800171e:	e006      	b.n	800172e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	43db      	mvns	r3, r3
 8001728:	491f      	ldr	r1, [pc, #124]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 800172a:	4013      	ands	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	491a      	ldr	r1, [pc, #104]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	60cb      	str	r3, [r1, #12]
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	43db      	mvns	r3, r3
 8001750:	4915      	ldr	r1, [pc, #84]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001752:	4013      	ands	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	3301      	adds	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	f47f aed0 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 800176c:	bf00      	nop
 800176e:	372c      	adds	r7, #44	; 0x2c
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	10210000 	.word	0x10210000
 800177c:	10110000 	.word	0x10110000
 8001780:	10120000 	.word	0x10120000
 8001784:	10310000 	.word	0x10310000
 8001788:	10320000 	.word	0x10320000
 800178c:	10220000 	.word	0x10220000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40011400 	.word	0x40011400
 80017a8:	40010400 	.word	0x40010400

080017ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	807b      	strh	r3, [r7, #2]
 80017e6:	4613      	mov	r3, r2
 80017e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ea:	787b      	ldrb	r3, [r7, #1]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f6:	e003      	b.n	8001800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f8:	887b      	ldrh	r3, [r7, #2]
 80017fa:	041a      	lsls	r2, r3, #16
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d006      	beq.n	8001830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f900 	bl	8000a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af06      	add	r7, sp, #24
 8001842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0fd      	b.n	8001a4a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d106      	bne.n	8001868 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f005 feb6 	bl	80075d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2203      	movs	r2, #3
 800186c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fabb 	bl	8003df0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	687e      	ldr	r6, [r7, #4]
 8001882:	466d      	mov	r5, sp
 8001884:	f106 0410 	add.w	r4, r6, #16
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	1d33      	adds	r3, r6, #4
 8001892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001894:	6838      	ldr	r0, [r7, #0]
 8001896:	f002 fa85 	bl	8003da4 <USB_CoreInit>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0ce      	b.n	8001a4a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 fab6 	bl	8003e24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	73fb      	strb	r3, [r7, #15]
 80018bc:	e04c      	b.n	8001958 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3301      	adds	r3, #1
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b298      	uxth	r0, r3
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	3336      	adds	r3, #54	; 0x36
 80018fc:	4602      	mov	r2, r0
 80018fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3303      	adds	r3, #3
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3338      	adds	r3, #56	; 0x38
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	333c      	adds	r3, #60	; 0x3c
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	440b      	add	r3, r1
 800194c:	3340      	adds	r3, #64	; 0x40
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3ad      	bcc.n	80018be <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e044      	b.n	80019f2 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	f203 1369 	addw	r3, r3, #361	; 0x169
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	3301      	adds	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	7bfa      	ldrb	r2, [r7, #15]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d3b5      	bcc.n	8001968 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	687e      	ldr	r6, [r7, #4]
 8001a04:	466d      	mov	r5, sp
 8001a06:	f106 0410 	add.w	r4, r6, #16
 8001a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0e:	6823      	ldr	r3, [r4, #0]
 8001a10:	602b      	str	r3, [r5, #0]
 8001a12:	1d33      	adds	r3, r6, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f002 fa10 	bl	8003e3c <USB_DevInit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2202      	movs	r2, #2
 8001a26:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00d      	b.n	8001a4a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f004 f9aa 	bl	8005d9c <USB_DevDisconnect>

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a52 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_PCD_Start+0x16>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e016      	b.n	8001a96 <HAL_PCD_Start+0x44>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 f9a5 	bl	8003dc4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f005 fff2 	bl	8007a66 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 f97e 	bl	8005d88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b088      	sub	sp, #32
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 f980 	bl	8005db0 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aba:	d102      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fb4a 	bl	8002156 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 f972 	bl	8005db0 <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad6:	d112      	bne.n	8001afe <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f005 fdea 	bl	80076ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001af6:	2100      	movs	r1, #0
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f925 	bl	8001d48 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f004 f954 	bl	8005db0 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b12:	d10b      	bne.n	8001b2c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b26:	b292      	uxth	r2, r2
 8001b28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 f93d 	bl	8005db0 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b40:	d10b      	bne.n	8001b5a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b54:	b292      	uxth	r2, r2
 8001b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 f926 	bl	8005db0 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6e:	d126      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0204 	bic.w	r2, r2, #4
 8001b82:	b292      	uxth	r2, r2
 8001b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0208 	bic.w	r2, r2, #8
 8001b9a:	b292      	uxth	r2, r2
 8001b9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f005 fdc1 	bl	8007728 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bb8:	b292      	uxth	r2, r2
 8001bba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 f8f4 	bl	8005db0 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd2:	f040 8084 	bne.w	8001cde <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	77fb      	strb	r3, [r7, #31]
 8001bda:	e011      	b.n	8001c00 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	441a      	add	r2, r3
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	8812      	ldrh	r2, [r2, #0]
 8001bec:	b292      	uxth	r2, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	f107 0120 	add.w	r1, r7, #32
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	77fb      	strb	r3, [r7, #31]
 8001c00:	7ffb      	ldrb	r3, [r7, #31]
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	d9ea      	bls.n	8001bdc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	b292      	uxth	r2, r2
 8001c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	b292      	uxth	r2, r2
 8001c32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c36:	bf00      	nop
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0f6      	beq.n	8001c38 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c5c:	b292      	uxth	r2, r2
 8001c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	77fb      	strb	r3, [r7, #31]
 8001c66:	e010      	b.n	8001c8a <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	7ffa      	ldrb	r2, [r7, #31]
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	440a      	add	r2, r1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	f107 0120 	add.w	r1, r7, #32
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001c82:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c84:	7ffb      	ldrb	r3, [r7, #31]
 8001c86:	3301      	adds	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	2b07      	cmp	r3, #7
 8001c8e:	d9eb      	bls.n	8001c68 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0208 	orr.w	r2, r2, #8
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0204 	orr.w	r2, r2, #4
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f005 fd14 	bl	8007706 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 f864 	bl	8005db0 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf2:	d10e      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d06:	b292      	uxth	r2, r2
 8001d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f005 fcce 	bl	80076ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f84a 	bl	8005db0 <USB_ReadInterrupts>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d26:	d10b      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_PCD_SetAddress+0x1a>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e013      	b.n	8001d8a <HAL_PCD_SetAddress+0x42>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 fff1 	bl	8005d62 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	4608      	mov	r0, r1
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	70fb      	strb	r3, [r7, #3]
 8001da4:	460b      	mov	r3, r1
 8001da6:	803b      	strh	r3, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da0e      	bge.n	8001dd6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
 8001dd4:	e00e      	b.n	8001df4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 0207 	and.w	r2, r3, #7
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e00:	883a      	ldrh	r2, [r7, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	78ba      	ldrb	r2, [r7, #2]
 8001e0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	785b      	ldrb	r3, [r3, #1]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e1e:	78bb      	ldrb	r3, [r7, #2]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d102      	bne.n	8001e2a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_Open+0xa6>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e00e      	b.n	8001e56 <HAL_PCD_EP_Open+0xc4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 f818 	bl	8003e7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e54:	7afb      	ldrb	r3, [r7, #11]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da0e      	bge.n	8001e90 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	705a      	strb	r2, [r3, #1]
 8001e8e:	e00e      	b.n	8001eae <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_PCD_EP_Close+0x6a>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e00e      	b.n	8001ee6 <HAL_PCD_EP_Close+0x88>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68f9      	ldr	r1, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f002 fb3a 	bl	8004550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	60f8      	str	r0, [r7, #12]
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	460b      	mov	r3, r1
 8001efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001efe:	7afb      	ldrb	r3, [r7, #11]
 8001f00:	f003 0207 	and.w	r2, r3, #7
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d106      	bne.n	8001f52 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6979      	ldr	r1, [r7, #20]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 fcec 	bl	8004928 <USB_EPStartXfer>
 8001f50:	e005      	b.n	8001f5e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6979      	ldr	r1, [r7, #20]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f002 fce5 	bl	8004928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	607a      	str	r2, [r7, #4]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	460b      	mov	r3, r1
 8001f76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6979      	ldr	r1, [r7, #20]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fca9 	bl	8004928 <USB_EPStartXfer>
 8001fd6:	e005      	b.n	8001fe4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6979      	ldr	r1, [r7, #20]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fca2 	bl	8004928 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 0207 	and.w	r2, r3, #7
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d901      	bls.n	800200c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e04c      	b.n	80020a6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800200c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da0e      	bge.n	8002032 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	1c5a      	adds	r2, r3, #1
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2201      	movs	r2, #1
 800202e:	705a      	strb	r2, [r3, #1]
 8002030:	e00c      	b.n	800204c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_PCD_EP_SetStall+0x7e>
 8002068:	2302      	movs	r3, #2
 800206a:	e01c      	b.n	80020a6 <HAL_PCD_EP_SetStall+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68f9      	ldr	r1, [r7, #12]
 800207a:	4618      	mov	r0, r3
 800207c:	f003 fd74 	bl	8005b68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	2b00      	cmp	r3, #0
 8002088:	d108      	bne.n	800209c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002094:	4619      	mov	r1, r3
 8002096:	4610      	mov	r0, r2
 8002098:	f003 fe99 	bl	8005dce <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	f003 020f 	and.w	r2, r3, #15
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d901      	bls.n	80020cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e040      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da0e      	bge.n	80020f2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	705a      	strb	r2, [r3, #1]
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	f003 0207 	and.w	r2, r3, #7
 80020f8:	4613      	mov	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4413      	add	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PCD_EP_ClrStall+0x82>
 800212c:	2302      	movs	r3, #2
 800212e:	e00e      	b.n	800214e <HAL_PCD_EP_ClrStall+0xa0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	4618      	mov	r0, r3
 8002140:	f003 fd62 	bl	8005c08 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b08e      	sub	sp, #56	; 0x38
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800215e:	e2df      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002168:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800216a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002176:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 8158 	bne.w	8002430 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d152      	bne.n	8002230 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	81fb      	strh	r3, [r7, #14]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	89fb      	ldrh	r3, [r7, #14]
 80021a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3328      	adds	r3, #40	; 0x28
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021bc:	b29b      	uxth	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	3302      	adds	r3, #2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	441a      	add	r2, r3
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 fa42 	bl	800767a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 828e 	beq.w	8002720 <PCD_EP_ISR_Handler+0x5ca>
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f040 8289 	bne.w	8002720 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800221a:	b2da      	uxtb	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b292      	uxth	r2, r2
 8002222:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800222e:	e277      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002246:	2b00      	cmp	r3, #0
 8002248:	d034      	beq.n	80022b4 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002252:	b29b      	uxth	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	3306      	adds	r3, #6
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	4413      	add	r3, r2
 8002268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002288:	b29b      	uxth	r3, r3
 800228a:	f003 fdef 	bl	8005e6c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29a      	uxth	r2, r3
 8002296:	f640 738f 	movw	r3, #3983	; 0xf8f
 800229a:	4013      	ands	r3, r2
 800229c:	823b      	strh	r3, [r7, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	8a3a      	ldrh	r2, [r7, #16]
 80022a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a8:	b292      	uxth	r2, r2
 80022aa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 f9b7 	bl	8007620 <HAL_PCD_SetupStageCallback>
 80022b2:	e235      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80022b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f280 8231 	bge.w	8002720 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80022ca:	4013      	ands	r3, r2
 80022cc:	83bb      	strh	r3, [r7, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	8bba      	ldrh	r2, [r7, #28]
 80022d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022d8:	b292      	uxth	r2, r2
 80022da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	3306      	adds	r3, #6
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d019      	beq.n	8002344 <PCD_EP_ISR_Handler+0x1ee>
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	6959      	ldr	r1, [r3, #20]
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002328:	b29b      	uxth	r3, r3
 800232a:	f003 fd9f 	bl	8005e6c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	441a      	add	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800233c:	2100      	movs	r1, #0
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 f980 	bl	8007644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	4413      	add	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d112      	bne.n	8002392 <PCD_EP_ISR_Handler+0x23c>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	b29b      	uxth	r3, r3
 8002372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002376:	b29a      	uxth	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b29b      	uxth	r3, r3
 8002382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800238a:	b29a      	uxth	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e02f      	b.n	80023f2 <PCD_EP_ISR_Handler+0x29c>
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b3e      	cmp	r3, #62	; 0x3e
 8002398:	d813      	bhi.n	80023c2 <PCD_EP_ISR_Handler+0x26c>
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <PCD_EP_ISR_Handler+0x25e>
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	3301      	adds	r3, #1
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	029b      	lsls	r3, r3, #10
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	e017      	b.n	80023f2 <PCD_EP_ISR_Handler+0x29c>
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <PCD_EP_ISR_Handler+0x286>
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	3b01      	subs	r3, #1
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	b29b      	uxth	r3, r3
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	827b      	strh	r3, [r7, #18]
 8002404:	8a7b      	ldrh	r3, [r7, #18]
 8002406:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800240a:	827b      	strh	r3, [r7, #18]
 800240c:	8a7b      	ldrh	r3, [r7, #18]
 800240e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002412:	827b      	strh	r3, [r7, #18]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	8a7b      	ldrh	r3, [r7, #18]
 800241a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800241e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242a:	b29b      	uxth	r3, r3
 800242c:	8013      	strh	r3, [r2, #0]
 800242e:	e177      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	881b      	ldrh	r3, [r3, #0]
 8002440:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002442:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002446:	2b00      	cmp	r3, #0
 8002448:	f280 80ea 	bge.w	8002620 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29a      	uxth	r2, r3
 800245e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002462:	4013      	ands	r3, r2
 8002464:	853b      	strh	r3, [r7, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4413      	add	r3, r2
 8002474:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800247a:	b292      	uxth	r2, r2
 800247c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800247e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	7b1b      	ldrb	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d122      	bne.n	80024e2 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	3306      	adds	r3, #6
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80024c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8087 	beq.w	80025dc <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	6959      	ldr	r1, [r3, #20]
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	88da      	ldrh	r2, [r3, #6]
 80024da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024dc:	f003 fcc6 	bl	8005e6c <USB_ReadPMA>
 80024e0:	e07c      	b.n	80025dc <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	78db      	ldrb	r3, [r3, #3]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d108      	bne.n	80024fc <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ec:	461a      	mov	r2, r3
 80024ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 f923 	bl	800273c <HAL_PCD_EP_DB_Receive>
 80024f6:	4603      	mov	r3, r0
 80024f8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80024fa:	e06f      	b.n	80025dc <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	847b      	strh	r3, [r7, #34]	; 0x22
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	441a      	add	r2, r3
 8002526:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800252c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002538:	b29b      	uxth	r3, r3
 800253a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29b      	uxth	r3, r3
 800254e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d021      	beq.n	800259a <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	3302      	adds	r3, #2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	4413      	add	r3, r2
 8002574:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002578:	881b      	ldrh	r3, [r3, #0]
 800257a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002582:	2b00      	cmp	r3, #0
 8002584:	d02a      	beq.n	80025dc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	6959      	ldr	r1, [r3, #20]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	891a      	ldrh	r2, [r3, #8]
 8002592:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002594:	f003 fc6a 	bl	8005e6c <USB_ReadPMA>
 8002598:	e020      	b.n	80025dc <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	3306      	adds	r3, #6
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025c2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80025c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	6959      	ldr	r1, [r3, #20]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	895a      	ldrh	r2, [r3, #10]
 80025d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025d8:	f003 fc48 	bl	8005e6c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025e2:	441a      	add	r2, r3
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80025ee:	441a      	add	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <PCD_EP_ISR_Handler+0x4b0>
 80025fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	429a      	cmp	r2, r3
 8002604:	d206      	bcs.n	8002614 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f005 f819 	bl	8007644 <HAL_PCD_DataOutStageCallback>
 8002612:	e005      	b.n	8002620 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800261a:	4618      	mov	r0, r3
 800261c:	f002 f984 	bl	8004928 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d07a      	beq.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800262a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4413      	add	r3, r2
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002658:	843b      	strh	r3, [r7, #32]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	441a      	add	r2, r3
 8002668:	8c3b      	ldrh	r3, [r7, #32]
 800266a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002672:	b29b      	uxth	r3, r3
 8002674:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	78db      	ldrb	r3, [r3, #3]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d108      	bne.n	8002690 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002682:	2b02      	cmp	r3, #2
 8002684:	d146      	bne.n	8002714 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d141      	bne.n	8002714 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002698:	b29b      	uxth	r3, r3
 800269a:	461a      	mov	r2, r3
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	3302      	adds	r3, #2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026b8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	8bfb      	ldrh	r3, [r7, #30]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d906      	bls.n	80026d2 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	8bfb      	ldrh	r3, [r7, #30]
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	619a      	str	r2, [r3, #24]
 80026d0:	e002      	b.n	80026d8 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d106      	bne.n	80026ee <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f004 ffc7 	bl	800767a <HAL_PCD_DataInStageCallback>
 80026ec:	e018      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	441a      	add	r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	69da      	ldr	r2, [r3, #28]
 80026fe:	8bfb      	ldrh	r3, [r7, #30]
 8002700:	441a      	add	r2, r3
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270c:	4618      	mov	r0, r3
 800270e:	f002 f90b 	bl	8004928 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002712:	e005      	b.n	8002720 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002714:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002716:	461a      	mov	r2, r3
 8002718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f91b 	bl	8002956 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002728:	b29b      	uxth	r3, r3
 800272a:	b21b      	sxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	f6ff ad17 	blt.w	8002160 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3738      	adds	r7, #56	; 0x38
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	4613      	mov	r3, r2
 8002748:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800274a:	88fb      	ldrh	r3, [r7, #6]
 800274c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d07e      	beq.n	8002852 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	3302      	adds	r3, #2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	8b7b      	ldrh	r3, [r7, #26]
 8002784:	429a      	cmp	r2, r3
 8002786:	d306      	bcc.n	8002796 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	8b7b      	ldrh	r3, [r7, #26]
 800278e:	1ad2      	subs	r2, r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	619a      	str	r2, [r3, #24]
 8002794:	e002      	b.n	800279c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d123      	bne.n	80027ec <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	833b      	strh	r3, [r7, #24]
 80027c0:	8b3b      	ldrh	r3, [r7, #24]
 80027c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027c6:	833b      	strh	r3, [r7, #24]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	441a      	add	r2, r3
 80027d6:	8b3b      	ldrh	r3, [r7, #24]
 80027d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01f      	beq.n	8002836 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	b29b      	uxth	r3, r3
 8002808:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800280c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002810:	82fb      	strh	r3, [r7, #22]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	441a      	add	r2, r3
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800282a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002832:	b29b      	uxth	r3, r3
 8002834:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002836:	8b7b      	ldrh	r3, [r7, #26]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8087 	beq.w	800294c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	891a      	ldrh	r2, [r3, #8]
 800284a:	8b7b      	ldrh	r3, [r7, #26]
 800284c:	f003 fb0e 	bl	8005e6c <USB_ReadPMA>
 8002850:	e07c      	b.n	800294c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3306      	adds	r3, #6
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	8b7b      	ldrh	r3, [r7, #26]
 8002882:	429a      	cmp	r2, r3
 8002884:	d306      	bcc.n	8002894 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	8b7b      	ldrh	r3, [r7, #26]
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e002      	b.n	800289a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d123      	bne.n	80028ea <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028bc:	83fb      	strh	r3, [r7, #30]
 80028be:	8bfb      	ldrh	r3, [r7, #30]
 80028c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028c4:	83fb      	strh	r3, [r7, #30]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	8bfb      	ldrh	r3, [r7, #30]
 80028d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d11f      	bne.n	8002934 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	83bb      	strh	r3, [r7, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	441a      	add	r2, r3
 800291e:	8bbb      	ldrh	r3, [r7, #28]
 8002920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002930:	b29b      	uxth	r3, r3
 8002932:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6959      	ldr	r1, [r3, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	895a      	ldrh	r2, [r3, #10]
 8002946:	8b7b      	ldrh	r3, [r7, #26]
 8002948:	f003 fa90 	bl	8005e6c <USB_ReadPMA>
    }
  }

  return count;
 800294c:	8b7b      	ldrh	r3, [r7, #26]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b092      	sub	sp, #72	; 0x48
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4613      	mov	r3, r2
 8002962:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 8132 	beq.w	8002bd4 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002978:	b29b      	uxth	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	3302      	adds	r3, #2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002998:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d906      	bls.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029aa:	1ad2      	subs	r2, r2, r3
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d12c      	bne.n	8002a1a <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f004 fe57 	bl	800767a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029cc:	88fb      	ldrh	r3, [r7, #6]
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 822f 	beq.w	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f2:	827b      	strh	r3, [r7, #18]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	441a      	add	r2, r3
 8002a02:	8a7b      	ldrh	r3, [r7, #18]
 8002a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]
 8002a18:	e20d      	b.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01f      	beq.n	8002a64 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	f040 81e3 	bne.w	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a76:	441a      	add	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	69da      	ldr	r2, [r3, #28]
 8002a80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002a82:	441a      	add	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	6a1a      	ldr	r2, [r3, #32]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d309      	bcc.n	8002aa8 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6a1a      	ldr	r2, [r3, #32]
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	1ad2      	subs	r2, r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	621a      	str	r2, [r3, #32]
 8002aa6:	e014      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d106      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ab2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abc:	e009      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d155      	bne.n	8002b86 <HAL_PCD_EP_DB_Transmit+0x230>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	461a      	mov	r2, r3
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	011a      	lsls	r2, r3, #4
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4413      	add	r3, r2
 8002afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d112      	bne.n	8002b2e <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e047      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x268>
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	2b3e      	cmp	r3, #62	; 0x3e
 8002b32:	d811      	bhi.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x202>
 8002b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	3301      	adds	r3, #1
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	e032      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x268>
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_EP_DB_Transmit+0x218>
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	029b      	lsls	r3, r3, #10
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e01b      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x268>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	785b      	ldrb	r3, [r3, #1]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d117      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x268>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	623b      	str	r3, [r7, #32]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	011a      	lsls	r2, r3, #4
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb4:	61fb      	str	r3, [r7, #28]
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	891a      	ldrh	r2, [r3, #8]
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f003 f909 	bl	8005de4 <USB_WritePMA>
 8002bd2:	e130      	b.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	3306      	adds	r3, #6
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d306      	bcc.n	8002c16 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c0e:	1ad2      	subs	r2, r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	619a      	str	r2, [r3, #24]
 8002c14:	e002      	b.n	8002c1c <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12c      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f004 fd25 	bl	800767a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 80fd 	bne.w	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	441a      	add	r2, r3
 8002c66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	8013      	strh	r3, [r2, #0]
 8002c7c:	e0db      	b.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11f      	bne.n	8002cc8 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	441a      	add	r2, r3
 8002cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 80b1 	bne.w	8002e36 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	695a      	ldr	r2, [r3, #20]
 8002cd8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cda:	441a      	add	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ce6:	441a      	add	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a1a      	ldr	r2, [r3, #32]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d309      	bcc.n	8002d0c <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	1ad2      	subs	r2, r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	621a      	str	r2, [r3, #32]
 8002d0a:	e014      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002d14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d20:	e009      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d155      	bne.n	8002df0 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d58:	4413      	add	r3, r2
 8002d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d64:	4413      	add	r3, r2
 8002d66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d112      	bne.n	8002d98 <HAL_PCD_EP_DB_Transmit+0x442>
 8002d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e044      	b.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b3e      	cmp	r3, #62	; 0x3e
 8002d9c:	d811      	bhi.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	3301      	adds	r3, #1
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e02f      	b.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	f003 031f 	and.w	r3, r3, #31
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <HAL_PCD_EP_DB_Transmit+0x482>
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	029b      	lsls	r3, r3, #10
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dec:	801a      	strh	r2, [r3, #0]
 8002dee:	e018      	b.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d114      	bne.n	8002e22 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	4413      	add	r3, r2
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	011a      	lsls	r2, r3, #4
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	4413      	add	r3, r2
 8002e14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6959      	ldr	r1, [r3, #20]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	895a      	ldrh	r2, [r3, #10]
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	f002 ffd7 	bl	8005de4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e50:	823b      	strh	r3, [r7, #16]
 8002e52:	8a3b      	ldrh	r3, [r7, #16]
 8002e54:	f083 0310 	eor.w	r3, r3, #16
 8002e58:	823b      	strh	r3, [r7, #16]
 8002e5a:	8a3b      	ldrh	r3, [r7, #16]
 8002e5c:	f083 0320 	eor.w	r3, r3, #32
 8002e60:	823b      	strh	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	441a      	add	r2, r3
 8002e70:	8a3b      	ldrh	r3, [r7, #16]
 8002e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3748      	adds	r7, #72	; 0x48
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	817b      	strh	r3, [r7, #10]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ea2:	897b      	ldrh	r3, [r7, #10]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e009      	b.n	8002eda <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ec6:	897a      	ldrh	r2, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eda:	893b      	ldrh	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d107      	bne.n	8002ef0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	80da      	strh	r2, [r3, #6]
 8002eee:	e00b      	b.n	8002f08 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e26c      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8087 	beq.w	8003042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f34:	4b92      	ldr	r3, [pc, #584]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d00c      	beq.n	8002f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f40:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d112      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
 8002f4c:	4b8c      	ldr	r3, [pc, #560]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d06c      	beq.n	8003040 <HAL_RCC_OscConfig+0x12c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d168      	bne.n	8003040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e246      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7a:	d106      	bne.n	8002f8a <HAL_RCC_OscConfig+0x76>
 8002f7c:	4b80      	ldr	r3, [pc, #512]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a7f      	ldr	r2, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10c      	bne.n	8002fac <HAL_RCC_OscConfig+0x98>
 8002f92:	4b7b      	ldr	r3, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7a      	ldr	r2, [pc, #488]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xbc>
 8002fb6:	4b72      	ldr	r3, [pc, #456]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a71      	ldr	r2, [pc, #452]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6f      	ldr	r3, [pc, #444]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6e      	ldr	r2, [pc, #440]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a67      	ldr	r2, [pc, #412]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f948 	bl	8001284 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe f944 	bl	8001284 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1fa      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe4>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe f934 	bl	8001284 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe f930 	bl	8001284 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	; 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e1e6      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x10c>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d063      	beq.n	8003116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304e:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00b      	beq.n	8003072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d11c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d116      	bne.n	80030a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1ba      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308a:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4939      	ldr	r1, [pc, #228]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309e:	e03a      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a8:	4b36      	ldr	r3, [pc, #216]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe f8e9 	bl	8001284 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b6:	f7fe f8e5 	bl	8001284 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e19b      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4927      	ldr	r1, [pc, #156]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <HAL_RCC_OscConfig+0x270>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe f8c8 	bl	8001284 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030f8:	f7fe f8c4 	bl	8001284 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e17a      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310a:	4b1d      	ldr	r3, [pc, #116]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03a      	beq.n	8003198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d019      	beq.n	800315e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7fe f8a8 	bl	8001284 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7fe f8a4 	bl	8001284 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e15a      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314a:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCC_OscConfig+0x26c>)
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f000 faa8 	bl	80036ac <RCC_Delay>
 800315c:	e01c      	b.n	8003198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <HAL_RCC_OscConfig+0x274>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fe f88e 	bl	8001284 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316a:	e00f      	b.n	800318c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fe f88a 	bl	8001284 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d908      	bls.n	800318c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e140      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	42420000 	.word	0x42420000
 8003188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1e9      	bne.n	800316c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80a6 	beq.w	80032f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b97      	ldr	r3, [pc, #604]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b94      	ldr	r3, [pc, #592]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	4a93      	ldr	r2, [pc, #588]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	61d3      	str	r3, [r2, #28]
 80031c2:	4b91      	ldr	r3, [pc, #580]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b8e      	ldr	r3, [pc, #568]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b8b      	ldr	r3, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a8a      	ldr	r2, [pc, #552]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7fe f84b 	bl	8001284 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7fe f847 	bl	8001284 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b64      	cmp	r3, #100	; 0x64
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0fd      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b81      	ldr	r3, [pc, #516]	; (800340c <HAL_RCC_OscConfig+0x4f8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x312>
 8003218:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a7a      	ldr	r2, [pc, #488]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e02d      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x334>
 800322e:	4b76      	ldr	r3, [pc, #472]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4a75      	ldr	r2, [pc, #468]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	f023 0301 	bic.w	r3, r3, #1
 8003238:	6213      	str	r3, [r2, #32]
 800323a:	4b73      	ldr	r3, [pc, #460]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a72      	ldr	r2, [pc, #456]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x356>
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a6c      	ldr	r2, [pc, #432]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a69      	ldr	r2, [pc, #420]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x36e>
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6213      	str	r3, [r2, #32]
 8003276:	4b64      	ldr	r3, [pc, #400]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328a:	f7fd fffb 	bl	8001284 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fff7 	bl	8001284 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0ab      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b57      	ldr	r3, [pc, #348]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x37e>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd ffe5 	bl	8001284 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd ffe1 	bl	8001284 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e095      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b48      	ldr	r3, [pc, #288]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a47      	ldr	r2, [pc, #284]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 8081 	beq.w	80033fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d061      	beq.n	80033cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d146      	bne.n	800339e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd ffb5 	bl	8001284 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd ffb1 	bl	8001284 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e067      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	492d      	ldr	r1, [pc, #180]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a19      	ldr	r1, [r3, #32]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	430b      	orrs	r3, r1
 800336a:	4927      	ldr	r1, [pc, #156]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fd ff85 	bl	8001284 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd ff81 	bl	8001284 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e037      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x46a>
 800339c:	e02f      	b.n	80033fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_RCC_OscConfig+0x4fc>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd ff6e 	bl	8001284 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fd ff6a 	bl	8001284 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e020      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x498>
 80033ca:	e018      	b.n	80033fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e013      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_OscConfig+0x4f4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	40007000 	.word	0x40007000
 8003410:	42420060 	.word	0x42420060

08003414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0d0      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 0207 	bic.w	r2, r3, #7
 800343e:	4965      	ldr	r1, [pc, #404]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b63      	ldr	r3, [pc, #396]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0b8      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003470:	4b59      	ldr	r3, [pc, #356]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003488:	4b53      	ldr	r3, [pc, #332]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003492:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	494d      	ldr	r1, [pc, #308]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d115      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e07f      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e073      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06b      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b39      	ldr	r3, [pc, #228]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4936      	ldr	r1, [pc, #216]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fd febe 	bl	8001284 <HAL_GetTick>
 8003508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fd feba 	bl	8001284 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e053      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d210      	bcs.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4922      	ldr	r1, [pc, #136]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e032      	b.n	80035ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4916      	ldr	r1, [pc, #88]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	4313      	orrs	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	490e      	ldr	r1, [pc, #56]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035a2:	f000 f821 	bl	80035e8 <HAL_RCC_GetSysClockFreq>
 80035a6:	4601      	mov	r1, r0
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1c8>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ba:	4a09      	ldr	r2, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1cc>)
 80035bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035be:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <HAL_RCC_ClockConfig+0x1d0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fe1c 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40022000 	.word	0x40022000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08007c9c 	.word	0x08007c9c
 80035e0:	20000004 	.word	0x20000004
 80035e4:	20000008 	.word	0x20000008

080035e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e8:	b490      	push	{r4, r7}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035f0:	1d3c      	adds	r4, r7, #4
 80035f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	2300      	movs	r3, #0
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003612:	4b23      	ldr	r3, [pc, #140]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x40>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x46>
 8003626:	e02d      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003628:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800362a:	623b      	str	r3, [r7, #32]
      break;
 800362c:	e02d      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	0c9b      	lsrs	r3, r3, #18
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800363a:	4413      	add	r3, r2
 800363c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003640:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800364c:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	0c5b      	lsrs	r3, r3, #17
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800365a:	4413      	add	r3, r2
 800365c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003660:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003666:	fb02 f203 	mul.w	r2, r2, r3
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
 8003672:	e004      	b.n	800367e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003678:	fb02 f303 	mul.w	r3, r2, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	623b      	str	r3, [r7, #32]
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003686:	623b      	str	r3, [r7, #32]
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6a3b      	ldr	r3, [r7, #32]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bc90      	pop	{r4, r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	08007b44 	.word	0x08007b44
 800369c:	08007b54 	.word	0x08007b54
 80036a0:	40021000 	.word	0x40021000
 80036a4:	007a1200 	.word	0x007a1200
 80036a8:	003d0900 	.word	0x003d0900

080036ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <RCC_Delay+0x34>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <RCC_Delay+0x38>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	0a5b      	lsrs	r3, r3, #9
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c8:	bf00      	nop
  }
  while (Delay --);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1e5a      	subs	r2, r3, #1
 80036ce:	60fa      	str	r2, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f9      	bne.n	80036c8 <RCC_Delay+0x1c>
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	20000004 	.word	0x20000004
 80036e4:	10624dd3 	.word	0x10624dd3

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d07d      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003704:	2300      	movs	r3, #0
 8003706:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003708:	4b4f      	ldr	r3, [pc, #316]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800371e:	61d3      	str	r3, [r2, #28]
 8003720:	4b49      	ldr	r3, [pc, #292]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003728:	60bb      	str	r3, [r7, #8]
 800372a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003730:	4b46      	ldr	r3, [pc, #280]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d118      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800373c:	4b43      	ldr	r3, [pc, #268]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a42      	ldr	r2, [pc, #264]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003746:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003748:	f7fd fd9c 	bl	8001284 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	e008      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003750:	f7fd fd98 	bl	8001284 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e06d      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02e      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d027      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003794:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	4b2e      	ldr	r3, [pc, #184]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800379c:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037a2:	4a29      	ldr	r2, [pc, #164]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d014      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fd fd67 	bl	8001284 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b8:	e00a      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fd fd63 	bl	8001284 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0ee      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4917      	ldr	r1, [pc, #92]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a13      	ldr	r2, [pc, #76]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800380c:	4b0e      	ldr	r3, [pc, #56]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	490b      	ldr	r1, [pc, #44]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	42420440 	.word	0x42420440

08003854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fc66 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 f930 	bl	8003af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d001      	beq.n	800390c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a18      	ldr	r2, [pc, #96]	; (800397c <HAL_TIM_Base_Start+0x88>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d00e      	beq.n	800393c <HAL_TIM_Base_Start+0x48>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d009      	beq.n	800393c <HAL_TIM_Base_Start+0x48>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <HAL_TIM_Base_Start+0x8c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d004      	beq.n	800393c <HAL_TIM_Base_Start+0x48>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a13      	ldr	r2, [pc, #76]	; (8003984 <HAL_TIM_Base_Start+0x90>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d111      	bne.n	8003960 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d010      	beq.n	8003970 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395e:	e007      	b.n	8003970 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800

08003988 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_ConfigClockSource+0x18>
 800399c:	2302      	movs	r3, #2
 800399e:	e0a6      	b.n	8003aee <HAL_TIM_ConfigClockSource+0x166>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d067      	beq.n	8003aa8 <HAL_TIM_ConfigClockSource+0x120>
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d80b      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x6c>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d073      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x140>
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d802      	bhi.n	80039ea <HAL_TIM_ConfigClockSource+0x62>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d06f      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039e8:	e078      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d06c      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x140>
 80039ee:	2b30      	cmp	r3, #48	; 0x30
 80039f0:	d06a      	beq.n	8003ac8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039f2:	e073      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d00d      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0x8c>
 80039f8:	2b70      	cmp	r3, #112	; 0x70
 80039fa:	d804      	bhi.n	8003a06 <HAL_TIM_ConfigClockSource+0x7e>
 80039fc:	2b50      	cmp	r3, #80	; 0x50
 80039fe:	d033      	beq.n	8003a68 <HAL_TIM_ConfigClockSource+0xe0>
 8003a00:	2b60      	cmp	r3, #96	; 0x60
 8003a02:	d041      	beq.n	8003a88 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003a04:	e06a      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d066      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x152>
 8003a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a10:	d017      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003a12:	e063      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f000 f941 	bl	8003caa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a36:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	609a      	str	r2, [r3, #8]
      break;
 8003a40:	e04c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	6899      	ldr	r1, [r3, #8]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f000 f92a 	bl	8003caa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a64:	609a      	str	r2, [r3, #8]
      break;
 8003a66:	e039      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	461a      	mov	r2, r3
 8003a76:	f000 f8a1 	bl	8003bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2150      	movs	r1, #80	; 0x50
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f8f8 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003a86:	e029      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6859      	ldr	r1, [r3, #4]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	461a      	mov	r2, r3
 8003a96:	f000 f8bf 	bl	8003c18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2160      	movs	r1, #96	; 0x60
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 f8e8 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e019      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6818      	ldr	r0, [r3, #0]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f000 f881 	bl	8003bbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2140      	movs	r1, #64	; 0x40
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f8d8 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003ac6:	e009      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 f8cf 	bl	8003c76 <TIM_ITRx_SetConfig>
        break;
 8003ad8:	e000      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a29      	ldr	r2, [pc, #164]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b16:	d007      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_Base_SetConfig+0x30>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d108      	bne.n	8003b3a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a1c      	ldr	r2, [pc, #112]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00b      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b48:	d007      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a19      	ldr	r2, [pc, #100]	; (8003bb4 <TIM_Base_SetConfig+0xbc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_Base_SetConfig+0x62>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a18      	ldr	r2, [pc, #96]	; (8003bb8 <TIM_Base_SetConfig+0xc0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <TIM_Base_SetConfig+0xb8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0201 	bic.w	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 030a 	bic.w	r3, r3, #10
 8003bf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f023 0210 	bic.w	r2, r3, #16
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	031b      	lsls	r3, r3, #12
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f043 0307 	orr.w	r3, r3, #7
 8003c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	609a      	str	r2, [r3, #8]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b087      	sub	sp, #28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	609a      	str	r2, [r3, #8]
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e046      	b.n	8003d8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a12      	ldr	r2, [pc, #72]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d10c      	bne.n	8003d7c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800

08003da4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003da4:	b084      	sub	sp, #16
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	f107 0014 	add.w	r0, r7, #20
 8003db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	b004      	add	sp, #16
 8003dc2:	4770      	bx	lr

08003dc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003dd4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003dd8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003df8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003dfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	4013      	ands	r3, r2
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr

08003e3c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	f107 0014 	add.w	r0, r7, #20
 8003e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	b004      	add	sp, #16
 8003e7a:	4770      	bx	lr

08003e7c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b09b      	sub	sp, #108	; 0x6c
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	78db      	ldrb	r3, [r3, #3]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d81f      	bhi.n	8003eee <USB_ActivateEndpoint+0x72>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <USB_ActivateEndpoint+0x38>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ef7 	.word	0x08003ef7
 8003ec0:	08003ed3 	.word	0x08003ed3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ec4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ec8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ecc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ed0:	e012      	b.n	8003ef8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ed2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ed6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003eda:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ede:	e00b      	b.n	8003ef8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ee0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ee4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003eec:	e004      	b.n	8003ef8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003ef4:	e000      	b.n	8003ef8 <USB_ActivateEndpoint+0x7c>
      break;
 8003ef6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	441a      	add	r2, r3
 8003f48:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	7b1b      	ldrb	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f040 8149 	bne.w	80041fc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 8084 	beq.w	800407c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	011a      	lsls	r2, r3, #4
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	88db      	ldrh	r3, [r3, #6]
 8003f9c:	085b      	lsrs	r3, r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	81fb      	strh	r3, [r7, #14]
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01b      	beq.n	8003ff8 <USB_ActivateEndpoint+0x17c>
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd6:	81bb      	strh	r3, [r7, #12]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	89bb      	ldrh	r3, [r7, #12]
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	78db      	ldrb	r3, [r3, #3]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d020      	beq.n	8004042 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004016:	813b      	strh	r3, [r7, #8]
 8004018:	893b      	ldrh	r3, [r7, #8]
 800401a:	f083 0320 	eor.w	r3, r3, #32
 800401e:	813b      	strh	r3, [r7, #8]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	893b      	ldrh	r3, [r7, #8]
 800402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403c:	b29b      	uxth	r3, r3
 800403e:	8013      	strh	r3, [r2, #0]
 8004040:	e27f      	b.n	8004542 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004058:	817b      	strh	r3, [r7, #10]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	441a      	add	r2, r3
 8004064:	897b      	ldrh	r3, [r7, #10]
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]
 800407a:	e262      	b.n	8004542 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800408c:	4413      	add	r3, r2
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	011a      	lsls	r2, r3, #4
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	4413      	add	r3, r2
 800409a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	88db      	ldrh	r3, [r3, #6]
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	4413      	add	r3, r2
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	011a      	lsls	r2, r3, #4
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040d2:	623b      	str	r3, [r7, #32]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d112      	bne.n	8004102 <USB_ActivateEndpoint+0x286>
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	e02f      	b.n	8004162 <USB_ActivateEndpoint+0x2e6>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b3e      	cmp	r3, #62	; 0x3e
 8004108:	d813      	bhi.n	8004132 <USB_ActivateEndpoint+0x2b6>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	663b      	str	r3, [r7, #96]	; 0x60
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <USB_ActivateEndpoint+0x2a8>
 800411e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004120:	3301      	adds	r3, #1
 8004122:	663b      	str	r3, [r7, #96]	; 0x60
 8004124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004126:	b29b      	uxth	r3, r3
 8004128:	029b      	lsls	r3, r3, #10
 800412a:	b29a      	uxth	r2, r3
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	801a      	strh	r2, [r3, #0]
 8004130:	e017      	b.n	8004162 <USB_ActivateEndpoint+0x2e6>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	663b      	str	r3, [r7, #96]	; 0x60
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <USB_ActivateEndpoint+0x2d0>
 8004146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004148:	3b01      	subs	r3, #1
 800414a:	663b      	str	r3, [r7, #96]	; 0x60
 800414c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800414e:	b29b      	uxth	r3, r3
 8004150:	029b      	lsls	r3, r3, #10
 8004152:	b29b      	uxth	r3, r3
 8004154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800415c:	b29a      	uxth	r2, r3
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	83fb      	strh	r3, [r7, #30]
 8004170:	8bfb      	ldrh	r3, [r7, #30]
 8004172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <USB_ActivateEndpoint+0x336>
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	83bb      	strh	r3, [r7, #28]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	8bbb      	ldrh	r3, [r7, #28]
 800419e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c8:	837b      	strh	r3, [r7, #26]
 80041ca:	8b7b      	ldrh	r3, [r7, #26]
 80041cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80041d0:	837b      	strh	r3, [r7, #26]
 80041d2:	8b7b      	ldrh	r3, [r7, #26]
 80041d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80041d8:	837b      	strh	r3, [r7, #26]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	8b7b      	ldrh	r3, [r7, #26]
 80041e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	8013      	strh	r3, [r2, #0]
 80041fa:	e1a2      	b.n	8004542 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	441a      	add	r2, r3
 8004220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004234:	b29b      	uxth	r3, r3
 8004236:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	65bb      	str	r3, [r7, #88]	; 0x58
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004248:	4413      	add	r3, r2
 800424a:	65bb      	str	r3, [r7, #88]	; 0x58
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	4413      	add	r3, r2
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	657b      	str	r3, [r7, #84]	; 0x54
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	891b      	ldrh	r3, [r3, #8]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426a:	801a      	strh	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	653b      	str	r3, [r7, #80]	; 0x50
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004276:	b29b      	uxth	r3, r3
 8004278:	461a      	mov	r2, r3
 800427a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800427c:	4413      	add	r3, r2
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	011a      	lsls	r2, r3, #4
 8004286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004288:	4413      	add	r3, r2
 800428a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800428e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	895b      	ldrh	r3, [r3, #10]
 8004294:	085b      	lsrs	r3, r3, #1
 8004296:	b29b      	uxth	r3, r3
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	785b      	ldrb	r3, [r3, #1]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f040 8091 	bne.w	80043cc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80042b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80042ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d01b      	beq.n	80042fa <USB_ActivateEndpoint+0x47e>
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80042e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	873b      	strh	r3, [r7, #56]	; 0x38
 8004308:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01b      	beq.n	800434a <USB_ActivateEndpoint+0x4ce>
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004328:	86fb      	strh	r3, [r7, #54]	; 0x36
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	441a      	add	r2, r3
 8004334:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800433a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004342:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004346:	b29b      	uxth	r3, r3
 8004348:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004360:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004362:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004364:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004368:	86bb      	strh	r3, [r7, #52]	; 0x34
 800436a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800436c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004370:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	441a      	add	r2, r3
 800437c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800437e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438e:	b29b      	uxth	r3, r3
 8004390:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	441a      	add	r2, r3
 80043b4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80043b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	8013      	strh	r3, [r2, #0]
 80043ca:	e0ba      	b.n	8004542 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80043dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01d      	beq.n	8004424 <USB_ActivateEndpoint+0x5a8>
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	441a      	add	r2, r3
 800440c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004420:	b29b      	uxth	r3, r3
 8004422:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004434:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01d      	beq.n	800447c <USB_ActivateEndpoint+0x600>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	441a      	add	r2, r3
 8004464:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004478:	b29b      	uxth	r3, r3
 800447a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d024      	beq.n	80044ce <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800449e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044a2:	f083 0320 	eor.w	r3, r3, #32
 80044a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	441a      	add	r2, r3
 80044b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
 80044cc:	e01d      	b.n	800450a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	b29b      	uxth	r3, r3
 8004508:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800451c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004520:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	441a      	add	r2, r3
 800452c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800452e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453e:	b29b      	uxth	r3, r3
 8004540:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004546:	4618      	mov	r0, r3
 8004548:	376c      	adds	r7, #108	; 0x6c
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004550:	b480      	push	{r7}
 8004552:	b08d      	sub	sp, #52	; 0x34
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	7b1b      	ldrb	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 808e 	bne.w	8004680 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d044      	beq.n	80045f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	81bb      	strh	r3, [r7, #12]
 800457a:	89bb      	ldrh	r3, [r7, #12]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <USB_DeactivateEndpoint+0x6c>
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	817b      	strh	r3, [r7, #10]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	441a      	add	r2, r3
 80045a6:	897b      	ldrh	r3, [r7, #10]
 80045a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d2:	813b      	strh	r3, [r7, #8]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	441a      	add	r2, r3
 80045de:	893b      	ldrh	r3, [r7, #8]
 80045e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	8013      	strh	r3, [r2, #0]
 80045f4:	e192      	b.n	800491c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	827b      	strh	r3, [r7, #18]
 8004604:	8a7b      	ldrh	r3, [r7, #18]
 8004606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01b      	beq.n	8004646 <USB_DeactivateEndpoint+0xf6>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	823b      	strh	r3, [r7, #16]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	441a      	add	r2, r3
 8004630:	8a3b      	ldrh	r3, [r7, #16]
 8004632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800463e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004642:	b29b      	uxth	r3, r3
 8004644:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	4413      	add	r3, r2
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	b29b      	uxth	r3, r3
 8004654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800465c:	81fb      	strh	r3, [r7, #14]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	89fb      	ldrh	r3, [r7, #14]
 800466a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	b29b      	uxth	r3, r3
 800467c:	8013      	strh	r3, [r2, #0]
 800467e:	e14d      	b.n	800491c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 80a5 	bne.w	80047d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	843b      	strh	r3, [r7, #32]
 8004698:	8c3b      	ldrh	r3, [r7, #32]
 800469a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <USB_DeactivateEndpoint+0x18a>
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b8:	83fb      	strh	r3, [r7, #30]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	8bfb      	ldrh	r3, [r7, #30]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	83bb      	strh	r3, [r7, #28]
 80046e8:	8bbb      	ldrh	r3, [r7, #28]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01b      	beq.n	800472a <USB_DeactivateEndpoint+0x1da>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	837b      	strh	r3, [r7, #26]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	8b7b      	ldrh	r3, [r7, #26]
 8004716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004722:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	881b      	ldrh	r3, [r3, #0]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004740:	833b      	strh	r3, [r7, #24]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	8b3b      	ldrh	r3, [r7, #24]
 800474e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800475e:	b29b      	uxth	r3, r3
 8004760:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004778:	82fb      	strh	r3, [r7, #22]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	441a      	add	r2, r3
 8004784:	8afb      	ldrh	r3, [r7, #22]
 8004786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800478e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004796:	b29b      	uxth	r3, r3
 8004798:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	82bb      	strh	r3, [r7, #20]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	441a      	add	r2, r3
 80047bc:	8abb      	ldrh	r3, [r7, #20]
 80047be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	8013      	strh	r3, [r2, #0]
 80047d2:	e0a3      	b.n	800491c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80047e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <USB_DeactivateEndpoint+0x2d4>
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	441a      	add	r2, r3
 800480e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004818:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004820:	b29b      	uxth	r3, r3
 8004822:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <USB_DeactivateEndpoint+0x324>
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	853b      	strh	r3, [r7, #40]	; 0x28
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800488a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	441a      	add	r2, r3
 80048ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	b29b      	uxth	r3, r3
 800491a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3734      	adds	r7, #52	; 0x34
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b0c4      	sub	sp, #272	; 0x110
 800492c:	af00      	add	r7, sp, #0
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	6018      	str	r0, [r3, #0]
 8004932:	463b      	mov	r3, r7
 8004934:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004936:	463b      	mov	r3, r7
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 8557 	bne.w	80053f0 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004942:	463b      	mov	r3, r7
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699a      	ldr	r2, [r3, #24]
 8004948:	463b      	mov	r3, r7
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d905      	bls.n	800495e <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800495c:	e004      	b.n	8004968 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800495e:	463b      	mov	r3, r7
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004968:	463b      	mov	r3, r7
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	7b1b      	ldrb	r3, [r3, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d12c      	bne.n	80049cc <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004972:	463b      	mov	r3, r7
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6959      	ldr	r1, [r3, #20]
 8004978:	463b      	mov	r3, r7
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	88da      	ldrh	r2, [r3, #6]
 800497e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004982:	b29b      	uxth	r3, r3
 8004984:	1d38      	adds	r0, r7, #4
 8004986:	6800      	ldr	r0, [r0, #0]
 8004988:	f001 fa2c 	bl	8005de4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	463b      	mov	r3, r7
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	011a      	lsls	r2, r3, #4
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	4413      	add	r3, r2
 80049b0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	b29a      	uxth	r2, r3
 80049c0:	f107 0310 	add.w	r3, r7, #16
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	f000 bcdd 	b.w	8005386 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80049cc:	463b      	mov	r3, r7
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	78db      	ldrb	r3, [r3, #3]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	f040 8347 	bne.w	8005066 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80049d8:	463b      	mov	r3, r7
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	463b      	mov	r3, r7
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	f240 82eb 	bls.w	8004fc0 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80049ea:	1d3b      	adds	r3, r7, #4
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	463b      	mov	r3, r7
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	441a      	add	r2, r3
 8004a16:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	463b      	mov	r3, r7
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 8159 	beq.w	8004d0e <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	637b      	str	r3, [r7, #52]	; 0x34
 8004a62:	463b      	mov	r3, r7
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d164      	bne.n	8004b36 <USB_EPStartXfer+0x20e>
 8004a6c:	1d3b      	adds	r3, r7, #4
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a72:	1d3b      	adds	r3, r7, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	4413      	add	r3, r2
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	011a      	lsls	r2, r3, #4
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	4413      	add	r3, r2
 8004a90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d112      	bne.n	8004ac4 <USB_EPStartXfer+0x19c>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	801a      	strh	r2, [r3, #0]
 8004ac2:	e054      	b.n	8004b6e <USB_EPStartXfer+0x246>
 8004ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac8:	2b3e      	cmp	r3, #62	; 0x3e
 8004aca:	d817      	bhi.n	8004afc <USB_EPStartXfer+0x1d4>
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <USB_EPStartXfer+0x1c4>
 8004ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	801a      	strh	r2, [r3, #0]
 8004afa:	e038      	b.n	8004b6e <USB_EPStartXfer+0x246>
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <USB_EPStartXfer+0x1f4>
 8004b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b16:	3b01      	subs	r3, #1
 8004b18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	029b      	lsls	r3, r3, #10
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	e01b      	b.n	8004b6e <USB_EPStartXfer+0x246>
 8004b36:	463b      	mov	r3, r7
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d116      	bne.n	8004b6e <USB_EPStartXfer+0x246>
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b4e:	4413      	add	r3, r2
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	011a      	lsls	r2, r3, #4
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
 8004b64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	895b      	ldrh	r3, [r3, #10]
 8004b74:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b78:	463b      	mov	r3, r7
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6959      	ldr	r1, [r3, #20]
 8004b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b88:	1d38      	adds	r0, r7, #4
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	f001 f92a 	bl	8005de4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b90:	463b      	mov	r3, r7
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695a      	ldr	r2, [r3, #20]
 8004b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9a:	441a      	add	r2, r3
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	463b      	mov	r3, r7
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d909      	bls.n	8004bc6 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bbc:	1ad2      	subs	r2, r2, r3
 8004bbe:	463b      	mov	r3, r7
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	621a      	str	r2, [r3, #32]
 8004bc4:	e008      	b.n	8004bd8 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004bd8:	463b      	mov	r3, r7
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d164      	bne.n	8004cac <USB_EPStartXfer+0x384>
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	61fb      	str	r3, [r7, #28]
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	011a      	lsls	r2, r3, #4
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c0a:	61bb      	str	r3, [r7, #24]
 8004c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d112      	bne.n	8004c3a <USB_EPStartXfer+0x312>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	e057      	b.n	8004cea <USB_EPStartXfer+0x3c2>
 8004c3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c40:	d817      	bhi.n	8004c72 <USB_EPStartXfer+0x34a>
 8004c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <USB_EPStartXfer+0x33a>
 8004c58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	801a      	strh	r2, [r3, #0]
 8004c70:	e03b      	b.n	8004cea <USB_EPStartXfer+0x3c2>
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <USB_EPStartXfer+0x36a>
 8004c88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004c92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	801a      	strh	r2, [r3, #0]
 8004caa:	e01e      	b.n	8004cea <USB_EPStartXfer+0x3c2>
 8004cac:	463b      	mov	r3, r7
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	785b      	ldrb	r3, [r3, #1]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d119      	bne.n	8004cea <USB_EPStartXfer+0x3c2>
 8004cb6:	1d3b      	adds	r3, r7, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	1d3b      	adds	r3, r7, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	4413      	add	r3, r2
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	463b      	mov	r3, r7
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	011a      	lsls	r2, r3, #4
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	4413      	add	r3, r2
 8004cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cde:	623b      	str	r3, [r7, #32]
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004cea:	463b      	mov	r3, r7
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	891b      	ldrh	r3, [r3, #8]
 8004cf0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6959      	ldr	r1, [r3, #20]
 8004cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004d04:	1d38      	adds	r0, r7, #4
 8004d06:	6800      	ldr	r0, [r0, #0]
 8004d08:	f001 f86c 	bl	8005de4 <USB_WritePMA>
 8004d0c:	e33b      	b.n	8005386 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d0e:	463b      	mov	r3, r7
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d164      	bne.n	8004de2 <USB_EPStartXfer+0x4ba>
 8004d18:	1d3b      	adds	r3, r7, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d2c:	4413      	add	r3, r2
 8004d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d30:	463b      	mov	r3, r7
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	011a      	lsls	r2, r3, #4
 8004d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d112      	bne.n	8004d70 <USB_EPStartXfer+0x448>
 8004d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d58:	801a      	strh	r2, [r3, #0]
 8004d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d6c:	801a      	strh	r2, [r3, #0]
 8004d6e:	e057      	b.n	8004e20 <USB_EPStartXfer+0x4f8>
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d74:	2b3e      	cmp	r3, #62	; 0x3e
 8004d76:	d817      	bhi.n	8004da8 <USB_EPStartXfer+0x480>
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d004      	beq.n	8004d98 <USB_EPStartXfer+0x470>
 8004d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d92:	3301      	adds	r3, #1
 8004d94:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e03b      	b.n	8004e20 <USB_EPStartXfer+0x4f8>
 8004da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <USB_EPStartXfer+0x4a0>
 8004dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	e01e      	b.n	8004e20 <USB_EPStartXfer+0x4f8>
 8004de2:	463b      	mov	r3, r7
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	785b      	ldrb	r3, [r3, #1]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d119      	bne.n	8004e20 <USB_EPStartXfer+0x4f8>
 8004dec:	1d3b      	adds	r3, r7, #4
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	657b      	str	r3, [r7, #84]	; 0x54
 8004df2:	1d3b      	adds	r3, r7, #4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e00:	4413      	add	r3, r2
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
 8004e04:	463b      	mov	r3, r7
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	011a      	lsls	r2, r3, #4
 8004e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0e:	4413      	add	r3, r2
 8004e10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e14:	653b      	str	r3, [r7, #80]	; 0x50
 8004e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	891b      	ldrh	r3, [r3, #8]
 8004e26:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6959      	ldr	r1, [r3, #20]
 8004e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e3a:	1d38      	adds	r0, r7, #4
 8004e3c:	6800      	ldr	r0, [r0, #0]
 8004e3e:	f000 ffd1 	bl	8005de4 <USB_WritePMA>
            ep->xfer_buff += len;
 8004e42:	463b      	mov	r3, r7
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e4c:	441a      	add	r2, r3
 8004e4e:	463b      	mov	r3, r7
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6a1a      	ldr	r2, [r3, #32]
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d909      	bls.n	8004e78 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004e64:	463b      	mov	r3, r7
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	621a      	str	r2, [r3, #32]
 8004e76:	e008      	b.n	8004e8a <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e78:	463b      	mov	r3, r7
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d164      	bne.n	8004f64 <USB_EPStartXfer+0x63c>
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eae:	4413      	add	r3, r2
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	011a      	lsls	r2, r3, #4
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d112      	bne.n	8004ef2 <USB_EPStartXfer+0x5ca>
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e054      	b.n	8004f9c <USB_EPStartXfer+0x674>
 8004ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef8:	d817      	bhi.n	8004f2a <USB_EPStartXfer+0x602>
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <USB_EPStartXfer+0x5f2>
 8004f10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f14:	3301      	adds	r3, #1
 8004f16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e038      	b.n	8004f9c <USB_EPStartXfer+0x674>
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <USB_EPStartXfer+0x622>
 8004f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f44:	3b01      	subs	r3, #1
 8004f46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e01b      	b.n	8004f9c <USB_EPStartXfer+0x674>
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d116      	bne.n	8004f9c <USB_EPStartXfer+0x674>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7c:	4413      	add	r3, r2
 8004f7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f80:	463b      	mov	r3, r7
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	011a      	lsls	r2, r3, #4
 8004f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
 8004f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	895b      	ldrh	r3, [r3, #10]
 8004fa2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fa6:	463b      	mov	r3, r7
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6959      	ldr	r1, [r3, #20]
 8004fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fb6:	1d38      	adds	r0, r7, #4
 8004fb8:	6800      	ldr	r0, [r0, #0]
 8004fba:	f000 ff13 	bl	8005de4 <USB_WritePMA>
 8004fbe:	e1e2      	b.n	8005386 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004fc0:	463b      	mov	r3, r7
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004fca:	1d3b      	adds	r3, r7, #4
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	463b      	mov	r3, r7
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004fe8:	1d3b      	adds	r3, r7, #4
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	441a      	add	r2, r3
 8004ff6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800500e:	1d3b      	adds	r3, r7, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	663b      	str	r3, [r7, #96]	; 0x60
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501c:	b29b      	uxth	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005022:	4413      	add	r3, r2
 8005024:	663b      	str	r3, [r7, #96]	; 0x60
 8005026:	463b      	mov	r3, r7
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	011a      	lsls	r2, r3, #4
 800502e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005030:	4413      	add	r3, r2
 8005032:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005038:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503c:	b29a      	uxth	r2, r3
 800503e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005040:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	891b      	ldrh	r3, [r3, #8]
 8005048:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6959      	ldr	r1, [r3, #20]
 8005052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005056:	b29b      	uxth	r3, r3
 8005058:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800505c:	1d38      	adds	r0, r7, #4
 800505e:	6800      	ldr	r0, [r0, #0]
 8005060:	f000 fec0 	bl	8005de4 <USB_WritePMA>
 8005064:	e18f      	b.n	8005386 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 808f 	beq.w	80051a0 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	67bb      	str	r3, [r7, #120]	; 0x78
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d164      	bne.n	800515c <USB_EPStartXfer+0x834>
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	673b      	str	r3, [r7, #112]	; 0x70
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050a6:	4413      	add	r3, r2
 80050a8:	673b      	str	r3, [r7, #112]	; 0x70
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	011a      	lsls	r2, r3, #4
 80050b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b4:	4413      	add	r3, r2
 80050b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d112      	bne.n	80050ea <USB_EPStartXfer+0x7c2>
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e054      	b.n	8005194 <USB_EPStartXfer+0x86c>
 80050ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ee:	2b3e      	cmp	r3, #62	; 0x3e
 80050f0:	d817      	bhi.n	8005122 <USB_EPStartXfer+0x7fa>
 80050f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <USB_EPStartXfer+0x7ea>
 8005108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510c:	3301      	adds	r3, #1
 800510e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005116:	b29b      	uxth	r3, r3
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	b29a      	uxth	r2, r3
 800511c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	e038      	b.n	8005194 <USB_EPStartXfer+0x86c>
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <USB_EPStartXfer+0x81a>
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800513c:	3b01      	subs	r3, #1
 800513e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e01b      	b.n	8005194 <USB_EPStartXfer+0x86c>
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d116      	bne.n	8005194 <USB_EPStartXfer+0x86c>
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005174:	4413      	add	r3, r2
 8005176:	67bb      	str	r3, [r7, #120]	; 0x78
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	011a      	lsls	r2, r3, #4
 8005180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005182:	4413      	add	r3, r2
 8005184:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005188:	677b      	str	r3, [r7, #116]	; 0x74
 800518a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800518e:	b29a      	uxth	r2, r3
 8005190:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005192:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	895b      	ldrh	r3, [r3, #10]
 800519a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 800519e:	e097      	b.n	80052d0 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051a0:	463b      	mov	r3, r7
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d168      	bne.n	800527c <USB_EPStartXfer+0x954>
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051c2:	4413      	add	r3, r2
 80051c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d112      	bne.n	800520a <USB_EPStartXfer+0x8e2>
 80051e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005202:	b29a      	uxth	r2, r3
 8005204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e05d      	b.n	80052c6 <USB_EPStartXfer+0x99e>
 800520a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520e:	2b3e      	cmp	r3, #62	; 0x3e
 8005210:	d817      	bhi.n	8005242 <USB_EPStartXfer+0x91a>
 8005212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <USB_EPStartXfer+0x90a>
 8005228:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800522c:	3301      	adds	r3, #1
 800522e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005232:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29a      	uxth	r2, r3
 800523c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e041      	b.n	80052c6 <USB_EPStartXfer+0x99e>
 8005242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800524c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <USB_EPStartXfer+0x93a>
 8005258:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800525c:	3b01      	subs	r3, #1
 800525e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005262:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005266:	b29b      	uxth	r3, r3
 8005268:	029b      	lsls	r3, r3, #10
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005274:	b29a      	uxth	r2, r3
 8005276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e024      	b.n	80052c6 <USB_EPStartXfer+0x99e>
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	785b      	ldrb	r3, [r3, #1]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d11f      	bne.n	80052c6 <USB_EPStartXfer+0x99e>
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800528e:	1d3b      	adds	r3, r7, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800529e:	4413      	add	r3, r2
 80052a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	011a      	lsls	r2, r3, #4
 80052ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	b29a      	uxth	r2, r3
 80052c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052c6:	463b      	mov	r3, r7
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	891b      	ldrh	r3, [r3, #8]
 80052cc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6959      	ldr	r1, [r3, #20]
 80052d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052e0:	1d38      	adds	r0, r7, #4
 80052e2:	6800      	ldr	r0, [r0, #0]
 80052e4:	f000 fd7e 	bl	8005de4 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80052e8:	463b      	mov	r3, r7
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d122      	bne.n	8005338 <USB_EPStartXfer+0xa10>
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	463b      	mov	r3, r7
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005332:	b29b      	uxth	r3, r3
 8005334:	8013      	strh	r3, [r2, #0]
 8005336:	e026      	b.n	8005386 <USB_EPStartXfer+0xa5e>
 8005338:	463b      	mov	r3, r7
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	785b      	ldrb	r3, [r3, #1]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d121      	bne.n	8005386 <USB_EPStartXfer+0xa5e>
 8005342:	1d3b      	adds	r3, r7, #4
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	463b      	mov	r3, r7
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4413      	add	r3, r2
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	b29b      	uxth	r3, r3
 8005354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	463b      	mov	r3, r7
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800537a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005386:	1d3b      	adds	r3, r7, #4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	463b      	mov	r3, r7
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4413      	add	r3, r2
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29b      	uxth	r3, r3
 8005398:	f107 020e 	add.w	r2, r7, #14
 800539c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a4:	8013      	strh	r3, [r2, #0]
 80053a6:	f107 030e 	add.w	r3, r7, #14
 80053aa:	f107 020e 	add.w	r2, r7, #14
 80053ae:	8812      	ldrh	r2, [r2, #0]
 80053b0:	f082 0210 	eor.w	r2, r2, #16
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	f107 030e 	add.w	r3, r7, #14
 80053ba:	f107 020e 	add.w	r2, r7, #14
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	f082 0220 	eor.w	r2, r2, #32
 80053c4:	801a      	strh	r2, [r3, #0]
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	463b      	mov	r3, r7
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	441a      	add	r2, r3
 80053d4:	f107 030e 	add.w	r3, r7, #14
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	8013      	strh	r3, [r2, #0]
 80053ee:	e3b5      	b.n	8005b5c <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80053f0:	463b      	mov	r3, r7
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	7b1b      	ldrb	r3, [r3, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 8090 	bne.w	800551c <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80053fc:	463b      	mov	r3, r7
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	429a      	cmp	r2, r3
 800540a:	d90e      	bls.n	800542a <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 800540c:	463b      	mov	r3, r7
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	619a      	str	r2, [r3, #24]
 8005428:	e008      	b.n	800543c <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800542a:	463b      	mov	r3, r7
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005434:	463b      	mov	r3, r7
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005444:	1d3b      	adds	r3, r7, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800544c:	b29b      	uxth	r3, r3
 800544e:	461a      	mov	r2, r3
 8005450:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005454:	4413      	add	r3, r2
 8005456:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800545a:	463b      	mov	r3, r7
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	011a      	lsls	r2, r3, #4
 8005462:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005466:	4413      	add	r3, r2
 8005468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d116      	bne.n	80054a6 <USB_EPStartXfer+0xb7e>
 8005478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800548a:	801a      	strh	r2, [r3, #0]
 800548c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	b29b      	uxth	r3, r3
 8005494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800549c:	b29a      	uxth	r2, r3
 800549e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e32c      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
 80054a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054aa:	2b3e      	cmp	r3, #62	; 0x3e
 80054ac:	d818      	bhi.n	80054e0 <USB_EPStartXfer+0xbb8>
 80054ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054b2:	085b      	lsrs	r3, r3, #1
 80054b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d004      	beq.n	80054ce <USB_EPStartXfer+0xba6>
 80054c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054c8:	3301      	adds	r3, #1
 80054ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	029b      	lsls	r3, r3, #10
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	e30f      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
 80054e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d104      	bne.n	8005500 <USB_EPStartXfer+0xbd8>
 80054f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054fa:	3b01      	subs	r3, #1
 80054fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005500:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005504:	b29b      	uxth	r3, r3
 8005506:	029b      	lsls	r3, r3, #10
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005512:	b29a      	uxth	r2, r3
 8005514:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	e2f1      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800551c:	463b      	mov	r3, r7
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	78db      	ldrb	r3, [r3, #3]
 8005522:	2b02      	cmp	r3, #2
 8005524:	f040 818f 	bne.w	8005846 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d175      	bne.n	800561e <USB_EPStartXfer+0xcf6>
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800554a:	4413      	add	r3, r2
 800554c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005550:	463b      	mov	r3, r7
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	011a      	lsls	r2, r3, #4
 8005558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800555c:	4413      	add	r3, r2
 800555e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005566:	463b      	mov	r3, r7
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d116      	bne.n	800559e <USB_EPStartXfer+0xc76>
 8005570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800557c:	b29a      	uxth	r2, r3
 800557e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005594:	b29a      	uxth	r2, r3
 8005596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800559a:	801a      	strh	r2, [r3, #0]
 800559c:	e065      	b.n	800566a <USB_EPStartXfer+0xd42>
 800559e:	463b      	mov	r3, r7
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b3e      	cmp	r3, #62	; 0x3e
 80055a6:	d81a      	bhi.n	80055de <USB_EPStartXfer+0xcb6>
 80055a8:	463b      	mov	r3, r7
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	085b      	lsrs	r3, r3, #1
 80055b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055b4:	463b      	mov	r3, r7
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <USB_EPStartXfer+0xca4>
 80055c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055c6:	3301      	adds	r3, #1
 80055c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	029b      	lsls	r3, r3, #10
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	e045      	b.n	800566a <USB_EPStartXfer+0xd42>
 80055de:	463b      	mov	r3, r7
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ea:	463b      	mov	r3, r7
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d104      	bne.n	8005602 <USB_EPStartXfer+0xcda>
 80055f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055fc:	3b01      	subs	r3, #1
 80055fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005602:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005606:	b29b      	uxth	r3, r3
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	b29b      	uxth	r3, r3
 800560c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005614:	b29a      	uxth	r2, r3
 8005616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	e025      	b.n	800566a <USB_EPStartXfer+0xd42>
 800561e:	463b      	mov	r3, r7
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	785b      	ldrb	r3, [r3, #1]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d120      	bne.n	800566a <USB_EPStartXfer+0xd42>
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005640:	4413      	add	r3, r2
 8005642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005646:	463b      	mov	r3, r7
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	011a      	lsls	r2, r3, #4
 800564e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005652:	4413      	add	r3, r2
 8005654:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	b29a      	uxth	r2, r3
 8005664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	1d3b      	adds	r3, r7, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005672:	463b      	mov	r3, r7
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d175      	bne.n	8005768 <USB_EPStartXfer+0xe40>
 800567c:	1d3b      	adds	r3, r7, #4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005684:	1d3b      	adds	r3, r7, #4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800568c:	b29b      	uxth	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005694:	4413      	add	r3, r2
 8005696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056a6:	4413      	add	r3, r2
 80056a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056b0:	463b      	mov	r3, r7
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d116      	bne.n	80056e8 <USB_EPStartXfer+0xdc0>
 80056ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056cc:	801a      	strh	r2, [r3, #0]
 80056ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056de:	b29a      	uxth	r2, r3
 80056e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	e061      	b.n	80057ac <USB_EPStartXfer+0xe84>
 80056e8:	463b      	mov	r3, r7
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b3e      	cmp	r3, #62	; 0x3e
 80056f0:	d81a      	bhi.n	8005728 <USB_EPStartXfer+0xe00>
 80056f2:	463b      	mov	r3, r7
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056fe:	463b      	mov	r3, r7
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <USB_EPStartXfer+0xdee>
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	3301      	adds	r3, #1
 8005712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571a:	b29b      	uxth	r3, r3
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	e041      	b.n	80057ac <USB_EPStartXfer+0xe84>
 8005728:	463b      	mov	r3, r7
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005734:	463b      	mov	r3, r7
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2b00      	cmp	r3, #0
 8005740:	d104      	bne.n	800574c <USB_EPStartXfer+0xe24>
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	3b01      	subs	r3, #1
 8005748:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	b29b      	uxth	r3, r3
 8005752:	029b      	lsls	r3, r3, #10
 8005754:	b29b      	uxth	r3, r3
 8005756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575e:	b29a      	uxth	r2, r3
 8005760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e021      	b.n	80057ac <USB_EPStartXfer+0xe84>
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d11c      	bne.n	80057ac <USB_EPStartXfer+0xe84>
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800577a:	b29b      	uxth	r3, r3
 800577c:	461a      	mov	r2, r3
 800577e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005782:	4413      	add	r3, r2
 8005784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005788:	463b      	mov	r3, r7
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	011a      	lsls	r2, r3, #4
 8005790:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005794:	4413      	add	r3, r2
 8005796:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800579a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800579e:	463b      	mov	r3, r7
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80057aa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 81a4 	beq.w	8005b00 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	463b      	mov	r3, r7
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80057d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <USB_EPStartXfer+0xebc>
 80057d8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10d      	bne.n	8005800 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80057e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80057e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f040 8187 	bne.w	8005b00 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80057f2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 8180 	bne.w	8005b00 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	463b      	mov	r3, r7
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	b29b      	uxth	r3, r3
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800581e:	1d3b      	adds	r3, r7, #4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	463b      	mov	r3, r7
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	441a      	add	r2, r3
 800582c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800583c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
 8005844:	e15c      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005846:	463b      	mov	r3, r7
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 8155 	bne.w	8005afc <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005852:	463b      	mov	r3, r7
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	463b      	mov	r3, r7
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d90e      	bls.n	8005880 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	699a      	ldr	r2, [r3, #24]
 8005872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005876:	1ad2      	subs	r2, r2, r3
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	619a      	str	r2, [r3, #24]
 800587e:	e008      	b.n	8005892 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005880:	463b      	mov	r3, r7
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d16f      	bne.n	800597c <USB_EPStartXfer+0x1054>
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058b4:	4413      	add	r3, r2
 80058b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	011a      	lsls	r2, r3, #4
 80058c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d116      	bne.n	8005906 <USB_EPStartXfer+0xfde>
 80058d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	e05f      	b.n	80059c6 <USB_EPStartXfer+0x109e>
 8005906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800590a:	2b3e      	cmp	r3, #62	; 0x3e
 800590c:	d818      	bhi.n	8005940 <USB_EPStartXfer+0x1018>
 800590e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <USB_EPStartXfer+0x1006>
 8005924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005928:	3301      	adds	r3, #1
 800592a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800592e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005932:	b29b      	uxth	r3, r3
 8005934:	029b      	lsls	r3, r3, #10
 8005936:	b29a      	uxth	r2, r3
 8005938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	e042      	b.n	80059c6 <USB_EPStartXfer+0x109e>
 8005940:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <USB_EPStartXfer+0x1038>
 8005956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800595a:	3b01      	subs	r3, #1
 800595c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	b29b      	uxth	r3, r3
 8005966:	029b      	lsls	r3, r3, #10
 8005968:	b29b      	uxth	r3, r3
 800596a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800596e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005972:	b29a      	uxth	r2, r3
 8005974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e024      	b.n	80059c6 <USB_EPStartXfer+0x109e>
 800597c:	463b      	mov	r3, r7
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d11f      	bne.n	80059c6 <USB_EPStartXfer+0x109e>
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800598e:	1d3b      	adds	r3, r7, #4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800599e:	4413      	add	r3, r2
 80059a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	011a      	lsls	r2, r3, #4
 80059ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ce:	463b      	mov	r3, r7
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d16f      	bne.n	8005ab8 <USB_EPStartXfer+0x1190>
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059f0:	4413      	add	r3, r2
 80059f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a02:	4413      	add	r3, r2
 8005a04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d116      	bne.n	8005a42 <USB_EPStartXfer+0x111a>
 8005a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e05e      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
 8005a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a46:	2b3e      	cmp	r3, #62	; 0x3e
 8005a48:	d818      	bhi.n	8005a7c <USB_EPStartXfer+0x1154>
 8005a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d004      	beq.n	8005a6a <USB_EPStartXfer+0x1142>
 8005a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a64:	3301      	adds	r3, #1
 8005a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	029b      	lsls	r3, r3, #10
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e041      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
 8005a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a80:	095b      	lsrs	r3, r3, #5
 8005a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d104      	bne.n	8005a9c <USB_EPStartXfer+0x1174>
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a96:	3b01      	subs	r3, #1
 8005a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e023      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	785b      	ldrb	r3, [r3, #1]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d11e      	bne.n	8005b00 <USB_EPStartXfer+0x11d8>
 8005ac2:	1d3b      	adds	r3, r7, #4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	461a      	mov	r2, r3
 8005ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	011a      	lsls	r2, r3, #4
 8005ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005af2:	b29a      	uxth	r2, r3
 8005af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	e001      	b.n	8005b00 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e02e      	b.n	8005b5e <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b00:	1d3b      	adds	r3, r7, #4
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	463b      	mov	r3, r7
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005b1e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b26:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005b2a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b32:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b90:	81bb      	strh	r3, [r7, #12]
 8005b92:	89bb      	ldrh	r3, [r7, #12]
 8005b94:	f083 0310 	eor.w	r3, r3, #16
 8005b98:	81bb      	strh	r3, [r7, #12]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	89bb      	ldrh	r3, [r7, #12]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e01f      	b.n	8005bfc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	81fb      	strh	r3, [r7, #14]
 8005bd4:	89fb      	ldrh	r3, [r7, #14]
 8005bd6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bda:	81fb      	strh	r3, [r7, #14]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	89fb      	ldrh	r3, [r7, #14]
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bc80      	pop	{r7}
 8005c06:	4770      	bx	lr

08005c08 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	7b1b      	ldrb	r3, [r3, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 809d 	bne.w	8005d56 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d04c      	beq.n	8005cbe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	823b      	strh	r3, [r7, #16]
 8005c32:	8a3b      	ldrh	r3, [r7, #16]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <USB_EPClearStall+0x6c>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c52:	81fb      	strh	r3, [r7, #14]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	78db      	ldrb	r3, [r3, #3]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d06c      	beq.n	8005d56 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	81bb      	strh	r3, [r7, #12]
 8005c94:	89bb      	ldrh	r3, [r7, #12]
 8005c96:	f083 0320 	eor.w	r3, r3, #32
 8005c9a:	81bb      	strh	r3, [r7, #12]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	89bb      	ldrh	r3, [r7, #12]
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
 8005cbc:	e04b      	b.n	8005d56 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	82fb      	strh	r3, [r7, #22]
 8005ccc:	8afb      	ldrh	r3, [r7, #22]
 8005cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d01b      	beq.n	8005d0e <USB_EPClearStall+0x106>
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cec:	82bb      	strh	r3, [r7, #20]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	8abb      	ldrh	r3, [r7, #20]
 8005cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d24:	827b      	strh	r3, [r7, #18]
 8005d26:	8a7b      	ldrh	r3, [r7, #18]
 8005d28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d2c:	827b      	strh	r3, [r7, #18]
 8005d2e:	8a7b      	ldrh	r3, [r7, #18]
 8005d30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d34:	827b      	strh	r3, [r7, #18]
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	441a      	add	r2, r3
 8005d40:	8a7b      	ldrh	r3, [r7, #18]
 8005d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d103      	bne.n	8005d7c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr

08005d9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr

08005db0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr

08005dce <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b08d      	sub	sp, #52	; 0x34
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4611      	mov	r1, r2
 8005df0:	461a      	mov	r2, r3
 8005df2:	460b      	mov	r3, r1
 8005df4:	80fb      	strh	r3, [r7, #6]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005dfa:	88bb      	ldrh	r3, [r7, #4]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	005a      	lsls	r2, r3, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1c:	e01e      	b.n	8005e5c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	3301      	adds	r3, #1
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	021b      	lsls	r3, r3, #8
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	461a      	mov	r2, r3
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	3302      	adds	r3, #2
 8005e48:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	3301      	adds	r3, #1
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1dd      	bne.n	8005e1e <USB_WritePMA+0x3a>
  }
}
 8005e62:	bf00      	nop
 8005e64:	3734      	adds	r7, #52	; 0x34
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08b      	sub	sp, #44	; 0x2c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4611      	mov	r1, r2
 8005e78:	461a      	mov	r2, r3
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	80fb      	strh	r3, [r7, #6]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e82:	88bb      	ldrh	r3, [r7, #4]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e92:	88fb      	ldrh	r3, [r7, #6]
 8005e94:	005a      	lsls	r2, r3, #1
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea4:	e01b      	b.n	8005ede <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	3302      	adds	r3, #2
 8005eb2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	3302      	adds	r3, #2
 8005ed6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	3b01      	subs	r3, #1
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e0      	bne.n	8005ea6 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ee4:	88bb      	ldrh	r3, [r7, #4]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	701a      	strb	r2, [r3, #0]
  }
}
 8005f00:	bf00      	nop
 8005f02:	372c      	adds	r7, #44	; 0x2c
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr
	...

08005f0c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005f18:	2308      	movs	r3, #8
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	2181      	movs	r1, #129	; 0x81
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fc77 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	2101      	movs	r1, #1
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f001 fc6e 	bl	8007812 <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005f36:	2010      	movs	r0, #16
 8005f38:	f001 fd80 	bl	8007a3c <USBD_static_malloc>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8005f44:	2301      	movs	r3, #1
 8005f46:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <USBD_HID_Init+0x68>)
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fd52 	bl	80079f4 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	e005      	b.n	8005f6a <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f64:	2200      	movs	r2, #0
 8005f66:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200001c0 	.word	0x200001c0

08005f78 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	460b      	mov	r3, r1
 8005f82:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4a06      	ldr	r2, [pc, #24]	; (8005fa8 <USBD_HID_DataOut+0x30>)
 8005f8e:	2101      	movs	r1, #1
 8005f90:	f7fb ffad 	bl	8001eee <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <USBD_HID_DataOut+0x30>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa fe93 	bl	8000cc4 <SET_LEDS_Callback>

	return USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	200001c0 	.word	0x200001c0

08005fac <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005fb8:	2181      	movs	r1, #129	; 0x81
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fc4f 	bl	800785e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d009      	beq.n	8005fe4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fd3c 	bl	8007a54 <USBD_static_free>
    pdev->pClassData = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800601a:	2b00      	cmp	r3, #0
 800601c:	d045      	beq.n	80060aa <USBD_HID_Setup+0xba>
 800601e:	2b20      	cmp	r3, #32
 8006020:	f040 80d3 	bne.w	80061ca <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	3b02      	subs	r3, #2
 800602a:	2b09      	cmp	r3, #9
 800602c:	d835      	bhi.n	800609a <USBD_HID_Setup+0xaa>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USBD_HID_Setup+0x44>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	0800608b 	.word	0x0800608b
 8006038:	0800606b 	.word	0x0800606b
 800603c:	0800609b 	.word	0x0800609b
 8006040:	0800609b 	.word	0x0800609b
 8006044:	0800609b 	.word	0x0800609b
 8006048:	0800609b 	.word	0x0800609b
 800604c:	0800609b 	.word	0x0800609b
 8006050:	0800609b 	.word	0x0800609b
 8006054:	08006079 	.word	0x08006079
 8006058:	0800605d 	.word	0x0800605d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	885b      	ldrh	r3, [r3, #2]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	461a      	mov	r2, r3
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	601a      	str	r2, [r3, #0]
          break;
 8006068:	e01e      	b.n	80060a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2201      	movs	r2, #1
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f915 	bl	80072a0 <USBD_CtlSendData>
          break;
 8006076:	e017      	b.n	80060a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	885b      	ldrh	r3, [r3, #2]
 800607c:	0a1b      	lsrs	r3, r3, #8
 800607e:	b29b      	uxth	r3, r3
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	605a      	str	r2, [r3, #4]
          break;
 8006088:	e00e      	b.n	80060a8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3304      	adds	r3, #4
 800608e:	2201      	movs	r2, #1
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 f904 	bl	80072a0 <USBD_CtlSendData>
          break;
 8006098:	e006      	b.n	80060a8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f895 	bl	80071cc <USBD_CtlError>
          ret = USBD_FAIL;
 80060a2:	2302      	movs	r3, #2
 80060a4:	75fb      	strb	r3, [r7, #23]
          break;
 80060a6:	bf00      	nop
      }
      break;
 80060a8:	e096      	b.n	80061d8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	785b      	ldrb	r3, [r3, #1]
 80060ae:	2b0b      	cmp	r3, #11
 80060b0:	f200 8083 	bhi.w	80061ba <USBD_HID_Setup+0x1ca>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <USBD_HID_Setup+0xcc>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060ed 	.word	0x080060ed
 80060c0:	080061bb 	.word	0x080061bb
 80060c4:	080061bb 	.word	0x080061bb
 80060c8:	080061bb 	.word	0x080061bb
 80060cc:	080061bb 	.word	0x080061bb
 80060d0:	080061bb 	.word	0x080061bb
 80060d4:	08006115 	.word	0x08006115
 80060d8:	080061bb 	.word	0x080061bb
 80060dc:	080061bb 	.word	0x080061bb
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	0800616d 	.word	0x0800616d
 80060e8:	08006195 	.word	0x08006195
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d107      	bne.n	8006106 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80060f6:	f107 030e 	add.w	r3, r7, #14
 80060fa:	2202      	movs	r2, #2
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f001 f8ce 	bl	80072a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006104:	e060      	b.n	80061c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f001 f85f 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 800610e:	2302      	movs	r3, #2
 8006110:	75fb      	strb	r3, [r7, #23]
          break;
 8006112:	e059      	b.n	80061c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	885b      	ldrh	r3, [r3, #2]
 8006118:	0a1b      	lsrs	r3, r3, #8
 800611a:	b29b      	uxth	r3, r3
 800611c:	2b22      	cmp	r3, #34	; 0x22
 800611e:	d108      	bne.n	8006132 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	88db      	ldrh	r3, [r3, #6]
 8006124:	2b41      	cmp	r3, #65	; 0x41
 8006126:	bf28      	it	cs
 8006128:	2341      	movcs	r3, #65	; 0x41
 800612a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 800612c:	4b2d      	ldr	r3, [pc, #180]	; (80061e4 <USBD_HID_Setup+0x1f4>)
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e015      	b.n	800615e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	0a1b      	lsrs	r3, r3, #8
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b21      	cmp	r3, #33	; 0x21
 800613c:	d108      	bne.n	8006150 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800613e:	4b2a      	ldr	r3, [pc, #168]	; (80061e8 <USBD_HID_Setup+0x1f8>)
 8006140:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	88db      	ldrh	r3, [r3, #6]
 8006146:	2b09      	cmp	r3, #9
 8006148:	bf28      	it	cs
 800614a:	2309      	movcs	r3, #9
 800614c:	83fb      	strh	r3, [r7, #30]
 800614e:	e006      	b.n	800615e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f83a 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 8006158:	2302      	movs	r3, #2
 800615a:	75fb      	strb	r3, [r7, #23]
            break;
 800615c:	e034      	b.n	80061c8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800615e:	8bfb      	ldrh	r3, [r7, #30]
 8006160:	461a      	mov	r2, r3
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f89b 	bl	80072a0 <USBD_CtlSendData>
          break;
 800616a:	e02d      	b.n	80061c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006172:	2b03      	cmp	r3, #3
 8006174:	d107      	bne.n	8006186 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	3308      	adds	r3, #8
 800617a:	2201      	movs	r2, #1
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f88e 	bl	80072a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006184:	e020      	b.n	80061c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f81f 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 800618e:	2302      	movs	r3, #2
 8006190:	75fb      	strb	r3, [r7, #23]
          break;
 8006192:	e019      	b.n	80061c8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800619a:	2b03      	cmp	r3, #3
 800619c:	d106      	bne.n	80061ac <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061aa:	e00d      	b.n	80061c8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f001 f80c 	bl	80071cc <USBD_CtlError>
            ret = USBD_FAIL;
 80061b4:	2302      	movs	r3, #2
 80061b6:	75fb      	strb	r3, [r7, #23]
          break;
 80061b8:	e006      	b.n	80061c8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f001 f805 	bl	80071cc <USBD_CtlError>
          ret = USBD_FAIL;
 80061c2:	2302      	movs	r3, #2
 80061c4:	75fb      	strb	r3, [r7, #23]
          break;
 80061c6:	bf00      	nop
      }
      break;
 80061c8:	e006      	b.n	80061d8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fffd 	bl	80071cc <USBD_CtlError>
      ret = USBD_FAIL;
 80061d2:	2302      	movs	r3, #2
 80061d4:	75fb      	strb	r3, [r7, #23]
      break;
 80061d6:	bf00      	nop
  }

  return ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200000e4 	.word	0x200000e4
 80061e8:	200000cc 	.word	0x200000cc

080061ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2229      	movs	r2, #41	; 0x29
 80061f8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000048 	.word	0x20000048

0800620c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2229      	movs	r2, #41	; 0x29
 8006218:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20000074 	.word	0x20000074

0800622c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2229      	movs	r2, #41	; 0x29
 8006238:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200000a0 	.word	0x200000a0

0800624c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8006258:	f7fa fb3a 	bl	80008d0 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006262:	2200      	movs	r2, #0
 8006264:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	220a      	movs	r2, #10
 800627c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800627e:	4b03      	ldr	r3, [pc, #12]	; (800628c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	bc80      	pop	{r7}
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200000d8 	.word	0x200000d8

08006290 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e01a      	b.n	80062de <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	79fa      	ldrb	r2, [r7, #7]
 80062d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f001 fa38 	bl	800774c <USBD_LL_Init>

  return USBD_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
 8006306:	e001      	b.n	800630c <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bc80      	pop	{r7}
 8006316:	4770      	bx	lr

08006318 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fa5b 	bl	80077dc <USBD_LL_Start>

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006350:	2302      	movs	r3, #2
 8006352:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	78fa      	ldrb	r2, [r7, #3]
 8006368:	4611      	mov	r1, r2
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006378:	7bfb      	ldrb	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	460b      	mov	r3, r1
 800638c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	4611      	mov	r1, r2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 feca 	bl	8007154 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d00c      	beq.n	80063fe <USBD_LL_SetupStage+0x56>
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d302      	bcc.n	80063ee <USBD_LL_SetupStage+0x46>
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d010      	beq.n	800640e <USBD_LL_SetupStage+0x66>
 80063ec:	e017      	b.n	800641e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9ca 	bl	8006790 <USBD_StdDevReq>
      break;
 80063fc:	e01a      	b.n	8006434 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa2c 	bl	8006864 <USBD_StdItfReq>
      break;
 800640c:	e012      	b.n	8006434 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa6a 	bl	80068f0 <USBD_StdEPReq>
      break;
 800641c:	e00a      	b.n	8006434 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006428:	b2db      	uxtb	r3, r3
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fa35 	bl	800789c <USBD_LL_StallEP>
      break;
 8006432:	bf00      	nop
  }

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	460b      	mov	r3, r1
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800644c:	7afb      	ldrb	r3, [r7, #11]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d14b      	bne.n	80064ea <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006458:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006460:	2b03      	cmp	r3, #3
 8006462:	d134      	bne.n	80064ce <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	429a      	cmp	r2, r3
 800646e:	d919      	bls.n	80064a4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	1ad2      	subs	r2, r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800648e:	b29b      	uxth	r3, r3
 8006490:	e002      	b.n	8006498 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006496:	b29b      	uxth	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	6879      	ldr	r1, [r7, #4]
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 ff2d 	bl	80072fc <USBD_CtlContinueRx>
 80064a2:	e038      	b.n	8006516 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d105      	bne.n	80064c6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 ff2a 	bl	8007320 <USBD_CtlSendStatus>
 80064cc:	e023      	b.n	8006516 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d11e      	bne.n	8006516 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80064e0:	2100      	movs	r1, #0
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f001 f9da 	bl	800789c <USBD_LL_StallEP>
 80064e8:	e015      	b.n	8006516 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d108      	bne.n	8006512 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	7afa      	ldrb	r2, [r7, #11]
 800650a:	4611      	mov	r1, r2
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	4798      	blx	r3
 8006510:	e001      	b.n	8006516 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006512:	2302      	movs	r3, #2
 8006514:	e000      	b.n	8006518 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	460b      	mov	r3, r1
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800652e:	7afb      	ldrb	r3, [r7, #11]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d17f      	bne.n	8006634 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3314      	adds	r3, #20
 8006538:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006540:	2b02      	cmp	r3, #2
 8006542:	d15c      	bne.n	80065fe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	68da      	ldr	r2, [r3, #12]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	429a      	cmp	r2, r3
 800654e:	d915      	bls.n	800657c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	1ad2      	subs	r2, r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 feb5 	bl	80072d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800656e:	2300      	movs	r3, #0
 8006570:	2200      	movs	r2, #0
 8006572:	2100      	movs	r1, #0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fa3d 	bl	80079f4 <USBD_LL_PrepareReceive>
 800657a:	e04e      	b.n	800661a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	6912      	ldr	r2, [r2, #16]
 8006584:	fbb3 f1f2 	udiv	r1, r3, r2
 8006588:	fb02 f201 	mul.w	r2, r2, r1
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d11c      	bne.n	80065cc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800659a:	429a      	cmp	r2, r3
 800659c:	d316      	bcc.n	80065cc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d20f      	bcs.n	80065cc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065ac:	2200      	movs	r2, #0
 80065ae:	2100      	movs	r1, #0
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fe91 	bl	80072d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065be:	2300      	movs	r3, #0
 80065c0:	2200      	movs	r2, #0
 80065c2:	2100      	movs	r1, #0
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f001 fa15 	bl	80079f4 <USBD_LL_PrepareReceive>
 80065ca:	e026      	b.n	800661a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d105      	bne.n	80065ee <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80065ee:	2180      	movs	r1, #128	; 0x80
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f001 f953 	bl	800789c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fea5 	bl	8007346 <USBD_CtlReceiveStatus>
 80065fc:	e00d      	b.n	800661a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006604:	2b04      	cmp	r3, #4
 8006606:	d004      	beq.n	8006612 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 f941 	bl	800789c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006620:	2b01      	cmp	r3, #1
 8006622:	d11d      	bne.n	8006660 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fe83 	bl	8006330 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006632:	e015      	b.n	8006660 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00d      	beq.n	800665c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006646:	2b03      	cmp	r3, #3
 8006648:	d108      	bne.n	800665c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	7afa      	ldrb	r2, [r7, #11]
 8006654:	4611      	mov	r1, r2
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	4798      	blx	r3
 800665a:	e001      	b.n	8006660 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800665c:	2302      	movs	r3, #2
 800665e:	e000      	b.n	8006662 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006672:	2340      	movs	r3, #64	; 0x40
 8006674:	2200      	movs	r2, #0
 8006676:	2100      	movs	r1, #0
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 f8ca 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800668e:	2340      	movs	r3, #64	; 0x40
 8006690:	2200      	movs	r2, #0
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f8bc 	bl	8007812 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2240      	movs	r2, #64	; 0x40
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	6852      	ldr	r2, [r2, #4]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	4611      	mov	r1, r2
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
  }

  return USBD_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2204      	movs	r2, #4
 8006722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006740:	2b04      	cmp	r3, #4
 8006742:	d105      	bne.n	8006750 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	bc80      	pop	{r7}
 800675a:	4770      	bx	lr

0800675c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676a:	2b03      	cmp	r3, #3
 800676c:	d10b      	bne.n	8006786 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006780:	69db      	ldr	r3, [r3, #28]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	d004      	beq.n	80067b4 <USBD_StdDevReq+0x24>
 80067aa:	2b40      	cmp	r3, #64	; 0x40
 80067ac:	d002      	beq.n	80067b4 <USBD_StdDevReq+0x24>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <USBD_StdDevReq+0x34>
 80067b2:	e04c      	b.n	800684e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
      break;
 80067c2:	e049      	b.n	8006858 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b09      	cmp	r3, #9
 80067ca:	d83a      	bhi.n	8006842 <USBD_StdDevReq+0xb2>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <USBD_StdDevReq+0x44>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006839 	.word	0x08006839
 80067dc:	08006843 	.word	0x08006843
 80067e0:	0800682f 	.word	0x0800682f
 80067e4:	08006843 	.word	0x08006843
 80067e8:	08006807 	.word	0x08006807
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006843 	.word	0x08006843
 80067f4:	0800681b 	.word	0x0800681b
 80067f8:	08006811 	.word	0x08006811
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f9d4 	bl	8006bac <USBD_GetDescriptor>
          break;
 8006804:	e022      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fb37 	bl	8006e7c <USBD_SetAddress>
          break;
 800680e:	e01d      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fb74 	bl	8006f00 <USBD_SetConfig>
          break;
 8006818:	e018      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbfd 	bl	800701c <USBD_GetConfig>
          break;
 8006822:	e013      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fc2c 	bl	8007084 <USBD_GetStatus>
          break;
 800682c:	e00e      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fc5a 	bl	80070ea <USBD_SetFeature>
          break;
 8006836:	e009      	b.n	800684c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fc69 	bl	8007112 <USBD_ClrFeature>
          break;
 8006840:	e004      	b.n	800684c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fcc1 	bl	80071cc <USBD_CtlError>
          break;
 800684a:	bf00      	nop
      }
      break;
 800684c:	e004      	b.n	8006858 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fcbb 	bl	80071cc <USBD_CtlError>
      break;
 8006856:	bf00      	nop
  }

  return ret;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop

08006864 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687a:	2b20      	cmp	r3, #32
 800687c:	d003      	beq.n	8006886 <USBD_StdItfReq+0x22>
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d001      	beq.n	8006886 <USBD_StdItfReq+0x22>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12a      	bne.n	80068dc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800688c:	3b01      	subs	r3, #1
 800688e:	2b02      	cmp	r3, #2
 8006890:	d81d      	bhi.n	80068ce <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	889b      	ldrh	r3, [r3, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b01      	cmp	r3, #1
 800689a:	d813      	bhi.n	80068c4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d110      	bne.n	80068d8 <USBD_StdItfReq+0x74>
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fd2f 	bl	8007320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068c2:	e009      	b.n	80068d8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fc80 	bl	80071cc <USBD_CtlError>
          break;
 80068cc:	e004      	b.n	80068d8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fc7b 	bl	80071cc <USBD_CtlError>
          break;
 80068d6:	e000      	b.n	80068da <USBD_StdItfReq+0x76>
          break;
 80068d8:	bf00      	nop
      }
      break;
 80068da:	e004      	b.n	80068e6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fc74 	bl	80071cc <USBD_CtlError>
      break;
 80068e4:	bf00      	nop
  }

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	889b      	ldrh	r3, [r3, #4]
 8006902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800690c:	2b20      	cmp	r3, #32
 800690e:	d004      	beq.n	800691a <USBD_StdEPReq+0x2a>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d002      	beq.n	800691a <USBD_StdEPReq+0x2a>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d008      	beq.n	800692a <USBD_StdEPReq+0x3a>
 8006918:	e13d      	b.n	8006b96 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
      break;
 8006928:	e13a      	b.n	8006ba0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006932:	2b20      	cmp	r3, #32
 8006934:	d10a      	bne.n	800694c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
 800694a:	e12a      	b.n	8006ba2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d03e      	beq.n	80069d2 <USBD_StdEPReq+0xe2>
 8006954:	2b03      	cmp	r3, #3
 8006956:	d002      	beq.n	800695e <USBD_StdEPReq+0x6e>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d070      	beq.n	8006a3e <USBD_StdEPReq+0x14e>
 800695c:	e115      	b.n	8006b8a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006964:	2b02      	cmp	r3, #2
 8006966:	d002      	beq.n	800696e <USBD_StdEPReq+0x7e>
 8006968:	2b03      	cmp	r3, #3
 800696a:	d015      	beq.n	8006998 <USBD_StdEPReq+0xa8>
 800696c:	e02b      	b.n	80069c6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00c      	beq.n	800698e <USBD_StdEPReq+0x9e>
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d009      	beq.n	800698e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800697a:	7bbb      	ldrb	r3, [r7, #14]
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 ff8c 	bl	800789c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 ff88 	bl	800789c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800698c:	e020      	b.n	80069d0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fc1b 	bl	80071cc <USBD_CtlError>
              break;
 8006996:	e01b      	b.n	80069d0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	885b      	ldrh	r3, [r3, #2]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10e      	bne.n	80069be <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80069a0:	7bbb      	ldrb	r3, [r7, #14]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <USBD_StdEPReq+0xce>
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	2b80      	cmp	r3, #128	; 0x80
 80069aa:	d008      	beq.n	80069be <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 ff6f 	bl	800789c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fcae 	bl	8007320 <USBD_CtlSendStatus>

              break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fbff 	bl	80071cc <USBD_CtlError>
              break;
 80069ce:	bf00      	nop
          }
          break;
 80069d0:	e0e0      	b.n	8006b94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d002      	beq.n	80069e2 <USBD_StdEPReq+0xf2>
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d015      	beq.n	8006a0c <USBD_StdEPReq+0x11c>
 80069e0:	e026      	b.n	8006a30 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e2:	7bbb      	ldrb	r3, [r7, #14]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00c      	beq.n	8006a02 <USBD_StdEPReq+0x112>
 80069e8:	7bbb      	ldrb	r3, [r7, #14]
 80069ea:	2b80      	cmp	r3, #128	; 0x80
 80069ec:	d009      	beq.n	8006a02 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80069ee:	7bbb      	ldrb	r3, [r7, #14]
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 ff52 	bl	800789c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80069f8:	2180      	movs	r1, #128	; 0x80
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 ff4e 	bl	800789c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a00:	e01c      	b.n	8006a3c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fbe1 	bl	80071cc <USBD_CtlError>
              break;
 8006a0a:	e017      	b.n	8006a3c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d112      	bne.n	8006a3a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a1e:	7bbb      	ldrb	r3, [r7, #14]
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 ff59 	bl	80078da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fc79 	bl	8007320 <USBD_CtlSendStatus>
              }
              break;
 8006a2e:	e004      	b.n	8006a3a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbca 	bl	80071cc <USBD_CtlError>
              break;
 8006a38:	e000      	b.n	8006a3c <USBD_StdEPReq+0x14c>
              break;
 8006a3a:	bf00      	nop
          }
          break;
 8006a3c:	e0aa      	b.n	8006b94 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d002      	beq.n	8006a4e <USBD_StdEPReq+0x15e>
 8006a48:	2b03      	cmp	r3, #3
 8006a4a:	d032      	beq.n	8006ab2 <USBD_StdEPReq+0x1c2>
 8006a4c:	e097      	b.n	8006b7e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <USBD_StdEPReq+0x174>
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	2b80      	cmp	r3, #128	; 0x80
 8006a58:	d004      	beq.n	8006a64 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fbb5 	bl	80071cc <USBD_CtlError>
                break;
 8006a62:	e091      	b.n	8006b88 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	da0b      	bge.n	8006a84 <USBD_StdEPReq+0x194>
 8006a6c:	7bbb      	ldrb	r3, [r7, #14]
 8006a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	3310      	adds	r3, #16
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	4413      	add	r3, r2
 8006a80:	3304      	adds	r3, #4
 8006a82:	e00b      	b.n	8006a9c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fbf8 	bl	80072a0 <USBD_CtlSendData>
              break;
 8006ab0:	e06a      	b.n	8006b88 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	da11      	bge.n	8006ade <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	6879      	ldr	r1, [r7, #4]
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	440b      	add	r3, r1
 8006acc:	3318      	adds	r3, #24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d117      	bne.n	8006b04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fb78 	bl	80071cc <USBD_CtlError>
                  break;
 8006adc:	e054      	b.n	8006b88 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
 8006ae0:	f003 020f 	and.w	r2, r3, #15
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d104      	bne.n	8006b04 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006afa:	6839      	ldr	r1, [r7, #0]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fb65 	bl	80071cc <USBD_CtlError>
                  break;
 8006b02:	e041      	b.n	8006b88 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	da0b      	bge.n	8006b24 <USBD_StdEPReq+0x234>
 8006b0c:	7bbb      	ldrb	r3, [r7, #14]
 8006b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	3310      	adds	r3, #16
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	4413      	add	r3, r2
 8006b20:	3304      	adds	r3, #4
 8006b22:	e00b      	b.n	8006b3c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b24:	7bbb      	ldrb	r3, [r7, #14]
 8006b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4413      	add	r3, r2
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x25a>
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d103      	bne.n	8006b52 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e00e      	b.n	8006b70 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fede 	bl	8007918 <USBD_LL_IsStallEP>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e002      	b.n	8006b70 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2202      	movs	r2, #2
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fb92 	bl	80072a0 <USBD_CtlSendData>
              break;
 8006b7c:	e004      	b.n	8006b88 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb23 	bl	80071cc <USBD_CtlError>
              break;
 8006b86:	bf00      	nop
          }
          break;
 8006b88:	e004      	b.n	8006b94 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fb1d 	bl	80071cc <USBD_CtlError>
          break;
 8006b92:	bf00      	nop
      }
      break;
 8006b94:	e004      	b.n	8006ba0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fb17 	bl	80071cc <USBD_CtlError>
      break;
 8006b9e:	bf00      	nop
  }

  return ret;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	885b      	ldrh	r3, [r3, #2]
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b06      	cmp	r3, #6
 8006bce:	f200 8128 	bhi.w	8006e22 <USBD_GetDescriptor+0x276>
 8006bd2:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <USBD_GetDescriptor+0x2c>)
 8006bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006c4d 	.word	0x08006c4d
 8006be4:	08006e23 	.word	0x08006e23
 8006be8:	08006e23 	.word	0x08006e23
 8006bec:	08006dc3 	.word	0x08006dc3
 8006bf0:	08006def 	.word	0x08006def
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
      break;
 8006c0a:	e112      	b.n	8006e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	7c1b      	ldrb	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10d      	bne.n	8006c30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f107 0208 	add.w	r2, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006c2e:	e100      	b.n	8006e32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	f107 0208 	add.w	r2, r7, #8
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4798      	blx	r3
 8006c40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	2202      	movs	r2, #2
 8006c48:	701a      	strb	r2, [r3, #0]
      break;
 8006c4a:	e0f2      	b.n	8006e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	f200 80ac 	bhi.w	8006db0 <USBD_GetDescriptor+0x204>
 8006c58:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <USBD_GetDescriptor+0xb4>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c79 	.word	0x08006c79
 8006c64:	08006cad 	.word	0x08006cad
 8006c68:	08006ce1 	.word	0x08006ce1
 8006c6c:	08006d15 	.word	0x08006d15
 8006c70:	08006d49 	.word	0x08006d49
 8006c74:	08006d7d 	.word	0x08006d7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7c12      	ldrb	r2, [r2, #16]
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9a:	e091      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa94 	bl	80071cc <USBD_CtlError>
            err++;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8006caa:	e089      	b.n	8006dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	7c12      	ldrb	r2, [r2, #16]
 8006cc4:	f107 0108 	add.w	r1, r7, #8
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
 8006ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cce:	e077      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa7a 	bl	80071cc <USBD_CtlError>
            err++;
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006cde:	e06f      	b.n	8006dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7c12      	ldrb	r2, [r2, #16]
 8006cf8:	f107 0108 	add.w	r1, r7, #8
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d02:	e05d      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fa60 	bl	80071cc <USBD_CtlError>
            err++;
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	72fb      	strb	r3, [r7, #11]
          break;
 8006d12:	e055      	b.n	8006dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	7c12      	ldrb	r2, [r2, #16]
 8006d2c:	f107 0108 	add.w	r1, r7, #8
 8006d30:	4610      	mov	r0, r2
 8006d32:	4798      	blx	r3
 8006d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d36:	e043      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa46 	bl	80071cc <USBD_CtlError>
            err++;
 8006d40:	7afb      	ldrb	r3, [r7, #11]
 8006d42:	3301      	adds	r3, #1
 8006d44:	72fb      	strb	r3, [r7, #11]
          break;
 8006d46:	e03b      	b.n	8006dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00b      	beq.n	8006d6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7c12      	ldrb	r2, [r2, #16]
 8006d60:	f107 0108 	add.w	r1, r7, #8
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
 8006d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d6a:	e029      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa2c 	bl	80071cc <USBD_CtlError>
            err++;
 8006d74:	7afb      	ldrb	r3, [r7, #11]
 8006d76:	3301      	adds	r3, #1
 8006d78:	72fb      	strb	r3, [r7, #11]
          break;
 8006d7a:	e021      	b.n	8006dc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	7c12      	ldrb	r2, [r2, #16]
 8006d94:	f107 0108 	add.w	r1, r7, #8
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4798      	blx	r3
 8006d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d9e:	e00f      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa12 	bl	80071cc <USBD_CtlError>
            err++;
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	3301      	adds	r3, #1
 8006dac:	72fb      	strb	r3, [r7, #11]
          break;
 8006dae:	e007      	b.n	8006dc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fa0a 	bl	80071cc <USBD_CtlError>
          err++;
 8006db8:	7afb      	ldrb	r3, [r7, #11]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006dbe:	e038      	b.n	8006e32 <USBD_GetDescriptor+0x286>
 8006dc0:	e037      	b.n	8006e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	7c1b      	ldrb	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	f107 0208 	add.w	r2, r7, #8
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4798      	blx	r3
 8006dda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ddc:	e029      	b.n	8006e32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9f3 	bl	80071cc <USBD_CtlError>
        err++;
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	3301      	adds	r3, #1
 8006dea:	72fb      	strb	r3, [r7, #11]
      break;
 8006dec:	e021      	b.n	8006e32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7c1b      	ldrb	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10d      	bne.n	8006e12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfe:	f107 0208 	add.w	r2, r7, #8
 8006e02:	4610      	mov	r0, r2
 8006e04:	4798      	blx	r3
 8006e06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e10:	e00f      	b.n	8006e32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f9d9 	bl	80071cc <USBD_CtlError>
        err++;
 8006e1a:	7afb      	ldrb	r3, [r7, #11]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e20:	e007      	b.n	8006e32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9d1 	bl	80071cc <USBD_CtlError>
      err++;
 8006e2a:	7afb      	ldrb	r3, [r7, #11]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006e30:	bf00      	nop
  }

  if (err != 0U)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11c      	bne.n	8006e72 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006e38:	893b      	ldrh	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <USBD_GetDescriptor+0x2b6>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	88db      	ldrh	r3, [r3, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00d      	beq.n	8006e62 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	88da      	ldrh	r2, [r3, #6]
 8006e4a:	893b      	ldrh	r3, [r7, #8]
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	bf28      	it	cs
 8006e50:	4613      	movcs	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e56:	893b      	ldrh	r3, [r7, #8]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fa1f 	bl	80072a0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	88db      	ldrh	r3, [r3, #6]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d104      	bne.n	8006e74 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa58 	bl	8007320 <USBD_CtlSendStatus>
 8006e70:	e000      	b.n	8006e74 <USBD_GetDescriptor+0x2c8>
    return;
 8006e72:	bf00      	nop
    }
  }
}
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	889b      	ldrh	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d130      	bne.n	8006ef0 <USBD_SetAddress+0x74>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	88db      	ldrh	r3, [r3, #6]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d12c      	bne.n	8006ef0 <USBD_SetAddress+0x74>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	885b      	ldrh	r3, [r3, #2]
 8006e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9c:	d828      	bhi.n	8006ef0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	885b      	ldrh	r3, [r3, #2]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d104      	bne.n	8006ebe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f988 	bl	80071cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ebc:	e01c      	b.n	8006ef8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7bfa      	ldrb	r2, [r7, #15]
 8006ec2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fd50 	bl	8007970 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fa25 	bl	8007320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d004      	beq.n	8006ee6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee4:	e008      	b.n	8006ef8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eee:	e003      	b.n	8006ef8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ef0:	6839      	ldr	r1, [r7, #0]
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f96a 	bl	80071cc <USBD_CtlError>
  }
}
 8006ef8:	bf00      	nop
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	885b      	ldrh	r3, [r3, #2]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	4b41      	ldr	r3, [pc, #260]	; (8007018 <USBD_SetConfig+0x118>)
 8006f12:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f14:	4b40      	ldr	r3, [pc, #256]	; (8007018 <USBD_SetConfig+0x118>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d904      	bls.n	8006f26 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f954 	bl	80071cc <USBD_CtlError>
 8006f24:	e075      	b.n	8007012 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d002      	beq.n	8006f36 <USBD_SetConfig+0x36>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d023      	beq.n	8006f7c <USBD_SetConfig+0x7c>
 8006f34:	e062      	b.n	8006ffc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006f36:	4b38      	ldr	r3, [pc, #224]	; (8007018 <USBD_SetConfig+0x118>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01a      	beq.n	8006f74 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <USBD_SetConfig+0x118>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006f50:	4b31      	ldr	r3, [pc, #196]	; (8007018 <USBD_SetConfig+0x118>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	4619      	mov	r1, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff f9f4 	bl	8006344 <USBD_SetClassConfig>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d104      	bne.n	8006f6c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f931 	bl	80071cc <USBD_CtlError>
            return;
 8006f6a:	e052      	b.n	8007012 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9d7 	bl	8007320 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006f72:	e04e      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f9d3 	bl	8007320 <USBD_CtlSendStatus>
        break;
 8006f7a:	e04a      	b.n	8007012 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <USBD_SetConfig+0x118>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d112      	bne.n	8006faa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006f8c:	4b22      	ldr	r3, [pc, #136]	; (8007018 <USBD_SetConfig+0x118>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <USBD_SetConfig+0x118>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff f9f0 	bl	8006382 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9bc 	bl	8007320 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006fa8:	e033      	b.n	8007012 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <USBD_SetConfig+0x118>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d01d      	beq.n	8006ff4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff f9de 	bl	8006382 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <USBD_SetConfig+0x118>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006fd0:	4b11      	ldr	r3, [pc, #68]	; (8007018 <USBD_SetConfig+0x118>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f7ff f9b4 	bl	8006344 <USBD_SetClassConfig>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d104      	bne.n	8006fec <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f8f1 	bl	80071cc <USBD_CtlError>
            return;
 8006fea:	e012      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f997 	bl	8007320 <USBD_CtlSendStatus>
        break;
 8006ff2:	e00e      	b.n	8007012 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f993 	bl	8007320 <USBD_CtlSendStatus>
        break;
 8006ffa:	e00a      	b.n	8007012 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f8e4 	bl	80071cc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007004:	4b04      	ldr	r3, [pc, #16]	; (8007018 <USBD_SetConfig+0x118>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7ff f9b9 	bl	8006382 <USBD_ClrClassConfig>
        break;
 8007010:	bf00      	nop
    }
  }
}
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	200001c1 	.word	0x200001c1

0800701c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d004      	beq.n	8007038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8cb 	bl	80071cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007036:	e021      	b.n	800707c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703e:	2b01      	cmp	r3, #1
 8007040:	db17      	blt.n	8007072 <USBD_GetConfig+0x56>
 8007042:	2b02      	cmp	r3, #2
 8007044:	dd02      	ble.n	800704c <USBD_GetConfig+0x30>
 8007046:	2b03      	cmp	r3, #3
 8007048:	d00b      	beq.n	8007062 <USBD_GetConfig+0x46>
 800704a:	e012      	b.n	8007072 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3308      	adds	r3, #8
 8007056:	2201      	movs	r2, #1
 8007058:	4619      	mov	r1, r3
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f920 	bl	80072a0 <USBD_CtlSendData>
        break;
 8007060:	e00c      	b.n	800707c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3304      	adds	r3, #4
 8007066:	2201      	movs	r2, #1
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f918 	bl	80072a0 <USBD_CtlSendData>
        break;
 8007070:	e004      	b.n	800707c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f8a9 	bl	80071cc <USBD_CtlError>
        break;
 800707a:	bf00      	nop
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	3b01      	subs	r3, #1
 8007096:	2b02      	cmp	r3, #2
 8007098:	d81e      	bhi.n	80070d8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	88db      	ldrh	r3, [r3, #6]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d004      	beq.n	80070ac <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f891 	bl	80071cc <USBD_CtlError>
        break;
 80070aa:	e01a      	b.n	80070e2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f043 0202 	orr.w	r2, r3, #2
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	330c      	adds	r3, #12
 80070cc:	2202      	movs	r2, #2
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8e5 	bl	80072a0 <USBD_CtlSendData>
      break;
 80070d6:	e004      	b.n	80070e2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f876 	bl	80071cc <USBD_CtlError>
      break;
 80070e0:	bf00      	nop
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d106      	bne.n	800710a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f90b 	bl	8007320 <USBD_CtlSendStatus>
  }
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b082      	sub	sp, #8
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007122:	3b01      	subs	r3, #1
 8007124:	2b02      	cmp	r3, #2
 8007126:	d80b      	bhi.n	8007140 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	885b      	ldrh	r3, [r3, #2]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10c      	bne.n	800714a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8f1 	bl	8007320 <USBD_CtlSendStatus>
      }
      break;
 800713e:	e004      	b.n	800714a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f842 	bl	80071cc <USBD_CtlError>
      break;
 8007148:	e000      	b.n	800714c <USBD_ClrFeature+0x3a>
      break;
 800714a:	bf00      	nop
  }
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	781a      	ldrb	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	785a      	ldrb	r2, [r3, #1]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	3302      	adds	r3, #2
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	b29a      	uxth	r2, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	3303      	adds	r3, #3
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	4413      	add	r3, r2
 8007184:	b29a      	uxth	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	3304      	adds	r3, #4
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b29a      	uxth	r2, r3
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	3305      	adds	r3, #5
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	021b      	lsls	r3, r3, #8
 800719c:	b29b      	uxth	r3, r3
 800719e:	4413      	add	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	3306      	adds	r3, #6
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	3307      	adds	r3, #7
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	021b      	lsls	r3, r3, #8
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	4413      	add	r3, r2
 80071bc:	b29a      	uxth	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	80da      	strh	r2, [r3, #6]

}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr

080071cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80071d6:	2180      	movs	r1, #128	; 0x80
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb5f 	bl	800789c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80071de:	2100      	movs	r1, #0
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fb5b 	bl	800789c <USBD_LL_StallEP>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d032      	beq.n	800726a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f834 	bl	8007272 <USBD_GetLen>
 800720a:	4603      	mov	r3, r0
 800720c:	3301      	adds	r3, #1
 800720e:	b29b      	uxth	r3, r3
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	1c5a      	adds	r2, r3, #1
 800721c:	75fa      	strb	r2, [r7, #23]
 800721e:	461a      	mov	r2, r3
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	4413      	add	r3, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	75fa      	strb	r2, [r7, #23]
 8007230:	461a      	mov	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	2203      	movs	r2, #3
 8007238:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800723a:	e012      	b.n	8007262 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	60fa      	str	r2, [r7, #12]
 8007242:	7dfa      	ldrb	r2, [r7, #23]
 8007244:	1c51      	adds	r1, r2, #1
 8007246:	75f9      	strb	r1, [r7, #23]
 8007248:	4611      	mov	r1, r2
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	440a      	add	r2, r1
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	75fa      	strb	r2, [r7, #23]
 8007258:	461a      	mov	r2, r3
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	2200      	movs	r2, #0
 8007260:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e8      	bne.n	800723c <USBD_GetString+0x4e>
    }
  }
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800727e:	e005      	b.n	800728c <USBD_GetLen+0x1a>
  {
    len++;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
 8007282:	3301      	adds	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3301      	adds	r3, #1
 800728a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f5      	bne.n	8007280 <USBD_GetLen+0xe>
  }

  return len;
 8007294:	7bfb      	ldrb	r3, [r7, #15]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	2100      	movs	r1, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fb70 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	2100      	movs	r1, #0
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fb5e 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	2100      	movs	r1, #0
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fb6f 	bl	80079f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007330:	2300      	movs	r3, #0
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb39 	bl	80079ae <USBD_LL_Transmit>

  return USBD_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2205      	movs	r2, #5
 8007352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007356:	2300      	movs	r3, #0
 8007358:	2200      	movs	r2, #0
 800735a:	2100      	movs	r1, #0
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fb49 	bl	80079f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007370:	2200      	movs	r2, #0
 8007372:	490e      	ldr	r1, [pc, #56]	; (80073ac <MX_USB_DEVICE_Init+0x40>)
 8007374:	480e      	ldr	r0, [pc, #56]	; (80073b0 <MX_USB_DEVICE_Init+0x44>)
 8007376:	f7fe ff8b 	bl	8006290 <USBD_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007380:	f7f9 fb51 	bl	8000a26 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007384:	490b      	ldr	r1, [pc, #44]	; (80073b4 <MX_USB_DEVICE_Init+0x48>)
 8007386:	480a      	ldr	r0, [pc, #40]	; (80073b0 <MX_USB_DEVICE_Init+0x44>)
 8007388:	f7fe ffad 	bl	80062e6 <USBD_RegisterClass>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007392:	f7f9 fb48 	bl	8000a26 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007396:	4806      	ldr	r0, [pc, #24]	; (80073b0 <MX_USB_DEVICE_Init+0x44>)
 8007398:	f7fe ffbe 	bl	8006318 <USBD_Start>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80073a2:	f7f9 fb40 	bl	8000a26 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073a6:	bf00      	nop
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	20000128 	.word	0x20000128
 80073b0:	20000268 	.word	0x20000268
 80073b4:	20000010 	.word	0x20000010

080073b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2212      	movs	r2, #18
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073ca:	4b03      	ldr	r3, [pc, #12]	; (80073d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bc80      	pop	{r7}
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000144 	.word	0x20000144

080073dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	4603      	mov	r3, r0
 80073e4:	6039      	str	r1, [r7, #0]
 80073e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2204      	movs	r2, #4
 80073ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ee:	4b03      	ldr	r3, [pc, #12]	; (80073fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000158 	.word	0x20000158

08007400 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	4603      	mov	r3, r0
 8007408:	6039      	str	r1, [r7, #0]
 800740a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800740c:	79fb      	ldrb	r3, [r7, #7]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d105      	bne.n	800741e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	4907      	ldr	r1, [pc, #28]	; (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
 8007416:	4808      	ldr	r0, [pc, #32]	; (8007438 <USBD_FS_ProductStrDescriptor+0x38>)
 8007418:	f7ff fee9 	bl	80071ee <USBD_GetString>
 800741c:	e004      	b.n	8007428 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	4904      	ldr	r1, [pc, #16]	; (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
 8007422:	4805      	ldr	r0, [pc, #20]	; (8007438 <USBD_FS_ProductStrDescriptor+0x38>)
 8007424:	f7ff fee3 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007428:	4b02      	ldr	r3, [pc, #8]	; (8007434 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	2000052c 	.word	0x2000052c
 8007438:	08007b58 	.word	0x08007b58

0800743c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	4603      	mov	r3, r0
 8007444:	6039      	str	r1, [r7, #0]
 8007446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	4904      	ldr	r1, [pc, #16]	; (800745c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800744c:	4804      	ldr	r0, [pc, #16]	; (8007460 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800744e:	f7ff fece 	bl	80071ee <USBD_GetString>
  return USBD_StrDesc;
 8007452:	4b02      	ldr	r3, [pc, #8]	; (800745c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	2000052c 	.word	0x2000052c
 8007460:	08007b6c 	.word	0x08007b6c

08007464 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	221a      	movs	r2, #26
 8007474:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007476:	f000 f843 	bl	8007500 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800747a:	4b02      	ldr	r3, [pc, #8]	; (8007484 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	2000015c 	.word	0x2000015c

08007488 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	4603      	mov	r3, r0
 8007490:	6039      	str	r1, [r7, #0]
 8007492:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d105      	bne.n	80074a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	4907      	ldr	r1, [pc, #28]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800749e:	4808      	ldr	r0, [pc, #32]	; (80074c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074a0:	f7ff fea5 	bl	80071ee <USBD_GetString>
 80074a4:	e004      	b.n	80074b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4904      	ldr	r1, [pc, #16]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80074aa:	4805      	ldr	r0, [pc, #20]	; (80074c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80074ac:	f7ff fe9f 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80074b0:	4b02      	ldr	r3, [pc, #8]	; (80074bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000052c 	.word	0x2000052c
 80074c0:	08007b80 	.word	0x08007b80

080074c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	6039      	str	r1, [r7, #0]
 80074ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4907      	ldr	r1, [pc, #28]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074da:	4808      	ldr	r0, [pc, #32]	; (80074fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074dc:	f7ff fe87 	bl	80071ee <USBD_GetString>
 80074e0:	e004      	b.n	80074ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	4904      	ldr	r1, [pc, #16]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074e6:	4805      	ldr	r0, [pc, #20]	; (80074fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074e8:	f7ff fe81 	bl	80071ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80074ec:	4b02      	ldr	r3, [pc, #8]	; (80074f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000052c 	.word	0x2000052c
 80074fc:	08007b8c 	.word	0x08007b8c

08007500 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007506:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <Get_SerialNum+0x44>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800750c:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <Get_SerialNum+0x48>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007512:	4b0e      	ldr	r3, [pc, #56]	; (800754c <Get_SerialNum+0x4c>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007526:	2208      	movs	r2, #8
 8007528:	4909      	ldr	r1, [pc, #36]	; (8007550 <Get_SerialNum+0x50>)
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 f814 	bl	8007558 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007530:	2204      	movs	r2, #4
 8007532:	4908      	ldr	r1, [pc, #32]	; (8007554 <Get_SerialNum+0x54>)
 8007534:	68b8      	ldr	r0, [r7, #8]
 8007536:	f000 f80f 	bl	8007558 <IntToUnicode>
  }
}
 800753a:	bf00      	nop
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	1ffff7e8 	.word	0x1ffff7e8
 8007548:	1ffff7ec 	.word	0x1ffff7ec
 800754c:	1ffff7f0 	.word	0x1ffff7f0
 8007550:	2000015e 	.word	0x2000015e
 8007554:	2000016e 	.word	0x2000016e

08007558 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	4613      	mov	r3, r2
 8007564:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
 800756e:	e027      	b.n	80075c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	0f1b      	lsrs	r3, r3, #28
 8007574:	2b09      	cmp	r3, #9
 8007576:	d80b      	bhi.n	8007590 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0f1b      	lsrs	r3, r3, #28
 800757c:	b2da      	uxtb	r2, r3
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4619      	mov	r1, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	440b      	add	r3, r1
 8007588:	3230      	adds	r2, #48	; 0x30
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	e00a      	b.n	80075a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	0f1b      	lsrs	r3, r3, #28
 8007594:	b2da      	uxtb	r2, r3
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4619      	mov	r1, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	440b      	add	r3, r1
 80075a0:	3237      	adds	r2, #55	; 0x37
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	3301      	adds	r3, #1
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	4413      	add	r3, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	3301      	adds	r3, #1
 80075be:	75fb      	strb	r3, [r7, #23]
 80075c0:	7dfa      	ldrb	r2, [r7, #23]
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d3d3      	bcc.n	8007570 <IntToUnicode+0x18>
  }
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
	...

080075d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a0d      	ldr	r2, [pc, #52]	; (8007618 <HAL_PCD_MspInit+0x44>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d113      	bne.n	800760e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <HAL_PCD_MspInit+0x48>)
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	4a0c      	ldr	r2, [pc, #48]	; (800761c <HAL_PCD_MspInit+0x48>)
 80075ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80075f0:	61d3      	str	r3, [r2, #28]
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_PCD_MspInit+0x48>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80075fe:	2200      	movs	r2, #0
 8007600:	2100      	movs	r1, #0
 8007602:	2014      	movs	r0, #20
 8007604:	f7f9 ff41 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007608:	2014      	movs	r0, #20
 800760a:	f7f9 ff5a 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800760e:	bf00      	nop
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	40005c00 	.word	0x40005c00
 800761c:	40021000 	.word	0x40021000

08007620 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f7fe feb6 	bl	80063a8 <USBD_LL_SetupStage>
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007656:	78fa      	ldrb	r2, [r7, #3]
 8007658:	6879      	ldr	r1, [r7, #4]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	440b      	add	r3, r1
 8007664:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	4619      	mov	r1, r3
 800766e:	f7fe fee6 	bl	800643e <USBD_LL_DataOutStage>
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	440b      	add	r3, r1
 800769a:	333c      	adds	r3, #60	; 0x3c
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	4619      	mov	r1, r3
 80076a2:	f7fe ff3d 	bl	8006520 <USBD_LL_DataInStage>
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b082      	sub	sp, #8
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff f84d 	bl	800675c <USBD_LL_SOF>
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b084      	sub	sp, #16
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d001      	beq.n	80076e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80076de:	f7f9 f9a2 	bl	8000a26 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076e8:	7bfa      	ldrb	r2, [r7, #15]
 80076ea:	4611      	mov	r1, r2
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fffd 	bl	80066ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe ffb6 	bl	800666a <USBD_LL_Reset>
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007714:	4618      	mov	r0, r3
 8007716:	f7fe fff8 	bl	800670a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 800771a:	2001      	movs	r0, #1
 800771c:	f7f9 fb04 	bl	8000d28 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8007730:	2000      	movs	r0, #0
 8007732:	f7f9 faf9 	bl	8000d28 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800773c:	4618      	mov	r0, r3
 800773e:	f7fe fff8 	bl	8006732 <USBD_LL_Resume>
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <USBD_LL_Init+0x88>)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a1d      	ldr	r2, [pc, #116]	; (80077d4 <USBD_LL_Init+0x88>)
 8007760:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007764:	4b1b      	ldr	r3, [pc, #108]	; (80077d4 <USBD_LL_Init+0x88>)
 8007766:	4a1c      	ldr	r2, [pc, #112]	; (80077d8 <USBD_LL_Init+0x8c>)
 8007768:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800776a:	4b1a      	ldr	r3, [pc, #104]	; (80077d4 <USBD_LL_Init+0x88>)
 800776c:	2208      	movs	r2, #8
 800776e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007770:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <USBD_LL_Init+0x88>)
 8007772:	2202      	movs	r2, #2
 8007774:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007776:	4b17      	ldr	r3, [pc, #92]	; (80077d4 <USBD_LL_Init+0x88>)
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800777c:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <USBD_LL_Init+0x88>)
 800777e:	2200      	movs	r2, #0
 8007780:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007782:	4b14      	ldr	r3, [pc, #80]	; (80077d4 <USBD_LL_Init+0x88>)
 8007784:	2200      	movs	r2, #0
 8007786:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007788:	4812      	ldr	r0, [pc, #72]	; (80077d4 <USBD_LL_Init+0x88>)
 800778a:	f7fa f857 	bl	800183c <HAL_PCD_Init>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007794:	f7f9 f947 	bl	8000a26 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800779e:	2318      	movs	r3, #24
 80077a0:	2200      	movs	r2, #0
 80077a2:	2100      	movs	r1, #0
 80077a4:	f7fb fb74 	bl	8002e90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077ae:	2358      	movs	r3, #88	; 0x58
 80077b0:	2200      	movs	r2, #0
 80077b2:	2180      	movs	r1, #128	; 0x80
 80077b4:	f7fb fb6c 	bl	8002e90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80077be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c2:	2200      	movs	r2, #0
 80077c4:	2181      	movs	r1, #129	; 0x81
 80077c6:	f7fb fb63 	bl	8002e90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	2000072c 	.word	0x2000072c
 80077d8:	40005c00 	.word	0x40005c00

080077dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7fa f92d 	bl	8001a52 <HAL_PCD_Start>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 f93c 	bl	8007a7c <USBD_Get_USB_Status>
 8007804:	4603      	mov	r3, r0
 8007806:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007808:	7bbb      	ldrb	r3, [r7, #14]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	4608      	mov	r0, r1
 800781c:	4611      	mov	r1, r2
 800781e:	461a      	mov	r2, r3
 8007820:	4603      	mov	r3, r0
 8007822:	70fb      	strb	r3, [r7, #3]
 8007824:	460b      	mov	r3, r1
 8007826:	70bb      	strb	r3, [r7, #2]
 8007828:	4613      	mov	r3, r2
 800782a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800783a:	78bb      	ldrb	r3, [r7, #2]
 800783c:	883a      	ldrh	r2, [r7, #0]
 800783e:	78f9      	ldrb	r1, [r7, #3]
 8007840:	f7fa faa7 	bl	8001d92 <HAL_PCD_EP_Open>
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	4618      	mov	r0, r3
 800784c:	f000 f916 	bl	8007a7c <USBD_Get_USB_Status>
 8007850:	4603      	mov	r3, r0
 8007852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007854:	7bbb      	ldrb	r3, [r7, #14]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	460b      	mov	r3, r1
 8007868:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007878:	78fa      	ldrb	r2, [r7, #3]
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fa faee 	bl	8001e5e <HAL_PCD_EP_Close>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f8f7 	bl	8007a7c <USBD_Get_USB_Status>
 800788e:	4603      	mov	r3, r0
 8007890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007892:	7bbb      	ldrb	r3, [r7, #14]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078b6:	78fa      	ldrb	r2, [r7, #3]
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fa fb97 	bl	8001fee <HAL_PCD_EP_SetStall>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f8d8 	bl	8007a7c <USBD_Get_USB_Status>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b084      	sub	sp, #16
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80078f4:	78fa      	ldrb	r2, [r7, #3]
 80078f6:	4611      	mov	r1, r2
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fa fbd8 	bl	80020ae <HAL_PCD_EP_ClrStall>
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	4618      	mov	r0, r3
 8007906:	f000 f8b9 	bl	8007a7c <USBD_Get_USB_Status>
 800790a:	4603      	mov	r3, r0
 800790c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800790e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800792a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800792c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da0c      	bge.n	800794e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	440b      	add	r3, r1
 8007948:	3302      	adds	r3, #2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	e00b      	b.n	8007966 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007954:	68f9      	ldr	r1, [r7, #12]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007964:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800798a:	78fa      	ldrb	r2, [r7, #3]
 800798c:	4611      	mov	r1, r2
 800798e:	4618      	mov	r0, r3
 8007990:	f7fa f9da 	bl	8001d48 <HAL_PCD_SetAddress>
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007998:	7bfb      	ldrb	r3, [r7, #15]
 800799a:	4618      	mov	r0, r3
 800799c:	f000 f86e 	bl	8007a7c <USBD_Get_USB_Status>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b086      	sub	sp, #24
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	607a      	str	r2, [r7, #4]
 80079b8:	461a      	mov	r2, r3
 80079ba:	460b      	mov	r3, r1
 80079bc:	72fb      	strb	r3, [r7, #11]
 80079be:	4613      	mov	r3, r2
 80079c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079d0:	893b      	ldrh	r3, [r7, #8]
 80079d2:	7af9      	ldrb	r1, [r7, #11]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	f7fa fac7 	bl	8001f68 <HAL_PCD_EP_Transmit>
 80079da:	4603      	mov	r3, r0
 80079dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f84b 	bl	8007a7c <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80079ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	607a      	str	r2, [r7, #4]
 80079fe:	461a      	mov	r2, r3
 8007a00:	460b      	mov	r3, r1
 8007a02:	72fb      	strb	r3, [r7, #11]
 8007a04:	4613      	mov	r3, r2
 8007a06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a16:	893b      	ldrh	r3, [r7, #8]
 8007a18:	7af9      	ldrb	r1, [r7, #11]
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	f7fa fa67 	bl	8001eee <HAL_PCD_EP_Receive>
 8007a20:	4603      	mov	r3, r0
 8007a22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 f828 	bl	8007a7c <USBD_Get_USB_Status>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a30:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3718      	adds	r7, #24
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <USBD_static_malloc+0x14>)
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr
 8007a50:	200001c4 	.word	0x200001c4

08007a54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bc80      	pop	{r7}
 8007a64:	4770      	bx	lr

08007a66 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr

08007a7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d817      	bhi.n	8007ac0 <USBD_Get_USB_Status+0x44>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <USBD_Get_USB_Status+0x1c>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007aaf 	.word	0x08007aaf
 8007aa0:	08007ab5 	.word	0x08007ab5
 8007aa4:	08007abb 	.word	0x08007abb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8007aac:	e00b      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aae:	2302      	movs	r3, #2
 8007ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab2:	e008      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab8:	e005      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007aba:	2302      	movs	r3, #2
 8007abc:	73fb      	strb	r3, [r7, #15]
    break;
 8007abe:	e002      	b.n	8007ac6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ac4:	bf00      	nop
  }
  return usb_status;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <__libc_init_array>:
 8007ad4:	b570      	push	{r4, r5, r6, lr}
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	4e0c      	ldr	r6, [pc, #48]	; (8007b0c <__libc_init_array+0x38>)
 8007ada:	4c0d      	ldr	r4, [pc, #52]	; (8007b10 <__libc_init_array+0x3c>)
 8007adc:	1ba4      	subs	r4, r4, r6
 8007ade:	10a4      	asrs	r4, r4, #2
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	d109      	bne.n	8007af8 <__libc_init_array+0x24>
 8007ae4:	f000 f822 	bl	8007b2c <_init>
 8007ae8:	2500      	movs	r5, #0
 8007aea:	4e0a      	ldr	r6, [pc, #40]	; (8007b14 <__libc_init_array+0x40>)
 8007aec:	4c0a      	ldr	r4, [pc, #40]	; (8007b18 <__libc_init_array+0x44>)
 8007aee:	1ba4      	subs	r4, r4, r6
 8007af0:	10a4      	asrs	r4, r4, #2
 8007af2:	42a5      	cmp	r5, r4
 8007af4:	d105      	bne.n	8007b02 <__libc_init_array+0x2e>
 8007af6:	bd70      	pop	{r4, r5, r6, pc}
 8007af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007afc:	4798      	blx	r3
 8007afe:	3501      	adds	r5, #1
 8007b00:	e7ee      	b.n	8007ae0 <__libc_init_array+0xc>
 8007b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b06:	4798      	blx	r3
 8007b08:	3501      	adds	r5, #1
 8007b0a:	e7f2      	b.n	8007af2 <__libc_init_array+0x1e>
 8007b0c:	08007cac 	.word	0x08007cac
 8007b10:	08007cac 	.word	0x08007cac
 8007b14:	08007cac 	.word	0x08007cac
 8007b18:	08007cb0 	.word	0x08007cb0

08007b1c <memset>:
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4402      	add	r2, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d100      	bne.n	8007b26 <memset+0xa>
 8007b24:	4770      	bx	lr
 8007b26:	f803 1b01 	strb.w	r1, [r3], #1
 8007b2a:	e7f9      	b.n	8007b20 <memset+0x4>

08007b2c <_init>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr

08007b38 <_fini>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr
