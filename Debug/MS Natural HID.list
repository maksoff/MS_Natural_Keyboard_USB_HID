
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa8  08007fa8  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08007fa8  08007fa8  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fa8  08007fa8  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08007fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000178  08008128  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08008128  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016eeb  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003614  00000000  00000000  0003708c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b23e  00000000  00000000  0003c7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011794  00000000  00000000  00057a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090016  00000000  00000000  000691aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f91c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004608  00000000  00000000  000f923c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000178 	.word	0x20000178
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e28 	.word	0x08007e28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000017c 	.word	0x2000017c
 8000148:	08007e28 	.word	0x08007e28

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b50      	ldr	r3, [pc, #320]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4f      	ldr	r2, [pc, #316]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b4d      	ldr	r3, [pc, #308]	; (80002a4 <MX_GPIO_Init+0x158>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b4a      	ldr	r3, [pc, #296]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a49      	ldr	r2, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a43      	ldr	r2, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b41      	ldr	r3, [pc, #260]	; (80002a4 <MX_GPIO_Init+0x158>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001c8:	f001 fc63 	bl	8001a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4836      	ldr	r0, [pc, #216]	; (80002ac <MX_GPIO_Init+0x160>)
 80001d4:	f001 fc5d 	bl	8001a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001f2:	f001 fadd 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <MX_GPIO_Init+0x15c>)
 8000208:	f001 fad2 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000210:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <MX_GPIO_Init+0x160>)
 800021e:	f001 fac7 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000222:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000234:	f001 fabc 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0x160>)
 8000252:	f001 faad 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_GPIO_Init+0x168>)
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x164>)
 800026c:	f001 faa0 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000286:	f001 fa93 	bl	80017b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2017      	movs	r0, #23
 8000290:	f001 fa57 	bl	8001742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000294:	2017      	movs	r0, #23
 8000296:	f001 fa70 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	10210000 	.word	0x10210000

080002b8 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <data_low+0x44>)
 80002c6:	f001 fbe4 	bl	8001a92 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80002d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <data_low+0x44>)
 80002ee:	f001 fa5f 	bl	80017b0 <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clock_low>:

void clock_low(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <clock_low+0x44>)
 800030e:	f001 fbc0 	bl	8001a92 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <clock_low+0x44>)
 8000336:	f001 fa3b 	bl	80017b0 <HAL_GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <data_release>:

void data_release(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <data_release+0x34>)
 800036e:	f001 fa1f 	bl	80017b0 <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00

08000380 <clock_release>:

void clock_release(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000396:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <clock_release+0x34>)
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <clock_release+0x38>)
 80003a6:	f001 fa03 	bl	80017b0 <HAL_GPIO_Init>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	10210000 	.word	0x10210000
 80003b8:	40010c00 	.word	0x40010c00

080003bc <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80003c6:	4bb2      	ldr	r3, [pc, #712]	; (8000690 <matrix_scan+0x2d4>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80003cc:	2106      	movs	r1, #6
 80003ce:	201f      	movs	r0, #31
 80003d0:	f000 f962 	bl	8000698 <matrix_is_on>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <matrix_scan+0x24>
        matrix_break(PAUSE);
 80003da:	20fe      	movs	r0, #254	; 0xfe
 80003dc:	f000 f9c2 	bl	8000764 <matrix_break>
    }

	if (code == 0)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 8150 	beq.w	8000688 <matrix_scan+0x2cc>
		return;

	switch (state) {
 80003e8:	4baa      	ldr	r3, [pc, #680]	; (8000694 <matrix_scan+0x2d8>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b0d      	cmp	r3, #13
 80003ee:	f200 8146 	bhi.w	800067e <matrix_scan+0x2c2>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <matrix_scan+0x3c>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000431 	.word	0x08000431
 80003fc:	08000509 	.word	0x08000509
 8000400:	080004b1 	.word	0x080004b1
 8000404:	08000559 	.word	0x08000559
 8000408:	08000591 	.word	0x08000591
 800040c:	080005a9 	.word	0x080005a9
 8000410:	080005c1 	.word	0x080005c1
 8000414:	080005d9 	.word	0x080005d9
 8000418:	080005f1 	.word	0x080005f1
 800041c:	08000609 	.word	0x08000609
 8000420:	08000621 	.word	0x08000621
 8000424:	0800063f 	.word	0x0800063f
 8000428:	08000655 	.word	0x08000655
 800042c:	0800066b 	.word	0x0800066b
		case INIT:
			switch (code) {
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	2b84      	cmp	r3, #132	; 0x84
 8000434:	d01f      	beq.n	8000476 <matrix_scan+0xba>
 8000436:	2b84      	cmp	r3, #132	; 0x84
 8000438:	dc04      	bgt.n	8000444 <matrix_scan+0x88>
 800043a:	2b00      	cmp	r3, #0
 800043c:	d022      	beq.n	8000484 <matrix_scan+0xc8>
 800043e:	2b83      	cmp	r3, #131	; 0x83
 8000440:	d012      	beq.n	8000468 <matrix_scan+0xac>
 8000442:	e025      	b.n	8000490 <matrix_scan+0xd4>
 8000444:	2be1      	cmp	r3, #225	; 0xe1
 8000446:	d00b      	beq.n	8000460 <matrix_scan+0xa4>
 8000448:	2bf0      	cmp	r3, #240	; 0xf0
 800044a:	d005      	beq.n	8000458 <matrix_scan+0x9c>
 800044c:	2be0      	cmp	r3, #224	; 0xe0
 800044e:	d11f      	bne.n	8000490 <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 8000450:	4b90      	ldr	r3, [pc, #576]	; (8000694 <matrix_scan+0x2d8>)
 8000452:	2202      	movs	r2, #2
 8000454:	701a      	strb	r2, [r3, #0]
					break;
 8000456:	e02a      	b.n	80004ae <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000458:	4b8e      	ldr	r3, [pc, #568]	; (8000694 <matrix_scan+0x2d8>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
					break;
 800045e:	e026      	b.n	80004ae <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 8000460:	4b8c      	ldr	r3, [pc, #560]	; (8000694 <matrix_scan+0x2d8>)
 8000462:	2204      	movs	r2, #4
 8000464:	701a      	strb	r2, [r3, #0]
					break;
 8000466:	e022      	b.n	80004ae <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000468:	2083      	movs	r0, #131	; 0x83
 800046a:	f000 f931 	bl	80006d0 <matrix_make>
					state = INIT;
 800046e:	4b89      	ldr	r3, [pc, #548]	; (8000694 <matrix_scan+0x2d8>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
					break;
 8000474:	e01b      	b.n	80004ae <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000476:	20fc      	movs	r0, #252	; 0xfc
 8000478:	f000 f92a 	bl	80006d0 <matrix_make>
					state = INIT;
 800047c:	4b85      	ldr	r3, [pc, #532]	; (8000694 <matrix_scan+0x2d8>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
					break;
 8000482:	e014      	b.n	80004ae <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000484:	f000 f9c0 	bl	8000808 <matrix_clear>
					state = INIT;
 8000488:	4b82      	ldr	r3, [pc, #520]	; (8000694 <matrix_scan+0x2d8>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
					break;
 800048e:	e00e      	b.n	80004ae <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db04      	blt.n	80004a2 <matrix_scan+0xe6>
						matrix_make(code);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f918 	bl	80006d0 <matrix_make>
 80004a0:	e001      	b.n	80004a6 <matrix_scan+0xea>
					} else {
						matrix_clear();
 80004a2:	f000 f9b1 	bl	8000808 <matrix_clear>
					}
					state = INIT;
 80004a6:	4b7b      	ldr	r3, [pc, #492]	; (8000694 <matrix_scan+0x2d8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004ac:	e0ea      	b.n	8000684 <matrix_scan+0x2c8>
 80004ae:	e0e9      	b.n	8000684 <matrix_scan+0x2c8>
		case E0:    // E0-Prefixed
			switch (code) {
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b59      	cmp	r3, #89	; 0x59
 80004b4:	d009      	beq.n	80004ca <matrix_scan+0x10e>
 80004b6:	2b59      	cmp	r3, #89	; 0x59
 80004b8:	dc02      	bgt.n	80004c0 <matrix_scan+0x104>
 80004ba:	2b12      	cmp	r3, #18
 80004bc:	d005      	beq.n	80004ca <matrix_scan+0x10e>
 80004be:	e010      	b.n	80004e2 <matrix_scan+0x126>
 80004c0:	2b7e      	cmp	r3, #126	; 0x7e
 80004c2:	d006      	beq.n	80004d2 <matrix_scan+0x116>
 80004c4:	2bf0      	cmp	r3, #240	; 0xf0
 80004c6:	d008      	beq.n	80004da <matrix_scan+0x11e>
 80004c8:	e00b      	b.n	80004e2 <matrix_scan+0x126>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80004ca:	4b72      	ldr	r3, [pc, #456]	; (8000694 <matrix_scan+0x2d8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
					break;
 80004d0:	e019      	b.n	8000506 <matrix_scan+0x14a>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80004d2:	4b70      	ldr	r3, [pc, #448]	; (8000694 <matrix_scan+0x2d8>)
 80004d4:	220b      	movs	r2, #11
 80004d6:	701a      	strb	r2, [r3, #0]
					break;
 80004d8:	e015      	b.n	8000506 <matrix_scan+0x14a>
				case 0xF0:
					state = E0_F0;
 80004da:	4b6e      	ldr	r3, [pc, #440]	; (8000694 <matrix_scan+0x2d8>)
 80004dc:	2203      	movs	r2, #3
 80004de:	701a      	strb	r2, [r3, #0]
					break;
 80004e0:	e011      	b.n	8000506 <matrix_scan+0x14a>
				default:
					if (code < 0x80) {
 80004e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	db07      	blt.n	80004fa <matrix_scan+0x13e>
						matrix_make(code|0x80);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	f000 f8ec 	bl	80006d0 <matrix_make>
 80004f8:	e001      	b.n	80004fe <matrix_scan+0x142>
					} else {
						matrix_clear();
 80004fa:	f000 f985 	bl	8000808 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80004fe:	4b65      	ldr	r3, [pc, #404]	; (8000694 <matrix_scan+0x2d8>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000504:	e0be      	b.n	8000684 <matrix_scan+0x2c8>
 8000506:	e0bd      	b.n	8000684 <matrix_scan+0x2c8>
		case F0:    // Break code
			switch (code) {
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b84      	cmp	r3, #132	; 0x84
 800050c:	d00a      	beq.n	8000524 <matrix_scan+0x168>
 800050e:	2bf0      	cmp	r3, #240	; 0xf0
 8000510:	d00f      	beq.n	8000532 <matrix_scan+0x176>
 8000512:	2b83      	cmp	r3, #131	; 0x83
 8000514:	d110      	bne.n	8000538 <matrix_scan+0x17c>
				case 0x83:  // F7
					matrix_break(F7);
 8000516:	2083      	movs	r0, #131	; 0x83
 8000518:	f000 f924 	bl	8000764 <matrix_break>
					state = INIT;
 800051c:	4b5d      	ldr	r3, [pc, #372]	; (8000694 <matrix_scan+0x2d8>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
					break;
 8000522:	e018      	b.n	8000556 <matrix_scan+0x19a>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000524:	20fc      	movs	r0, #252	; 0xfc
 8000526:	f000 f91d 	bl	8000764 <matrix_break>
					state = INIT;
 800052a:	4b5a      	ldr	r3, [pc, #360]	; (8000694 <matrix_scan+0x2d8>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]
					break;
 8000530:	e011      	b.n	8000556 <matrix_scan+0x19a>
				case 0xF0:
					matrix_clear();
 8000532:	f000 f969 	bl	8000808 <matrix_clear>
					//clear_keyboard();
					break;
 8000536:	e00e      	b.n	8000556 <matrix_scan+0x19a>
				default:
				if (code < 0x80) {
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db04      	blt.n	800054a <matrix_scan+0x18e>
					matrix_break(code);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f90e 	bl	8000764 <matrix_break>
 8000548:	e001      	b.n	800054e <matrix_scan+0x192>
				} else {
					matrix_clear();
 800054a:	f000 f95d 	bl	8000808 <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 800054e:	4b51      	ldr	r3, [pc, #324]	; (8000694 <matrix_scan+0x2d8>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000554:	e096      	b.n	8000684 <matrix_scan+0x2c8>
 8000556:	e095      	b.n	8000684 <matrix_scan+0x2c8>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000558:	79fb      	ldrb	r3, [r7, #7]
 800055a:	2b12      	cmp	r3, #18
 800055c:	d001      	beq.n	8000562 <matrix_scan+0x1a6>
 800055e:	2b59      	cmp	r3, #89	; 0x59
 8000560:	d104      	bne.n	800056c <matrix_scan+0x1b0>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000562:	4b4c      	ldr	r3, [pc, #304]	; (8000694 <matrix_scan+0x2d8>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
					break;
 8000568:	bf00      	nop
						matrix_clear();
						//clear_keyboard();
					}
					state = INIT;
			}
			break;
 800056a:	e08b      	b.n	8000684 <matrix_scan+0x2c8>
					if (code < 0x80) {
 800056c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	db07      	blt.n	8000584 <matrix_scan+0x1c8>
						matrix_break(code|0x80);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f8f1 	bl	8000764 <matrix_break>
 8000582:	e001      	b.n	8000588 <matrix_scan+0x1cc>
						matrix_clear();
 8000584:	f000 f940 	bl	8000808 <matrix_clear>
					state = INIT;
 8000588:	4b42      	ldr	r3, [pc, #264]	; (8000694 <matrix_scan+0x2d8>)
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
			break;
 800058e:	e079      	b.n	8000684 <matrix_scan+0x2c8>
		// following are states of Pause
		case E1:
			switch (code) {
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b14      	cmp	r3, #20
 8000594:	d104      	bne.n	80005a0 <matrix_scan+0x1e4>
				case 0x14:
					state = E1_14;
 8000596:	4b3f      	ldr	r3, [pc, #252]	; (8000694 <matrix_scan+0x2d8>)
 8000598:	2205      	movs	r2, #5
 800059a:	701a      	strb	r2, [r3, #0]
					break;
 800059c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800059e:	e071      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 80005a0:	4b3c      	ldr	r3, [pc, #240]	; (8000694 <matrix_scan+0x2d8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
			break;
 80005a6:	e06d      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14:
			switch (code) {
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2b77      	cmp	r3, #119	; 0x77
 80005ac:	d104      	bne.n	80005b8 <matrix_scan+0x1fc>
				case 0x77:
					state = E1_14_77;
 80005ae:	4b39      	ldr	r3, [pc, #228]	; (8000694 <matrix_scan+0x2d8>)
 80005b0:	2206      	movs	r2, #6
 80005b2:	701a      	strb	r2, [r3, #0]
					break;
 80005b4:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005b6:	e065      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <matrix_scan+0x2d8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
			break;
 80005be:	e061      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14_77:
			switch (code) {
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	2be1      	cmp	r3, #225	; 0xe1
 80005c4:	d104      	bne.n	80005d0 <matrix_scan+0x214>
				case 0xE1:
					state = E1_14_77_E1;
 80005c6:	4b33      	ldr	r3, [pc, #204]	; (8000694 <matrix_scan+0x2d8>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	701a      	strb	r2, [r3, #0]
					break;
 80005cc:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005ce:	e059      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 80005d0:	4b30      	ldr	r3, [pc, #192]	; (8000694 <matrix_scan+0x2d8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
			break;
 80005d6:	e055      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14_77_E1:
			switch (code) {
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	2bf0      	cmp	r3, #240	; 0xf0
 80005dc:	d104      	bne.n	80005e8 <matrix_scan+0x22c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 80005de:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <matrix_scan+0x2d8>)
 80005e0:	2208      	movs	r2, #8
 80005e2:	701a      	strb	r2, [r3, #0]
					break;
 80005e4:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005e6:	e04d      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <matrix_scan+0x2d8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			break;
 80005ee:	e049      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0:
			switch (code) {
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	2b14      	cmp	r3, #20
 80005f4:	d104      	bne.n	8000600 <matrix_scan+0x244>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <matrix_scan+0x2d8>)
 80005f8:	2209      	movs	r2, #9
 80005fa:	701a      	strb	r2, [r3, #0]
					break;
 80005fc:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005fe:	e041      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <matrix_scan+0x2d8>)
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
			break;
 8000606:	e03d      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	2bf0      	cmp	r3, #240	; 0xf0
 800060c:	d104      	bne.n	8000618 <matrix_scan+0x25c>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <matrix_scan+0x2d8>)
 8000610:	220a      	movs	r2, #10
 8000612:	701a      	strb	r2, [r3, #0]
					break;
 8000614:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000616:	e035      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <matrix_scan+0x2d8>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
			break;
 800061e:	e031      	b.n	8000684 <matrix_scan+0x2c8>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	2b77      	cmp	r3, #119	; 0x77
 8000624:	d107      	bne.n	8000636 <matrix_scan+0x27a>
				case 0x77:
					matrix_make(PAUSE);
 8000626:	20fe      	movs	r0, #254	; 0xfe
 8000628:	f000 f852 	bl	80006d0 <matrix_make>
					state = INIT;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <matrix_scan+0x2d8>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
					break;
 8000632:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000634:	e026      	b.n	8000684 <matrix_scan+0x2c8>
					state = INIT;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <matrix_scan+0x2d8>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			break;
 800063c:	e022      	b.n	8000684 <matrix_scan+0x2c8>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2be0      	cmp	r3, #224	; 0xe0
 8000642:	d103      	bne.n	800064c <matrix_scan+0x290>
				state = E0_7E_E0;
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <matrix_scan+0x2d8>)
 8000646:	220c      	movs	r2, #12
 8000648:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 800064a:	e01b      	b.n	8000684 <matrix_scan+0x2c8>
				state = INIT;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <matrix_scan+0x2d8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e017      	b.n	8000684 <matrix_scan+0x2c8>
		case E0_7E_E0:
			if (code == 0xF0)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	2bf0      	cmp	r3, #240	; 0xf0
 8000658:	d103      	bne.n	8000662 <matrix_scan+0x2a6>
				state = E0_7E_E0_F0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <matrix_scan+0x2d8>)
 800065c:	220d      	movs	r2, #13
 800065e:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8000660:	e010      	b.n	8000684 <matrix_scan+0x2c8>
				state = INIT;
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <matrix_scan+0x2d8>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
			break;
 8000668:	e00c      	b.n	8000684 <matrix_scan+0x2c8>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b7e      	cmp	r3, #126	; 0x7e
 800066e:	d102      	bne.n	8000676 <matrix_scan+0x2ba>
				matrix_make(PAUSE);
 8000670:	20fe      	movs	r0, #254	; 0xfe
 8000672:	f000 f82d 	bl	80006d0 <matrix_make>
			state = INIT;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <matrix_scan+0x2d8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
			break;
 800067c:	e002      	b.n	8000684 <matrix_scan+0x2c8>
		default:
			state = INIT;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <matrix_scan+0x2d8>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <matrix_scan+0x2ce>
		return;
 8000688:	bf00      	nop
}
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200001b4 	.word	0x200001b4
 8000694:	200001b5 	.word	0x200001b5

08000698 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <matrix_is_on+0x34>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	b25a      	sxtb	r2, r3
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f303 	lsl.w	r3, r1, r3
 80006b8:	b25b      	sxtb	r3, r3
 80006ba:	4013      	ands	r3, r2
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2db      	uxtb	r3, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	20000194 	.word	0x20000194

080006d0 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	08db      	lsrs	r3, r3, #3
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	4610      	mov	r0, r2
 80006ec:	f7ff ffd4 	bl	8000698 <matrix_is_on>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d12d      	bne.n	8000752 <matrix_make+0x82>
	    matrix[ROW(code)] |= 1<<COL(code);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	08db      	lsrs	r3, r3, #3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <matrix_make+0x8c>)
 8000700:	5c9b      	ldrb	r3, [r3, r2]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f303 	lsl.w	r3, r1, r3
 8000710:	b25b      	sxtb	r3, r3
 8000712:	4313      	orrs	r3, r2
 8000714:	b259      	sxtb	r1, r3
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	08db      	lsrs	r3, r3, #3
 800071a:	b2db      	uxtb	r3, r3
 800071c:	461a      	mov	r2, r3
 800071e:	b2c9      	uxtb	r1, r1
 8000720:	4b0e      	ldr	r3, [pc, #56]	; (800075c <matrix_make+0x8c>)
 8000722:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <matrix_make+0x90>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	08db      	lsrs	r3, r3, #3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	b2db      	uxtb	r3, r3
 8000738:	4619      	mov	r1, r3
 800073a:	4610      	mov	r0, r2
 800073c:	f000 f926 	bl	800098c <keymap_key_to_keycode>
 8000740:	4603      	mov	r3, r0
 8000742:	71fb      	strb	r3, [r7, #7]
		if (KC_NUMLOCK != code)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2b53      	cmp	r3, #83	; 0x53
 8000748:	d003      	beq.n	8000752 <matrix_make+0x82>
			register_code(code);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f933 	bl	80009b8 <register_code>
    }

}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000194 	.word	0x20000194
 8000760:	200001b4 	.word	0x200001b4

08000764 <matrix_break>:

void matrix_break(uint8_t code)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	b2db      	uxtb	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	4610      	mov	r0, r2
 8000780:	f7ff ff8a 	bl	8000698 <matrix_is_on>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d036      	beq.n	80007f8 <matrix_break+0x94>
        matrix[ROW(code)] &= ~(1<<COL(code));
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	b2db      	uxtb	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <matrix_break+0x9c>)
 8000794:	5c9b      	ldrb	r3, [r3, r2]
 8000796:	b25a      	sxtb	r2, r3
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	4013      	ands	r3, r2
 80007ac:	b259      	sxtb	r1, r3
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <matrix_break+0x9c>)
 80007ba:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <matrix_break+0xa0>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	08db      	lsrs	r3, r3, #3
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f000 f8da 	bl	800098c <keymap_key_to_keycode>
 80007d8:	4603      	mov	r3, r0
 80007da:	71fb      	strb	r3, [r7, #7]
		if (KC_NUMLOCK == code)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b53      	cmp	r3, #83	; 0x53
 80007e0:	d103      	bne.n	80007ea <matrix_break+0x86>
			register_code(code);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f8e7 	bl	80009b8 <register_code>
		if (KC_NUMLOCK != code)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b53      	cmp	r3, #83	; 0x53
 80007ee:	d003      	beq.n	80007f8 <matrix_break+0x94>
			unregister_code(code);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f926 	bl	8000a44 <unregister_code>
    }
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000194 	.word	0x20000194
 8000804:	200001b4 	.word	0x200001b4

08000808 <matrix_clear>:

void matrix_clear(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	e006      	b.n	8000822 <matrix_clear+0x1a>
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	4a07      	ldr	r2, [pc, #28]	; (8000834 <matrix_clear+0x2c>)
 8000818:	2100      	movs	r1, #0
 800081a:	54d1      	strb	r1, [r2, r3]
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	3301      	adds	r3, #1
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d9f5      	bls.n	8000814 <matrix_clear+0xc>
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000194 	.word	0x20000194

08000838 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed)) report_extra_t;

static void send_system(uint16_t data)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <send_system+0x30>)
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	88fa      	ldrh	r2, [r7, #6]
 8000848:	429a      	cmp	r2, r3
 800084a:	d008      	beq.n	800085e <send_system+0x26>
	last_data = data;
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <send_system+0x30>)
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000852:	2302      	movs	r3, #2
 8000854:	733b      	strb	r3, [r7, #12]
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	f8a7 300d 	strh.w	r3, [r7, #13]
 800085c:	e000      	b.n	8000860 <send_system+0x28>
	if (data == last_data) return;
 800085e:	bf00      	nop
	};
//	if (usbInterruptIsReady3()) {
//		usbSetInterrupt3((void *)&report, sizeof(report));
	// TODO
//	}
}
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	200001ba 	.word	0x200001ba

0800086c <add_mods>:
	// TODO
//	}
}


void add_mods(uint8_t amods) { mods |= amods; }
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <add_mods+0x24>)
 8000878:	781a      	ldrb	r2, [r3, #0]
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4313      	orrs	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <add_mods+0x24>)
 8000882:	701a      	strb	r2, [r3, #0]
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	200001b6 	.word	0x200001b6

08000894 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	43db      	mvns	r3, r3
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <del_mods+0x2c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	b2da      	uxtb	r2, r3
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <del_mods+0x2c>)
 80008b4:	701a      	strb	r2, [r3, #0]
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	200001b6 	.word	0x200001b6

080008c4 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 80008d2:	23ff      	movs	r3, #255	; 0xff
 80008d4:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 80008d6:	e01b      	b.n	8000910 <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 80008d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008dc:	4a19      	ldr	r2, [pc, #100]	; (8000944 <add_key_byte+0x80>)
 80008de:	4413      	add	r3, r2
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d018      	beq.n	800091a <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 80008e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008f0:	d108      	bne.n	8000904 <add_key_byte+0x40>
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4a13      	ldr	r2, [pc, #76]	; (8000944 <add_key_byte+0x80>)
 80008f8:	4413      	add	r3, r2
 80008fa:	789b      	ldrb	r3, [r3, #2]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d101      	bne.n	8000904 <add_key_byte+0x40>
            empty = i;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	3301      	adds	r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	2b05      	cmp	r3, #5
 8000916:	dddf      	ble.n	80008d8 <add_key_byte+0x14>
 8000918:	e000      	b.n	800091c <add_key_byte+0x58>
            break;
 800091a:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 800091c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000920:	2b06      	cmp	r3, #6
 8000922:	d10a      	bne.n	800093a <add_key_byte+0x76>
        if (empty != -1) {
 8000924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092c:	d005      	beq.n	800093a <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 800092e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <add_key_byte+0x80>)
 8000934:	4413      	add	r3, r2
 8000936:	79fa      	ldrb	r2, [r7, #7]
 8000938:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800093a:	bf00      	nop
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	200001dc 	.word	0x200001dc

08000948 <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e00e      	b.n	8000976 <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <del_key_byte+0x40>)
 800095c:	4413      	add	r3, r2
 800095e:	789b      	ldrb	r3, [r3, #2]
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	429a      	cmp	r2, r3
 8000964:	d104      	bne.n	8000970 <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <del_key_byte+0x40>)
 800096a:	4413      	add	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	3301      	adds	r3, #1
 8000974:	73fb      	strb	r3, [r7, #15]
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b05      	cmp	r3, #5
 800097a:	d9ed      	bls.n	8000958 <del_key_byte+0x10>
        }
    }
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200001dc 	.word	0x200001dc

0800098c <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	79bb      	ldrb	r3, [r7, #6]
 80009a0:	4904      	ldr	r1, [pc, #16]	; (80009b4 <keymap_key_to_keycode+0x28>)
 80009a2:	00d2      	lsls	r2, r2, #3
 80009a4:	440a      	add	r2, r1
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	08007e98 	.word	0x08007e98

080009b8 <register_code>:


void register_code(uint8_t code)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d039      	beq.n	8000a3c <register_code+0x84>
        return;
    }

    else if IS_KEY(code) {
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d909      	bls.n	80009e2 <register_code+0x2a>
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2ba4      	cmp	r3, #164	; 0xa4
 80009d2:	d806      	bhi.n	80009e2 <register_code+0x2a>
	    add_key_byte(code);
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff74 	bl	80008c4 <add_key_byte>
	    send_keyboard_report();
 80009dc:	f000 f8e4 	bl	8000ba8 <send_keyboard_report>
 80009e0:	e02d      	b.n	8000a3e <register_code+0x86>
    }
    else if IS_MOD(code) {
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2bdf      	cmp	r3, #223	; 0xdf
 80009e6:	d90f      	bls.n	8000a08 <register_code+0x50>
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2be7      	cmp	r3, #231	; 0xe7
 80009ec:	d80c      	bhi.n	8000a08 <register_code+0x50>
        add_mods(MOD_BIT(code));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 0307 	and.w	r3, r3, #7
 80009f4:	2201      	movs	r2, #1
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <add_mods>
        send_keyboard_report();
 8000a02:	f000 f8d1 	bl	8000ba8 <send_keyboard_report>
 8000a06:	e01a      	b.n	8000a3e <register_code+0x86>
    }
    else if IS_SYSTEM(code) {
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2ba4      	cmp	r3, #164	; 0xa4
 8000a0c:	d917      	bls.n	8000a3e <register_code+0x86>
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2ba7      	cmp	r3, #167	; 0xa7
 8000a12:	d814      	bhi.n	8000a3e <register_code+0x86>
		send_system(KEYCODE2SYSTEM(code));
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2ba5      	cmp	r3, #165	; 0xa5
 8000a18:	d00b      	beq.n	8000a32 <register_code+0x7a>
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2ba6      	cmp	r3, #166	; 0xa6
 8000a1e:	d006      	beq.n	8000a2e <register_code+0x76>
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	2ba7      	cmp	r3, #167	; 0xa7
 8000a24:	d101      	bne.n	8000a2a <register_code+0x72>
 8000a26:	2383      	movs	r3, #131	; 0x83
 8000a28:	e004      	b.n	8000a34 <register_code+0x7c>
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e002      	b.n	8000a34 <register_code+0x7c>
 8000a2e:	2382      	movs	r3, #130	; 0x82
 8000a30:	e000      	b.n	8000a34 <register_code+0x7c>
 8000a32:	2381      	movs	r3, #129	; 0x81
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff feff 	bl	8000838 <send_system>
 8000a3a:	e000      	b.n	8000a3e <register_code+0x86>
        return;
 8000a3c:	bf00      	nop
	}
    //else if IS_CONSUMER(code) {
        //host_consumer_send(KEYCODE2CONSUMER(code)); TODO: consumer keys to change volume etc.
    //}
}
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <unregister_code>:

void unregister_code(uint8_t code)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d029      	beq.n	8000aa8 <unregister_code+0x64>
        return;
    }
    else if IS_KEY(code) {
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d909      	bls.n	8000a6e <unregister_code+0x2a>
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2ba4      	cmp	r3, #164	; 0xa4
 8000a5e:	d806      	bhi.n	8000a6e <unregister_code+0x2a>
        del_key_byte(code);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff70 	bl	8000948 <del_key_byte>
        send_keyboard_report();
 8000a68:	f000 f89e 	bl	8000ba8 <send_keyboard_report>
 8000a6c:	e01d      	b.n	8000aaa <unregister_code+0x66>
    }
    else if IS_MOD(code) {
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2bdf      	cmp	r3, #223	; 0xdf
 8000a72:	d90f      	bls.n	8000a94 <unregister_code+0x50>
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2be7      	cmp	r3, #231	; 0xe7
 8000a78:	d80c      	bhi.n	8000a94 <unregister_code+0x50>
        del_mods(MOD_BIT(code));
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	2201      	movs	r2, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff03 	bl	8000894 <del_mods>
        send_keyboard_report();
 8000a8e:	f000 f88b 	bl	8000ba8 <send_keyboard_report>
 8000a92:	e00a      	b.n	8000aaa <unregister_code+0x66>
    }
    else if IS_SYSTEM(code) {
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2ba4      	cmp	r3, #164	; 0xa4
 8000a98:	d907      	bls.n	8000aaa <unregister_code+0x66>
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2ba7      	cmp	r3, #167	; 0xa7
 8000a9e:	d804      	bhi.n	8000aaa <unregister_code+0x66>
	    send_system(0);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff fec9 	bl	8000838 <send_system>
 8000aa6:	e000      	b.n	8000aaa <unregister_code+0x66>
        return;
 8000aa8:	bf00      	nop
    }
    //else if IS_CONSUMER(code) {
	    //host_consumer_send(0);
	//}
}
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <process_keyboard_USB>:
/*********************/

uint8_t ready_to_send = 1;

void process_keyboard_USB(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <process_keyboard_USB+0x6c>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <process_keyboard_USB+0x70>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d02b      	beq.n	8000b18 <process_keyboard_USB+0x68>
	{
		if (ready_to_send)
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <process_keyboard_USB+0x74>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d01a      	beq.n	8000afe <process_keyboard_USB+0x4e>
		{
			cnt = cnt_max;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <process_keyboard_USB+0x78>)
 8000aca:	22fa      	movs	r2, #250	; 0xfa
 8000acc:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <process_keyboard_USB+0x70>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <process_keyboard_USB+0x7c>)
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2208      	movs	r2, #8
 8000ada:	4619      	mov	r1, r3
 8000adc:	4814      	ldr	r0, [pc, #80]	; (8000b30 <process_keyboard_USB+0x80>)
 8000ade:	f005 fce1 	bl	80064a4 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <process_keyboard_USB+0x70>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	425a      	negs	r2, r3
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	f002 020f 	and.w	r2, r2, #15
 8000af2:	bf58      	it	pl
 8000af4:	4253      	negpl	r3, r2
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <process_keyboard_USB+0x70>)
 8000afa:	701a      	strb	r2, [r3, #0]
		}
		else if (--cnt == 0) // timeout, just push this data
			ready_to_send = 1;
	}
}
 8000afc:	e00c      	b.n	8000b18 <process_keyboard_USB+0x68>
		else if (--cnt == 0) // timeout, just push this data
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <process_keyboard_USB+0x78>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <process_keyboard_USB+0x78>)
 8000b08:	801a      	strh	r2, [r3, #0]
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <process_keyboard_USB+0x78>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <process_keyboard_USB+0x68>
			ready_to_send = 1;
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <process_keyboard_USB+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001b7 	.word	0x200001b7
 8000b20:	200001b8 	.word	0x200001b8
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000002 	.word	0x20000002
 8000b2c:	200001e4 	.word	0x200001e4
 8000b30:	200002f4 	.word	0x200002f4

08000b34 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <USB_HID_buffer_sent_Callback+0x14>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <kbuf_push+0x50>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	425a      	negs	r2, r3
 8000b5c:	f003 030f 	and.w	r3, r3, #15
 8000b60:	f002 020f 	and.w	r2, r2, #15
 8000b64:	bf58      	it	pl
 8000b66:	4253      	negpl	r3, r2
 8000b68:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <kbuf_push+0x54>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d00d      	beq.n	8000b90 <kbuf_push+0x44>
        kbuf[kbuf_head] =*report;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <kbuf_push+0x50>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <kbuf_push+0x58>)
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	460a      	mov	r2, r1
 8000b82:	6811      	ldr	r1, [r2, #0]
 8000b84:	6852      	ldr	r2, [r2, #4]
 8000b86:	6019      	str	r1, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
        kbuf_head = next;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <kbuf_push+0x50>)
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	7013      	strb	r3, [r2, #0]
    }
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	200001b7 	.word	0x200001b7
 8000ba0:	200001b8 	.word	0x200001b8
 8000ba4:	200001e4 	.word	0x200001e4

08000ba8 <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	keyboard_report.mods = mods;
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <send_keyboard_report+0x18>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <send_keyboard_report+0x1c>)
 8000bb2:	701a      	strb	r2, [r3, #0]
	kbuf_push(&keyboard_report);
 8000bb4:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <send_keyboard_report+0x1c>)
 8000bb6:	f7ff ffc9 	bl	8000b4c <kbuf_push>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200001b6 	.word	0x200001b6
 8000bc4:	200001dc 	.word	0x200001dc

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bcc:	f000 fc5e 	bl	800148c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd0:	f000 f82a 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd4:	f7ff faba 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000bd8:	f006 fd46 	bl	8007668 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000bdc:	f000 fbc2 	bl	8001364 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000be0:	480e      	ldr	r0, [pc, #56]	; (8000c1c <main+0x54>)
 8000be2:	f002 ffe3 	bl	8003bac <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 8000be6:	20fa      	movs	r0, #250	; 0xfa
 8000be8:	f000 fb7c 	bl	80012e4 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <main+0x58>)
 8000bf4:	f000 ff4d 	bl	8001a92 <HAL_GPIO_WritePin>
  reset_us_counter();
 8000bf8:	f000 fb92 	bl	8001320 <reset_us_counter>
  init_PS2();
 8000bfc:	f000 f974 	bl	8000ee8 <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <main+0x5c>)
 8000c08:	f000 ff43 	bl	8001a92 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000c0c:	f000 fa5e 	bl	80010cc <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8000c10:	f7ff ff4e 	bl	8000ab0 <process_keyboard_USB>
	  _delay_ms(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 fb65 	bl	80012e4 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000c1a:	e7f7      	b.n	8000c0c <main+0x44>
 8000c1c:	200002a8 	.word	0x200002a8
 8000c20:	40010800 	.word	0x40010800
 8000c24:	40011000 	.word	0x40011000

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	; 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c32:	2228      	movs	r2, #40	; 0x28
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f007 f8ee 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c66:	2301      	movs	r3, #1
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 faa4 	bl	80031cc <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c8a:	f000 f828 	bl	8000cde <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 fd0e 	bl	80036cc <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cb6:	f000 f812 	bl	8000cde <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fe6a 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cd2:	f000 f804 	bl	8000cde <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	; 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce2:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x6>
	...

08000ce8 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf8:	f040 80e6 	bne.w	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8000cfc:	4b74      	ldr	r3, [pc, #464]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d060      	beq.n	8000dc6 <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8000d04:	4b72      	ldr	r3, [pc, #456]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d109      	bne.n	8000d20 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8000d0c:	4b70      	ldr	r3, [pc, #448]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000d12:	4b70      	ldr	r3, [pc, #448]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000d18:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
				return;
 8000d1e:	e0d3      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8000d20:	4b6c      	ldr	r3, [pc, #432]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d22:	f993 3000 	ldrsb.w	r3, [r3]
 8000d26:	2b07      	cmp	r3, #7
 8000d28:	dc1b      	bgt.n	8000d62 <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8000d2a:	4b6c      	ldr	r3, [pc, #432]	; (8000edc <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d32:	f993 3000 	ldrsb.w	r3, [r3]
 8000d36:	fa42 f303 	asr.w	r3, r2, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00c      	beq.n	8000d5c <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8000d42:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf0c      	ite	eq
 8000d4a:	2301      	moveq	r3, #1
 8000d4c:	2300      	movne	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000d54:	701a      	strb	r2, [r3, #0]
					data_release();
 8000d56:	f7ff faf7 	bl	8000348 <data_release>
 8000d5a:	e02a      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8000d5c:	f7ff faac 	bl	80002b8 <data_low>
 8000d60:	e027      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8000d62:	4b5c      	ldr	r3, [pc, #368]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d64:	f993 3000 	ldrsb.w	r3, [r3]
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d109      	bne.n	8000d80 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8000d6c:	4b5a      	ldr	r3, [pc, #360]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8000d74:	f7ff fae8 	bl	8000348 <data_release>
 8000d78:	e01b      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8000d7a:	f7ff fa9d 	bl	80002b8 <data_low>
 8000d7e:	e018      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8000d80:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d82:	f993 3000 	ldrsb.w	r3, [r3]
 8000d86:	2b09      	cmp	r3, #9
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8000d8a:	f7ff fadd 	bl	8000348 <data_release>
 8000d8e:	e010      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8000d90:	4b50      	ldr	r3, [pc, #320]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d92:	f993 3000 	ldrsb.w	r3, [r3]
 8000d96:	2b0a      	cmp	r3, #10
 8000d98:	d10b      	bne.n	8000db2 <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8000d9a:	f7ff fad5 	bl	8000348 <data_release>
				sendMode = 0;
 8000d9e:	4b4c      	ldr	r3, [pc, #304]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8000da4:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000daa:	4b4a      	ldr	r3, [pc, #296]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
				return;
 8000db0:	e08a      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8000db2:	4b48      	ldr	r3, [pc, #288]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000db4:	f993 3000 	ldrsb.w	r3, [r3]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3301      	adds	r3, #1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dc2:	701a      	strb	r2, [r3, #0]
			return;
 8000dc4:	e080      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8000dc6:	20c8      	movs	r0, #200	; 0xc8
 8000dc8:	f000 fab6 	bl	8001338 <check_us_counter>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 8000dd2:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8000dd8:	f000 faa2 	bl	8001320 <reset_us_counter>
			if (bitNr == 0)
 8000ddc:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dde:	f993 3000 	ldrsb.w	r3, [r3]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10e      	bne.n	8000e04 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	483d      	ldr	r0, [pc, #244]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000dec:	f000 fe3a 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d167      	bne.n	8000ec6 <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000dfc:	4b36      	ldr	r3, [pc, #216]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e056      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e06:	f993 3000 	ldrsb.w	r3, [r3]
 8000e0a:	2b08      	cmp	r3, #8
 8000e0c:	dc1f      	bgt.n	8000e4e <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8000e0e:	4b35      	ldr	r3, [pc, #212]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e18:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	4830      	ldr	r0, [pc, #192]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e20:	f000 fe20 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d043      	beq.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000e36:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e031      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8000e4e:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e50:	f993 3000 	ldrsb.w	r3, [r3]
 8000e54:	2b09      	cmp	r3, #9
 8000e56:	d112      	bne.n	8000e7e <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5c:	4820      	ldr	r0, [pc, #128]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e5e:	f000 fe01 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d024      	beq.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	bf0c      	ite	eq
 8000e70:	2301      	moveq	r3, #1
 8000e72:	2300      	movne	r3, #0
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e019      	b.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e80:	f993 3000 	ldrsb.w	r3, [r3]
 8000e84:	2b0a      	cmp	r3, #10
 8000e86:	d114      	bne.n	8000eb2 <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8000e88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8c:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000e8e:	f000 fde9 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d008      	beq.n	8000eaa <HAL_GPIO_EXTI_Callback+0x1c2>
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f943 	bl	8001130 <buf_push>
				bitNr = 0;
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
				return;
 8000eb0:	e00a      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e000      	b.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 8000ec6:	bf00      	nop
	}
}
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001bc 	.word	0x200001bc
 8000ed4:	200001be 	.word	0x200001be
 8000ed8:	200001c2 	.word	0x200001c2
 8000edc:	200001bd 	.word	0x200001bd
 8000ee0:	40010c00 	.word	0x40010c00
 8000ee4:	200001c3 	.word	0x200001c3

08000ee8 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8000eee:	20ff      	movs	r0, #255	; 0xff
 8000ef0:	f000 f820 	bl	8000f34 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8000ef4:	f000 f8cc 	bl	8001090 <wait_response_PS2>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2bfa      	cmp	r3, #250	; 0xfa
 8000efc:	d004      	beq.n	8000f08 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8000efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f02:	f000 f9ef 	bl	80012e4 <_delay_ms>
		send_PS2(PS2_RESET);
 8000f06:	e7f2      	b.n	8000eee <init_PS2+0x6>
			break;
 8000f08:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	e007      	b.n	8000f20 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8000f10:	f000 f8be 	bl	8001090 <wait_response_PS2>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2baa      	cmp	r3, #170	; 0xaa
 8000f18:	d006      	beq.n	8000f28 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	71fb      	strb	r3, [r7, #7]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f4      	bne.n	8000f10 <init_PS2+0x28>
			break;
	}
}
 8000f26:	e000      	b.n	8000f2a <init_PS2+0x42>
			break;
 8000f28:	bf00      	nop
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <send_PS2+0x3c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
	clock_low();
 8000f44:	f7ff f9dc 	bl	8000300 <clock_low>
	bitNr = 0;
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <send_PS2+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <send_PS2+0x44>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f000 f9d0 	bl	80012fa <_delay_us>

	data_low();
 8000f5a:	f7ff f9ad 	bl	80002b8 <data_low>
	_delay_us(10);
 8000f5e:	200a      	movs	r0, #10
 8000f60:	f000 f9cb 	bl	80012fa <_delay_us>
	clock_release();
 8000f64:	f7ff fa0c 	bl	8000380 <clock_release>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001bc 	.word	0x200001bc
 8000f74:	200001be 	.word	0x200001be
 8000f78:	200001bd 	.word	0x200001bd

08000f7c <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SET_LEDS_Callback+0x5c>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SET_LEDS_Callback+0x60>)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	7013      	strb	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000265 	.word	0x20000265
 8000fdc:	20000264 	.word	0x20000264

08000fe0 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <USBD_Sleep_Callback+0x20>)
 8000ff2:	701a      	strb	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200001bf 	.word	0x200001bf

08001004 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <leds_PS2+0x84>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d02f      	beq.n	8001076 <leds_PS2+0x72>
		return;
	if (buf_has_data())
 8001016:	f000 f8df 	bl	80011d8 <buf_has_data>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d12c      	bne.n	800107a <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <leds_PS2+0x84>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102c:	4817      	ldr	r0, [pc, #92]	; (800108c <leds_PS2+0x88>)
 800102e:	f000 fd30 	bl	8001a92 <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 8001032:	2305      	movs	r3, #5
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e01a      	b.n	800106e <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 8001038:	20ed      	movs	r0, #237	; 0xed
 800103a:	f7ff ff7b 	bl	8000f34 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 800103e:	f000 f827 	bl	8001090 <wait_response_PS2>
 8001042:	4603      	mov	r3, r0
 8001044:	2bfa      	cmp	r3, #250	; 0xfa
 8001046:	d003      	beq.n	8001050 <leds_PS2+0x4c>
		{
			_delay_ms(20);
 8001048:	2014      	movs	r0, #20
 800104a:	f000 f94b 	bl	80012e4 <_delay_ms>
			continue;
 800104e:	e00b      	b.n	8001068 <leds_PS2+0x64>
		}
		send_PS2(led);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff6e 	bl	8000f34 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8001058:	f000 f81a 	bl	8001090 <wait_response_PS2>
 800105c:	4603      	mov	r3, r0
 800105e:	2bfa      	cmp	r3, #250	; 0xfa
 8001060:	d00d      	beq.n	800107e <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 8001062:	2014      	movs	r0, #20
 8001064:	f000 f93e 	bl	80012e4 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3b01      	subs	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e1      	bne.n	8001038 <leds_PS2+0x34>
 8001074:	e004      	b.n	8001080 <leds_PS2+0x7c>
		return;
 8001076:	bf00      	nop
 8001078:	e002      	b.n	8001080 <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 800107a:	bf00      	nop
 800107c:	e000      	b.n	8001080 <leds_PS2+0x7c>
			return;
 800107e:	bf00      	nop
	}
}
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000265 	.word	0x20000265
 800108c:	40011000 	.word	0x40011000

08001090 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 8001096:	2319      	movs	r3, #25
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	e00a      	b.n	80010b2 <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 800109c:	f000 f89c 	bl	80011d8 <buf_has_data>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d109      	bne.n	80010ba <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f000 f91c 	bl	80012e4 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	71fb      	strb	r3, [r7, #7]
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f1      	bne.n	800109c <wait_response_PS2+0xc>
 80010b8:	e000      	b.n	80010bc <wait_response_PS2+0x2c>
			break;
 80010ba:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80010bc:	f000 f862 	bl	8001184 <buf_pop>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	if (sleep)
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <process_PS2+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <process_PS2+0x32>
	{
		leds_updated = 1;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <process_PS2+0x5c>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <process_PS2+0x58>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d103      	bne.n	80010ee <process_PS2+0x22>
		{
			leds_PS2(0);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff ff8c 	bl	8001004 <leds_PS2>
 80010ec:	e004      	b.n	80010f8 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <process_PS2+0x60>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff86 	bl	8001004 <leds_PS2>
		}
		sleep = 0;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <process_PS2+0x58>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 80010fe:	f000 f86b 	bl	80011d8 <buf_has_data>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d006      	beq.n	8001116 <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8001108:	f000 f83c 	bl	8001184 <buf_pop>
 800110c:	4603      	mov	r3, r0
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff f954 	bl	80003bc <matrix_scan>
	else
		leds_PS2(leds_data);
}
 8001114:	e004      	b.n	8001120 <process_PS2+0x54>
		leds_PS2(leds_data);
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <process_PS2+0x60>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ff72 	bl	8001004 <leds_PS2>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001bf 	.word	0x200001bf
 8001128:	20000265 	.word	0x20000265
 800112c:	20000264 	.word	0x20000264

08001130 <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <buf_push+0x48>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	425a      	negs	r2, r3
 8001142:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001146:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800114a:	bf58      	it	pl
 800114c:	4253      	negpl	r3, r2
 800114e:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <buf_push+0x4c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	429a      	cmp	r2, r3
 8001158:	d008      	beq.n	800116c <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <buf_push+0x48>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <buf_push+0x50>)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <buf_push+0x48>)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	7013      	strb	r3, [r2, #0]
    }
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200001c0 	.word	0x200001c0
 800117c:	200001c1 	.word	0x200001c1
 8001180:	20000268 	.word	0x20000268

08001184 <buf_pop>:

uint8_t buf_pop(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <buf_pop+0x48>)
 8001190:	781a      	ldrb	r2, [r3, #0]
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <buf_pop+0x4c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d012      	beq.n	80011c0 <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <buf_pop+0x4c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <buf_pop+0x50>)
 80011a2:	5c9b      	ldrb	r3, [r3, r2]
 80011a4:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <buf_pop+0x4c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	3301      	adds	r3, #1
 80011ac:	425a      	negs	r2, r3
 80011ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80011b6:	bf58      	it	pl
 80011b8:	4253      	negpl	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <buf_pop+0x4c>)
 80011be:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200001c0 	.word	0x200001c0
 80011d0:	200001c1 	.word	0x200001c1
 80011d4:	20000268 	.word	0x20000268

080011d8 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <buf_has_data+0x20>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <buf_has_data+0x24>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	bf14      	ite	ne
 80011e8:	2301      	movne	r3, #1
 80011ea:	2300      	moveq	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200001c0 	.word	0x200001c0
 80011fc:	200001c1 	.word	0x200001c1

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f935 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80012ba:	f000 fd4c 	bl	8001d56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200007b8 	.word	0x200007b8

080012c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80012cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012d0:	f000 fbf8 	bl	8001ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f92f 	bl	8001550 <HAL_Delay>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8001304:	f000 f80c 	bl	8001320 <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001308:	bf00      	nop
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f813 	bl	8001338 <check_us_counter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1f8      	bne.n	800130a <_delay_us+0x10>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <reset_us_counter>:

inline void reset_us_counter(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <reset_us_counter+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	200002a8 	.word	0x200002a8

08001338 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <check_us_counter+0x28>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	b29b      	uxth	r3, r3
 800134a:	88fa      	ldrh	r2, [r7, #6]
 800134c:	429a      	cmp	r2, r3
 800134e:	bf8c      	ite	hi
 8001350:	2301      	movhi	r3, #1
 8001352:	2300      	movls	r3, #0
 8001354:	b2db      	uxtb	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	200002a8 	.word	0x200002a8

08001364 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_TIM1_Init+0x98>)
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <MX_TIM1_Init+0x9c>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_TIM1_Init+0x98>)
 8001388:	222f      	movs	r2, #47	; 0x2f
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_TIM1_Init+0x98>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_TIM1_Init+0x98>)
 8001394:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_TIM1_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <MX_TIM1_Init+0x98>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_TIM1_Init+0x98>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <MX_TIM1_Init+0x98>)
 80013ae:	f002 fbad 	bl	8003b0c <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013b8:	f7ff fc91 	bl	8000cde <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	480c      	ldr	r0, [pc, #48]	; (80013fc <MX_TIM1_Init+0x98>)
 80013ca:	f002 fc39 	bl	8003c40 <HAL_TIM_ConfigClockSource>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013d4:	f7ff fc83 	bl	8000cde <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_TIM1_Init+0x98>)
 80013e6:	f002 fddb 	bl	8003fa0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80013f0:	f7ff fc75 	bl	8000cde <Error_Handler>
  }

}
 80013f4:	bf00      	nop
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200002a8 	.word	0x200002a8
 8001400:	40012c00 	.word	0x40012c00

08001404 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_TIM_Base_MspInit+0x34>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d10b      	bne.n	800142e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_TIM_Base_MspInit+0x38>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_TIM_Base_MspInit+0x38>)
 800141c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_TIM_Base_MspInit+0x38>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800142e:	bf00      	nop
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr
 8001438:	40012c00 	.word	0x40012c00
 800143c:	40021000 	.word	0x40021000

08001440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001440:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001442:	e003      	b.n	800144c <LoopCopyDataInit>

08001444 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001446:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001448:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800144a:	3104      	adds	r1, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800144c:	480a      	ldr	r0, [pc, #40]	; (8001478 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001450:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001452:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001454:	d3f6      	bcc.n	8001444 <CopyDataInit>
  ldr r2, =_sbss
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001458:	e002      	b.n	8001460 <LoopFillZerobss>

0800145a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800145c:	f842 3b04 	str.w	r3, [r2], #4

08001460 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001462:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001464:	d3f9      	bcc.n	800145a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001466:	f7ff ff37 	bl	80012d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f006 fcb1 	bl	8007dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff fbab 	bl	8000bc8 <main>
  bx lr
 8001472:	4770      	bx	lr
  ldr r3, =_sidata
 8001474:	08007fb0 	.word	0x08007fb0
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800147c:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 8001480:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 8001484:	20000aa4 	.word	0x20000aa4

08001488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC1_2_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_Init+0x28>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <HAL_Init+0x28>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f945 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f808 	bl	80014b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a8:	f7ff feaa 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40022000 	.word	0x40022000

080014b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x54>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x58>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f95d 	bl	8001796 <HAL_SYSTICK_Config>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00e      	b.n	8001504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d80a      	bhi.n	8001502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f925 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <HAL_InitTick+0x5c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	4618      	mov	r0, r3
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000004 	.word	0x20000004
 8001510:	2000000c 	.word	0x2000000c
 8001514:	20000008 	.word	0x20000008

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4413      	add	r3, r2
 8001528:	4a03      	ldr	r2, [pc, #12]	; (8001538 <HAL_IncTick+0x20>)
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	2000000c 	.word	0x2000000c
 8001538:	200002f0 	.word	0x200002f0

0800153c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	200002f0 	.word	0x200002f0

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_Delay+0x40>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001576:	bf00      	nop
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	2000000c 	.word	0x2000000c

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <__NVIC_EnableIRQ+0x34>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff90 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff2d 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff42 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff90 	bl	8001684 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5f 	bl	8001630 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff35 	bl	80015f8 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e127      	b.n	8001a14 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c4:	2201      	movs	r2, #1
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8116 	bne.w	8001a0e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d034      	beq.n	8001854 <HAL_GPIO_Init+0xa4>
 80017ea:	2b12      	cmp	r3, #18
 80017ec:	d80d      	bhi.n	800180a <HAL_GPIO_Init+0x5a>
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d02b      	beq.n	800184a <HAL_GPIO_Init+0x9a>
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d804      	bhi.n	8001800 <HAL_GPIO_Init+0x50>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0xae>
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d01c      	beq.n	8001838 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e048      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001800:	2b03      	cmp	r3, #3
 8001802:	d043      	beq.n	800188c <HAL_GPIO_Init+0xdc>
 8001804:	2b11      	cmp	r3, #17
 8001806:	d01b      	beq.n	8001840 <HAL_GPIO_Init+0x90>
          break;
 8001808:	e043      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800180a:	4a89      	ldr	r2, [pc, #548]	; (8001a30 <HAL_GPIO_Init+0x280>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d026      	beq.n	800185e <HAL_GPIO_Init+0xae>
 8001810:	4a87      	ldr	r2, [pc, #540]	; (8001a30 <HAL_GPIO_Init+0x280>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d806      	bhi.n	8001824 <HAL_GPIO_Init+0x74>
 8001816:	4a87      	ldr	r2, [pc, #540]	; (8001a34 <HAL_GPIO_Init+0x284>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d020      	beq.n	800185e <HAL_GPIO_Init+0xae>
 800181c:	4a86      	ldr	r2, [pc, #536]	; (8001a38 <HAL_GPIO_Init+0x288>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01d      	beq.n	800185e <HAL_GPIO_Init+0xae>
          break;
 8001822:	e036      	b.n	8001892 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001824:	4a85      	ldr	r2, [pc, #532]	; (8001a3c <HAL_GPIO_Init+0x28c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0xae>
 800182a:	4a85      	ldr	r2, [pc, #532]	; (8001a40 <HAL_GPIO_Init+0x290>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d016      	beq.n	800185e <HAL_GPIO_Init+0xae>
 8001830:	4a84      	ldr	r2, [pc, #528]	; (8001a44 <HAL_GPIO_Init+0x294>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xae>
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e028      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e023      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01e      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e019      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e012      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e008      	b.n	8001892 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2bff      	cmp	r3, #255	; 0xff
 8001896:	d801      	bhi.n	800189c <HAL_GPIO_Init+0xec>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	e001      	b.n	80018a0 <HAL_GPIO_Init+0xf0>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3304      	adds	r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2bff      	cmp	r3, #255	; 0xff
 80018a6:	d802      	bhi.n	80018ae <HAL_GPIO_Init+0xfe>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x104>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3b08      	subs	r3, #8
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	210f      	movs	r1, #15
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	401a      	ands	r2, r3
 80018c6:	6a39      	ldr	r1, [r7, #32]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8096 	beq.w	8001a0e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e2:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6193      	str	r3, [r2, #24]
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_GPIO_Init+0x298>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fa:	4a54      	ldr	r2, [pc, #336]	; (8001a4c <HAL_GPIO_Init+0x29c>)
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4b      	ldr	r2, [pc, #300]	; (8001a50 <HAL_GPIO_Init+0x2a0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_GPIO_Init+0x19e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4a      	ldr	r2, [pc, #296]	; (8001a54 <HAL_GPIO_Init+0x2a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d00d      	beq.n	800194a <HAL_GPIO_Init+0x19a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <HAL_GPIO_Init+0x2a8>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d007      	beq.n	8001946 <HAL_GPIO_Init+0x196>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a48      	ldr	r2, [pc, #288]	; (8001a5c <HAL_GPIO_Init+0x2ac>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d101      	bne.n	8001942 <HAL_GPIO_Init+0x192>
 800193e:	2303      	movs	r3, #3
 8001940:	e006      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 8001942:	2304      	movs	r3, #4
 8001944:	e004      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 8001946:	2302      	movs	r3, #2
 8001948:	e002      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_GPIO_Init+0x1a0>
 800194e:	2300      	movs	r3, #0
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	f002 0203 	and.w	r2, r2, #3
 8001956:	0092      	lsls	r2, r2, #2
 8001958:	4093      	lsls	r3, r2
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001960:	493a      	ldr	r1, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x29c>)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	3302      	adds	r3, #2
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197a:	4b39      	ldr	r3, [pc, #228]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4938      	ldr	r1, [pc, #224]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001988:	4b35      	ldr	r3, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	43db      	mvns	r3, r3
 8001990:	4933      	ldr	r1, [pc, #204]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b2f      	ldr	r3, [pc, #188]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	492e      	ldr	r1, [pc, #184]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4929      	ldr	r1, [pc, #164]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	4924      	ldr	r1, [pc, #144]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
 80019d6:	e006      	b.n	80019e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	43db      	mvns	r3, r3
 80019e0:	491f      	ldr	r1, [pc, #124]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	491a      	ldr	r1, [pc, #104]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60cb      	str	r3, [r1, #12]
 80019fe:	e006      	b.n	8001a0e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4915      	ldr	r1, [pc, #84]	; (8001a60 <HAL_GPIO_Init+0x2b0>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f aed0 	bne.w	80017c4 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	372c      	adds	r7, #44	; 0x2c
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	10210000 	.word	0x10210000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	10120000 	.word	0x10120000
 8001a3c:	10310000 	.word	0x10310000
 8001a40:	10320000 	.word	0x10320000
 8001a44:	10220000 	.word	0x10220000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa2:	787b      	ldrb	r3, [r7, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f900 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af6:	b08b      	sub	sp, #44	; 0x2c
 8001af8:	af06      	add	r7, sp, #24
 8001afa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0fd      	b.n	8001d02 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f005 fed8 	bl	80078d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2203      	movs	r2, #3
 8001b24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 fabb 	bl	80040a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	687e      	ldr	r6, [r7, #4]
 8001b3a:	466d      	mov	r5, sp
 8001b3c:	f106 0410 	add.w	r4, r6, #16
 8001b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	602b      	str	r3, [r5, #0]
 8001b48:	1d33      	adds	r3, r6, #4
 8001b4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b4c:	6838      	ldr	r0, [r7, #0]
 8001b4e:	f002 fa85 	bl	800405c <USB_CoreInit>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0ce      	b.n	8001d02 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fab6 	bl	80040dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e04c      	b.n	8001c10 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3301      	adds	r3, #1
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	7bfa      	ldrb	r2, [r7, #15]
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	b298      	uxth	r0, r3
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	440b      	add	r3, r1
 8001bb2:	3336      	adds	r3, #54	; 0x36
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3303      	adds	r3, #3
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3338      	adds	r3, #56	; 0x38
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	333c      	adds	r3, #60	; 0x3c
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	3340      	adds	r3, #64	; 0x40
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3ad      	bcc.n	8001b76 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e044      	b.n	8001caa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c20:	7bfa      	ldrb	r2, [r7, #15]
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c36:	7bfa      	ldrb	r2, [r7, #15]
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	440b      	add	r3, r1
 8001c44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	440b      	add	r3, r1
 8001c5a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	440b      	add	r3, r1
 8001c86:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3b5      	bcc.n	8001c20 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	687e      	ldr	r6, [r7, #4]
 8001cbc:	466d      	mov	r5, sp
 8001cbe:	f106 0410 	add.w	r4, r6, #16
 8001cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	602b      	str	r3, [r5, #0]
 8001cca:	1d33      	adds	r3, r6, #4
 8001ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cce:	6838      	ldr	r0, [r7, #0]
 8001cd0:	f002 fa10 	bl	80040f4 <USB_DevInit>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2202      	movs	r2, #2
 8001cde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00d      	b.n	8001d02 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f004 f9aa 	bl	8006054 <USB_DevDisconnect>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_PCD_Start+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e016      	b.n	8001d4e <HAL_PCD_Start+0x44>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 f9a5 	bl	800407c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d32:	2101      	movs	r1, #1
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f006 f814 	bl	8007d62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 f97e 	bl	8006040 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b088      	sub	sp, #32
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 f980 	bl	8006068 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d72:	d102      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 fb4a 	bl	800240e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 f972 	bl	8006068 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d112      	bne.n	8001db6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da2:	b292      	uxth	r2, r2
 8001da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f005 fe0c 	bl	80079c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001dae:	2100      	movs	r1, #0
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f925 	bl	8002000 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f004 f954 	bl	8006068 <USB_ReadInterrupts>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dca:	d10b      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dde:	b292      	uxth	r2, r2
 8001de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 f93d 	bl	8006068 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df8:	d10b      	bne.n	8001e12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f004 f926 	bl	8006068 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e26:	d126      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 0208 	bic.w	r2, r2, #8
 8001e52:	b292      	uxth	r2, r2
 8001e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f005 fde3 	bl	8007a24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e70:	b292      	uxth	r2, r2
 8001e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f8f4 	bl	8006068 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e8a:	f040 8084 	bne.w	8001f96 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	77fb      	strb	r3, [r7, #31]
 8001e92:	e011      	b.n	8001eb8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	441a      	add	r2, r3
 8001ea0:	7ffb      	ldrb	r3, [r7, #31]
 8001ea2:	8812      	ldrh	r2, [r2, #0]
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	f107 0120 	add.w	r1, r7, #32
 8001eac:	440b      	add	r3, r1
 8001eae:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	77fb      	strb	r3, [r7, #31]
 8001eb8:	7ffb      	ldrb	r3, [r7, #31]
 8001eba:	2b07      	cmp	r3, #7
 8001ebc:	d9ea      	bls.n	8001e94 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	b292      	uxth	r2, r2
 8001ed2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001eee:	bf00      	nop
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f6      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f14:	b292      	uxth	r2, r2
 8001f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	77fb      	strb	r3, [r7, #31]
 8001f1e:	e010      	b.n	8001f42 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	4611      	mov	r1, r2
 8001f28:	7ffa      	ldrb	r2, [r7, #31]
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	440a      	add	r2, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	f107 0120 	add.w	r1, r7, #32
 8001f34:	440b      	add	r3, r1
 8001f36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f3a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f3c:	7ffb      	ldrb	r3, [r7, #31]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	77fb      	strb	r3, [r7, #31]
 8001f42:	7ffb      	ldrb	r3, [r7, #31]
 8001f44:	2b07      	cmp	r3, #7
 8001f46:	d9eb      	bls.n	8001f20 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0208 	orr.w	r2, r2, #8
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f72:	b292      	uxth	r2, r2
 8001f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0204 	orr.w	r2, r2, #4
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f005 fd36 	bl	8007a02 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f864 	bl	8006068 <USB_ReadInterrupts>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001faa:	d10e      	bne.n	8001fca <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f005 fcf0 	bl	80079aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f004 f84a 	bl	8006068 <USB_ReadInterrupts>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fde:	d10b      	bne.n	8001ff8 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ff2:	b292      	uxth	r2, r2
 8001ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	3720      	adds	r7, #32
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_PCD_SetAddress+0x1a>
 8002016:	2302      	movs	r3, #2
 8002018:	e013      	b.n	8002042 <HAL_PCD_SetAddress+0x42>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	78fa      	ldrb	r2, [r7, #3]
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f003 fff1 	bl	800601a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	4608      	mov	r0, r1
 8002054:	4611      	mov	r1, r2
 8002056:	461a      	mov	r2, r3
 8002058:	4603      	mov	r3, r0
 800205a:	70fb      	strb	r3, [r7, #3]
 800205c:	460b      	mov	r3, r1
 800205e:	803b      	strh	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206c:	2b00      	cmp	r3, #0
 800206e:	da0e      	bge.n	800208e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2201      	movs	r2, #1
 800208a:	705a      	strb	r2, [r3, #1]
 800208c:	e00e      	b.n	80020ac <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 0207 	and.w	r2, r3, #7
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020b8:	883a      	ldrh	r2, [r7, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	78ba      	ldrb	r2, [r7, #2]
 80020c2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020d6:	78bb      	ldrb	r3, [r7, #2]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d102      	bne.n	80020e2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_PCD_EP_Open+0xa6>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e00e      	b.n	800210e <HAL_PCD_EP_Open+0xc4>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	4618      	mov	r0, r3
 8002100:	f002 f818 	bl	8004134 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800210c:	7afb      	ldrb	r3, [r7, #11]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002126:	2b00      	cmp	r3, #0
 8002128:	da0e      	bge.n	8002148 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2201      	movs	r2, #1
 8002144:	705a      	strb	r2, [r3, #1]
 8002146:	e00e      	b.n	8002166 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 0207 	and.w	r2, r3, #7
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	b2da      	uxtb	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_PCD_EP_Close+0x6a>
 800217c:	2302      	movs	r3, #2
 800217e:	e00e      	b.n	800219e <HAL_PCD_EP_Close+0x88>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fb3a 	bl	8004808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	60f8      	str	r0, [r7, #12]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	603b      	str	r3, [r7, #0]
 80021b2:	460b      	mov	r3, r1
 80021b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021b6:	7afb      	ldrb	r3, [r7, #11]
 80021b8:	f003 0207 	and.w	r2, r3, #7
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	2200      	movs	r2, #0
 80021e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6979      	ldr	r1, [r7, #20]
 8002202:	4618      	mov	r0, r3
 8002204:	f002 fcec 	bl	8004be0 <USB_EPStartXfer>
 8002208:	e005      	b.n	8002216 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6979      	ldr	r1, [r7, #20]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 fce5 	bl	8004be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	460b      	mov	r3, r1
 800222e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002230:	7afb      	ldrb	r3, [r7, #11]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2201      	movs	r2, #1
 800226a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	b2da      	uxtb	r2, r3
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002278:	7afb      	ldrb	r3, [r7, #11]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 fca9 	bl	8004be0 <USB_EPStartXfer>
 800228e:	e005      	b.n	800229c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	4618      	mov	r0, r3
 8002298:	f002 fca2 	bl	8004be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 0207 	and.w	r2, r3, #7
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d901      	bls.n	80022c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e04c      	b.n	800235e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da0e      	bge.n	80022ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	705a      	strb	r2, [r3, #1]
 80022e8:	e00c      	b.n	8002304 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_PCD_EP_SetStall+0x7e>
 8002320:	2302      	movs	r3, #2
 8002322:	e01c      	b.n	800235e <HAL_PCD_EP_SetStall+0xb8>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fd74 	bl	8005e20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002338:	78fb      	ldrb	r3, [r7, #3]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	2b00      	cmp	r3, #0
 8002340:	d108      	bne.n	8002354 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f003 fe99 	bl	8006086 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	460b      	mov	r3, r1
 8002370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	f003 020f 	and.w	r2, r3, #15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d901      	bls.n	8002384 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e040      	b.n	8002406 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0207 	and.w	r2, r3, #7
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_PCD_EP_ClrStall+0x82>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e00e      	b.n	8002406 <HAL_PCD_EP_ClrStall+0xa0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fd62 	bl	8005ec0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08e      	sub	sp, #56	; 0x38
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002416:	e2df      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002420:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800242e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002432:	2b00      	cmp	r3, #0
 8002434:	f040 8158 	bne.w	80026e8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002438:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d152      	bne.n	80024e8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b29b      	uxth	r3, r3
 800244a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800244e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002452:	81fb      	strh	r3, [r7, #14]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	89fb      	ldrh	r3, [r7, #14]
 800245a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3328      	adds	r3, #40	; 0x28
 800246a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002474:	b29b      	uxth	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	3302      	adds	r3, #2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	441a      	add	r2, r3
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024a6:	2100      	movs	r1, #0
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f005 fa64 	bl	8007976 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 828e 	beq.w	80029d8 <PCD_EP_ISR_Handler+0x5ca>
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 8289 	bne.w	80029d8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b292      	uxth	r2, r2
 80024da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024e6:	e277      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d034      	beq.n	800256c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	3306      	adds	r3, #6
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002540:	b29b      	uxth	r3, r3
 8002542:	f003 fdef 	bl	8006124 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002552:	4013      	ands	r3, r2
 8002554:	823b      	strh	r3, [r7, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	8a3a      	ldrh	r2, [r7, #16]
 800255c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002560:	b292      	uxth	r2, r2
 8002562:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f005 f9d9 	bl	800791c <HAL_PCD_SetupStageCallback>
 800256a:	e235      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800256c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002570:	2b00      	cmp	r3, #0
 8002572:	f280 8231 	bge.w	80029d8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29a      	uxth	r2, r3
 800257e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002582:	4013      	ands	r3, r2
 8002584:	83bb      	strh	r3, [r7, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	8bba      	ldrh	r2, [r7, #28]
 800258c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002590:	b292      	uxth	r2, r2
 8002592:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259c:	b29b      	uxth	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	3306      	adds	r3, #6
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d019      	beq.n	80025fc <PCD_EP_ISR_Handler+0x1ee>
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	6959      	ldr	r1, [r3, #20]
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f003 fd9f 	bl	8006124 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	441a      	add	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025f4:	2100      	movs	r1, #0
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f005 f9a2 	bl	8007940 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260a:	b29b      	uxth	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4413      	add	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <PCD_EP_ISR_Handler+0x23c>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800262e:	b29a      	uxth	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	b29a      	uxth	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	e02f      	b.n	80026aa <PCD_EP_ISR_Handler+0x29c>
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b3e      	cmp	r3, #62	; 0x3e
 8002650:	d813      	bhi.n	800267a <PCD_EP_ISR_Handler+0x26c>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <PCD_EP_ISR_Handler+0x25e>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	3301      	adds	r3, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266e:	b29b      	uxth	r3, r3
 8002670:	029b      	lsls	r3, r3, #10
 8002672:	b29a      	uxth	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	e017      	b.n	80026aa <PCD_EP_ISR_Handler+0x29c>
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b00      	cmp	r3, #0
 800268c:	d102      	bne.n	8002694 <PCD_EP_ISR_Handler+0x286>
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3b01      	subs	r3, #1
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	b29b      	uxth	r3, r3
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	b29b      	uxth	r3, r3
 800269c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ba:	827b      	strh	r3, [r7, #18]
 80026bc:	8a7b      	ldrh	r3, [r7, #18]
 80026be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026c2:	827b      	strh	r3, [r7, #18]
 80026c4:	8a7b      	ldrh	r3, [r7, #18]
 80026c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ca:	827b      	strh	r3, [r7, #18]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	8a7b      	ldrh	r3, [r7, #18]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
 80026e6:	e177      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f280 80ea 	bge.w	80028d8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	b29a      	uxth	r2, r3
 8002716:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271a:	4013      	ands	r3, r2
 800271c:	853b      	strh	r3, [r7, #40]	; 0x28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800272e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002732:	b292      	uxth	r2, r2
 8002734:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002736:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	7b1b      	ldrb	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d122      	bne.n	800279a <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	3306      	adds	r3, #6
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800277e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8087 	beq.w	8002894 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	88da      	ldrh	r2, [r3, #6]
 8002792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002794:	f003 fcc6 	bl	8006124 <USB_ReadPMA>
 8002798:	e07c      	b.n	8002894 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	78db      	ldrb	r3, [r3, #3]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d108      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a4:	461a      	mov	r2, r3
 80027a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f923 	bl	80029f4 <HAL_PCD_EP_DB_Receive>
 80027ae:	4603      	mov	r3, r0
 80027b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b2:	e06f      	b.n	8002894 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d021      	beq.n	8002852 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	3302      	adds	r3, #2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	4413      	add	r3, r2
 800282c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002836:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800283a:	2b00      	cmp	r3, #0
 800283c:	d02a      	beq.n	8002894 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	6959      	ldr	r1, [r3, #20]
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	891a      	ldrh	r2, [r3, #8]
 800284a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800284c:	f003 fc6a 	bl	8006124 <USB_ReadPMA>
 8002850:	e020      	b.n	8002894 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3306      	adds	r3, #6
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	6959      	ldr	r1, [r3, #20]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	895a      	ldrh	r2, [r3, #10]
 800288e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002890:	f003 fc48 	bl	8006124 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289a:	441a      	add	r2, r3
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	695a      	ldr	r2, [r3, #20]
 80028a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028a6:	441a      	add	r2, r3
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <PCD_EP_ISR_Handler+0x4b0>
 80028b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d206      	bcs.n	80028cc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f005 f83b 	bl	8007940 <HAL_PCD_DataOutStageCallback>
 80028ca:	e005      	b.n	80028d8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 f984 	bl	8004be0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07a      	beq.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80028e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800290c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002910:	843b      	strh	r3, [r7, #32]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	441a      	add	r2, r3
 8002920:	8c3b      	ldrh	r3, [r7, #32]
 8002922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800292a:	b29b      	uxth	r3, r3
 800292c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	78db      	ldrb	r3, [r3, #3]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d108      	bne.n	8002948 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800293a:	2b02      	cmp	r3, #2
 800293c:	d146      	bne.n	80029cc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800293e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d141      	bne.n	80029cc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002950:	b29b      	uxth	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4413      	add	r3, r2
 800295c:	3302      	adds	r3, #2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4413      	add	r3, r2
 8002966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002970:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	8bfb      	ldrh	r3, [r7, #30]
 8002978:	429a      	cmp	r2, r3
 800297a:	d906      	bls.n	800298a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	699a      	ldr	r2, [r3, #24]
 8002980:	8bfb      	ldrh	r3, [r7, #30]
 8002982:	1ad2      	subs	r2, r2, r3
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	619a      	str	r2, [r3, #24]
 8002988:	e002      	b.n	8002990 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f004 ffe9 	bl	8007976 <HAL_PCD_DataInStageCallback>
 80029a4:	e018      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	8bfb      	ldrh	r3, [r7, #30]
 80029ac:	441a      	add	r2, r3
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	69da      	ldr	r2, [r3, #28]
 80029b6:	8bfb      	ldrh	r3, [r7, #30]
 80029b8:	441a      	add	r2, r3
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 f90b 	bl	8004be0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029ca:	e005      	b.n	80029d8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ce:	461a      	mov	r2, r3
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f91b 	bl	8002c0e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f6ff ad17 	blt.w	8002418 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3738      	adds	r7, #56	; 0x38
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d07e      	beq.n	8002b0a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3302      	adds	r3, #2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a34:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	8b7b      	ldrh	r3, [r7, #26]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d306      	bcc.n	8002a4e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	8b7b      	ldrh	r3, [r7, #26]
 8002a46:	1ad2      	subs	r2, r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	619a      	str	r2, [r3, #24]
 8002a4c:	e002      	b.n	8002a54 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d123      	bne.n	8002aa4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a76:	833b      	strh	r3, [r7, #24]
 8002a78:	8b3b      	ldrh	r3, [r7, #24]
 8002a7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a7e:	833b      	strh	r3, [r7, #24]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	441a      	add	r2, r3
 8002a8e:	8b3b      	ldrh	r3, [r7, #24]
 8002a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d01f      	beq.n	8002aee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac8:	82fb      	strh	r3, [r7, #22]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	441a      	add	r2, r3
 8002ad8:	8afb      	ldrh	r3, [r7, #22]
 8002ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aee:	8b7b      	ldrh	r3, [r7, #26]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8087 	beq.w	8002c04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6959      	ldr	r1, [r3, #20]
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	891a      	ldrh	r2, [r3, #8]
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	f003 fb0e 	bl	8006124 <USB_ReadPMA>
 8002b08:	e07c      	b.n	8002c04 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3306      	adds	r3, #6
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b32:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	699a      	ldr	r2, [r3, #24]
 8002b38:	8b7b      	ldrh	r3, [r7, #26]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d306      	bcc.n	8002b4c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	8b7b      	ldrh	r3, [r7, #26]
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e002      	b.n	8002b52 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d123      	bne.n	8002ba2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b74:	83fb      	strh	r3, [r7, #30]
 8002b76:	8bfb      	ldrh	r3, [r7, #30]
 8002b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b7c:	83fb      	strh	r3, [r7, #30]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	441a      	add	r2, r3
 8002b8c:	8bfb      	ldrh	r3, [r7, #30]
 8002b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d11f      	bne.n	8002bec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc6:	83bb      	strh	r3, [r7, #28]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	441a      	add	r2, r3
 8002bd6:	8bbb      	ldrh	r3, [r7, #28]
 8002bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bec:	8b7b      	ldrh	r3, [r7, #26]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	6959      	ldr	r1, [r3, #20]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	895a      	ldrh	r2, [r3, #10]
 8002bfe:	8b7b      	ldrh	r3, [r7, #26]
 8002c00:	f003 fa90 	bl	8006124 <USB_ReadPMA>
    }
  }

  return count;
 8002c04:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b092      	sub	sp, #72	; 0x48
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 8132 	beq.w	8002e8c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c50:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	699a      	ldr	r2, [r3, #24]
 8002c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d906      	bls.n	8002c6a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002c62:	1ad2      	subs	r2, r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	619a      	str	r2, [r3, #24]
 8002c68:	e002      	b.n	8002c70 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d12c      	bne.n	8002cd2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f004 fe79 	bl	8007976 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c84:	88fb      	ldrh	r3, [r7, #6]
 8002c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 822f 	beq.w	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	827b      	strh	r3, [r7, #18]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	441a      	add	r2, r3
 8002cba:	8a7b      	ldrh	r3, [r7, #18]
 8002cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8013      	strh	r3, [r2, #0]
 8002cd0:	e20d      	b.n	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cd2:	88fb      	ldrh	r3, [r7, #6]
 8002cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01f      	beq.n	8002d1c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	881b      	ldrh	r3, [r3, #0]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	441a      	add	r2, r3
 8002d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	f040 81e3 	bne.w	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d2e:	441a      	add	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d3a:	441a      	add	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d309      	bcc.n	8002d60 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1a      	ldr	r2, [r3, #32]
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	1ad2      	subs	r2, r2, r3
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	621a      	str	r2, [r3, #32]
 8002d5e:	e014      	b.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d106      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d6a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d74:	e009      	b.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d155      	bne.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x230>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	61bb      	str	r3, [r7, #24]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011a      	lsls	r2, r3, #4
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	4413      	add	r3, r2
 8002db4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d112      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	801a      	strh	r2, [r3, #0]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e047      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x268>
 8002de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de8:	2b3e      	cmp	r3, #62	; 0x3e
 8002dea:	d811      	bhi.n	8002e10 <HAL_PCD_EP_DB_Transmit+0x202>
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	085b      	lsrs	r3, r3, #1
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	3301      	adds	r3, #1
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	e032      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x268>
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <HAL_PCD_EP_DB_Transmit+0x218>
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	801a      	strh	r2, [r3, #0]
 8002e3c:	e01b      	b.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x268>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d117      	bne.n	8002e76 <HAL_PCD_EP_DB_Transmit+0x268>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	623b      	str	r3, [r7, #32]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	623b      	str	r3, [r7, #32]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	011a      	lsls	r2, r3, #4
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	4413      	add	r3, r2
 8002e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6959      	ldr	r1, [r3, #20]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	891a      	ldrh	r2, [r3, #8]
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f003 f909 	bl	800609c <USB_WritePMA>
 8002e8a:	e130      	b.n	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3306      	adds	r3, #6
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d306      	bcc.n	8002ece <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002ec6:	1ad2      	subs	r2, r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	619a      	str	r2, [r3, #24]
 8002ecc:	e002      	b.n	8002ed4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d12c      	bne.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f004 fd47 	bl	8007976 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 80fd 	bne.w	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]
 8002f34:	e0db      	b.n	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d11f      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	f040 80b1 	bne.w	80030ee <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f92:	441a      	add	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f9e:	441a      	add	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d309      	bcc.n	8002fc4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6a1a      	ldr	r2, [r3, #32]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	621a      	str	r2, [r3, #32]
 8002fc2:	e014      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002fcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002fce:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fd8:	e009      	b.n	8002fee <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	785b      	ldrb	r3, [r3, #1]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d155      	bne.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	647b      	str	r3, [r7, #68]	; 0x44
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800300a:	b29b      	uxth	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003010:	4413      	add	r3, r2
 8003012:	647b      	str	r3, [r7, #68]	; 0x44
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	011a      	lsls	r2, r3, #4
 800301a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800301c:	4413      	add	r3, r2
 800301e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	2b00      	cmp	r3, #0
 8003028:	d112      	bne.n	8003050 <HAL_PCD_EP_DB_Transmit+0x442>
 800302a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003034:	b29a      	uxth	r2, r3
 8003036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003048:	b29a      	uxth	r2, r3
 800304a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800304c:	801a      	strh	r2, [r3, #0]
 800304e:	e044      	b.n	80030da <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	2b3e      	cmp	r3, #62	; 0x3e
 8003054:	d811      	bhi.n	800307a <HAL_PCD_EP_DB_Transmit+0x46c>
 8003056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_PCD_EP_DB_Transmit+0x45e>
 8003066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003068:	3301      	adds	r3, #1
 800306a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306e:	b29b      	uxth	r3, r3
 8003070:	029b      	lsls	r3, r3, #10
 8003072:	b29a      	uxth	r2, r3
 8003074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	e02f      	b.n	80030da <HAL_PCD_EP_DB_Transmit+0x4cc>
 800307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	2b00      	cmp	r3, #0
 8003088:	d102      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x482>
 800308a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308c:	3b01      	subs	r3, #1
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	b29b      	uxth	r3, r3
 8003094:	029b      	lsls	r3, r3, #10
 8003096:	b29b      	uxth	r3, r3
 8003098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a4:	801a      	strh	r2, [r3, #0]
 80030a6:	e018      	b.n	80030da <HAL_PCD_EP_DB_Transmit+0x4cc>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d114      	bne.n	80030da <HAL_PCD_EP_DB_Transmit+0x4cc>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	4413      	add	r3, r2
 80030c0:	637b      	str	r3, [r7, #52]	; 0x34
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	011a      	lsls	r2, r3, #4
 80030c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ca:	4413      	add	r3, r2
 80030cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6959      	ldr	r1, [r3, #20]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	895a      	ldrh	r2, [r3, #10]
 80030e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f002 ffd7 	bl	800609c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003108:	823b      	strh	r3, [r7, #16]
 800310a:	8a3b      	ldrh	r3, [r7, #16]
 800310c:	f083 0310 	eor.w	r3, r3, #16
 8003110:	823b      	strh	r3, [r7, #16]
 8003112:	8a3b      	ldrh	r3, [r7, #16]
 8003114:	f083 0320 	eor.w	r3, r3, #32
 8003118:	823b      	strh	r3, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	8a3b      	ldrh	r3, [r7, #16]
 800312a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800312e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800313a:	b29b      	uxth	r3, r3
 800313c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3748      	adds	r7, #72	; 0x48
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	4613      	mov	r3, r2
 8003158:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800315a:	897b      	ldrh	r3, [r7, #10]
 800315c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003166:	897b      	ldrh	r3, [r7, #10]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4413      	add	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	e009      	b.n	8003192 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800317e:	897a      	ldrh	r2, [r7, #10]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d107      	bne.n	80031a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	80da      	strh	r2, [r3, #6]
 80031a6:	e00b      	b.n	80031c0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2201      	movs	r2, #1
 80031ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr

080031cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e26c      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8087 	beq.w	80032fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ec:	4b92      	ldr	r3, [pc, #584]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f003 030c 	and.w	r3, r3, #12
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d00c      	beq.n	8003212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031f8:	4b8f      	ldr	r3, [pc, #572]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
 8003200:	2b08      	cmp	r3, #8
 8003202:	d112      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
 8003204:	4b8c      	ldr	r3, [pc, #560]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d10b      	bne.n	800322a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003212:	4b89      	ldr	r3, [pc, #548]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x12c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d168      	bne.n	80032f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e246      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x76>
 8003234:	4b80      	ldr	r3, [pc, #512]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7f      	ldr	r2, [pc, #508]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e02e      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b7b      	ldr	r3, [pc, #492]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7a      	ldr	r2, [pc, #488]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b78      	ldr	r3, [pc, #480]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a77      	ldr	r2, [pc, #476]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e01d      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326c:	d10c      	bne.n	8003288 <HAL_RCC_OscConfig+0xbc>
 800326e:	4b72      	ldr	r3, [pc, #456]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a71      	ldr	r2, [pc, #452]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	4b6f      	ldr	r3, [pc, #444]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a6e      	ldr	r2, [pc, #440]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	e00b      	b.n	80032a0 <HAL_RCC_OscConfig+0xd4>
 8003288:	4b6b      	ldr	r3, [pc, #428]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800328e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	4b68      	ldr	r3, [pc, #416]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a67      	ldr	r2, [pc, #412]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe f948 	bl	800153c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b0:	f7fe f944 	bl	800153c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b64      	cmp	r3, #100	; 0x64
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1fa      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0xe4>
 80032ce:	e014      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe f934 	bl	800153c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d8:	f7fe f930 	bl	800153c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1e6      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	4b53      	ldr	r3, [pc, #332]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x10c>
 80032f6:	e000      	b.n	80032fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d063      	beq.n	80033ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003306:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	2b08      	cmp	r3, #8
 800331c:	d11c      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
 800331e:	4b46      	ldr	r3, [pc, #280]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d116      	bne.n	8003358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e1ba      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4939      	ldr	r1, [pc, #228]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003356:	e03a      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d020      	beq.n	80033a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003360:	4b36      	ldr	r3, [pc, #216]	; (800343c <HAL_RCC_OscConfig+0x270>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003366:	f7fe f8e9 	bl	800153c <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800336e:	f7fe f8e5 	bl	800153c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e19b      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800338c:	4b2a      	ldr	r3, [pc, #168]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4927      	ldr	r1, [pc, #156]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	600b      	str	r3, [r1, #0]
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCC_OscConfig+0x270>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe f8c8 	bl	800153c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe f8c4 	bl	800153c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e17a      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d03a      	beq.n	8003450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d019      	beq.n	8003416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fe f8a8 	bl	800153c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f0:	f7fe f8a4 	bl	800153c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e15a      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_RCC_OscConfig+0x26c>)
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800340e:	2001      	movs	r0, #1
 8003410:	f000 faa8 	bl	8003964 <RCC_Delay>
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003416:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <HAL_RCC_OscConfig+0x274>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800341c:	f7fe f88e 	bl	800153c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003422:	e00f      	b.n	8003444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003424:	f7fe f88a 	bl	800153c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d908      	bls.n	8003444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e140      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000
 800343c:	42420000 	.word	0x42420000
 8003440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b9e      	ldr	r3, [pc, #632]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e9      	bne.n	8003424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a6 	beq.w	80035aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b97      	ldr	r3, [pc, #604]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4a93      	ldr	r2, [pc, #588]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003478:	61d3      	str	r3, [r2, #28]
 800347a:	4b91      	ldr	r3, [pc, #580]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003486:	2301      	movs	r3, #1
 8003488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b8e      	ldr	r3, [pc, #568]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d118      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a2:	f7fe f84b 	bl	800153c <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034aa:	f7fe f847 	bl	800153c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b64      	cmp	r3, #100	; 0x64
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0fd      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x4f8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034d0:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	4a7a      	ldr	r2, [pc, #488]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6213      	str	r3, [r2, #32]
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x334>
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6213      	str	r3, [r2, #32]
 80034f2:	4b73      	ldr	r3, [pc, #460]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6213      	str	r3, [r2, #32]
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x356>
 8003508:	4b6d      	ldr	r3, [pc, #436]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a6c      	ldr	r2, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a69      	ldr	r2, [pc, #420]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x36e>
 8003522:	4b67      	ldr	r3, [pc, #412]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	4a66      	ldr	r2, [pc, #408]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6213      	str	r3, [r2, #32]
 800352e:	4b64      	ldr	r3, [pc, #400]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a63      	ldr	r2, [pc, #396]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fd fffb 	bl	800153c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd fff7 	bl	800153c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e0ab      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	4b57      	ldr	r3, [pc, #348]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x37e>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd ffe5 	bl	800153c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fd ffe1 	bl	800153c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e095      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d105      	bne.n	80035aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359e:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	4a47      	ldr	r2, [pc, #284]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8081 	beq.w	80036b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d061      	beq.n	8003684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d146      	bne.n	8003656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c8:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ce:	f7fd ffb5 	bl	800153c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fd ffb1 	bl	800153c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e067      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d108      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	492d      	ldr	r1, [pc, #180]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a19      	ldr	r1, [r3, #32]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	430b      	orrs	r3, r1
 8003622:	4927      	ldr	r1, [pc, #156]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fd ff85 	bl	800153c <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003636:	f7fd ff81 	bl	800153c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e037      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x46a>
 8003654:	e02f      	b.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003656:	4b1c      	ldr	r3, [pc, #112]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365c:	f7fd ff6e 	bl	800153c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd ff6a 	bl	800153c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e020      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003676:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x498>
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e013      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d106      	bne.n	80036b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d001      	beq.n	80036b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40021000 	.word	0x40021000
 80036c4:	40007000 	.word	0x40007000
 80036c8:	42420060 	.word	0x42420060

080036cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0d0      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036e0:	4b6a      	ldr	r3, [pc, #424]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d910      	bls.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ee:	4b67      	ldr	r3, [pc, #412]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f023 0207 	bic.w	r2, r3, #7
 80036f6:	4965      	ldr	r1, [pc, #404]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b63      	ldr	r3, [pc, #396]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e0b8      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d020      	beq.n	800375e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0304 	and.w	r3, r3, #4
 8003724:	2b00      	cmp	r3, #0
 8003726:	d005      	beq.n	8003734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003728:	4b59      	ldr	r3, [pc, #356]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a58      	ldr	r2, [pc, #352]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a52      	ldr	r2, [pc, #328]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800374a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	494d      	ldr	r1, [pc, #308]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d040      	beq.n	80037ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d115      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e07f      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e073      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379a:	4b3d      	ldr	r3, [pc, #244]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e06b      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037aa:	4b39      	ldr	r3, [pc, #228]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f023 0203 	bic.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4936      	ldr	r1, [pc, #216]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037bc:	f7fd febe 	bl	800153c <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd feba 	bl	800153c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e053      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 020c 	and.w	r2, r3, #12
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d1eb      	bne.n	80037c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d210      	bcs.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	4922      	ldr	r1, [pc, #136]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e032      	b.n	8003882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4916      	ldr	r1, [pc, #88]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	490e      	ldr	r1, [pc, #56]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800385a:	f000 f821 	bl	80038a0 <HAL_RCC_GetSysClockFreq>
 800385e:	4601      	mov	r1, r0
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	091b      	lsrs	r3, r3, #4
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	4a0a      	ldr	r2, [pc, #40]	; (8003894 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
 800386e:	fa21 f303 	lsr.w	r3, r1, r3
 8003872:	4a09      	ldr	r2, [pc, #36]	; (8003898 <HAL_RCC_ClockConfig+0x1cc>)
 8003874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <HAL_RCC_ClockConfig+0x1d0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fe1c 	bl	80014b8 <HAL_InitTick>

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40022000 	.word	0x40022000
 8003890:	40021000 	.word	0x40021000
 8003894:	08007f98 	.word	0x08007f98
 8003898:	20000004 	.word	0x20000004
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a0:	b490      	push	{r4, r7}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038a6:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038a8:	1d3c      	adds	r4, r7, #4
 80038aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038b0:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ca:	4b23      	ldr	r3, [pc, #140]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x40>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x46>
 80038de:	e02d      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e2:	623b      	str	r3, [r7, #32]
      break;
 80038e4:	e02d      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038f2:	4413      	add	r3, r2
 80038f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d013      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0c5b      	lsrs	r3, r3, #17
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003912:	4413      	add	r3, r2
 8003914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003918:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	4a0f      	ldr	r2, [pc, #60]	; (800395c <HAL_RCC_GetSysClockFreq+0xbc>)
 800391e:	fb02 f203 	mul.w	r2, r2, r3
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	fbb2 f3f3 	udiv	r3, r2, r3
 8003928:	627b      	str	r3, [r7, #36]	; 0x24
 800392a:	e004      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	4a0c      	ldr	r2, [pc, #48]	; (8003960 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	623b      	str	r3, [r7, #32]
      break;
 800393a:	e002      	b.n	8003942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_RCC_GetSysClockFreq+0xbc>)
 800393e:	623b      	str	r3, [r7, #32]
      break;
 8003940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003942:	6a3b      	ldr	r3, [r7, #32]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3728      	adds	r7, #40	; 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bc90      	pop	{r4, r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	08007e40 	.word	0x08007e40
 8003954:	08007e50 	.word	0x08007e50
 8003958:	40021000 	.word	0x40021000
 800395c:	007a1200 	.word	0x007a1200
 8003960:	003d0900 	.word	0x003d0900

08003964 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <RCC_Delay+0x34>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a0a      	ldr	r2, [pc, #40]	; (800399c <RCC_Delay+0x38>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003980:	bf00      	nop
  }
  while (Delay --);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f9      	bne.n	8003980 <RCC_Delay+0x1c>
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000004 	.word	0x20000004
 800399c:	10624dd3 	.word	0x10624dd3

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d07d      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c0:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039cc:	4b4c      	ldr	r3, [pc, #304]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4a4b      	ldr	r2, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d6:	61d3      	str	r3, [r2, #28]
 80039d8:	4b49      	ldr	r3, [pc, #292]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4b46      	ldr	r3, [pc, #280]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d118      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039f4:	4b43      	ldr	r3, [pc, #268]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a00:	f7fd fd9c 	bl	800153c <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fd fd98 	bl	800153c <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e06d      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02e      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d027      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a44:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	4b2e      	ldr	r3, [pc, #184]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a54:	4b2c      	ldr	r3, [pc, #176]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a5a:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d014      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fd fd67 	bl	800153c <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fd fd63 	bl	800153c <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e036      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0ee      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a94:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4917      	ldr	r1, [pc, #92]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aac:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	490b      	ldr	r1, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4904      	ldr	r1, [pc, #16]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42420440 	.word	0x42420440

08003b0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e041      	b.n	8003ba2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7fd fc66 	bl	8001404 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f000 f930 	bl	8003db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d001      	beq.n	8003bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e032      	b.n	8003c2a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a18      	ldr	r2, [pc, #96]	; (8003c34 <HAL_TIM_Base_Start+0x88>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_TIM_Base_Start+0x48>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d009      	beq.n	8003bf4 <HAL_TIM_Base_Start+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <HAL_TIM_Base_Start+0x8c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d004      	beq.n	8003bf4 <HAL_TIM_Base_Start+0x48>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_TIM_Base_Start+0x90>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d010      	beq.n	8003c28 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c16:	e007      	b.n	8003c28 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40000400 	.word	0x40000400
 8003c3c:	40000800 	.word	0x40000800

08003c40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIM_ConfigClockSource+0x18>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e0a6      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x166>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b40      	cmp	r3, #64	; 0x40
 8003c8e:	d067      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x120>
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d80b      	bhi.n	8003cac <HAL_TIM_ConfigClockSource+0x6c>
 8003c94:	2b10      	cmp	r3, #16
 8003c96:	d073      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x140>
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d802      	bhi.n	8003ca2 <HAL_TIM_ConfigClockSource+0x62>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d06f      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ca0:	e078      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d06c      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x140>
 8003ca6:	2b30      	cmp	r3, #48	; 0x30
 8003ca8:	d06a      	beq.n	8003d80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003caa:	e073      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cac:	2b70      	cmp	r3, #112	; 0x70
 8003cae:	d00d      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0x8c>
 8003cb0:	2b70      	cmp	r3, #112	; 0x70
 8003cb2:	d804      	bhi.n	8003cbe <HAL_TIM_ConfigClockSource+0x7e>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d033      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0xe0>
 8003cb8:	2b60      	cmp	r3, #96	; 0x60
 8003cba:	d041      	beq.n	8003d40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cbc:	e06a      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	d066      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x152>
 8003cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc8:	d017      	beq.n	8003cfa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003cca:	e063      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 f941 	bl	8003f62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
      break;
 8003cf8:	e04c      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6899      	ldr	r1, [r3, #8]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f000 f92a 	bl	8003f62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1c:	609a      	str	r2, [r3, #8]
      break;
 8003d1e:	e039      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6859      	ldr	r1, [r3, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f000 f8a1 	bl	8003e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2150      	movs	r1, #80	; 0x50
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f8f8 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e029      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f000 f8bf 	bl	8003ed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2160      	movs	r1, #96	; 0x60
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f8e8 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e019      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6859      	ldr	r1, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f000 f881 	bl	8003e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2140      	movs	r1, #64	; 0x40
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 f8d8 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 8003d7e:	e009      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4610      	mov	r0, r2
 8003d8c:	f000 f8cf 	bl	8003f2e <TIM_ITRx_SetConfig>
        break;
 8003d90:	e000      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <TIM_Base_SetConfig+0xb8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <TIM_Base_SetConfig+0x30>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dce:	d007      	beq.n	8003de0 <TIM_Base_SetConfig+0x30>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <TIM_Base_SetConfig+0xbc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_Base_SetConfig+0x30>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <TIM_Base_SetConfig+0xc0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d108      	bne.n	8003df2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <TIM_Base_SetConfig+0xb8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <TIM_Base_SetConfig+0x62>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e00:	d007      	beq.n	8003e12 <TIM_Base_SetConfig+0x62>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <TIM_Base_SetConfig+0xbc>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_Base_SetConfig+0x62>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a18      	ldr	r2, [pc, #96]	; (8003e70 <TIM_Base_SetConfig+0xc0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d108      	bne.n	8003e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a07      	ldr	r2, [pc, #28]	; (8003e68 <TIM_Base_SetConfig+0xb8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800

08003e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 030a 	bic.w	r3, r3, #10
 8003eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 0210 	bic.w	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	031b      	lsls	r3, r3, #12
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	621a      	str	r2, [r3, #32]
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr

08003f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	609a      	str	r2, [r3, #8]
}
 8003f96:	bf00      	nop
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bc80      	pop	{r7}
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e046      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a12      	ldr	r2, [pc, #72]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a10      	ldr	r2, [pc, #64]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr
 8004050:	40012c00 	.word	0x40012c00
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800

0800405c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800405c:	b084      	sub	sp, #16
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	f107 0014 	add.w	r0, r7, #20
 800406a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	b004      	add	sp, #16
 800407a:	4770      	bx	lr

0800407c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800408c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004090:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	b29a      	uxth	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr

080040a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	4013      	ands	r3, r2
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040f4:	b084      	sub	sp, #16
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	f107 0014 	add.w	r0, r7, #20
 8004102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	b004      	add	sp, #16
 8004132:	4770      	bx	lr

08004134 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004134:	b480      	push	{r7}
 8004136:	b09b      	sub	sp, #108	; 0x6c
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	78db      	ldrb	r3, [r3, #3]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d81f      	bhi.n	80041a6 <USB_ActivateEndpoint+0x72>
 8004166:	a201      	add	r2, pc, #4	; (adr r2, 800416c <USB_ActivateEndpoint+0x38>)
 8004168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416c:	0800417d 	.word	0x0800417d
 8004170:	08004199 	.word	0x08004199
 8004174:	080041af 	.word	0x080041af
 8004178:	0800418b 	.word	0x0800418b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800417c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004184:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004188:	e012      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800418a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800418e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004192:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004196:	e00b      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a4:	e004      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041ac:	e000      	b.n	80041b0 <USB_ActivateEndpoint+0x7c>
      break;
 80041ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	441a      	add	r2, r3
 8004200:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004204:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004208:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004214:	b29b      	uxth	r3, r3
 8004216:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	7b1b      	ldrb	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8149 	bne.w	80044b4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	785b      	ldrb	r3, [r3, #1]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 8084 	beq.w	8004334 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	011a      	lsls	r2, r3, #4
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	88db      	ldrh	r3, [r3, #6]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	b29b      	uxth	r3, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	81fb      	strh	r3, [r7, #14]
 800426e:	89fb      	ldrh	r3, [r7, #14]
 8004270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <USB_ActivateEndpoint+0x17c>
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	81bb      	strh	r3, [r7, #12]
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	441a      	add	r2, r3
 800429a:	89bb      	ldrh	r3, [r7, #12]
 800429c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	78db      	ldrb	r3, [r3, #3]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d020      	beq.n	80042fa <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ce:	813b      	strh	r3, [r7, #8]
 80042d0:	893b      	ldrh	r3, [r7, #8]
 80042d2:	f083 0320 	eor.w	r3, r3, #32
 80042d6:	813b      	strh	r3, [r7, #8]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	893b      	ldrh	r3, [r7, #8]
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
 80042f8:	e27f      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004310:	817b      	strh	r3, [r7, #10]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	441a      	add	r2, r3
 800431c:	897b      	ldrh	r3, [r7, #10]
 800431e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432e:	b29b      	uxth	r3, r3
 8004330:	8013      	strh	r3, [r2, #0]
 8004332:	e262      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433e:	b29b      	uxth	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004344:	4413      	add	r3, r2
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	011a      	lsls	r2, r3, #4
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	4413      	add	r3, r2
 8004352:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	88db      	ldrh	r3, [r3, #6]
 800435c:	085b      	lsrs	r3, r3, #1
 800435e:	b29b      	uxth	r3, r3
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	4413      	add	r3, r2
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	4413      	add	r3, r2
 8004386:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800438a:	623b      	str	r3, [r7, #32]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <USB_ActivateEndpoint+0x286>
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	b29b      	uxth	r3, r3
 800439a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	e02f      	b.n	800441a <USB_ActivateEndpoint+0x2e6>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b3e      	cmp	r3, #62	; 0x3e
 80043c0:	d813      	bhi.n	80043ea <USB_ActivateEndpoint+0x2b6>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	663b      	str	r3, [r7, #96]	; 0x60
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <USB_ActivateEndpoint+0x2a8>
 80043d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d8:	3301      	adds	r3, #1
 80043da:	663b      	str	r3, [r7, #96]	; 0x60
 80043dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043de:	b29b      	uxth	r3, r3
 80043e0:	029b      	lsls	r3, r3, #10
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e017      	b.n	800441a <USB_ActivateEndpoint+0x2e6>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	663b      	str	r3, [r7, #96]	; 0x60
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <USB_ActivateEndpoint+0x2d0>
 80043fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004400:	3b01      	subs	r3, #1
 8004402:	663b      	str	r3, [r7, #96]	; 0x60
 8004404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004406:	b29b      	uxth	r3, r3
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	83fb      	strh	r3, [r7, #30]
 8004428:	8bfb      	ldrh	r3, [r7, #30]
 800442a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d01b      	beq.n	800446a <USB_ActivateEndpoint+0x336>
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004448:	83bb      	strh	r3, [r7, #28]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	441a      	add	r2, r3
 8004454:	8bbb      	ldrh	r3, [r7, #28]
 8004456:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800445a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	b29b      	uxth	r3, r3
 8004468:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004480:	837b      	strh	r3, [r7, #26]
 8004482:	8b7b      	ldrh	r3, [r7, #26]
 8004484:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004488:	837b      	strh	r3, [r7, #26]
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004490:	837b      	strh	r3, [r7, #26]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	441a      	add	r2, r3
 800449c:	8b7b      	ldrh	r3, [r7, #26]
 800449e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	8013      	strh	r3, [r2, #0]
 80044b2:	e1a2      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	461a      	mov	r2, r3
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	4413      	add	r3, r2
 8004502:	65bb      	str	r3, [r7, #88]	; 0x58
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	011a      	lsls	r2, r3, #4
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	4413      	add	r3, r2
 800450e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	891b      	ldrh	r3, [r3, #8]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	801a      	strh	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004534:	4413      	add	r3, r2
 8004536:	653b      	str	r3, [r7, #80]	; 0x50
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	4413      	add	r3, r2
 8004542:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	895b      	ldrh	r3, [r3, #10]
 800454c:	085b      	lsrs	r3, r3, #1
 800454e:	b29b      	uxth	r3, r3
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004556:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 8091 	bne.w	8004684 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004570:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <USB_ActivateEndpoint+0x47e>
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	441a      	add	r2, r3
 800459c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	873b      	strh	r3, [r7, #56]	; 0x38
 80045c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01b      	beq.n	8004602 <USB_ActivateEndpoint+0x4ce>
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	86bb      	strh	r3, [r7, #52]	; 0x34
 800461a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800461c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004620:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004622:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004624:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004628:	86bb      	strh	r3, [r7, #52]	; 0x34
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800463e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004646:	b29b      	uxth	r3, r3
 8004648:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004660:	867b      	strh	r3, [r7, #50]	; 0x32
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800466e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004672:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467e:	b29b      	uxth	r3, r3
 8004680:	8013      	strh	r3, [r2, #0]
 8004682:	e0ba      	b.n	80047fa <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01d      	beq.n	80046dc <USB_ActivateEndpoint+0x5a8>
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01d      	beq.n	8004734 <USB_ActivateEndpoint+0x600>
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	78db      	ldrb	r3, [r3, #3]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d024      	beq.n	8004786 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	b29b      	uxth	r3, r3
 800474a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004756:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800475a:	f083 0320 	eor.w	r3, r3, #32
 800475e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]
 8004784:	e01d      	b.n	80047c2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	441a      	add	r2, r3
 80047aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047be:	b29b      	uxth	r3, r3
 80047c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	441a      	add	r2, r3
 80047e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80047fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80047fe:	4618      	mov	r0, r3
 8004800:	376c      	adds	r7, #108	; 0x6c
 8004802:	46bd      	mov	sp, r7
 8004804:	bc80      	pop	{r7}
 8004806:	4770      	bx	lr

08004808 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004808:	b480      	push	{r7}
 800480a:	b08d      	sub	sp, #52	; 0x34
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	7b1b      	ldrb	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 808e 	bne.w	8004938 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	785b      	ldrb	r3, [r3, #1]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d044      	beq.n	80048ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	81bb      	strh	r3, [r7, #12]
 8004832:	89bb      	ldrh	r3, [r7, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <USB_DeactivateEndpoint+0x6c>
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b29b      	uxth	r3, r3
 800484a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004852:	817b      	strh	r3, [r7, #10]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	441a      	add	r2, r3
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004864:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004870:	b29b      	uxth	r3, r3
 8004872:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	b29b      	uxth	r3, r3
 8004882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488a:	813b      	strh	r3, [r7, #8]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	441a      	add	r2, r3
 8004896:	893b      	ldrh	r3, [r7, #8]
 8004898:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800489c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	8013      	strh	r3, [r2, #0]
 80048ac:	e192      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	827b      	strh	r3, [r7, #18]
 80048bc:	8a7b      	ldrh	r3, [r7, #18]
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01b      	beq.n	80048fe <USB_DeactivateEndpoint+0xf6>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048dc:	823b      	strh	r3, [r7, #16]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	441a      	add	r2, r3
 80048e8:	8a3b      	ldrh	r3, [r7, #16]
 80048ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004914:	81fb      	strh	r3, [r7, #14]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	89fb      	ldrh	r3, [r7, #14]
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]
 8004936:	e14d      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f040 80a5 	bne.w	8004a8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	843b      	strh	r3, [r7, #32]
 8004950:	8c3b      	ldrh	r3, [r7, #32]
 8004952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01b      	beq.n	8004992 <USB_DeactivateEndpoint+0x18a>
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800496c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004970:	83fb      	strh	r3, [r7, #30]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	441a      	add	r2, r3
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004986:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800498a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498e:	b29b      	uxth	r3, r3
 8004990:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	83bb      	strh	r3, [r7, #28]
 80049a0:	8bbb      	ldrh	r3, [r7, #28]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <USB_DeactivateEndpoint+0x1da>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	837b      	strh	r3, [r7, #26]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8b7b      	ldrh	r3, [r7, #26]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	881b      	ldrh	r3, [r3, #0]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	833b      	strh	r3, [r7, #24]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	8b3b      	ldrh	r3, [r7, #24]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a30:	82fb      	strh	r3, [r7, #22]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	441a      	add	r2, r3
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a68:	82bb      	strh	r3, [r7, #20]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	441a      	add	r2, r3
 8004a74:	8abb      	ldrh	r3, [r7, #20]
 8004a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	8013      	strh	r3, [r2, #0]
 8004a8a:	e0a3      	b.n	8004bd4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004a9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01b      	beq.n	8004adc <USB_DeactivateEndpoint+0x2d4>
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <USB_DeactivateEndpoint+0x324>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b42:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3734      	adds	r7, #52	; 0x34
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr

08004be0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0c4      	sub	sp, #272	; 0x110
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	6018      	str	r0, [r3, #0]
 8004bea:	463b      	mov	r3, r7
 8004bec:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	f040 8557 	bne.w	80056a8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	463b      	mov	r3, r7
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d905      	bls.n	8004c16 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004c14:	e004      	b.n	8004c20 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004c16:	463b      	mov	r3, r7
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	7b1b      	ldrb	r3, [r3, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d12c      	bne.n	8004c84 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6959      	ldr	r1, [r3, #20]
 8004c30:	463b      	mov	r3, r7
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	88da      	ldrh	r2, [r3, #6]
 8004c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	1d38      	adds	r0, r7, #4
 8004c3e:	6800      	ldr	r0, [r0, #0]
 8004c40:	f001 fa2c 	bl	800609c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	4413      	add	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	463b      	mov	r3, r7
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	011a      	lsls	r2, r3, #4
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004c6c:	f107 0310 	add.w	r3, r7, #16
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f107 0310 	add.w	r3, r7, #16
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	f000 bcdd 	b.w	800563e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004c84:	463b      	mov	r3, r7
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	78db      	ldrb	r3, [r3, #3]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f040 8347 	bne.w	800531e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004c90:	463b      	mov	r3, r7
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	463b      	mov	r3, r7
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	f240 82eb 	bls.w	8005278 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	463b      	mov	r3, r7
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004cc0:	1d3b      	adds	r3, r7, #4
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	463b      	mov	r3, r7
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	441a      	add	r2, r3
 8004cce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf0:	1ad2      	subs	r2, r2, r3
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 8159 	beq.w	8004fc6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d14:	1d3b      	adds	r3, r7, #4
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	637b      	str	r3, [r7, #52]	; 0x34
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d164      	bne.n	8004dee <USB_EPStartXfer+0x20e>
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	4413      	add	r3, r2
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	011a      	lsls	r2, r3, #4
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	4413      	add	r3, r2
 8004d48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d112      	bne.n	8004d7c <USB_EPStartXfer+0x19c>
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	801a      	strh	r2, [r3, #0]
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e054      	b.n	8004e26 <USB_EPStartXfer+0x246>
 8004d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d80:	2b3e      	cmp	r3, #62	; 0x3e
 8004d82:	d817      	bhi.n	8004db4 <USB_EPStartXfer+0x1d4>
 8004d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d88:	085b      	lsrs	r3, r3, #1
 8004d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <USB_EPStartXfer+0x1c4>
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e038      	b.n	8004e26 <USB_EPStartXfer+0x246>
 8004db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db8:	095b      	lsrs	r3, r3, #5
 8004dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <USB_EPStartXfer+0x1f4>
 8004dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	029b      	lsls	r3, r3, #10
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de6:	b29a      	uxth	r2, r3
 8004de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dea:	801a      	strh	r2, [r3, #0]
 8004dec:	e01b      	b.n	8004e26 <USB_EPStartXfer+0x246>
 8004dee:	463b      	mov	r3, r7
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	785b      	ldrb	r3, [r3, #1]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d116      	bne.n	8004e26 <USB_EPStartXfer+0x246>
 8004df8:	1d3b      	adds	r3, r7, #4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	4413      	add	r3, r2
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	011a      	lsls	r2, r3, #4
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	4413      	add	r3, r2
 8004e16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e26:	463b      	mov	r3, r7
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	895b      	ldrh	r3, [r3, #10]
 8004e2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e30:	463b      	mov	r3, r7
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6959      	ldr	r1, [r3, #20]
 8004e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004e40:	1d38      	adds	r0, r7, #4
 8004e42:	6800      	ldr	r0, [r0, #0]
 8004e44:	f001 f92a 	bl	800609c <USB_WritePMA>
            ep->xfer_buff += len;
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e52:	441a      	add	r2, r3
 8004e54:	463b      	mov	r3, r7
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	463b      	mov	r3, r7
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d909      	bls.n	8004e7e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1a      	ldr	r2, [r3, #32]
 8004e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e74:	1ad2      	subs	r2, r2, r3
 8004e76:	463b      	mov	r3, r7
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	621a      	str	r2, [r3, #32]
 8004e7c:	e008      	b.n	8004e90 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e7e:	463b      	mov	r3, r7
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004e88:	463b      	mov	r3, r7
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e90:	463b      	mov	r3, r7
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	785b      	ldrb	r3, [r3, #1]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d164      	bne.n	8004f64 <USB_EPStartXfer+0x384>
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	1d3b      	adds	r3, r7, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	4413      	add	r3, r2
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	463b      	mov	r3, r7
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	011a      	lsls	r2, r3, #4
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d112      	bne.n	8004ef2 <USB_EPStartXfer+0x312>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	801a      	strh	r2, [r3, #0]
 8004ef0:	e057      	b.n	8004fa2 <USB_EPStartXfer+0x3c2>
 8004ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ef8:	d817      	bhi.n	8004f2a <USB_EPStartXfer+0x34a>
 8004efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <USB_EPStartXfer+0x33a>
 8004f10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f14:	3301      	adds	r3, #1
 8004f16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e03b      	b.n	8004fa2 <USB_EPStartXfer+0x3c2>
 8004f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <USB_EPStartXfer+0x36a>
 8004f40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f44:	3b01      	subs	r3, #1
 8004f46:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004f4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	e01e      	b.n	8004fa2 <USB_EPStartXfer+0x3c2>
 8004f64:	463b      	mov	r3, r7
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d119      	bne.n	8004fa2 <USB_EPStartXfer+0x3c2>
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	4413      	add	r3, r2
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	463b      	mov	r3, r7
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fa2:	463b      	mov	r3, r7
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	891b      	ldrh	r3, [r3, #8]
 8004fa8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fac:	463b      	mov	r3, r7
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6959      	ldr	r1, [r3, #20]
 8004fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004fbc:	1d38      	adds	r0, r7, #4
 8004fbe:	6800      	ldr	r0, [r0, #0]
 8004fc0:	f001 f86c 	bl	800609c <USB_WritePMA>
 8004fc4:	e33b      	b.n	800563e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fc6:	463b      	mov	r3, r7
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d164      	bne.n	800509a <USB_EPStartXfer+0x4ba>
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	4413      	add	r3, r2
 8004fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe8:	463b      	mov	r3, r7
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	011a      	lsls	r2, r3, #4
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d112      	bne.n	8005028 <USB_EPStartXfer+0x448>
 8005002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800500c:	b29a      	uxth	r2, r3
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	b29b      	uxth	r3, r3
 8005018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005020:	b29a      	uxth	r2, r3
 8005022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005024:	801a      	strh	r2, [r3, #0]
 8005026:	e057      	b.n	80050d8 <USB_EPStartXfer+0x4f8>
 8005028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800502c:	2b3e      	cmp	r3, #62	; 0x3e
 800502e:	d817      	bhi.n	8005060 <USB_EPStartXfer+0x480>
 8005030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800503a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <USB_EPStartXfer+0x470>
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	3301      	adds	r3, #1
 800504c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005054:	b29b      	uxth	r3, r3
 8005056:	029b      	lsls	r3, r3, #10
 8005058:	b29a      	uxth	r2, r3
 800505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505c:	801a      	strh	r2, [r3, #0]
 800505e:	e03b      	b.n	80050d8 <USB_EPStartXfer+0x4f8>
 8005060:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800506a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2b00      	cmp	r3, #0
 8005074:	d104      	bne.n	8005080 <USB_EPStartXfer+0x4a0>
 8005076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507a:	3b01      	subs	r3, #1
 800507c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005080:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005084:	b29b      	uxth	r3, r3
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e01e      	b.n	80050d8 <USB_EPStartXfer+0x4f8>
 800509a:	463b      	mov	r3, r7
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d119      	bne.n	80050d8 <USB_EPStartXfer+0x4f8>
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	657b      	str	r3, [r7, #84]	; 0x54
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	461a      	mov	r2, r3
 80050b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b8:	4413      	add	r3, r2
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
 80050bc:	463b      	mov	r3, r7
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050cc:	653b      	str	r3, [r7, #80]	; 0x50
 80050ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80050d8:	463b      	mov	r3, r7
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	891b      	ldrh	r3, [r3, #8]
 80050de:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6959      	ldr	r1, [r3, #20]
 80050e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80050f2:	1d38      	adds	r0, r7, #4
 80050f4:	6800      	ldr	r0, [r0, #0]
 80050f6:	f000 ffd1 	bl	800609c <USB_WritePMA>
            ep->xfer_buff += len;
 80050fa:	463b      	mov	r3, r7
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695a      	ldr	r2, [r3, #20]
 8005100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005104:	441a      	add	r2, r3
 8005106:	463b      	mov	r3, r7
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800510c:	463b      	mov	r3, r7
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a1a      	ldr	r2, [r3, #32]
 8005112:	463b      	mov	r3, r7
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	d909      	bls.n	8005130 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800511c:	463b      	mov	r3, r7
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6a1a      	ldr	r2, [r3, #32]
 8005122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005126:	1ad2      	subs	r2, r2, r3
 8005128:	463b      	mov	r3, r7
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	621a      	str	r2, [r3, #32]
 800512e:	e008      	b.n	8005142 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005130:	463b      	mov	r3, r7
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800513a:	463b      	mov	r3, r7
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2200      	movs	r2, #0
 8005140:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005142:	1d3b      	adds	r3, r7, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	647b      	str	r3, [r7, #68]	; 0x44
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d164      	bne.n	800521c <USB_EPStartXfer+0x63c>
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005160:	b29b      	uxth	r3, r3
 8005162:	461a      	mov	r2, r3
 8005164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005166:	4413      	add	r3, r2
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800516a:	463b      	mov	r3, r7
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	011a      	lsls	r2, r3, #4
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	4413      	add	r3, r2
 8005176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800517a:	63bb      	str	r3, [r7, #56]	; 0x38
 800517c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005180:	2b00      	cmp	r3, #0
 8005182:	d112      	bne.n	80051aa <USB_EPStartXfer+0x5ca>
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518e:	b29a      	uxth	r2, r3
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	801a      	strh	r2, [r3, #0]
 80051a8:	e054      	b.n	8005254 <USB_EPStartXfer+0x674>
 80051aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ae:	2b3e      	cmp	r3, #62	; 0x3e
 80051b0:	d817      	bhi.n	80051e2 <USB_EPStartXfer+0x602>
 80051b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <USB_EPStartXfer+0x5f2>
 80051c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051cc:	3301      	adds	r3, #1
 80051ce:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	029b      	lsls	r3, r3, #10
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e038      	b.n	8005254 <USB_EPStartXfer+0x674>
 80051e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80051ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d104      	bne.n	8005202 <USB_EPStartXfer+0x622>
 80051f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051fc:	3b01      	subs	r3, #1
 80051fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005206:	b29b      	uxth	r3, r3
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	b29b      	uxth	r3, r3
 800520c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005214:	b29a      	uxth	r2, r3
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e01b      	b.n	8005254 <USB_EPStartXfer+0x674>
 800521c:	463b      	mov	r3, r7
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d116      	bne.n	8005254 <USB_EPStartXfer+0x674>
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005234:	4413      	add	r3, r2
 8005236:	647b      	str	r3, [r7, #68]	; 0x44
 8005238:	463b      	mov	r3, r7
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	011a      	lsls	r2, r3, #4
 8005240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005242:	4413      	add	r3, r2
 8005244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005248:	643b      	str	r3, [r7, #64]	; 0x40
 800524a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524e:	b29a      	uxth	r2, r3
 8005250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005252:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005254:	463b      	mov	r3, r7
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	895b      	ldrh	r3, [r3, #10]
 800525a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800525e:	463b      	mov	r3, r7
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6959      	ldr	r1, [r3, #20]
 8005264:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005268:	b29b      	uxth	r3, r3
 800526a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800526e:	1d38      	adds	r0, r7, #4
 8005270:	6800      	ldr	r0, [r0, #0]
 8005272:	f000 ff13 	bl	800609c <USB_WritePMA>
 8005276:	e1e2      	b.n	800563e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005278:	463b      	mov	r3, r7
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	b29b      	uxth	r3, r3
 8005294:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80052a0:	1d3b      	adds	r3, r7, #4
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	463b      	mov	r3, r7
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80052b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052c6:	1d3b      	adds	r3, r7, #4
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	663b      	str	r3, [r7, #96]	; 0x60
 80052cc:	1d3b      	adds	r3, r7, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	461a      	mov	r2, r3
 80052d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052da:	4413      	add	r3, r2
 80052dc:	663b      	str	r3, [r7, #96]	; 0x60
 80052de:	463b      	mov	r3, r7
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	011a      	lsls	r2, r3, #4
 80052e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052fa:	463b      	mov	r3, r7
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	891b      	ldrh	r3, [r3, #8]
 8005300:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6959      	ldr	r1, [r3, #20]
 800530a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800530e:	b29b      	uxth	r3, r3
 8005310:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005314:	1d38      	adds	r0, r7, #4
 8005316:	6800      	ldr	r0, [r0, #0]
 8005318:	f000 fec0 	bl	800609c <USB_WritePMA>
 800531c:	e18f      	b.n	800563e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800531e:	1d3b      	adds	r3, r7, #4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	463b      	mov	r3, r7
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	b29b      	uxth	r3, r3
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 808f 	beq.w	8005458 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800533a:	1d3b      	adds	r3, r7, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005340:	463b      	mov	r3, r7
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d164      	bne.n	8005414 <USB_EPStartXfer+0x834>
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	673b      	str	r3, [r7, #112]	; 0x70
 8005350:	1d3b      	adds	r3, r7, #4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005358:	b29b      	uxth	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800535e:	4413      	add	r3, r2
 8005360:	673b      	str	r3, [r7, #112]	; 0x70
 8005362:	463b      	mov	r3, r7
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	011a      	lsls	r2, r3, #4
 800536a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800536c:	4413      	add	r3, r2
 800536e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d112      	bne.n	80053a2 <USB_EPStartXfer+0x7c2>
 800537c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b29b      	uxth	r3, r3
 8005382:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005386:	b29a      	uxth	r2, r3
 8005388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538a:	801a      	strh	r2, [r3, #0]
 800538c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	b29b      	uxth	r3, r3
 8005392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539a:	b29a      	uxth	r2, r3
 800539c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539e:	801a      	strh	r2, [r3, #0]
 80053a0:	e054      	b.n	800544c <USB_EPStartXfer+0x86c>
 80053a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a6:	2b3e      	cmp	r3, #62	; 0x3e
 80053a8:	d817      	bhi.n	80053da <USB_EPStartXfer+0x7fa>
 80053aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <USB_EPStartXfer+0x7ea>
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	3301      	adds	r3, #1
 80053c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e038      	b.n	800544c <USB_EPStartXfer+0x86c>
 80053da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <USB_EPStartXfer+0x81a>
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f4:	3b01      	subs	r3, #1
 80053f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29b      	uxth	r3, r3
 8005404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540c:	b29a      	uxth	r2, r3
 800540e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e01b      	b.n	800544c <USB_EPStartXfer+0x86c>
 8005414:	463b      	mov	r3, r7
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d116      	bne.n	800544c <USB_EPStartXfer+0x86c>
 800541e:	1d3b      	adds	r3, r7, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800542c:	4413      	add	r3, r2
 800542e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005430:	463b      	mov	r3, r7
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	011a      	lsls	r2, r3, #4
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	4413      	add	r3, r2
 800543c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005440:	677b      	str	r3, [r7, #116]	; 0x74
 8005442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005446:	b29a      	uxth	r2, r3
 8005448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800544a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	895b      	ldrh	r3, [r3, #10]
 8005452:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005456:	e097      	b.n	8005588 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005458:	463b      	mov	r3, r7
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	785b      	ldrb	r3, [r3, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d168      	bne.n	8005534 <USB_EPStartXfer+0x954>
 8005462:	1d3b      	adds	r3, r7, #4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005472:	b29b      	uxth	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800547a:	4413      	add	r3, r2
 800547c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005480:	463b      	mov	r3, r7
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800548c:	4413      	add	r3, r2
 800548e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005492:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005498:	2b00      	cmp	r3, #0
 800549a:	d112      	bne.n	80054c2 <USB_EPStartXfer+0x8e2>
 800549c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e05d      	b.n	800557e <USB_EPStartXfer+0x99e>
 80054c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c6:	2b3e      	cmp	r3, #62	; 0x3e
 80054c8:	d817      	bhi.n	80054fa <USB_EPStartXfer+0x91a>
 80054ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <USB_EPStartXfer+0x90a>
 80054e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054e4:	3301      	adds	r3, #1
 80054e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	029b      	lsls	r3, r3, #10
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e041      	b.n	800557e <USB_EPStartXfer+0x99e>
 80054fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005504:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <USB_EPStartXfer+0x93a>
 8005510:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005514:	3b01      	subs	r3, #1
 8005516:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800551a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800551e:	b29b      	uxth	r3, r3
 8005520:	029b      	lsls	r3, r3, #10
 8005522:	b29b      	uxth	r3, r3
 8005524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552c:	b29a      	uxth	r2, r3
 800552e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005530:	801a      	strh	r2, [r3, #0]
 8005532:	e024      	b.n	800557e <USB_EPStartXfer+0x99e>
 8005534:	463b      	mov	r3, r7
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d11f      	bne.n	800557e <USB_EPStartXfer+0x99e>
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005556:	4413      	add	r3, r2
 8005558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	011a      	lsls	r2, r3, #4
 8005564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005568:	4413      	add	r3, r2
 800556a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800556e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005576:	b29a      	uxth	r2, r3
 8005578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800557c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	891b      	ldrh	r3, [r3, #8]
 8005584:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6959      	ldr	r1, [r3, #20]
 800558e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005598:	1d38      	adds	r0, r7, #4
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	f000 fd7e 	bl	800609c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80055a0:	463b      	mov	r3, r7
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d122      	bne.n	80055f0 <USB_EPStartXfer+0xa10>
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	463b      	mov	r3, r7
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80055c8:	1d3b      	adds	r3, r7, #4
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	463b      	mov	r3, r7
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80055da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8013      	strh	r3, [r2, #0]
 80055ee:	e026      	b.n	800563e <USB_EPStartXfer+0xa5e>
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	785b      	ldrb	r3, [r3, #1]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d121      	bne.n	800563e <USB_EPStartXfer+0xa5e>
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005614:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	441a      	add	r2, r3
 8005626:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f107 020e 	add.w	r2, r7, #14
 8005654:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800565c:	8013      	strh	r3, [r2, #0]
 800565e:	f107 030e 	add.w	r3, r7, #14
 8005662:	f107 020e 	add.w	r2, r7, #14
 8005666:	8812      	ldrh	r2, [r2, #0]
 8005668:	f082 0210 	eor.w	r2, r2, #16
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	f107 030e 	add.w	r3, r7, #14
 8005672:	f107 020e 	add.w	r2, r7, #14
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	f082 0220 	eor.w	r2, r2, #32
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	463b      	mov	r3, r7
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	f107 030e 	add.w	r3, r7, #14
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	8013      	strh	r3, [r2, #0]
 80056a6:	e3b5      	b.n	8005e14 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056a8:	463b      	mov	r3, r7
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	7b1b      	ldrb	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f040 8090 	bne.w	80057d4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056b4:	463b      	mov	r3, r7
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	463b      	mov	r3, r7
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d90e      	bls.n	80056e2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80056c4:	463b      	mov	r3, r7
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80056ce:	463b      	mov	r3, r7
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699a      	ldr	r2, [r3, #24]
 80056d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d8:	1ad2      	subs	r2, r2, r3
 80056da:	463b      	mov	r3, r7
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	619a      	str	r2, [r3, #24]
 80056e0:	e008      	b.n	80056f4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80056e2:	463b      	mov	r3, r7
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80056ec:	463b      	mov	r3, r7
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2200      	movs	r2, #0
 80056f2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800570c:	4413      	add	r3, r2
 800570e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005712:	463b      	mov	r3, r7
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800571e:	4413      	add	r3, r2
 8005720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d116      	bne.n	800575e <USB_EPStartXfer+0xb7e>
 8005730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800573c:	b29a      	uxth	r2, r3
 800573e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005754:	b29a      	uxth	r2, r3
 8005756:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800575a:	801a      	strh	r2, [r3, #0]
 800575c:	e32c      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	2b3e      	cmp	r3, #62	; 0x3e
 8005764:	d818      	bhi.n	8005798 <USB_EPStartXfer+0xbb8>
 8005766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d004      	beq.n	8005786 <USB_EPStartXfer+0xba6>
 800577c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005780:	3301      	adds	r3, #1
 8005782:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005786:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800578a:	b29b      	uxth	r3, r3
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	b29a      	uxth	r2, r3
 8005790:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e30f      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
 8005798:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <USB_EPStartXfer+0xbd8>
 80057ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057b2:	3b01      	subs	r3, #1
 80057b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80057b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057bc:	b29b      	uxth	r3, r3
 80057be:	029b      	lsls	r3, r3, #10
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e2f1      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057d4:	463b      	mov	r3, r7
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	78db      	ldrb	r3, [r3, #3]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	f040 818f 	bne.w	8005afe <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057e0:	463b      	mov	r3, r7
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d175      	bne.n	80058d6 <USB_EPStartXfer+0xcf6>
 80057ea:	1d3b      	adds	r3, r7, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	461a      	mov	r2, r3
 80057fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005802:	4413      	add	r3, r2
 8005804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	011a      	lsls	r2, r3, #4
 8005810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005814:	4413      	add	r3, r2
 8005816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800581a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800581e:	463b      	mov	r3, r7
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d116      	bne.n	8005856 <USB_EPStartXfer+0xc76>
 8005828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583a:	801a      	strh	r2, [r3, #0]
 800583c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e065      	b.n	8005922 <USB_EPStartXfer+0xd42>
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b3e      	cmp	r3, #62	; 0x3e
 800585e:	d81a      	bhi.n	8005896 <USB_EPStartXfer+0xcb6>
 8005860:	463b      	mov	r3, r7
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d004      	beq.n	8005884 <USB_EPStartXfer+0xca4>
 800587a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800587e:	3301      	adds	r3, #1
 8005880:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005884:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005888:	b29b      	uxth	r3, r3
 800588a:	029b      	lsls	r3, r3, #10
 800588c:	b29a      	uxth	r2, r3
 800588e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	e045      	b.n	8005922 <USB_EPStartXfer+0xd42>
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	095b      	lsrs	r3, r3, #5
 800589e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058a2:	463b      	mov	r3, r7
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	f003 031f 	and.w	r3, r3, #31
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <USB_EPStartXfer+0xcda>
 80058b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058b4:	3b01      	subs	r3, #1
 80058b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058be:	b29b      	uxth	r3, r3
 80058c0:	029b      	lsls	r3, r3, #10
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	e025      	b.n	8005922 <USB_EPStartXfer+0xd42>
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d120      	bne.n	8005922 <USB_EPStartXfer+0xd42>
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80058f8:	4413      	add	r3, r2
 80058fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800590a:	4413      	add	r3, r2
 800590c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005914:	463b      	mov	r3, r7
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	b29a      	uxth	r2, r3
 800591c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	1d3b      	adds	r3, r7, #4
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800592a:	463b      	mov	r3, r7
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d175      	bne.n	8005a20 <USB_EPStartXfer+0xe40>
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800593c:	1d3b      	adds	r3, r7, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800594c:	4413      	add	r3, r2
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800595e:	4413      	add	r3, r2
 8005960:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <USB_EPStartXfer+0xdc0>
 8005972:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597e:	b29a      	uxth	r2, r3
 8005980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005996:	b29a      	uxth	r2, r3
 8005998:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800599c:	801a      	strh	r2, [r3, #0]
 800599e:	e061      	b.n	8005a64 <USB_EPStartXfer+0xe84>
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b3e      	cmp	r3, #62	; 0x3e
 80059a8:	d81a      	bhi.n	80059e0 <USB_EPStartXfer+0xe00>
 80059aa:	463b      	mov	r3, r7
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059b6:	463b      	mov	r3, r7
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USB_EPStartXfer+0xdee>
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	3301      	adds	r3, #1
 80059ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	e041      	b.n	8005a64 <USB_EPStartXfer+0xe84>
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ec:	463b      	mov	r3, r7
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 031f 	and.w	r3, r3, #31
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d104      	bne.n	8005a04 <USB_EPStartXfer+0xe24>
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	3b01      	subs	r3, #1
 8005a00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	029b      	lsls	r3, r3, #10
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e021      	b.n	8005a64 <USB_EPStartXfer+0xe84>
 8005a20:	463b      	mov	r3, r7
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d11c      	bne.n	8005a64 <USB_EPStartXfer+0xe84>
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	011a      	lsls	r2, r3, #4
 8005a48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a56:	463b      	mov	r3, r7
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a62:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 81a4 	beq.w	8005db8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005a70:	1d3b      	adds	r3, r7, #4
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	463b      	mov	r3, r7
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005a84:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <USB_EPStartXfer+0xebc>
 8005a90:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10d      	bne.n	8005ab8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005a9c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f040 8187 	bne.w	8005db8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005aaa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 8180 	bne.w	8005db8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ab8:	1d3b      	adds	r3, r7, #4
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005ad6:	1d3b      	adds	r3, r7, #4
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	463b      	mov	r3, r7
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]
 8005afc:	e15c      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005afe:	463b      	mov	r3, r7
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	78db      	ldrb	r3, [r3, #3]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 8155 	bne.w	8005db4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	463b      	mov	r3, r7
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d90e      	bls.n	8005b38 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005b1a:	463b      	mov	r3, r7
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b2e:	1ad2      	subs	r2, r2, r3
 8005b30:	463b      	mov	r3, r7
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	e008      	b.n	8005b4a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005b38:	463b      	mov	r3, r7
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005b42:	463b      	mov	r3, r7
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2200      	movs	r2, #0
 8005b48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d16f      	bne.n	8005c34 <USB_EPStartXfer+0x1054>
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	011a      	lsls	r2, r3, #4
 8005b7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d116      	bne.n	8005bbe <USB_EPStartXfer+0xfde>
 8005b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	e05f      	b.n	8005c7e <USB_EPStartXfer+0x109e>
 8005bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bc4:	d818      	bhi.n	8005bf8 <USB_EPStartXfer+0x1018>
 8005bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bca:	085b      	lsrs	r3, r3, #1
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <USB_EPStartXfer+0x1006>
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be0:	3301      	adds	r3, #1
 8005be2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	029b      	lsls	r3, r3, #10
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e042      	b.n	8005c7e <USB_EPStartXfer+0x109e>
 8005bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d104      	bne.n	8005c18 <USB_EPStartXfer+0x1038>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	3b01      	subs	r3, #1
 8005c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	029b      	lsls	r3, r3, #10
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005c30:	801a      	strh	r2, [r3, #0]
 8005c32:	e024      	b.n	8005c7e <USB_EPStartXfer+0x109e>
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d11f      	bne.n	8005c7e <USB_EPStartXfer+0x109e>
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c46:	1d3b      	adds	r3, r7, #4
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c56:	4413      	add	r3, r2
 8005c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	011a      	lsls	r2, r3, #4
 8005c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	1d3b      	adds	r3, r7, #4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c86:	463b      	mov	r3, r7
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d16f      	bne.n	8005d70 <USB_EPStartXfer+0x1190>
 8005c90:	1d3b      	adds	r3, r7, #4
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c98:	1d3b      	adds	r3, r7, #4
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ca8:	4413      	add	r3, r2
 8005caa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cae:	463b      	mov	r3, r7
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cba:	4413      	add	r3, r2
 8005cbc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d116      	bne.n	8005cfa <USB_EPStartXfer+0x111a>
 8005ccc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	e05e      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8005d00:	d818      	bhi.n	8005d34 <USB_EPStartXfer+0x1154>
 8005d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d004      	beq.n	8005d22 <USB_EPStartXfer+0x1142>
 8005d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	029b      	lsls	r3, r3, #10
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	e041      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
 8005d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <USB_EPStartXfer+0x1174>
 8005d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	029b      	lsls	r3, r3, #10
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	e023      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d11e      	bne.n	8005db8 <USB_EPStartXfer+0x11d8>
 8005d7a:	1d3b      	adds	r3, r7, #4
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	011a      	lsls	r2, r3, #4
 8005d98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005da2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	e001      	b.n	8005db8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e02e      	b.n	8005e16 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005db8:	1d3b      	adds	r3, r7, #4
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005dd6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005dda:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dde:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005de2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005de6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	463b      	mov	r3, r7
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	441a      	add	r2, r3
 8005dfc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e48:	81bb      	strh	r3, [r7, #12]
 8005e4a:	89bb      	ldrh	r3, [r7, #12]
 8005e4c:	f083 0310 	eor.w	r3, r3, #16
 8005e50:	81bb      	strh	r3, [r7, #12]
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	441a      	add	r2, r3
 8005e5c:	89bb      	ldrh	r3, [r7, #12]
 8005e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	8013      	strh	r3, [r2, #0]
 8005e72:	e01f      	b.n	8005eb4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8a:	81fb      	strh	r3, [r7, #14]
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005e92:	81fb      	strh	r3, [r7, #14]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	441a      	add	r2, r3
 8005e9e:	89fb      	ldrh	r3, [r7, #14]
 8005ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	7b1b      	ldrb	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 809d 	bne.w	800600e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d04c      	beq.n	8005f76 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	823b      	strh	r3, [r7, #16]
 8005eea:	8a3b      	ldrh	r3, [r7, #16]
 8005eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <USB_EPClearStall+0x6c>
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	81fb      	strh	r3, [r7, #14]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	78db      	ldrb	r3, [r3, #3]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d06c      	beq.n	800600e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4a:	81bb      	strh	r3, [r7, #12]
 8005f4c:	89bb      	ldrh	r3, [r7, #12]
 8005f4e:	f083 0320 	eor.w	r3, r3, #32
 8005f52:	81bb      	strh	r3, [r7, #12]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	441a      	add	r2, r3
 8005f5e:	89bb      	ldrh	r3, [r7, #12]
 8005f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	8013      	strh	r3, [r2, #0]
 8005f74:	e04b      	b.n	800600e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	82fb      	strh	r3, [r7, #22]
 8005f84:	8afb      	ldrh	r3, [r7, #22]
 8005f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01b      	beq.n	8005fc6 <USB_EPClearStall+0x106>
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	82bb      	strh	r3, [r7, #20]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	8abb      	ldrh	r3, [r7, #20]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fdc:	827b      	strh	r3, [r7, #18]
 8005fde:	8a7b      	ldrh	r3, [r7, #18]
 8005fe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fe4:	827b      	strh	r3, [r7, #18]
 8005fe6:	8a7b      	ldrh	r3, [r7, #18]
 8005fe8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fec:	827b      	strh	r3, [r7, #18]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	8a7b      	ldrh	r3, [r7, #18]
 8005ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600a:	b29b      	uxth	r3, r3
 800600c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	bc80      	pop	{r7}
 8006018:	4770      	bx	lr

0800601a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d103      	bne.n	8006034 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2280      	movs	r2, #128	; 0x80
 8006030:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006076:	b29b      	uxth	r3, r3
 8006078:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	bc80      	pop	{r7}
 8006084:	4770      	bx	lr

08006086 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
 800608e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	bc80      	pop	{r7}
 800609a:	4770      	bx	lr

0800609c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800609c:	b480      	push	{r7}
 800609e:	b08d      	sub	sp, #52	; 0x34
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	4611      	mov	r1, r2
 80060a8:	461a      	mov	r2, r3
 80060aa:	460b      	mov	r3, r1
 80060ac:	80fb      	strh	r3, [r7, #6]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060b2:	88bb      	ldrh	r3, [r7, #4]
 80060b4:	3301      	adds	r3, #1
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060c2:	88fb      	ldrh	r3, [r7, #6]
 80060c4:	005a      	lsls	r2, r3, #1
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d4:	e01e      	b.n	8006114 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	3301      	adds	r3, #1
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	3302      	adds	r3, #2
 8006100:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	3302      	adds	r3, #2
 8006106:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	3301      	adds	r3, #1
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	3b01      	subs	r3, #1
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1dd      	bne.n	80060d6 <USB_WritePMA+0x3a>
  }
}
 800611a:	bf00      	nop
 800611c:	3734      	adds	r7, #52	; 0x34
 800611e:	46bd      	mov	sp, r7
 8006120:	bc80      	pop	{r7}
 8006122:	4770      	bx	lr

08006124 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006124:	b480      	push	{r7}
 8006126:	b08b      	sub	sp, #44	; 0x2c
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4611      	mov	r1, r2
 8006130:	461a      	mov	r2, r3
 8006132:	460b      	mov	r3, r1
 8006134:	80fb      	strh	r3, [r7, #6]
 8006136:	4613      	mov	r3, r2
 8006138:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	085b      	lsrs	r3, r3, #1
 800613e:	b29b      	uxth	r3, r3
 8006140:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	005a      	lsls	r2, r3, #1
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	e01b      	b.n	8006196 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	b29b      	uxth	r3, r3
 8006164:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	3302      	adds	r3, #2
 800616a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	b2da      	uxtb	r2, r3
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	b2da      	uxtb	r2, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	3301      	adds	r3, #1
 8006188:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	3302      	adds	r3, #2
 800618e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	3b01      	subs	r3, #1
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e0      	bne.n	800615e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800619c:	88bb      	ldrh	r3, [r7, #4]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d007      	beq.n	80061b8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	701a      	strb	r2, [r3, #0]
  }
}
 80061b8:	bf00      	nop
 80061ba:	372c      	adds	r7, #44	; 0x2c
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr
	...

080061c4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80061d0:	2308      	movs	r3, #8
 80061d2:	2203      	movs	r2, #3
 80061d4:	2181      	movs	r1, #129	; 0x81
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fc99 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80061e2:	2301      	movs	r3, #1
 80061e4:	2203      	movs	r2, #3
 80061e6:	2101      	movs	r1, #1
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f001 fc90 	bl	8007b0e <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80061ee:	2010      	movs	r0, #16
 80061f0:	f001 fda2 	bl	8007d38 <USBD_static_malloc>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 80061fc:	2301      	movs	r3, #1
 80061fe:	4a0b      	ldr	r2, [pc, #44]	; (800622c <USBD_HID_Init+0x68>)
 8006200:	2101      	movs	r1, #1
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 fd74 	bl	8007cf0 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8006212:	2302      	movs	r3, #2
 8006214:	e005      	b.n	8006222 <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621c:	2200      	movs	r2, #0
 800621e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200001c4 	.word	0x200001c4

08006230 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006242:	2301      	movs	r3, #1
 8006244:	4a06      	ldr	r2, [pc, #24]	; (8006260 <USBD_HID_DataOut+0x30>)
 8006246:	2101      	movs	r1, #1
 8006248:	f7fb ffad 	bl	80021a6 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <USBD_HID_DataOut+0x30>)
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fa fe93 	bl	8000f7c <SET_LEDS_Callback>

	return USBD_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	200001c4 	.word	0x200001c4

08006264 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	460b      	mov	r3, r1
 800626e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006270:	2181      	movs	r1, #129	; 0x81
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f001 fc71 	bl	8007b5a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	2b00      	cmp	r3, #0
 8006286:	d009      	beq.n	800629c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fd5e 	bl	8007d50 <USBD_static_free>
    pdev->pClassData = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b088      	sub	sp, #32
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d045      	beq.n	8006362 <USBD_HID_Setup+0xba>
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	f040 80d3 	bne.w	8006482 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	3b02      	subs	r3, #2
 80062e2:	2b09      	cmp	r3, #9
 80062e4:	d835      	bhi.n	8006352 <USBD_HID_Setup+0xaa>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <USBD_HID_Setup+0x44>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006343 	.word	0x08006343
 80062f0:	08006323 	.word	0x08006323
 80062f4:	08006353 	.word	0x08006353
 80062f8:	08006353 	.word	0x08006353
 80062fc:	08006353 	.word	0x08006353
 8006300:	08006353 	.word	0x08006353
 8006304:	08006353 	.word	0x08006353
 8006308:	08006353 	.word	0x08006353
 800630c:	08006331 	.word	0x08006331
 8006310:	08006315 	.word	0x08006315
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	601a      	str	r2, [r3, #0]
          break;
 8006320:	e01e      	b.n	8006360 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2201      	movs	r2, #1
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f937 	bl	800759c <USBD_CtlSendData>
          break;
 800632e:	e017      	b.n	8006360 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	b29b      	uxth	r3, r3
 8006338:	b2db      	uxtb	r3, r3
 800633a:	461a      	mov	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]
          break;
 8006340:	e00e      	b.n	8006360 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3304      	adds	r3, #4
 8006346:	2201      	movs	r2, #1
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 f926 	bl	800759c <USBD_CtlSendData>
          break;
 8006350:	e006      	b.n	8006360 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f8b7 	bl	80074c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800635a:	2302      	movs	r3, #2
 800635c:	75fb      	strb	r3, [r7, #23]
          break;
 800635e:	bf00      	nop
      }
      break;
 8006360:	e096      	b.n	8006490 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b0b      	cmp	r3, #11
 8006368:	f200 8083 	bhi.w	8006472 <USBD_HID_Setup+0x1ca>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <USBD_HID_Setup+0xcc>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	080063a5 	.word	0x080063a5
 8006378:	08006473 	.word	0x08006473
 800637c:	08006473 	.word	0x08006473
 8006380:	08006473 	.word	0x08006473
 8006384:	08006473 	.word	0x08006473
 8006388:	08006473 	.word	0x08006473
 800638c:	080063cd 	.word	0x080063cd
 8006390:	08006473 	.word	0x08006473
 8006394:	08006473 	.word	0x08006473
 8006398:	08006473 	.word	0x08006473
 800639c:	08006425 	.word	0x08006425
 80063a0:	0800644d 	.word	0x0800644d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d107      	bne.n	80063be <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80063ae:	f107 030e 	add.w	r3, r7, #14
 80063b2:	2202      	movs	r2, #2
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 f8f0 	bl	800759c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063bc:	e060      	b.n	8006480 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 f881 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 80063c6:	2302      	movs	r3, #2
 80063c8:	75fb      	strb	r3, [r7, #23]
          break;
 80063ca:	e059      	b.n	8006480 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	0a1b      	lsrs	r3, r3, #8
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b22      	cmp	r3, #34	; 0x22
 80063d6:	d108      	bne.n	80063ea <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	88db      	ldrh	r3, [r3, #6]
 80063dc:	2b41      	cmp	r3, #65	; 0x41
 80063de:	bf28      	it	cs
 80063e0:	2341      	movcs	r3, #65	; 0x41
 80063e2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 80063e4:	4b2d      	ldr	r3, [pc, #180]	; (800649c <USBD_HID_Setup+0x1f4>)
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e015      	b.n	8006416 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	0a1b      	lsrs	r3, r3, #8
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b21      	cmp	r3, #33	; 0x21
 80063f4:	d108      	bne.n	8006408 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80063f6:	4b2a      	ldr	r3, [pc, #168]	; (80064a0 <USBD_HID_Setup+0x1f8>)
 80063f8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	88db      	ldrh	r3, [r3, #6]
 80063fe:	2b09      	cmp	r3, #9
 8006400:	bf28      	it	cs
 8006402:	2309      	movcs	r3, #9
 8006404:	83fb      	strh	r3, [r7, #30]
 8006406:	e006      	b.n	8006416 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 f85c 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006410:	2302      	movs	r3, #2
 8006412:	75fb      	strb	r3, [r7, #23]
            break;
 8006414:	e034      	b.n	8006480 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006416:	8bfb      	ldrh	r3, [r7, #30]
 8006418:	461a      	mov	r2, r3
 800641a:	69b9      	ldr	r1, [r7, #24]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f8bd 	bl	800759c <USBD_CtlSendData>
          break;
 8006422:	e02d      	b.n	8006480 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642a:	2b03      	cmp	r3, #3
 800642c:	d107      	bne.n	800643e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3308      	adds	r3, #8
 8006432:	2201      	movs	r2, #1
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 f8b0 	bl	800759c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800643c:	e020      	b.n	8006480 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 f841 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006446:	2302      	movs	r3, #2
 8006448:	75fb      	strb	r3, [r7, #23]
          break;
 800644a:	e019      	b.n	8006480 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006452:	2b03      	cmp	r3, #3
 8006454:	d106      	bne.n	8006464 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	885b      	ldrh	r3, [r3, #2]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	461a      	mov	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006462:	e00d      	b.n	8006480 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 f82e 	bl	80074c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800646c:	2302      	movs	r3, #2
 800646e:	75fb      	strb	r3, [r7, #23]
          break;
 8006470:	e006      	b.n	8006480 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f001 f827 	bl	80074c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800647a:	2302      	movs	r3, #2
 800647c:	75fb      	strb	r3, [r7, #23]
          break;
 800647e:	bf00      	nop
      }
      break;
 8006480:	e006      	b.n	8006490 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 f81f 	bl	80074c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	75fb      	strb	r3, [r7, #23]
      break;
 800648e:	bf00      	nop
  }

  return ret;
 8006490:	7dfb      	ldrb	r3, [r7, #23]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200000e4 	.word	0x200000e4
 80064a0:	200000cc 	.word	0x200000cc

080064a4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d10c      	bne.n	80064de <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	7b1b      	ldrb	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2201      	movs	r2, #1
 80064d0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	2181      	movs	r1, #129	; 0x81
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 fbe6 	bl	8007caa <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2229      	movs	r2, #41	; 0x29
 80064f4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80064f6:	4b03      	ldr	r3, [pc, #12]	; (8006504 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000048 	.word	0x20000048

08006508 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2229      	movs	r2, #41	; 0x29
 8006514:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000074 	.word	0x20000074

08006528 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2229      	movs	r2, #41	; 0x29
 8006534:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	; (8006544 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	200000a0 	.word	0x200000a0

08006548 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8006554:	f7fa faee 	bl	8000b34 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655e:	2200      	movs	r2, #0
 8006560:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	220a      	movs	r2, #10
 8006578:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800657a:	4b03      	ldr	r3, [pc, #12]	; (8006588 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200000d8 	.word	0x200000d8

0800658c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d101      	bne.n	80065a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80065a0:	2302      	movs	r3, #2
 80065a2:	e01a      	b.n	80065da <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	79fa      	ldrb	r2, [r7, #7]
 80065d0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f001 fa38 	bl	8007a48 <USBD_LL_Init>

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b085      	sub	sp, #20
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d006      	beq.n	8006604 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	e001      	b.n	8006608 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006604:	2302      	movs	r3, #2
 8006606:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006608:	7bfb      	ldrb	r3, [r7, #15]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fa5b 	bl	8007ad8 <USBD_LL_Start>

  return USBD_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr

08006640 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800664c:	2302      	movs	r3, #2
 800664e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	4611      	mov	r1, r2
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	4611      	mov	r1, r2
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	4798      	blx	r3

  return USBD_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 feca 	bl	8007450 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80066ca:	461a      	mov	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d00c      	beq.n	80066fa <USBD_LL_SetupStage+0x56>
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d302      	bcc.n	80066ea <USBD_LL_SetupStage+0x46>
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d010      	beq.n	800670a <USBD_LL_SetupStage+0x66>
 80066e8:	e017      	b.n	800671a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80066f0:	4619      	mov	r1, r3
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9ca 	bl	8006a8c <USBD_StdDevReq>
      break;
 80066f8:	e01a      	b.n	8006730 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa2c 	bl	8006b60 <USBD_StdItfReq>
      break;
 8006708:	e012      	b.n	8006730 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa6a 	bl	8006bec <USBD_StdEPReq>
      break;
 8006718:	e00a      	b.n	8006730 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006720:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006724:	b2db      	uxtb	r3, r3
 8006726:	4619      	mov	r1, r3
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fa35 	bl	8007b98 <USBD_LL_StallEP>
      break;
 800672e:	bf00      	nop
  }

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b086      	sub	sp, #24
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	460b      	mov	r3, r1
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d14b      	bne.n	80067e6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006754:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800675c:	2b03      	cmp	r3, #3
 800675e:	d134      	bne.n	80067ca <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	d919      	bls.n	80067a0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	1ad2      	subs	r2, r2, r3
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006782:	429a      	cmp	r2, r3
 8006784:	d203      	bcs.n	800678e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800678a:	b29b      	uxth	r3, r3
 800678c:	e002      	b.n	8006794 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006792:	b29b      	uxth	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 ff2d 	bl	80075f8 <USBD_CtlContinueRx>
 800679e:	e038      	b.n	8006812 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d105      	bne.n	80067c2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 ff2a 	bl	800761c <USBD_CtlSendStatus>
 80067c8:	e023      	b.n	8006812 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067d0:	2b05      	cmp	r3, #5
 80067d2:	d11e      	bne.n	8006812 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80067dc:	2100      	movs	r1, #0
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f001 f9da 	bl	8007b98 <USBD_LL_StallEP>
 80067e4:	e015      	b.n	8006812 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d108      	bne.n	800680e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	7afa      	ldrb	r2, [r7, #11]
 8006806:	4611      	mov	r1, r2
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	4798      	blx	r3
 800680c:	e001      	b.n	8006812 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800680e:	2302      	movs	r3, #2
 8006810:	e000      	b.n	8006814 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	460b      	mov	r3, r1
 8006826:	607a      	str	r2, [r7, #4]
 8006828:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d17f      	bne.n	8006930 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	3314      	adds	r3, #20
 8006834:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800683c:	2b02      	cmp	r3, #2
 800683e:	d15c      	bne.n	80068fa <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	429a      	cmp	r2, r3
 800684a:	d915      	bls.n	8006878 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	1ad2      	subs	r2, r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 feb5 	bl	80075d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800686a:	2300      	movs	r3, #0
 800686c:	2200      	movs	r2, #0
 800686e:	2100      	movs	r1, #0
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f001 fa3d 	bl	8007cf0 <USBD_LL_PrepareReceive>
 8006876:	e04e      	b.n	8006916 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	6912      	ldr	r2, [r2, #16]
 8006880:	fbb3 f1f2 	udiv	r1, r3, r2
 8006884:	fb02 f201 	mul.w	r2, r2, r1
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11c      	bne.n	80068c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006896:	429a      	cmp	r2, r3
 8006898:	d316      	bcc.n	80068c8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d20f      	bcs.n	80068c8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2100      	movs	r1, #0
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fe91 	bl	80075d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068ba:	2300      	movs	r3, #0
 80068bc:	2200      	movs	r2, #0
 80068be:	2100      	movs	r1, #0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f001 fa15 	bl	8007cf0 <USBD_LL_PrepareReceive>
 80068c6:	e026      	b.n	8006916 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d105      	bne.n	80068ea <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80068ea:	2180      	movs	r1, #128	; 0x80
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f001 f953 	bl	8007b98 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fea5 	bl	8007642 <USBD_CtlReceiveStatus>
 80068f8:	e00d      	b.n	8006916 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006900:	2b04      	cmp	r3, #4
 8006902:	d004      	beq.n	800690e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800690a:	2b00      	cmp	r3, #0
 800690c:	d103      	bne.n	8006916 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800690e:	2180      	movs	r1, #128	; 0x80
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f001 f941 	bl	8007b98 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800691c:	2b01      	cmp	r3, #1
 800691e:	d11d      	bne.n	800695c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f7ff fe83 	bl	800662c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800692e:	e015      	b.n	800695c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00d      	beq.n	8006958 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006942:	2b03      	cmp	r3, #3
 8006944:	d108      	bne.n	8006958 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	7afa      	ldrb	r2, [r7, #11]
 8006950:	4611      	mov	r1, r2
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	4798      	blx	r3
 8006956:	e001      	b.n	800695c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006958:	2302      	movs	r3, #2
 800695a:	e000      	b.n	800695e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	2200      	movs	r2, #0
 8006972:	2100      	movs	r1, #0
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f8ca 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2240      	movs	r2, #64	; 0x40
 8006986:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800698a:	2340      	movs	r3, #64	; 0x40
 800698c:	2200      	movs	r2, #0
 800698e:	2180      	movs	r1, #128	; 0x80
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f8bc 	bl	8007b0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2240      	movs	r2, #64	; 0x40
 80069a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6852      	ldr	r2, [r2, #4]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	4611      	mov	r1, r2
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
  }

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr

08006a06 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b083      	sub	sp, #12
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2204      	movs	r2, #4
 8006a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d105      	bne.n	8006a4c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr

08006a58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a66:	2b03      	cmp	r3, #3
 8006a68:	d10b      	bne.n	8006a82 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d004      	beq.n	8006ab0 <USBD_StdDevReq+0x24>
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d002      	beq.n	8006ab0 <USBD_StdDevReq+0x24>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <USBD_StdDevReq+0x34>
 8006aae:	e04c      	b.n	8006b4a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
      break;
 8006abe:	e049      	b.n	8006b54 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b09      	cmp	r3, #9
 8006ac6:	d83a      	bhi.n	8006b3e <USBD_StdDevReq+0xb2>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <USBD_StdDevReq+0x44>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b21 	.word	0x08006b21
 8006ad4:	08006b35 	.word	0x08006b35
 8006ad8:	08006b3f 	.word	0x08006b3f
 8006adc:	08006b2b 	.word	0x08006b2b
 8006ae0:	08006b3f 	.word	0x08006b3f
 8006ae4:	08006b03 	.word	0x08006b03
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b3f 	.word	0x08006b3f
 8006af0:	08006b17 	.word	0x08006b17
 8006af4:	08006b0d 	.word	0x08006b0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f9d4 	bl	8006ea8 <USBD_GetDescriptor>
          break;
 8006b00:	e022      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b02:	6839      	ldr	r1, [r7, #0]
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fb37 	bl	8007178 <USBD_SetAddress>
          break;
 8006b0a:	e01d      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fb74 	bl	80071fc <USBD_SetConfig>
          break;
 8006b14:	e018      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 fbfd 	bl	8007318 <USBD_GetConfig>
          break;
 8006b1e:	e013      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b20:	6839      	ldr	r1, [r7, #0]
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc2c 	bl	8007380 <USBD_GetStatus>
          break;
 8006b28:	e00e      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc5a 	bl	80073e6 <USBD_SetFeature>
          break;
 8006b32:	e009      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fc69 	bl	800740e <USBD_ClrFeature>
          break;
 8006b3c:	e004      	b.n	8006b48 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fcc1 	bl	80074c8 <USBD_CtlError>
          break;
 8006b46:	bf00      	nop
      }
      break;
 8006b48:	e004      	b.n	8006b54 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fcbb 	bl	80074c8 <USBD_CtlError>
      break;
 8006b52:	bf00      	nop
  }

  return ret;
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop

08006b60 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d003      	beq.n	8006b82 <USBD_StdItfReq+0x22>
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d001      	beq.n	8006b82 <USBD_StdItfReq+0x22>
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d12a      	bne.n	8006bd8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d81d      	bhi.n	8006bca <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	889b      	ldrh	r3, [r3, #4]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d813      	bhi.n	8006bc0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88db      	ldrh	r3, [r3, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d110      	bne.n	8006bd4 <USBD_StdItfReq+0x74>
 8006bb2:	7bfb      	ldrb	r3, [r7, #15]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10d      	bne.n	8006bd4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fd2f 	bl	800761c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006bbe:	e009      	b.n	8006bd4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fc80 	bl	80074c8 <USBD_CtlError>
          break;
 8006bc8:	e004      	b.n	8006bd4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fc7b 	bl	80074c8 <USBD_CtlError>
          break;
 8006bd2:	e000      	b.n	8006bd6 <USBD_StdItfReq+0x76>
          break;
 8006bd4:	bf00      	nop
      }
      break;
 8006bd6:	e004      	b.n	8006be2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc74 	bl	80074c8 <USBD_CtlError>
      break;
 8006be0:	bf00      	nop
  }

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	889b      	ldrh	r3, [r3, #4]
 8006bfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d004      	beq.n	8006c16 <USBD_StdEPReq+0x2a>
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d002      	beq.n	8006c16 <USBD_StdEPReq+0x2a>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <USBD_StdEPReq+0x3a>
 8006c14:	e13d      	b.n	8006e92 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      break;
 8006c24:	e13a      	b.n	8006e9c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d10a      	bne.n	8006c48 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	e12a      	b.n	8006e9e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	785b      	ldrb	r3, [r3, #1]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d03e      	beq.n	8006cce <USBD_StdEPReq+0xe2>
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d002      	beq.n	8006c5a <USBD_StdEPReq+0x6e>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d070      	beq.n	8006d3a <USBD_StdEPReq+0x14e>
 8006c58:	e115      	b.n	8006e86 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d002      	beq.n	8006c6a <USBD_StdEPReq+0x7e>
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d015      	beq.n	8006c94 <USBD_StdEPReq+0xa8>
 8006c68:	e02b      	b.n	8006cc2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c6a:	7bbb      	ldrb	r3, [r7, #14]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00c      	beq.n	8006c8a <USBD_StdEPReq+0x9e>
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d009      	beq.n	8006c8a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 ff8c 	bl	8007b98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c80:	2180      	movs	r1, #128	; 0x80
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff88 	bl	8007b98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c88:	e020      	b.n	8006ccc <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc1b 	bl	80074c8 <USBD_CtlError>
              break;
 8006c92:	e01b      	b.n	8006ccc <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	885b      	ldrh	r3, [r3, #2]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10e      	bne.n	8006cba <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <USBD_StdEPReq+0xce>
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d008      	beq.n	8006cba <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	88db      	ldrh	r3, [r3, #6]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 ff6f 	bl	8007b98 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fcae 	bl	800761c <USBD_CtlSendStatus>

              break;
 8006cc0:	e004      	b.n	8006ccc <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fbff 	bl	80074c8 <USBD_CtlError>
              break;
 8006cca:	bf00      	nop
          }
          break;
 8006ccc:	e0e0      	b.n	8006e90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d002      	beq.n	8006cde <USBD_StdEPReq+0xf2>
 8006cd8:	2b03      	cmp	r3, #3
 8006cda:	d015      	beq.n	8006d08 <USBD_StdEPReq+0x11c>
 8006cdc:	e026      	b.n	8006d2c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <USBD_StdEPReq+0x112>
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	2b80      	cmp	r3, #128	; 0x80
 8006ce8:	d009      	beq.n	8006cfe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006cea:	7bbb      	ldrb	r3, [r7, #14]
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 ff52 	bl	8007b98 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 ff4e 	bl	8007b98 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cfc:	e01c      	b.n	8006d38 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 fbe1 	bl	80074c8 <USBD_CtlError>
              break;
 8006d06:	e017      	b.n	8006d38 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	885b      	ldrh	r3, [r3, #2]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d112      	bne.n	8006d36 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d004      	beq.n	8006d24 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 ff59 	bl	8007bd6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc79 	bl	800761c <USBD_CtlSendStatus>
              }
              break;
 8006d2a:	e004      	b.n	8006d36 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fbca 	bl	80074c8 <USBD_CtlError>
              break;
 8006d34:	e000      	b.n	8006d38 <USBD_StdEPReq+0x14c>
              break;
 8006d36:	bf00      	nop
          }
          break;
 8006d38:	e0aa      	b.n	8006e90 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d002      	beq.n	8006d4a <USBD_StdEPReq+0x15e>
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d032      	beq.n	8006dae <USBD_StdEPReq+0x1c2>
 8006d48:	e097      	b.n	8006e7a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d4a:	7bbb      	ldrb	r3, [r7, #14]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <USBD_StdEPReq+0x174>
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b80      	cmp	r3, #128	; 0x80
 8006d54:	d004      	beq.n	8006d60 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fbb5 	bl	80074c8 <USBD_CtlError>
                break;
 8006d5e:	e091      	b.n	8006e84 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	da0b      	bge.n	8006d80 <USBD_StdEPReq+0x194>
 8006d68:	7bbb      	ldrb	r3, [r7, #14]
 8006d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	3310      	adds	r3, #16
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	e00b      	b.n	8006d98 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	3304      	adds	r3, #4
 8006d98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2202      	movs	r2, #2
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fbf8 	bl	800759c <USBD_CtlSendData>
              break;
 8006dac:	e06a      	b.n	8006e84 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da11      	bge.n	8006dda <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3318      	adds	r3, #24
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d117      	bne.n	8006e00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fb78 	bl	80074c8 <USBD_CtlError>
                  break;
 8006dd8:	e054      	b.n	8006e84 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dda:	7bbb      	ldrb	r3, [r7, #14]
 8006ddc:	f003 020f 	and.w	r2, r3, #15
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d104      	bne.n	8006e00 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb65 	bl	80074c8 <USBD_CtlError>
                  break;
 8006dfe:	e041      	b.n	8006e84 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	da0b      	bge.n	8006e20 <USBD_StdEPReq+0x234>
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	3310      	adds	r3, #16
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3304      	adds	r3, #4
 8006e1e:	e00b      	b.n	8006e38 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	3304      	adds	r3, #4
 8006e38:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <USBD_StdEPReq+0x25a>
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	2b80      	cmp	r3, #128	; 0x80
 8006e44:	d103      	bne.n	8006e4e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e00e      	b.n	8006e6c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fede 	bl	8007c14 <USBD_LL_IsStallEP>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	2201      	movs	r2, #1
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	e002      	b.n	8006e6c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fb92 	bl	800759c <USBD_CtlSendData>
              break;
 8006e78:	e004      	b.n	8006e84 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fb23 	bl	80074c8 <USBD_CtlError>
              break;
 8006e82:	bf00      	nop
          }
          break;
 8006e84:	e004      	b.n	8006e90 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb1d 	bl	80074c8 <USBD_CtlError>
          break;
 8006e8e:	bf00      	nop
      }
      break;
 8006e90:	e004      	b.n	8006e9c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb17 	bl	80074c8 <USBD_CtlError>
      break;
 8006e9a:	bf00      	nop
  }

  return ret;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	885b      	ldrh	r3, [r3, #2]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	2b06      	cmp	r3, #6
 8006eca:	f200 8128 	bhi.w	800711e <USBD_GetDescriptor+0x276>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <USBD_GetDescriptor+0x2c>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006ef1 	.word	0x08006ef1
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	0800711f 	.word	0x0800711f
 8006ee4:	0800711f 	.word	0x0800711f
 8006ee8:	080070bf 	.word	0x080070bf
 8006eec:	080070eb 	.word	0x080070eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7c12      	ldrb	r2, [r2, #16]
 8006efc:	f107 0108 	add.w	r1, r7, #8
 8006f00:	4610      	mov	r0, r2
 8006f02:	4798      	blx	r3
 8006f04:	60f8      	str	r0, [r7, #12]
      break;
 8006f06:	e112      	b.n	800712e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7c1b      	ldrb	r3, [r3, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10d      	bne.n	8006f2c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f107 0208 	add.w	r2, r7, #8
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4798      	blx	r3
 8006f20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3301      	adds	r3, #1
 8006f26:	2202      	movs	r2, #2
 8006f28:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f2a:	e100      	b.n	800712e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	f107 0208 	add.w	r2, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	2202      	movs	r2, #2
 8006f44:	701a      	strb	r2, [r3, #0]
      break;
 8006f46:	e0f2      	b.n	800712e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	885b      	ldrh	r3, [r3, #2]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	f200 80ac 	bhi.w	80070ac <USBD_GetDescriptor+0x204>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <USBD_GetDescriptor+0xb4>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f75 	.word	0x08006f75
 8006f60:	08006fa9 	.word	0x08006fa9
 8006f64:	08006fdd 	.word	0x08006fdd
 8006f68:	08007011 	.word	0x08007011
 8006f6c:	08007045 	.word	0x08007045
 8006f70:	08007079 	.word	0x08007079
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	f107 0108 	add.w	r1, r7, #8
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f96:	e091      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa94 	bl	80074c8 <USBD_CtlError>
            err++;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fa6:	e089      	b.n	80070bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00b      	beq.n	8006fcc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	7c12      	ldrb	r2, [r2, #16]
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fca:	e077      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa7a 	bl	80074c8 <USBD_CtlError>
            err++;
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fda:	e06f      	b.n	80070bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7c12      	ldrb	r2, [r2, #16]
 8006ff4:	f107 0108 	add.w	r1, r7, #8
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffe:	e05d      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa60 	bl	80074c8 <USBD_CtlError>
            err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
          break;
 800700e:	e055      	b.n	80070bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00b      	beq.n	8007034 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	7c12      	ldrb	r2, [r2, #16]
 8007028:	f107 0108 	add.w	r1, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007032:	e043      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fa46 	bl	80074c8 <USBD_CtlError>
            err++;
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	3301      	adds	r3, #1
 8007040:	72fb      	strb	r3, [r7, #11]
          break;
 8007042:	e03b      	b.n	80070bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7c12      	ldrb	r2, [r2, #16]
 800705c:	f107 0108 	add.w	r1, r7, #8
 8007060:	4610      	mov	r0, r2
 8007062:	4798      	blx	r3
 8007064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007066:	e029      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa2c 	bl	80074c8 <USBD_CtlError>
            err++;
 8007070:	7afb      	ldrb	r3, [r7, #11]
 8007072:	3301      	adds	r3, #1
 8007074:	72fb      	strb	r3, [r7, #11]
          break;
 8007076:	e021      	b.n	80070bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	7c12      	ldrb	r2, [r2, #16]
 8007090:	f107 0108 	add.w	r1, r7, #8
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
 8007098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709a:	e00f      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa12 	bl	80074c8 <USBD_CtlError>
            err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
          break;
 80070aa:	e007      	b.n	80070bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa0a 	bl	80074c8 <USBD_CtlError>
          err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80070ba:	e038      	b.n	800712e <USBD_GetDescriptor+0x286>
 80070bc:	e037      	b.n	800712e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7c1b      	ldrb	r3, [r3, #16]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	f107 0208 	add.w	r2, r7, #8
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070d8:	e029      	b.n	800712e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f9f3 	bl	80074c8 <USBD_CtlError>
        err++;
 80070e2:	7afb      	ldrb	r3, [r7, #11]
 80070e4:	3301      	adds	r3, #1
 80070e6:	72fb      	strb	r3, [r7, #11]
      break;
 80070e8:	e021      	b.n	800712e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	7c1b      	ldrb	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10d      	bne.n	800710e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f107 0208 	add.w	r2, r7, #8
 80070fe:	4610      	mov	r0, r2
 8007100:	4798      	blx	r3
 8007102:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	2207      	movs	r2, #7
 800710a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800710c:	e00f      	b.n	800712e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f9d9 	bl	80074c8 <USBD_CtlError>
        err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	e007      	b.n	800712e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f9d1 	bl	80074c8 <USBD_CtlError>
      err++;
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	3301      	adds	r3, #1
 800712a:	72fb      	strb	r3, [r7, #11]
      break;
 800712c:	bf00      	nop
  }

  if (err != 0U)
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d11c      	bne.n	800716e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007134:	893b      	ldrh	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d011      	beq.n	800715e <USBD_GetDescriptor+0x2b6>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	88db      	ldrh	r3, [r3, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00d      	beq.n	800715e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88da      	ldrh	r2, [r3, #6]
 8007146:	893b      	ldrh	r3, [r7, #8]
 8007148:	4293      	cmp	r3, r2
 800714a:	bf28      	it	cs
 800714c:	4613      	movcs	r3, r2
 800714e:	b29b      	uxth	r3, r3
 8007150:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007152:	893b      	ldrh	r3, [r7, #8]
 8007154:	461a      	mov	r2, r3
 8007156:	68f9      	ldr	r1, [r7, #12]
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fa1f 	bl	800759c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fa58 	bl	800761c <USBD_CtlSendStatus>
 800716c:	e000      	b.n	8007170 <USBD_GetDescriptor+0x2c8>
    return;
 800716e:	bf00      	nop
    }
  }
}
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop

08007178 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	889b      	ldrh	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d130      	bne.n	80071ec <USBD_SetAddress+0x74>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	88db      	ldrh	r3, [r3, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d12c      	bne.n	80071ec <USBD_SetAddress+0x74>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	2b7f      	cmp	r3, #127	; 0x7f
 8007198:	d828      	bhi.n	80071ec <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d104      	bne.n	80071ba <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80071b0:	6839      	ldr	r1, [r7, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f988 	bl	80074c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	e01c      	b.n	80071f4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	7bfa      	ldrb	r2, [r7, #15]
 80071be:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fd50 	bl	8007c6c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa25 	bl	800761c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071d2:	7bfb      	ldrb	r3, [r7, #15]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	e008      	b.n	80071f4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	e003      	b.n	80071f4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f96a 	bl	80074c8 <USBD_CtlError>
  }
}
 80071f4:	bf00      	nop
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	885b      	ldrh	r3, [r3, #2]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	4b41      	ldr	r3, [pc, #260]	; (8007314 <USBD_SetConfig+0x118>)
 800720e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007210:	4b40      	ldr	r3, [pc, #256]	; (8007314 <USBD_SetConfig+0x118>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d904      	bls.n	8007222 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f954 	bl	80074c8 <USBD_CtlError>
 8007220:	e075      	b.n	800730e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	2b02      	cmp	r3, #2
 800722a:	d002      	beq.n	8007232 <USBD_SetConfig+0x36>
 800722c:	2b03      	cmp	r3, #3
 800722e:	d023      	beq.n	8007278 <USBD_SetConfig+0x7c>
 8007230:	e062      	b.n	80072f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007232:	4b38      	ldr	r3, [pc, #224]	; (8007314 <USBD_SetConfig+0x118>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01a      	beq.n	8007270 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800723a:	4b36      	ldr	r3, [pc, #216]	; (8007314 <USBD_SetConfig+0x118>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2203      	movs	r2, #3
 8007248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800724c:	4b31      	ldr	r3, [pc, #196]	; (8007314 <USBD_SetConfig+0x118>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f9f4 	bl	8006640 <USBD_SetClassConfig>
 8007258:	4603      	mov	r3, r0
 800725a:	2b02      	cmp	r3, #2
 800725c:	d104      	bne.n	8007268 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f931 	bl	80074c8 <USBD_CtlError>
            return;
 8007266:	e052      	b.n	800730e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9d7 	bl	800761c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800726e:	e04e      	b.n	800730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f9d3 	bl	800761c <USBD_CtlSendStatus>
        break;
 8007276:	e04a      	b.n	800730e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007278:	4b26      	ldr	r3, [pc, #152]	; (8007314 <USBD_SetConfig+0x118>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d112      	bne.n	80072a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007288:	4b22      	ldr	r3, [pc, #136]	; (8007314 <USBD_SetConfig+0x118>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <USBD_SetConfig+0x118>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff f9f0 	bl	800667e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f9bc 	bl	800761c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80072a4:	e033      	b.n	800730e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80072a6:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <USBD_SetConfig+0x118>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	461a      	mov	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d01d      	beq.n	80072f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff f9de 	bl	800667e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <USBD_SetConfig+0x118>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <USBD_SetConfig+0x118>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f9b4 	bl	8006640 <USBD_SetClassConfig>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d104      	bne.n	80072e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f8f1 	bl	80074c8 <USBD_CtlError>
            return;
 80072e6:	e012      	b.n	800730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f997 	bl	800761c <USBD_CtlSendStatus>
        break;
 80072ee:	e00e      	b.n	800730e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f993 	bl	800761c <USBD_CtlSendStatus>
        break;
 80072f6:	e00a      	b.n	800730e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f8e4 	bl	80074c8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007300:	4b04      	ldr	r3, [pc, #16]	; (8007314 <USBD_SetConfig+0x118>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff f9b9 	bl	800667e <USBD_ClrClassConfig>
        break;
 800730c:	bf00      	nop
    }
  }
}
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	200001c5 	.word	0x200001c5

08007318 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	88db      	ldrh	r3, [r3, #6]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d004      	beq.n	8007334 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f8cb 	bl	80074c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007332:	e021      	b.n	8007378 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800733a:	2b01      	cmp	r3, #1
 800733c:	db17      	blt.n	800736e <USBD_GetConfig+0x56>
 800733e:	2b02      	cmp	r3, #2
 8007340:	dd02      	ble.n	8007348 <USBD_GetConfig+0x30>
 8007342:	2b03      	cmp	r3, #3
 8007344:	d00b      	beq.n	800735e <USBD_GetConfig+0x46>
 8007346:	e012      	b.n	800736e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3308      	adds	r3, #8
 8007352:	2201      	movs	r2, #1
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f920 	bl	800759c <USBD_CtlSendData>
        break;
 800735c:	e00c      	b.n	8007378 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	2201      	movs	r2, #1
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f918 	bl	800759c <USBD_CtlSendData>
        break;
 800736c:	e004      	b.n	8007378 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8a9 	bl	80074c8 <USBD_CtlError>
        break;
 8007376:	bf00      	nop
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007390:	3b01      	subs	r3, #1
 8007392:	2b02      	cmp	r3, #2
 8007394:	d81e      	bhi.n	80073d4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d004      	beq.n	80073a8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f891 	bl	80074c8 <USBD_CtlError>
        break;
 80073a6:	e01a      	b.n	80073de <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d005      	beq.n	80073c4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f043 0202 	orr.w	r2, r3, #2
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	330c      	adds	r3, #12
 80073c8:	2202      	movs	r2, #2
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8e5 	bl	800759c <USBD_CtlSendData>
      break;
 80073d2:	e004      	b.n	80073de <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f876 	bl	80074c8 <USBD_CtlError>
      break;
 80073dc:	bf00      	nop
  }
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b082      	sub	sp, #8
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	885b      	ldrh	r3, [r3, #2]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d106      	bne.n	8007406 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f90b 	bl	800761c <USBD_CtlSendStatus>
  }
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741e:	3b01      	subs	r3, #1
 8007420:	2b02      	cmp	r3, #2
 8007422:	d80b      	bhi.n	800743c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d10c      	bne.n	8007446 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f8f1 	bl	800761c <USBD_CtlSendStatus>
      }
      break;
 800743a:	e004      	b.n	8007446 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f842 	bl	80074c8 <USBD_CtlError>
      break;
 8007444:	e000      	b.n	8007448 <USBD_ClrFeature+0x3a>
      break;
 8007446:	bf00      	nop
  }
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781a      	ldrb	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	785a      	ldrb	r2, [r3, #1]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	3302      	adds	r3, #2
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b29a      	uxth	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	3303      	adds	r3, #3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	b29b      	uxth	r3, r3
 800747e:	4413      	add	r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	3304      	adds	r3, #4
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b29a      	uxth	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	3305      	adds	r3, #5
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	021b      	lsls	r3, r3, #8
 8007498:	b29b      	uxth	r3, r3
 800749a:	4413      	add	r3, r2
 800749c:	b29a      	uxth	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	3306      	adds	r3, #6
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	3307      	adds	r3, #7
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	021b      	lsls	r3, r3, #8
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	80da      	strh	r2, [r3, #6]

}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fb5f 	bl	8007b98 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074da:	2100      	movs	r1, #0
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fb5b 	bl	8007b98 <USBD_LL_StallEP>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d032      	beq.n	8007566 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f834 	bl	800756e <USBD_GetLen>
 8007506:	4603      	mov	r3, r0
 8007508:	3301      	adds	r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	75fa      	strb	r2, [r7, #23]
 800751a:	461a      	mov	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4413      	add	r3, r2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007526:	7dfb      	ldrb	r3, [r7, #23]
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	75fa      	strb	r2, [r7, #23]
 800752c:	461a      	mov	r2, r3
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	4413      	add	r3, r2
 8007532:	2203      	movs	r2, #3
 8007534:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007536:	e012      	b.n	800755e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	60fa      	str	r2, [r7, #12]
 800753e:	7dfa      	ldrb	r2, [r7, #23]
 8007540:	1c51      	adds	r1, r2, #1
 8007542:	75f9      	strb	r1, [r7, #23]
 8007544:	4611      	mov	r1, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	440a      	add	r2, r1
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	75fa      	strb	r2, [r7, #23]
 8007554:	461a      	mov	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	4413      	add	r3, r2
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e8      	bne.n	8007538 <USBD_GetString+0x4e>
    }
  }
}
 8007566:	bf00      	nop
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800757a:	e005      	b.n	8007588 <USBD_GetLen+0x1a>
  {
    len++;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	3301      	adds	r3, #1
 8007580:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3301      	adds	r3, #1
 8007586:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f5      	bne.n	800757c <USBD_GetLen+0xe>
  }

  return len;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	bc80      	pop	{r7}
 800759a:	4770      	bx	lr

0800759c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	4613      	mov	r3, r2
 80075a8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fb70 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	2100      	movs	r1, #0
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fb5e 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	2100      	movs	r1, #0
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f000 fb6f 	bl	8007cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2204      	movs	r2, #4
 8007628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800762c:	2300      	movs	r3, #0
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fb39 	bl	8007caa <USBD_LL_Transmit>

  return USBD_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2205      	movs	r2, #5
 800764e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007652:	2300      	movs	r3, #0
 8007654:	2200      	movs	r2, #0
 8007656:	2100      	movs	r1, #0
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fb49 	bl	8007cf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800766c:	2200      	movs	r2, #0
 800766e:	490e      	ldr	r1, [pc, #56]	; (80076a8 <MX_USB_DEVICE_Init+0x40>)
 8007670:	480e      	ldr	r0, [pc, #56]	; (80076ac <MX_USB_DEVICE_Init+0x44>)
 8007672:	f7fe ff8b 	bl	800658c <USBD_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800767c:	f7f9 fb2f 	bl	8000cde <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007680:	490b      	ldr	r1, [pc, #44]	; (80076b0 <MX_USB_DEVICE_Init+0x48>)
 8007682:	480a      	ldr	r0, [pc, #40]	; (80076ac <MX_USB_DEVICE_Init+0x44>)
 8007684:	f7fe ffad 	bl	80065e2 <USBD_RegisterClass>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800768e:	f7f9 fb26 	bl	8000cde <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007692:	4806      	ldr	r0, [pc, #24]	; (80076ac <MX_USB_DEVICE_Init+0x44>)
 8007694:	f7fe ffbe 	bl	8006614 <USBD_Start>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800769e:	f7f9 fb1e 	bl	8000cde <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000128 	.word	0x20000128
 80076ac:	200002f4 	.word	0x200002f4
 80076b0:	20000010 	.word	0x20000010

080076b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2212      	movs	r2, #18
 80076c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076c6:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	20000144 	.word	0x20000144

080076d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2204      	movs	r2, #4
 80076e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076ea:	4b03      	ldr	r3, [pc, #12]	; (80076f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000158 	.word	0x20000158

080076fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	6039      	str	r1, [r7, #0]
 8007706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	4907      	ldr	r1, [pc, #28]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
 8007712:	4808      	ldr	r0, [pc, #32]	; (8007734 <USBD_FS_ProductStrDescriptor+0x38>)
 8007714:	f7ff fee9 	bl	80074ea <USBD_GetString>
 8007718:	e004      	b.n	8007724 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	4904      	ldr	r1, [pc, #16]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
 800771e:	4805      	ldr	r0, [pc, #20]	; (8007734 <USBD_FS_ProductStrDescriptor+0x38>)
 8007720:	f7ff fee3 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200005b8 	.word	0x200005b8
 8007734:	08007e54 	.word	0x08007e54

08007738 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	6039      	str	r1, [r7, #0]
 8007742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	4904      	ldr	r1, [pc, #16]	; (8007758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007748:	4804      	ldr	r0, [pc, #16]	; (800775c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800774a:	f7ff fece 	bl	80074ea <USBD_GetString>
  return USBD_StrDesc;
 800774e:	4b02      	ldr	r3, [pc, #8]	; (8007758 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200005b8 	.word	0x200005b8
 800775c:	08007e68 	.word	0x08007e68

08007760 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	6039      	str	r1, [r7, #0]
 800776a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	221a      	movs	r2, #26
 8007770:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007772:	f000 f843 	bl	80077fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007776:	4b02      	ldr	r3, [pc, #8]	; (8007780 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007778:	4618      	mov	r0, r3
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	2000015c 	.word	0x2000015c

08007784 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007790:	79fb      	ldrb	r3, [r7, #7]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	4907      	ldr	r1, [pc, #28]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800779a:	4808      	ldr	r0, [pc, #32]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800779c:	f7ff fea5 	bl	80074ea <USBD_GetString>
 80077a0:	e004      	b.n	80077ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4904      	ldr	r1, [pc, #16]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077a6:	4805      	ldr	r0, [pc, #20]	; (80077bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80077a8:	f7ff fe9f 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80077ac:	4b02      	ldr	r3, [pc, #8]	; (80077b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	200005b8 	.word	0x200005b8
 80077bc:	08007e7c 	.word	0x08007e7c

080077c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	6039      	str	r1, [r7, #0]
 80077ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4907      	ldr	r1, [pc, #28]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077d6:	4808      	ldr	r0, [pc, #32]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077d8:	f7ff fe87 	bl	80074ea <USBD_GetString>
 80077dc:	e004      	b.n	80077e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	4904      	ldr	r1, [pc, #16]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077e2:	4805      	ldr	r0, [pc, #20]	; (80077f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077e4:	f7ff fe81 	bl	80074ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80077e8:	4b02      	ldr	r3, [pc, #8]	; (80077f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200005b8 	.word	0x200005b8
 80077f8:	08007e88 	.word	0x08007e88

080077fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <Get_SerialNum+0x44>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007808:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <Get_SerialNum+0x48>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <Get_SerialNum+0x4c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4413      	add	r3, r2
 800781a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007822:	2208      	movs	r2, #8
 8007824:	4909      	ldr	r1, [pc, #36]	; (800784c <Get_SerialNum+0x50>)
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f814 	bl	8007854 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800782c:	2204      	movs	r2, #4
 800782e:	4908      	ldr	r1, [pc, #32]	; (8007850 <Get_SerialNum+0x54>)
 8007830:	68b8      	ldr	r0, [r7, #8]
 8007832:	f000 f80f 	bl	8007854 <IntToUnicode>
  }
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	1ffff7e8 	.word	0x1ffff7e8
 8007844:	1ffff7ec 	.word	0x1ffff7ec
 8007848:	1ffff7f0 	.word	0x1ffff7f0
 800784c:	2000015e 	.word	0x2000015e
 8007850:	2000016e 	.word	0x2000016e

08007854 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007854:	b480      	push	{r7}
 8007856:	b087      	sub	sp, #28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
 800786a:	e027      	b.n	80078bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	0f1b      	lsrs	r3, r3, #28
 8007870:	2b09      	cmp	r3, #9
 8007872:	d80b      	bhi.n	800788c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	b2da      	uxtb	r2, r3
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4619      	mov	r1, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	440b      	add	r3, r1
 8007884:	3230      	adds	r2, #48	; 0x30
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]
 800788a:	e00a      	b.n	80078a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	0f1b      	lsrs	r3, r3, #28
 8007890:	b2da      	uxtb	r2, r3
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	4619      	mov	r1, r3
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	440b      	add	r3, r1
 800789c:	3237      	adds	r2, #55	; 0x37
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	3301      	adds	r3, #1
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	4413      	add	r3, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	3301      	adds	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
 80078bc:	7dfa      	ldrb	r2, [r7, #23]
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3d3      	bcc.n	800786c <IntToUnicode+0x18>
  }
}
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bc80      	pop	{r7}
 80078cc:	4770      	bx	lr
	...

080078d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a0d      	ldr	r2, [pc, #52]	; (8007914 <HAL_PCD_MspInit+0x44>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d113      	bne.n	800790a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80078e2:	4b0d      	ldr	r3, [pc, #52]	; (8007918 <HAL_PCD_MspInit+0x48>)
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	4a0c      	ldr	r2, [pc, #48]	; (8007918 <HAL_PCD_MspInit+0x48>)
 80078e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078ec:	61d3      	str	r3, [r2, #28]
 80078ee:	4b0a      	ldr	r3, [pc, #40]	; (8007918 <HAL_PCD_MspInit+0x48>)
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	2014      	movs	r0, #20
 8007900:	f7f9 ff1f 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007904:	2014      	movs	r0, #20
 8007906:	f7f9 ff38 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800790a:	bf00      	nop
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40005c00 	.word	0x40005c00
 8007918:	40021000 	.word	0x40021000

0800791c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007930:	4619      	mov	r1, r3
 8007932:	4610      	mov	r0, r2
 8007934:	f7fe feb6 	bl	80066a4 <USBD_LL_SetupStage>
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	4619      	mov	r1, r3
 800796a:	f7fe fee6 	bl	800673a <USBD_LL_DataOutStage>
}
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	460b      	mov	r3, r1
 8007980:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007988:	78fa      	ldrb	r2, [r7, #3]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	00db      	lsls	r3, r3, #3
 8007994:	440b      	add	r3, r1
 8007996:	333c      	adds	r3, #60	; 0x3c
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	4619      	mov	r1, r3
 800799e:	f7fe ff3d 	bl	800681c <USBD_LL_DataInStage>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b082      	sub	sp, #8
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff f84d 	bl	8006a58 <USBD_LL_SOF>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079ce:	2301      	movs	r3, #1
 80079d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d001      	beq.n	80079de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079da:	f7f9 f980 	bl	8000cde <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079e4:	7bfa      	ldrb	r2, [r7, #15]
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fffd 	bl	80069e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe ffb6 	bl	8006966 <USBD_LL_Reset>
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe fff8 	bl	8006a06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8007a16:	2001      	movs	r0, #1
 8007a18:	f7f9 fae2 	bl	8000fe0 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f7f9 fad7 	bl	8000fe0 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fe fff8 	bl	8006a2e <USBD_LL_Resume>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007a50:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a1d      	ldr	r2, [pc, #116]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a5c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a62:	4a1c      	ldr	r2, [pc, #112]	; (8007ad4 <USBD_LL_Init+0x8c>)
 8007a64:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a66:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a68:	2208      	movs	r2, #8
 8007a6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a6c:	4b18      	ldr	r3, [pc, #96]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a6e:	2202      	movs	r2, #2
 8007a70:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a78:	4b15      	ldr	r3, [pc, #84]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a7e:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a84:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <USBD_LL_Init+0x88>)
 8007a86:	f7fa f835 	bl	8001af4 <HAL_PCD_Init>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d001      	beq.n	8007a94 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a90:	f7f9 f925 	bl	8000cde <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a9a:	2318      	movs	r3, #24
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	f7fb fb52 	bl	8003148 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aaa:	2358      	movs	r3, #88	; 0x58
 8007aac:	2200      	movs	r2, #0
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	f7fb fb4a 	bl	8003148 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2181      	movs	r1, #129	; 0x81
 8007ac2:	f7fb fb41 	bl	8003148 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	200007b8 	.word	0x200007b8
 8007ad4:	40005c00 	.word	0x40005c00

08007ad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fa f90b 	bl	8001d0a <HAL_PCD_Start>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f93c 	bl	8007d78 <USBD_Get_USB_Status>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	70fb      	strb	r3, [r7, #3]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70bb      	strb	r3, [r7, #2]
 8007b24:	4613      	mov	r3, r2
 8007b26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b36:	78bb      	ldrb	r3, [r7, #2]
 8007b38:	883a      	ldrh	r2, [r7, #0]
 8007b3a:	78f9      	ldrb	r1, [r7, #3]
 8007b3c:	f7fa fa85 	bl	800204a <HAL_PCD_EP_Open>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f916 	bl	8007d78 <USBD_Get_USB_Status>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	460b      	mov	r3, r1
 8007b64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	4611      	mov	r1, r2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fa facc 	bl	8002116 <HAL_PCD_EP_Close>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b82:	7bfb      	ldrb	r3, [r7, #15]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f8f7 	bl	8007d78 <USBD_Get_USB_Status>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bb2:	78fa      	ldrb	r2, [r7, #3]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fa fb75 	bl	80022a6 <HAL_PCD_EP_SetStall>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc0:	7bfb      	ldrb	r3, [r7, #15]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 f8d8 	bl	8007d78 <USBD_Get_USB_Status>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	460b      	mov	r3, r1
 8007be0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fa fbb6 	bl	8002366 <HAL_PCD_EP_ClrStall>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 f8b9 	bl	8007d78 <USBD_Get_USB_Status>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	da0c      	bge.n	8007c4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	440b      	add	r3, r1
 8007c44:	3302      	adds	r3, #2
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	e00b      	b.n	8007c62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c50:	68f9      	ldr	r1, [r7, #12]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007c60:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c86:	78fa      	ldrb	r2, [r7, #3]
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fa f9b8 	bl	8002000 <HAL_PCD_SetAddress>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f86e 	bl	8007d78 <USBD_Get_USB_Status>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b086      	sub	sp, #24
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	72fb      	strb	r3, [r7, #11]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ccc:	893b      	ldrh	r3, [r7, #8]
 8007cce:	7af9      	ldrb	r1, [r7, #11]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	f7fa faa5 	bl	8002220 <HAL_PCD_EP_Transmit>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cda:	7dfb      	ldrb	r3, [r7, #23]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 f84b 	bl	8007d78 <USBD_Get_USB_Status>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	607a      	str	r2, [r7, #4]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	72fb      	strb	r3, [r7, #11]
 8007d00:	4613      	mov	r3, r2
 8007d02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d12:	893b      	ldrh	r3, [r7, #8]
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	f7fa fa45 	bl	80021a6 <HAL_PCD_EP_Receive>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d20:	7dfb      	ldrb	r3, [r7, #23]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f000 f828 	bl	8007d78 <USBD_Get_USB_Status>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <USBD_static_malloc+0x14>)
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr
 8007d4c:	200001c8 	.word	0x200001c8

08007d50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]

}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr

08007d62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d6e:	bf00      	nop
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bc80      	pop	{r7}
 8007d76:	4770      	bx	lr

08007d78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d86:	79fb      	ldrb	r3, [r7, #7]
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d817      	bhi.n	8007dbc <USBD_Get_USB_Status+0x44>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <USBD_Get_USB_Status+0x1c>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007da5 	.word	0x08007da5
 8007d98:	08007dab 	.word	0x08007dab
 8007d9c:	08007db1 	.word	0x08007db1
 8007da0:	08007db7 	.word	0x08007db7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
    break;
 8007da8:	e00b      	b.n	8007dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007daa:	2302      	movs	r3, #2
 8007dac:	73fb      	strb	r3, [r7, #15]
    break;
 8007dae:	e008      	b.n	8007dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
    break;
 8007db4:	e005      	b.n	8007dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007db6:	2302      	movs	r3, #2
 8007db8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dba:	e002      	b.n	8007dc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007dc0:	bf00      	nop
  }
  return usb_status;
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <__libc_init_array>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	2500      	movs	r5, #0
 8007dd4:	4e0c      	ldr	r6, [pc, #48]	; (8007e08 <__libc_init_array+0x38>)
 8007dd6:	4c0d      	ldr	r4, [pc, #52]	; (8007e0c <__libc_init_array+0x3c>)
 8007dd8:	1ba4      	subs	r4, r4, r6
 8007dda:	10a4      	asrs	r4, r4, #2
 8007ddc:	42a5      	cmp	r5, r4
 8007dde:	d109      	bne.n	8007df4 <__libc_init_array+0x24>
 8007de0:	f000 f822 	bl	8007e28 <_init>
 8007de4:	2500      	movs	r5, #0
 8007de6:	4e0a      	ldr	r6, [pc, #40]	; (8007e10 <__libc_init_array+0x40>)
 8007de8:	4c0a      	ldr	r4, [pc, #40]	; (8007e14 <__libc_init_array+0x44>)
 8007dea:	1ba4      	subs	r4, r4, r6
 8007dec:	10a4      	asrs	r4, r4, #2
 8007dee:	42a5      	cmp	r5, r4
 8007df0:	d105      	bne.n	8007dfe <__libc_init_array+0x2e>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007df8:	4798      	blx	r3
 8007dfa:	3501      	adds	r5, #1
 8007dfc:	e7ee      	b.n	8007ddc <__libc_init_array+0xc>
 8007dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e02:	4798      	blx	r3
 8007e04:	3501      	adds	r5, #1
 8007e06:	e7f2      	b.n	8007dee <__libc_init_array+0x1e>
 8007e08:	08007fa8 	.word	0x08007fa8
 8007e0c:	08007fa8 	.word	0x08007fa8
 8007e10:	08007fa8 	.word	0x08007fa8
 8007e14:	08007fac 	.word	0x08007fac

08007e18 <memset>:
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4402      	add	r2, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <_init>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr

08007e34 <_fini>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr
