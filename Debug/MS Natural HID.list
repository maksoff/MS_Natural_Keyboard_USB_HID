
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008050  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  080082c4  080082c4  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082c4  080082c4  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080082cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  200001a8  08008474  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000af8  08008474  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c36  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003717  00000000  00000000  00036e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b451  00000000  00000000  0003c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fb6  00000000  00000000  00057b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090122  00000000  00000000  00069abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9be1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004694  00000000  00000000  000f9c5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008144 	.word	0x08008144

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008144 	.word	0x08008144

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b50      	ldr	r3, [pc, #320]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4f      	ldr	r2, [pc, #316]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b4d      	ldr	r3, [pc, #308]	; (80002a4 <MX_GPIO_Init+0x158>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b4a      	ldr	r3, [pc, #296]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a49      	ldr	r2, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a43      	ldr	r2, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b41      	ldr	r3, [pc, #260]	; (80002a4 <MX_GPIO_Init+0x158>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001c8:	f001 fdf1 	bl	8001dae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4836      	ldr	r0, [pc, #216]	; (80002ac <MX_GPIO_Init+0x160>)
 80001d4:	f001 fdeb 	bl	8001dae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001f2:	f001 fc6b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <MX_GPIO_Init+0x15c>)
 8000208:	f001 fc60 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000210:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <MX_GPIO_Init+0x160>)
 800021e:	f001 fc55 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000222:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000234:	f001 fc4a 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0x160>)
 8000252:	f001 fc3b 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_GPIO_Init+0x168>)
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x164>)
 800026c:	f001 fc2e 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000286:	f001 fc21 	bl	8001acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2017      	movs	r0, #23
 8000290:	f001 fbe5 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000294:	2017      	movs	r0, #23
 8000296:	f001 fbfe 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	10210000 	.word	0x10210000

080002b8 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <data_low+0x44>)
 80002c6:	f001 fd72 	bl	8001dae <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80002d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <data_low+0x44>)
 80002ee:	f001 fbed 	bl	8001acc <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clock_low>:

void clock_low(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <clock_low+0x44>)
 800030e:	f001 fd4e 	bl	8001dae <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <clock_low+0x44>)
 8000336:	f001 fbc9 	bl	8001acc <HAL_GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <data_release>:

void data_release(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <data_release+0x34>)
 800036e:	f001 fbad 	bl	8001acc <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00

08000380 <clock_release>:

void clock_release(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000396:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <clock_release+0x34>)
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <clock_release+0x38>)
 80003a6:	f001 fb91 	bl	8001acc <HAL_GPIO_Init>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	10210000 	.word	0x10210000
 80003b8:	40010c00 	.word	0x40010c00

080003bc <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80003c6:	4bb5      	ldr	r3, [pc, #724]	; (800069c <matrix_scan+0x2e0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80003cc:	2106      	movs	r1, #6
 80003ce:	201f      	movs	r0, #31
 80003d0:	f000 f98c 	bl	80006ec <matrix_is_on>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <matrix_scan+0x24>
        matrix_break(PAUSE);
 80003da:	20fe      	movs	r0, #254	; 0xfe
 80003dc:	f000 f9e8 	bl	80007b0 <matrix_break>
    }

	if (code == 0)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 817c 	beq.w	80006e0 <matrix_scan+0x324>
		return;

	switch (state) {
 80003e8:	4bad      	ldr	r3, [pc, #692]	; (80006a0 <matrix_scan+0x2e4>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b0d      	cmp	r3, #13
 80003ee:	f200 8172 	bhi.w	80006d6 <matrix_scan+0x31a>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <matrix_scan+0x3c>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000431 	.word	0x08000431
 80003fc:	0800052d 	.word	0x0800052d
 8000400:	080004b1 	.word	0x080004b1
 8000404:	0800057d 	.word	0x0800057d
 8000408:	080005e1 	.word	0x080005e1
 800040c:	080005f9 	.word	0x080005f9
 8000410:	08000611 	.word	0x08000611
 8000414:	08000629 	.word	0x08000629
 8000418:	08000641 	.word	0x08000641
 800041c:	08000659 	.word	0x08000659
 8000420:	08000671 	.word	0x08000671
 8000424:	0800068f 	.word	0x0800068f
 8000428:	080006ad 	.word	0x080006ad
 800042c:	080006c3 	.word	0x080006c3
		case INIT:
			switch (code) {
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	2b84      	cmp	r3, #132	; 0x84
 8000434:	d01f      	beq.n	8000476 <matrix_scan+0xba>
 8000436:	2b84      	cmp	r3, #132	; 0x84
 8000438:	dc04      	bgt.n	8000444 <matrix_scan+0x88>
 800043a:	2b00      	cmp	r3, #0
 800043c:	d022      	beq.n	8000484 <matrix_scan+0xc8>
 800043e:	2b83      	cmp	r3, #131	; 0x83
 8000440:	d012      	beq.n	8000468 <matrix_scan+0xac>
 8000442:	e025      	b.n	8000490 <matrix_scan+0xd4>
 8000444:	2be1      	cmp	r3, #225	; 0xe1
 8000446:	d00b      	beq.n	8000460 <matrix_scan+0xa4>
 8000448:	2bf0      	cmp	r3, #240	; 0xf0
 800044a:	d005      	beq.n	8000458 <matrix_scan+0x9c>
 800044c:	2be0      	cmp	r3, #224	; 0xe0
 800044e:	d11f      	bne.n	8000490 <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 8000450:	4b93      	ldr	r3, [pc, #588]	; (80006a0 <matrix_scan+0x2e4>)
 8000452:	2202      	movs	r2, #2
 8000454:	701a      	strb	r2, [r3, #0]
					break;
 8000456:	e02a      	b.n	80004ae <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000458:	4b91      	ldr	r3, [pc, #580]	; (80006a0 <matrix_scan+0x2e4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
					break;
 800045e:	e026      	b.n	80004ae <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 8000460:	4b8f      	ldr	r3, [pc, #572]	; (80006a0 <matrix_scan+0x2e4>)
 8000462:	2204      	movs	r2, #4
 8000464:	701a      	strb	r2, [r3, #0]
					break;
 8000466:	e022      	b.n	80004ae <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000468:	2083      	movs	r0, #131	; 0x83
 800046a:	f000 f95b 	bl	8000724 <matrix_make>
					state = INIT;
 800046e:	4b8c      	ldr	r3, [pc, #560]	; (80006a0 <matrix_scan+0x2e4>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
					break;
 8000474:	e01b      	b.n	80004ae <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000476:	20fc      	movs	r0, #252	; 0xfc
 8000478:	f000 f954 	bl	8000724 <matrix_make>
					state = INIT;
 800047c:	4b88      	ldr	r3, [pc, #544]	; (80006a0 <matrix_scan+0x2e4>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
					break;
 8000482:	e014      	b.n	80004ae <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000484:	f000 f9dc 	bl	8000840 <matrix_clear>
					state = INIT;
 8000488:	4b85      	ldr	r3, [pc, #532]	; (80006a0 <matrix_scan+0x2e4>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
					break;
 800048e:	e00e      	b.n	80004ae <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db04      	blt.n	80004a2 <matrix_scan+0xe6>
						matrix_make(code);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f942 	bl	8000724 <matrix_make>
 80004a0:	e001      	b.n	80004a6 <matrix_scan+0xea>
					} else {
						matrix_clear();
 80004a2:	f000 f9cd 	bl	8000840 <matrix_clear>
					}
					state = INIT;
 80004a6:	4b7e      	ldr	r3, [pc, #504]	; (80006a0 <matrix_scan+0x2e4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004ac:	e116      	b.n	80006dc <matrix_scan+0x320>
 80004ae:	e115      	b.n	80006dc <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b59      	cmp	r3, #89	; 0x59
 80004b4:	d00d      	beq.n	80004d2 <matrix_scan+0x116>
 80004b6:	2b59      	cmp	r3, #89	; 0x59
 80004b8:	dc04      	bgt.n	80004c4 <matrix_scan+0x108>
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d01c      	beq.n	80004f8 <matrix_scan+0x13c>
 80004be:	2b12      	cmp	r3, #18
 80004c0:	d007      	beq.n	80004d2 <matrix_scan+0x116>
 80004c2:	e020      	b.n	8000506 <matrix_scan+0x14a>
 80004c4:	2b83      	cmp	r3, #131	; 0x83
 80004c6:	d010      	beq.n	80004ea <matrix_scan+0x12e>
 80004c8:	2bf0      	cmp	r3, #240	; 0xf0
 80004ca:	d00a      	beq.n	80004e2 <matrix_scan+0x126>
 80004cc:	2b7e      	cmp	r3, #126	; 0x7e
 80004ce:	d004      	beq.n	80004da <matrix_scan+0x11e>
 80004d0:	e019      	b.n	8000506 <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80004d2:	4b73      	ldr	r3, [pc, #460]	; (80006a0 <matrix_scan+0x2e4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
					break;
 80004d8:	e027      	b.n	800052a <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80004da:	4b71      	ldr	r3, [pc, #452]	; (80006a0 <matrix_scan+0x2e4>)
 80004dc:	220b      	movs	r2, #11
 80004de:	701a      	strb	r2, [r3, #0]
					break;
 80004e0:	e023      	b.n	800052a <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 80004e2:	4b6f      	ldr	r3, [pc, #444]	; (80006a0 <matrix_scan+0x2e4>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	701a      	strb	r2, [r3, #0]
					break;
 80004e8:	e01f      	b.n	800052a <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 80004ea:	2083      	movs	r0, #131	; 0x83
 80004ec:	f000 f91a 	bl	8000724 <matrix_make>
					state = INIT;
 80004f0:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <matrix_scan+0x2e4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
					break;
 80004f6:	e018      	b.n	800052a <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f913 	bl	8000724 <matrix_make>
					state = INIT;
 80004fe:	4b68      	ldr	r3, [pc, #416]	; (80006a0 <matrix_scan+0x2e4>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
					break;
 8000504:	e011      	b.n	800052a <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	db07      	blt.n	800051e <matrix_scan+0x162>
						matrix_make(code|0x80);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f904 	bl	8000724 <matrix_make>
 800051c:	e001      	b.n	8000522 <matrix_scan+0x166>
					} else {
						matrix_clear();
 800051e:	f000 f98f 	bl	8000840 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000522:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <matrix_scan+0x2e4>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000528:	e0d8      	b.n	80006dc <matrix_scan+0x320>
 800052a:	e0d7      	b.n	80006dc <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b84      	cmp	r3, #132	; 0x84
 8000530:	d00a      	beq.n	8000548 <matrix_scan+0x18c>
 8000532:	2bf0      	cmp	r3, #240	; 0xf0
 8000534:	d00f      	beq.n	8000556 <matrix_scan+0x19a>
 8000536:	2b83      	cmp	r3, #131	; 0x83
 8000538:	d110      	bne.n	800055c <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 800053a:	2083      	movs	r0, #131	; 0x83
 800053c:	f000 f938 	bl	80007b0 <matrix_break>
					state = INIT;
 8000540:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <matrix_scan+0x2e4>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
					break;
 8000546:	e018      	b.n	800057a <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000548:	20fc      	movs	r0, #252	; 0xfc
 800054a:	f000 f931 	bl	80007b0 <matrix_break>
					state = INIT;
 800054e:	4b54      	ldr	r3, [pc, #336]	; (80006a0 <matrix_scan+0x2e4>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
					break;
 8000554:	e011      	b.n	800057a <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000556:	f000 f973 	bl	8000840 <matrix_clear>
					//clear_keyboard();
					break;
 800055a:	e00e      	b.n	800057a <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	db04      	blt.n	800056e <matrix_scan+0x1b2>
					matrix_break(code);
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f922 	bl	80007b0 <matrix_break>
 800056c:	e001      	b.n	8000572 <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 800056e:	f000 f967 	bl	8000840 <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <matrix_scan+0x2e4>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000578:	e0b0      	b.n	80006dc <matrix_scan+0x320>
 800057a:	e0af      	b.n	80006dc <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d009      	beq.n	8000596 <matrix_scan+0x1da>
 8000582:	2b12      	cmp	r3, #18
 8000584:	dc02      	bgt.n	800058c <matrix_scan+0x1d0>
 8000586:	2b03      	cmp	r3, #3
 8000588:	d010      	beq.n	80005ac <matrix_scan+0x1f0>
 800058a:	e016      	b.n	80005ba <matrix_scan+0x1fe>
 800058c:	2b59      	cmp	r3, #89	; 0x59
 800058e:	d002      	beq.n	8000596 <matrix_scan+0x1da>
 8000590:	2b83      	cmp	r3, #131	; 0x83
 8000592:	d004      	beq.n	800059e <matrix_scan+0x1e2>
 8000594:	e011      	b.n	80005ba <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <matrix_scan+0x2e4>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
					break;
 800059c:	e01f      	b.n	80005de <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 800059e:	2083      	movs	r0, #131	; 0x83
 80005a0:	f000 f906 	bl	80007b0 <matrix_break>
					state = INIT;
 80005a4:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <matrix_scan+0x2e4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
					break;
 80005aa:	e018      	b.n	80005de <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f8ff 	bl	80007b0 <matrix_break>
					state = INIT;
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <matrix_scan+0x2e4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
					break;
 80005b8:	e011      	b.n	80005de <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db07      	blt.n	80005d2 <matrix_scan+0x216>
						matrix_break(code|0x80);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8f0 	bl	80007b0 <matrix_break>
 80005d0:	e001      	b.n	80005d6 <matrix_scan+0x21a>
					} else {
						matrix_clear();
 80005d2:	f000 f935 	bl	8000840 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <matrix_scan+0x2e4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005dc:	e07e      	b.n	80006dc <matrix_scan+0x320>
 80005de:	e07d      	b.n	80006dc <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b14      	cmp	r3, #20
 80005e4:	d104      	bne.n	80005f0 <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <matrix_scan+0x2e4>)
 80005e8:	2205      	movs	r2, #5
 80005ea:	701a      	strb	r2, [r3, #0]
					break;
 80005ec:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005ee:	e075      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <matrix_scan+0x2e4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
			break;
 80005f6:	e071      	b.n	80006dc <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b77      	cmp	r3, #119	; 0x77
 80005fc:	d104      	bne.n	8000608 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <matrix_scan+0x2e4>)
 8000600:	2206      	movs	r2, #6
 8000602:	701a      	strb	r2, [r3, #0]
					break;
 8000604:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000606:	e069      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <matrix_scan+0x2e4>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
			break;
 800060e:	e065      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2be1      	cmp	r3, #225	; 0xe1
 8000614:	d104      	bne.n	8000620 <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <matrix_scan+0x2e4>)
 8000618:	2207      	movs	r2, #7
 800061a:	701a      	strb	r2, [r3, #0]
					break;
 800061c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800061e:	e05d      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <matrix_scan+0x2e4>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			break;
 8000626:	e059      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2bf0      	cmp	r3, #240	; 0xf0
 800062c:	d104      	bne.n	8000638 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <matrix_scan+0x2e4>)
 8000630:	2208      	movs	r2, #8
 8000632:	701a      	strb	r2, [r3, #0]
					break;
 8000634:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000636:	e051      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <matrix_scan+0x2e4>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e04d      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b14      	cmp	r3, #20
 8000644:	d104      	bne.n	8000650 <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <matrix_scan+0x2e4>)
 8000648:	2209      	movs	r2, #9
 800064a:	701a      	strb	r2, [r3, #0]
					break;
 800064c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800064e:	e045      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <matrix_scan+0x2e4>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
			break;
 8000656:	e041      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2bf0      	cmp	r3, #240	; 0xf0
 800065c:	d104      	bne.n	8000668 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <matrix_scan+0x2e4>)
 8000660:	220a      	movs	r2, #10
 8000662:	701a      	strb	r2, [r3, #0]
					break;
 8000664:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000666:	e039      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <matrix_scan+0x2e4>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			break;
 800066e:	e035      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b77      	cmp	r3, #119	; 0x77
 8000674:	d107      	bne.n	8000686 <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 8000676:	20fe      	movs	r0, #254	; 0xfe
 8000678:	f000 f854 	bl	8000724 <matrix_make>
					state = INIT;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <matrix_scan+0x2e4>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
					break;
 8000682:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000684:	e02a      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <matrix_scan+0x2e4>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			break;
 800068c:	e026      	b.n	80006dc <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2be0      	cmp	r3, #224	; 0xe0
 8000692:	d107      	bne.n	80006a4 <matrix_scan+0x2e8>
				state = E0_7E_E0;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <matrix_scan+0x2e4>)
 8000696:	220c      	movs	r2, #12
 8000698:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 800069a:	e01f      	b.n	80006dc <matrix_scan+0x320>
 800069c:	200001e4 	.word	0x200001e4
 80006a0:	200001e5 	.word	0x200001e5
				state = INIT;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <matrix_scan+0x32c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e017      	b.n	80006dc <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2bf0      	cmp	r3, #240	; 0xf0
 80006b0:	d103      	bne.n	80006ba <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <matrix_scan+0x32c>)
 80006b4:	220d      	movs	r2, #13
 80006b6:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80006b8:	e010      	b.n	80006dc <matrix_scan+0x320>
				state = INIT;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <matrix_scan+0x32c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
			break;
 80006c0:	e00c      	b.n	80006dc <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b7e      	cmp	r3, #126	; 0x7e
 80006c6:	d102      	bne.n	80006ce <matrix_scan+0x312>
				matrix_make(PAUSE);
 80006c8:	20fe      	movs	r0, #254	; 0xfe
 80006ca:	f000 f82b 	bl	8000724 <matrix_make>
			state = INIT;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <matrix_scan+0x32c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
			break;
 80006d4:	e002      	b.n	80006dc <matrix_scan+0x320>
		default:
			state = INIT;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <matrix_scan+0x32c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80006dc:	bf00      	nop
 80006de:	e000      	b.n	80006e2 <matrix_scan+0x326>
		return;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001e5 	.word	0x200001e5

080006ec <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <matrix_is_on+0x34>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4013      	ands	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200001c4 	.word	0x200001c4

08000724 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff ffd4 	bl	80006ec <matrix_is_on>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d12a      	bne.n	80007a0 <matrix_make+0x7c>
	    matrix[ROW(code)] |= 1<<COL(code);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <matrix_make+0x84>)
 8000754:	5c9b      	ldrb	r3, [r3, r2]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b259      	sxtb	r1, r3
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	b2c9      	uxtb	r1, r1
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <matrix_make+0x84>)
 8000776:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <matrix_make+0x88>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f000 f9a6 	bl	8000ae0 <keymap_key_to_keycode>
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
		register_code(code);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f9b6 	bl	8000b0c <register_code>
    }

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001c4 	.word	0x200001c4
 80007ac:	200001e4 	.word	0x200001e4

080007b0 <matrix_break>:

void matrix_break(uint8_t code)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	4610      	mov	r0, r2
 80007cc:	f7ff ff8e 	bl	80006ec <matrix_is_on>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d02c      	beq.n	8000830 <matrix_break+0x80>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <matrix_break+0x88>)
 80007e0:	5c9b      	ldrb	r3, [r3, r2]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	4013      	ands	r3, r2
 80007f8:	b259      	sxtb	r1, r3
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	b2c9      	uxtb	r1, r1
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <matrix_break+0x88>)
 8000806:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <matrix_break+0x8c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f000 f95e 	bl	8000ae0 <keymap_key_to_keycode>
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
		unregister_code(code);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fa40 	bl	8000cb0 <unregister_code>
    }
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001c4 	.word	0x200001c4
 800083c:	200001e4 	.word	0x200001e4

08000840 <matrix_clear>:

void matrix_clear(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	e006      	b.n	800085a <matrix_clear+0x1a>
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <matrix_clear+0x2c>)
 8000850:	2100      	movs	r1, #0
 8000852:	54d1      	strb	r1, [r2, r3]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3301      	adds	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	d9f5      	bls.n	800084c <matrix_clear+0xc>
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200001c4 	.word	0x200001c4

08000870 <is_prog_in_progress>:

static uint8_t programming_in_progress = 0;

static uint32_t key_timer = 0;

uint8_t is_prog_in_progress(void) { return programming_in_progress; }
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <is_prog_in_progress+0x10>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	200001e6 	.word	0x200001e6

08000884 <is_prog_long_pressed>:
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
 8000888:	f000 ffe6 	bl	8001858 <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <is_prog_long_pressed+0x24>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000898:	4293      	cmp	r3, r2
 800089a:	bf8c      	ite	hi
 800089c:	2301      	movhi	r3, #1
 800089e:	2300      	movls	r3, #0
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200001e8 	.word	0x200001e8

080008ac <prog_pressed>:

void prog_pressed(uint8_t code)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	key_timer = HAL_GetTick();
 80008b6:	f000 ffcf 	bl	8001858 <HAL_GetTick>
 80008ba:	4602      	mov	r2, r0
 80008bc:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <prog_pressed+0x1c>)
 80008be:	601a      	str	r2, [r3, #0]
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001e8 	.word	0x200001e8

080008cc <prog_released>:

void prog_released(uint8_t code)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	if (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))
 80008d6:	f000 ffbf 	bl	8001858 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <prog_released+0x3c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d903      	bls.n	80008f2 <prog_released+0x26>
	{
		// key presed long, start programming
		programming_in_progress = 1;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <prog_released+0x40>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
		else
		{
			// TODO play saved sequence
		}
	}
}
 80008f0:	e006      	b.n	8000900 <prog_released+0x34>
		if (programming_in_progress)
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <prog_released+0x40>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <prog_released+0x34>
			programming_in_progress = 0;
 80008fa:	4b04      	ldr	r3, [pc, #16]	; (800090c <prog_released+0x40>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200001e8 	.word	0x200001e8
 800090c:	200001e6 	.word	0x200001e6

08000910 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

static void send_system(uint16_t data)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <send_system+0x4c>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	88fa      	ldrh	r2, [r7, #6]
 8000920:	429a      	cmp	r2, r3
 8000922:	d017      	beq.n	8000954 <send_system+0x44>
	last_data = data;
 8000924:	4a0d      	ldr	r2, [pc, #52]	; (800095c <send_system+0x4c>)
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 800092a:	2302      	movs	r3, #2
 800092c:	733b      	strb	r3, [r7, #12]
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 8000934:	bf00      	nop
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <send_system+0x50>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0fb      	beq.n	8000936 <send_system+0x26>
	ready_to_send = 0;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <send_system+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2203      	movs	r2, #3
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <send_system+0x54>)
 800094e:	f005 ff37 	bl	80067c0 <USBD_HID_SendReport>
 8000952:	e000      	b.n	8000956 <send_system+0x46>
	if (data == last_data) return;
 8000954:	bf00      	nop
}
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200001f0 	.word	0x200001f0
 8000960:	20000000 	.word	0x20000000
 8000964:	20000348 	.word	0x20000348

08000968 <send_consumer>:

static void send_consumer(uint16_t data)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <send_consumer+0x4c>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	88fa      	ldrh	r2, [r7, #6]
 8000978:	429a      	cmp	r2, r3
 800097a:	d017      	beq.n	80009ac <send_consumer+0x44>
	last_data = data;
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <send_consumer+0x4c>)
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000982:	2303      	movs	r3, #3
 8000984:	733b      	strb	r3, [r7, #12]
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 800098c:	bf00      	nop
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <send_consumer+0x50>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0fb      	beq.n	800098e <send_consumer+0x26>
	ready_to_send = 0;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <send_consumer+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2203      	movs	r2, #3
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <send_consumer+0x54>)
 80009a6:	f005 ff0b 	bl	80067c0 <USBD_HID_SendReport>
 80009aa:	e000      	b.n	80009ae <send_consumer+0x46>
	if (data == last_data) return;
 80009ac:	bf00      	nop
}
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001f2 	.word	0x200001f2
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000348 	.word	0x20000348

080009c0 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <add_mods+0x24>)
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <add_mods+0x24>)
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	200001ec 	.word	0x200001ec

080009e8 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	b25a      	sxtb	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <del_mods+0x2c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	b25b      	sxtb	r3, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <del_mods+0x2c>)
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	200001ec 	.word	0x200001ec

08000a18 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000a26:	23ff      	movs	r3, #255	; 0xff
 8000a28:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000a2a:	e01b      	b.n	8000a64 <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 8000a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <add_key_byte+0x80>)
 8000a32:	4413      	add	r3, r2
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	79fa      	ldrb	r2, [r7, #7]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d018      	beq.n	8000a6e <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 8000a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d108      	bne.n	8000a58 <add_key_byte+0x40>
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <add_key_byte+0x80>)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	78db      	ldrb	r3, [r3, #3]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <add_key_byte+0x40>
            empty = i;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	3301      	adds	r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a68:	2b05      	cmp	r3, #5
 8000a6a:	dddf      	ble.n	8000a2c <add_key_byte+0x14>
 8000a6c:	e000      	b.n	8000a70 <add_key_byte+0x58>
            break;
 8000a6e:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 8000a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d10a      	bne.n	8000a8e <add_key_byte+0x76>
        if (empty != -1) {
 8000a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 8000a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <add_key_byte+0x80>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	79fa      	ldrb	r2, [r7, #7]
 8000a8c:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	2000021c 	.word	0x2000021c

08000a9c <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73fb      	strb	r3, [r7, #15]
 8000aaa:	e00e      	b.n	8000aca <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <del_key_byte+0x40>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	78db      	ldrb	r3, [r3, #3]
 8000ab4:	79fa      	ldrb	r2, [r7, #7]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d104      	bne.n	8000ac4 <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <del_key_byte+0x40>)
 8000abe:	4413      	add	r3, r2
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	d9ed      	bls.n	8000aac <del_key_byte+0x10>
        }
    }
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000021c 	.word	0x2000021c

08000ae0 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	71fb      	strb	r3, [r7, #7]
 8000aec:	4613      	mov	r3, r2
 8000aee:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8000af0:	79fa      	ldrb	r2, [r7, #7]
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <keymap_key_to_keycode+0x28>)
 8000af6:	00d2      	lsls	r2, r2, #3
 8000af8:	440a      	add	r2, r1
 8000afa:	4413      	add	r3, r2
 8000afc:	781b      	ldrb	r3, [r3, #0]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	080081b4 	.word	0x080081b4

08000b0c <register_code>:


void register_code(uint8_t code)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f000 80c5 	beq.w	8000ca8 <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2bf0      	cmp	r3, #240	; 0xf0
 8000b22:	d906      	bls.n	8000b32 <register_code+0x26>
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2bf4      	cmp	r3, #244	; 0xf4
 8000b28:	d803      	bhi.n	8000b32 <register_code+0x26>
	{
    	prog_pressed(code);
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff febd 	bl	80008ac <prog_pressed>
	}

    if (code == KC_LOGOFF)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2bf0      	cmp	r3, #240	; 0xf0
 8000b36:	d108      	bne.n	8000b4a <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 8000b38:	2008      	movs	r0, #8
 8000b3a:	f7ff ff41 	bl	80009c0 <add_mods>
    	add_key_byte(KC_L);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f7ff ff6a 	bl	8000a18 <add_key_byte>
    	send_keyboard_report();
 8000b44:	f000 f9bc 	bl	8000ec0 <send_keyboard_report>
 8000b48:	e0af      	b.n	8000caa <register_code+0x19e>
    }
    else if IS_KEY(code)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d909      	bls.n	8000b64 <register_code+0x58>
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2ba4      	cmp	r3, #164	; 0xa4
 8000b54:	d806      	bhi.n	8000b64 <register_code+0x58>
    {
	    add_key_byte(code);
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5d 	bl	8000a18 <add_key_byte>
	    send_keyboard_report();
 8000b5e:	f000 f9af 	bl	8000ec0 <send_keyboard_report>
 8000b62:	e0a2      	b.n	8000caa <register_code+0x19e>
    }
    else if IS_MOD(code) {
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	2bdf      	cmp	r3, #223	; 0xdf
 8000b68:	d90f      	bls.n	8000b8a <register_code+0x7e>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2be7      	cmp	r3, #231	; 0xe7
 8000b6e:	d80c      	bhi.n	8000b8a <register_code+0x7e>
        add_mods(MOD_BIT(code));
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	2201      	movs	r2, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff1e 	bl	80009c0 <add_mods>
        send_keyboard_report();
 8000b84:	f000 f99c 	bl	8000ec0 <send_keyboard_report>
 8000b88:	e08f      	b.n	8000caa <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2ba4      	cmp	r3, #164	; 0xa4
 8000b8e:	d916      	bls.n	8000bbe <register_code+0xb2>
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2ba7      	cmp	r3, #167	; 0xa7
 8000b94:	d813      	bhi.n	8000bbe <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2ba5      	cmp	r3, #165	; 0xa5
 8000b9a:	d00b      	beq.n	8000bb4 <register_code+0xa8>
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2ba6      	cmp	r3, #166	; 0xa6
 8000ba0:	d006      	beq.n	8000bb0 <register_code+0xa4>
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2ba7      	cmp	r3, #167	; 0xa7
 8000ba6:	d101      	bne.n	8000bac <register_code+0xa0>
 8000ba8:	2383      	movs	r3, #131	; 0x83
 8000baa:	e004      	b.n	8000bb6 <register_code+0xaa>
 8000bac:	2300      	movs	r3, #0
 8000bae:	e002      	b.n	8000bb6 <register_code+0xaa>
 8000bb0:	2382      	movs	r3, #130	; 0x82
 8000bb2:	e000      	b.n	8000bb6 <register_code+0xaa>
 8000bb4:	2381      	movs	r3, #129	; 0x81
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff feaa 	bl	8000910 <send_system>
 8000bbc:	e075      	b.n	8000caa <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2ba7      	cmp	r3, #167	; 0xa7
 8000bc2:	d972      	bls.n	8000caa <register_code+0x19e>
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2bba      	cmp	r3, #186	; 0xba
 8000bc8:	d86f      	bhi.n	8000caa <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2ba8      	cmp	r3, #168	; 0xa8
 8000bce:	d066      	beq.n	8000c9e <register_code+0x192>
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2ba9      	cmp	r3, #169	; 0xa9
 8000bd4:	d061      	beq.n	8000c9a <register_code+0x18e>
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2baa      	cmp	r3, #170	; 0xaa
 8000bda:	d05c      	beq.n	8000c96 <register_code+0x18a>
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2bab      	cmp	r3, #171	; 0xab
 8000be0:	d057      	beq.n	8000c92 <register_code+0x186>
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2bac      	cmp	r3, #172	; 0xac
 8000be6:	d052      	beq.n	8000c8e <register_code+0x182>
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2bad      	cmp	r3, #173	; 0xad
 8000bec:	d04d      	beq.n	8000c8a <register_code+0x17e>
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2bb0      	cmp	r3, #176	; 0xb0
 8000bf2:	d048      	beq.n	8000c86 <register_code+0x17a>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2bae      	cmp	r3, #174	; 0xae
 8000bf8:	d043      	beq.n	8000c82 <register_code+0x176>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2baf      	cmp	r3, #175	; 0xaf
 8000bfe:	d03d      	beq.n	8000c7c <register_code+0x170>
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2bb1      	cmp	r3, #177	; 0xb1
 8000c04:	d037      	beq.n	8000c76 <register_code+0x16a>
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2bb2      	cmp	r3, #178	; 0xb2
 8000c0a:	d031      	beq.n	8000c70 <register_code+0x164>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2bb3      	cmp	r3, #179	; 0xb3
 8000c10:	d02b      	beq.n	8000c6a <register_code+0x15e>
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2bb4      	cmp	r3, #180	; 0xb4
 8000c16:	d025      	beq.n	8000c64 <register_code+0x158>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2bb5      	cmp	r3, #181	; 0xb5
 8000c1c:	d01f      	beq.n	8000c5e <register_code+0x152>
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2bb6      	cmp	r3, #182	; 0xb6
 8000c22:	d019      	beq.n	8000c58 <register_code+0x14c>
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	2bb7      	cmp	r3, #183	; 0xb7
 8000c28:	d013      	beq.n	8000c52 <register_code+0x146>
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2bb8      	cmp	r3, #184	; 0xb8
 8000c2e:	d00d      	beq.n	8000c4c <register_code+0x140>
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2bb9      	cmp	r3, #185	; 0xb9
 8000c34:	d007      	beq.n	8000c46 <register_code+0x13a>
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2bba      	cmp	r3, #186	; 0xba
 8000c3a:	d102      	bne.n	8000c42 <register_code+0x136>
 8000c3c:	f240 232a 	movw	r3, #554	; 0x22a
 8000c40:	e02e      	b.n	8000ca0 <register_code+0x194>
 8000c42:	2300      	movs	r3, #0
 8000c44:	e02c      	b.n	8000ca0 <register_code+0x194>
 8000c46:	f240 2327 	movw	r3, #551	; 0x227
 8000c4a:	e029      	b.n	8000ca0 <register_code+0x194>
 8000c4c:	f240 2326 	movw	r3, #550	; 0x226
 8000c50:	e026      	b.n	8000ca0 <register_code+0x194>
 8000c52:	f240 2325 	movw	r3, #549	; 0x225
 8000c56:	e023      	b.n	8000ca0 <register_code+0x194>
 8000c58:	f44f 7309 	mov.w	r3, #548	; 0x224
 8000c5c:	e020      	b.n	8000ca0 <register_code+0x194>
 8000c5e:	f240 2323 	movw	r3, #547	; 0x223
 8000c62:	e01d      	b.n	8000ca0 <register_code+0x194>
 8000c64:	f240 2321 	movw	r3, #545	; 0x221
 8000c68:	e01a      	b.n	8000ca0 <register_code+0x194>
 8000c6a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c6e:	e017      	b.n	8000ca0 <register_code+0x194>
 8000c70:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8000c74:	e014      	b.n	8000ca0 <register_code+0x194>
 8000c76:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8000c7a:	e011      	b.n	8000ca0 <register_code+0x194>
 8000c7c:	f240 1383 	movw	r3, #387	; 0x183
 8000c80:	e00e      	b.n	8000ca0 <register_code+0x194>
 8000c82:	23cd      	movs	r3, #205	; 0xcd
 8000c84:	e00c      	b.n	8000ca0 <register_code+0x194>
 8000c86:	23cc      	movs	r3, #204	; 0xcc
 8000c88:	e00a      	b.n	8000ca0 <register_code+0x194>
 8000c8a:	23b7      	movs	r3, #183	; 0xb7
 8000c8c:	e008      	b.n	8000ca0 <register_code+0x194>
 8000c8e:	23b6      	movs	r3, #182	; 0xb6
 8000c90:	e006      	b.n	8000ca0 <register_code+0x194>
 8000c92:	23b5      	movs	r3, #181	; 0xb5
 8000c94:	e004      	b.n	8000ca0 <register_code+0x194>
 8000c96:	23ea      	movs	r3, #234	; 0xea
 8000c98:	e002      	b.n	8000ca0 <register_code+0x194>
 8000c9a:	23e9      	movs	r3, #233	; 0xe9
 8000c9c:	e000      	b.n	8000ca0 <register_code+0x194>
 8000c9e:	23e2      	movs	r3, #226	; 0xe2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe61 	bl	8000968 <send_consumer>
 8000ca6:	e000      	b.n	8000caa <register_code+0x19e>
        return;
 8000ca8:	bf00      	nop
    }
}
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <unregister_code>:

void unregister_code(uint8_t code)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d049      	beq.n	8000d54 <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	2bf0      	cmp	r3, #240	; 0xf0
 8000cc4:	d906      	bls.n	8000cd4 <unregister_code+0x24>
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2bf4      	cmp	r3, #244	; 0xf4
 8000cca:	d803      	bhi.n	8000cd4 <unregister_code+0x24>
	{
    	prog_released(code);
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fdfc 	bl	80008cc <prog_released>
	}

    if (code == KC_LOGOFF)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2bf0      	cmp	r3, #240	; 0xf0
 8000cd8:	d108      	bne.n	8000cec <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 8000cda:	2008      	movs	r0, #8
 8000cdc:	f7ff fe84 	bl	80009e8 <del_mods>
    	del_key_byte(KC_L);
 8000ce0:	200f      	movs	r0, #15
 8000ce2:	f7ff fedb 	bl	8000a9c <del_key_byte>
    	send_keyboard_report();
 8000ce6:	f000 f8eb 	bl	8000ec0 <send_keyboard_report>
 8000cea:	e034      	b.n	8000d56 <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d909      	bls.n	8000d06 <unregister_code+0x56>
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	2ba4      	cmp	r3, #164	; 0xa4
 8000cf6:	d806      	bhi.n	8000d06 <unregister_code+0x56>
        del_key_byte(code);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fece 	bl	8000a9c <del_key_byte>
        send_keyboard_report();
 8000d00:	f000 f8de 	bl	8000ec0 <send_keyboard_report>
 8000d04:	e027      	b.n	8000d56 <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2bdf      	cmp	r3, #223	; 0xdf
 8000d0a:	d90f      	bls.n	8000d2c <unregister_code+0x7c>
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	2be7      	cmp	r3, #231	; 0xe7
 8000d10:	d80c      	bhi.n	8000d2c <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	2201      	movs	r2, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fe61 	bl	80009e8 <del_mods>
        send_keyboard_report();
 8000d26:	f000 f8cb 	bl	8000ec0 <send_keyboard_report>
 8000d2a:	e014      	b.n	8000d56 <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2ba4      	cmp	r3, #164	; 0xa4
 8000d30:	d906      	bls.n	8000d40 <unregister_code+0x90>
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2ba7      	cmp	r3, #167	; 0xa7
 8000d36:	d803      	bhi.n	8000d40 <unregister_code+0x90>
	    send_system(0);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fde9 	bl	8000910 <send_system>
 8000d3e:	e00a      	b.n	8000d56 <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2ba7      	cmp	r3, #167	; 0xa7
 8000d44:	d907      	bls.n	8000d56 <unregister_code+0xa6>
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	2bba      	cmp	r3, #186	; 0xba
 8000d4a:	d804      	bhi.n	8000d56 <unregister_code+0xa6>
    	send_consumer(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff fe0b 	bl	8000968 <send_consumer>
 8000d52:	e000      	b.n	8000d56 <unregister_code+0xa6>
        return;
 8000d54:	bf00      	nop
	}
}
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_t = 0;
	static uint8_t blinking = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 8000d60:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <process_keyboard_USB+0xc0>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <process_keyboard_USB+0xc4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d031      	beq.n	8000dd0 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <process_keyboard_USB+0xc8>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d020      	beq.n	8000db6 <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <process_keyboard_USB+0xc8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <process_keyboard_USB+0xcc>)
 8000d7c:	22fa      	movs	r2, #250	; 0xfa
 8000d7e:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <process_keyboard_USB+0xc4>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4613      	mov	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <process_keyboard_USB+0xd0>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	2209      	movs	r2, #9
 8000d92:	4619      	mov	r1, r3
 8000d94:	4826      	ldr	r0, [pc, #152]	; (8000e30 <process_keyboard_USB+0xd4>)
 8000d96:	f005 fd13 	bl	80067c0 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8000d9a:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <process_keyboard_USB+0xc4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	425a      	negs	r2, r3
 8000da2:	f003 030f 	and.w	r3, r3, #15
 8000da6:	f002 020f 	and.w	r2, r2, #15
 8000daa:	bf58      	it	pl
 8000dac:	4253      	negpl	r3, r2
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <process_keyboard_USB+0xc4>)
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e00c      	b.n	8000dd0 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <process_keyboard_USB+0xcc>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <process_keyboard_USB+0xcc>)
 8000dc0:	801a      	strh	r2, [r3, #0]
 8000dc2:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <process_keyboard_USB+0xcc>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <process_keyboard_USB+0xc8>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
	}

	if (is_prog_long_pressed() || is_prog_in_progress())
 8000dd0:	f7ff fd58 	bl	8000884 <is_prog_long_pressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <process_keyboard_USB+0x88>
 8000dda:	f7ff fd49 	bl	8000870 <is_prog_in_progress>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00c      	beq.n	8000dfe <process_keyboard_USB+0xa2>
	{
		if (!blinking)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <process_keyboard_USB+0xd8>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d115      	bne.n	8000e18 <process_keyboard_USB+0xbc>
		{
			blinking = 1;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <process_keyboard_USB+0xd8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
			blink_t = HAL_GetTick();
 8000df2:	f000 fd31 	bl	8001858 <HAL_GetTick>
 8000df6:	4602      	mov	r2, r0
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <process_keyboard_USB+0xdc>)
 8000dfa:	601a      	str	r2, [r3, #0]
		if (!blinking)
 8000dfc:	e00c      	b.n	8000e18 <process_keyboard_USB+0xbc>
		else
		{

		}
	}
	else if (blinking)
 8000dfe:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <process_keyboard_USB+0xd8>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <process_keyboard_USB+0xbc>
	{
		leds_updated = 1;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <process_keyboard_USB+0xe0>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <process_keyboard_USB+0xe4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fa85 	bl	8001320 <leds_PS2>
	}
}
 8000e16:	e7ff      	b.n	8000e18 <process_keyboard_USB+0xbc>
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001ed 	.word	0x200001ed
 8000e20:	200001ee 	.word	0x200001ee
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000002 	.word	0x20000002
 8000e2c:	20000228 	.word	0x20000228
 8000e30:	20000348 	.word	0x20000348
 8000e34:	200001f4 	.word	0x200001f4
 8000e38:	200001f8 	.word	0x200001f8
 8000e3c:	200002b9 	.word	0x200002b9
 8000e40:	200002b8 	.word	0x200002b8

08000e44 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <USB_HID_buffer_sent_Callback+0x14>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000

08000e5c <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <kbuf_push+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	425a      	negs	r2, r3
 8000e6c:	f003 030f 	and.w	r3, r3, #15
 8000e70:	f002 020f 	and.w	r2, r2, #15
 8000e74:	bf58      	it	pl
 8000e76:	4253      	negpl	r3, r2
 8000e78:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <kbuf_push+0x5c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	7bfa      	ldrb	r2, [r7, #15]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d011      	beq.n	8000ea8 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <kbuf_push+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <kbuf_push+0x60>)
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	4413      	add	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6810      	ldr	r0, [r2, #0]
 8000e98:	6851      	ldr	r1, [r2, #4]
 8000e9a:	6018      	str	r0, [r3, #0]
 8000e9c:	6059      	str	r1, [r3, #4]
 8000e9e:	7a12      	ldrb	r2, [r2, #8]
 8000ea0:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <kbuf_push+0x58>)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	7013      	strb	r3, [r2, #0]
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	200001ed 	.word	0x200001ed
 8000eb8:	200001ee 	.word	0x200001ee
 8000ebc:	20000228 	.word	0x20000228

08000ec0 <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <send_keyboard_report+0x1c>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <send_keyboard_report+0x20>)
 8000ecc:	781a      	ldrb	r2, [r3, #0]
 8000ece:	4b03      	ldr	r3, [pc, #12]	; (8000edc <send_keyboard_report+0x1c>)
 8000ed0:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 8000ed2:	4802      	ldr	r0, [pc, #8]	; (8000edc <send_keyboard_report+0x1c>)
 8000ed4:	f7ff ffc2 	bl	8000e5c <kbuf_push>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000021c 	.word	0x2000021c
 8000ee0:	200001ec 	.word	0x200001ec

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f000 fc5e 	bl	80017a8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eec:	f000 f82a 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f7ff f92c 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000ef4:	f006 fd46 	bl	8007984 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ef8:	f000 fbc2 	bl	8001680 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <main+0x54>)
 8000efe:	f002 ffe3 	bl	8003ec8 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 8000f02:	20fa      	movs	r0, #250	; 0xfa
 8000f04:	f000 fb7c 	bl	8001600 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0e:	480b      	ldr	r0, [pc, #44]	; (8000f3c <main+0x58>)
 8000f10:	f000 ff4d 	bl	8001dae <HAL_GPIO_WritePin>
  reset_us_counter();
 8000f14:	f000 fb92 	bl	800163c <reset_us_counter>
  init_PS2();
 8000f18:	f000 f974 	bl	8001204 <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f22:	4807      	ldr	r0, [pc, #28]	; (8000f40 <main+0x5c>)
 8000f24:	f000 ff43 	bl	8001dae <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000f28:	f000 fa5e 	bl	80013e8 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8000f2c:	f7ff ff16 	bl	8000d5c <process_keyboard_USB>
	  _delay_ms(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f000 fb65 	bl	8001600 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000f36:	e7f7      	b.n	8000f28 <main+0x44>
 8000f38:	200002fc 	.word	0x200002fc
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40011000 	.word	0x40011000

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	; 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4e:	2228      	movs	r2, #40	; 0x28
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 f8ee 	bl	8008134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f74:	2301      	movs	r3, #1
 8000f76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f82:	2301      	movs	r3, #1
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000f90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 faa4 	bl	80034e8 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fa6:	f000 f828 	bl	8000ffa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 fd0e 	bl	80039e8 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fd2:	f000 f812 	bl	8000ffa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fd6:	2310      	movs	r3, #16
 8000fd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fde:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fe6a 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000fee:	f000 f804 	bl	8000ffa <Error_Handler>
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3750      	adds	r7, #80	; 0x50
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001000:	e7fe      	b.n	8001000 <Error_Handler+0x6>
	...

08001004 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001014:	f040 80e6 	bne.w	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8001018:	4b74      	ldr	r3, [pc, #464]	; (80011ec <HAL_GPIO_EXTI_Callback+0x1e8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d060      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8001020:	4b72      	ldr	r3, [pc, #456]	; (80011ec <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d109      	bne.n	800103c <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8001028:	4b70      	ldr	r3, [pc, #448]	; (80011ec <HAL_GPIO_EXTI_Callback+0x1e8>)
 800102a:	2202      	movs	r2, #2
 800102c:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 800102e:	4b70      	ldr	r3, [pc, #448]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
				return;
 800103a:	e0d3      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 800103c:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800103e:	f993 3000 	ldrsb.w	r3, [r3]
 8001042:	2b07      	cmp	r3, #7
 8001044:	dc1b      	bgt.n	800107e <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8001046:	4b6c      	ldr	r3, [pc, #432]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800104e:	f993 3000 	ldrsb.w	r3, [r3]
 8001052:	fa42 f303 	asr.w	r3, r2, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00c      	beq.n	8001078 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 800105e:	4b65      	ldr	r3, [pc, #404]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	bf0c      	ite	eq
 8001066:	2301      	moveq	r3, #1
 8001068:	2300      	movne	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001070:	701a      	strb	r2, [r3, #0]
					data_release();
 8001072:	f7ff f969 	bl	8000348 <data_release>
 8001076:	e02a      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8001078:	f7ff f91e 	bl	80002b8 <data_low>
 800107c:	e027      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 800107e:	4b5c      	ldr	r3, [pc, #368]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001080:	f993 3000 	ldrsb.w	r3, [r3]
 8001084:	2b08      	cmp	r3, #8
 8001086:	d109      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8001088:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8001090:	f7ff f95a 	bl	8000348 <data_release>
 8001094:	e01b      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8001096:	f7ff f90f 	bl	80002b8 <data_low>
 800109a:	e018      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 800109c:	4b54      	ldr	r3, [pc, #336]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800109e:	f993 3000 	ldrsb.w	r3, [r3]
 80010a2:	2b09      	cmp	r3, #9
 80010a4:	d102      	bne.n	80010ac <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 80010a6:	f7ff f94f 	bl	8000348 <data_release>
 80010aa:	e010      	b.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 80010ac:	4b50      	ldr	r3, [pc, #320]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010ae:	f993 3000 	ldrsb.w	r3, [r3]
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	d10b      	bne.n	80010ce <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 80010b6:	f7ff f947 	bl	8000348 <data_release>
				sendMode = 0;
 80010ba:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <HAL_GPIO_EXTI_Callback+0x1e8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 80010c6:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
				return;
 80010cc:	e08a      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 80010ce:	4b48      	ldr	r3, [pc, #288]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010d0:	f993 3000 	ldrsb.w	r3, [r3]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010de:	701a      	strb	r2, [r3, #0]
			return;
 80010e0:	e080      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 80010e2:	20c8      	movs	r0, #200	; 0xc8
 80010e4:	f000 fab6 	bl	8001654 <check_us_counter>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 80010f4:	f000 faa2 	bl	800163c <reset_us_counter>
			if (bitNr == 0)
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010fa:	f993 3000 	ldrsb.w	r3, [r3]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10e      	bne.n	8001120 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	483d      	ldr	r0, [pc, #244]	; (80011fc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001108:	f000 fe3a 	bl	8001d80 <HAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d167      	bne.n	80011e2 <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e056      	b.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8001120:	4b33      	ldr	r3, [pc, #204]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001122:	f993 3000 	ldrsb.w	r3, [r3]
 8001126:	2b08      	cmp	r3, #8
 8001128:	dc1f      	bgt.n	800116a <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 800112a:	4b35      	ldr	r3, [pc, #212]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	085b      	lsrs	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001134:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4830      	ldr	r0, [pc, #192]	; (80011fc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800113c:	f000 fe20 	bl	8001d80 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d043      	beq.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800114e:	b2da      	uxtb	r2, r3
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001152:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf0c      	ite	eq
 800115c:	2301      	moveq	r3, #1
 800115e:	2300      	movne	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001166:	701a      	strb	r2, [r3, #0]
 8001168:	e031      	b.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 800116a:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800116c:	f993 3000 	ldrsb.w	r3, [r3]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d112      	bne.n	800119a <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	4820      	ldr	r0, [pc, #128]	; (80011fc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800117a:	f000 fe01 	bl	8001d80 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d024      	beq.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf0c      	ite	eq
 800118c:	2301      	moveq	r3, #1
 800118e:	2300      	movne	r3, #0
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e019      	b.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800119c:	f993 3000 	ldrsb.w	r3, [r3]
 80011a0:	2b0a      	cmp	r3, #10
 80011a2:	d114      	bne.n	80011ce <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 80011a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a8:	4814      	ldr	r0, [pc, #80]	; (80011fc <HAL_GPIO_EXTI_Callback+0x1f8>)
 80011aa:	f000 fde9 	bl	8001d80 <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_GPIO_EXTI_Callback+0x1c2>
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f943 	bl	800144c <buf_push>
				bitNr = 0;
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
				return;
 80011cc:	e00a      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011d0:	f993 3000 	ldrsb.w	r3, [r3]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	b25a      	sxtb	r2, r3
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e000      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 80011e2:	bf00      	nop
	}
}
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200001fc 	.word	0x200001fc
 80011f0:	200001fe 	.word	0x200001fe
 80011f4:	20000202 	.word	0x20000202
 80011f8:	200001fd 	.word	0x200001fd
 80011fc:	40010c00 	.word	0x40010c00
 8001200:	20000203 	.word	0x20000203

08001204 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 800120a:	20ff      	movs	r0, #255	; 0xff
 800120c:	f000 f820 	bl	8001250 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8001210:	f000 f8cc 	bl	80013ac <wait_response_PS2>
 8001214:	4603      	mov	r3, r0
 8001216:	2bfa      	cmp	r3, #250	; 0xfa
 8001218:	d004      	beq.n	8001224 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f000 f9ef 	bl	8001600 <_delay_ms>
		send_PS2(PS2_RESET);
 8001222:	e7f2      	b.n	800120a <init_PS2+0x6>
			break;
 8001224:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001226:	2364      	movs	r3, #100	; 0x64
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	e007      	b.n	800123c <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 800122c:	f000 f8be 	bl	80013ac <wait_response_PS2>
 8001230:	4603      	mov	r3, r0
 8001232:	2baa      	cmp	r3, #170	; 0xaa
 8001234:	d006      	beq.n	8001244 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	3b01      	subs	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f4      	bne.n	800122c <init_PS2+0x28>
			break;
	}
}
 8001242:	e000      	b.n	8001246 <init_PS2+0x42>
			break;
 8001244:	bf00      	nop
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <send_PS2+0x3c>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
	clock_low();
 8001260:	f7ff f84e 	bl	8000300 <clock_low>
	bitNr = 0;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <send_PS2+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
	outputData = data;
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <send_PS2+0x44>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f000 f9d0 	bl	8001616 <_delay_us>

	data_low();
 8001276:	f7ff f81f 	bl	80002b8 <data_low>
	_delay_us(10);
 800127a:	200a      	movs	r0, #10
 800127c:	f000 f9cb 	bl	8001616 <_delay_us>
	clock_release();
 8001280:	f7ff f87e 	bl	8000380 <clock_release>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001fc 	.word	0x200001fc
 8001290:	200001fe 	.word	0x200001fe
 8001294:	200001fd 	.word	0x200001fd

08001298 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SET_LEDS_Callback+0x5c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <SET_LEDS_Callback+0x60>)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	7013      	strb	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200002b9 	.word	0x200002b9
 80012f8:	200002b8 	.word	0x200002b8

080012fc <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	3301      	adds	r3, #1
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <USBD_Sleep_Callback+0x20>)
 800130e:	701a      	strb	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001ff 	.word	0x200001ff

08001320 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <leds_PS2+0x84>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d02f      	beq.n	8001392 <leds_PS2+0x72>
		return;
	if (buf_has_data())
 8001332:	f000 f8df 	bl	80014f4 <buf_has_data>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12c      	bne.n	8001396 <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <leds_PS2+0x84>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	4817      	ldr	r0, [pc, #92]	; (80013a8 <leds_PS2+0x88>)
 800134a:	f000 fd30 	bl	8001dae <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 800134e:	2305      	movs	r3, #5
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e01a      	b.n	800138a <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 8001354:	20ed      	movs	r0, #237	; 0xed
 8001356:	f7ff ff7b 	bl	8001250 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 800135a:	f000 f827 	bl	80013ac <wait_response_PS2>
 800135e:	4603      	mov	r3, r0
 8001360:	2bfa      	cmp	r3, #250	; 0xfa
 8001362:	d003      	beq.n	800136c <leds_PS2+0x4c>
		{
			_delay_ms(20);
 8001364:	2014      	movs	r0, #20
 8001366:	f000 f94b 	bl	8001600 <_delay_ms>
			continue;
 800136a:	e00b      	b.n	8001384 <leds_PS2+0x64>
		}
		send_PS2(led);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff6e 	bl	8001250 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8001374:	f000 f81a 	bl	80013ac <wait_response_PS2>
 8001378:	4603      	mov	r3, r0
 800137a:	2bfa      	cmp	r3, #250	; 0xfa
 800137c:	d00d      	beq.n	800139a <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 800137e:	2014      	movs	r0, #20
 8001380:	f000 f93e 	bl	8001600 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	3b01      	subs	r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e1      	bne.n	8001354 <leds_PS2+0x34>
 8001390:	e004      	b.n	800139c <leds_PS2+0x7c>
		return;
 8001392:	bf00      	nop
 8001394:	e002      	b.n	800139c <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <leds_PS2+0x7c>
			return;
 800139a:	bf00      	nop
	}
}
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002b9 	.word	0x200002b9
 80013a8:	40011000 	.word	0x40011000

080013ac <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 80013b2:	2319      	movs	r3, #25
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	e00a      	b.n	80013ce <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 80013b8:	f000 f89c 	bl	80014f4 <buf_has_data>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d109      	bne.n	80013d6 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 f91c 	bl	8001600 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f1      	bne.n	80013b8 <wait_response_PS2+0xc>
 80013d4:	e000      	b.n	80013d8 <wait_response_PS2+0x2c>
			break;
 80013d6:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80013d8:	f000 f862 	bl	80014a0 <buf_pop>
 80013dc:	4603      	mov	r3, r0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	if (sleep)
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <process_PS2+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d012      	beq.n	800141a <process_PS2+0x32>
	{
		leds_updated = 1;
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <process_PS2+0x5c>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <process_PS2+0x58>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d103      	bne.n	800140a <process_PS2+0x22>
		{
			leds_PS2(0);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff ff8c 	bl	8001320 <leds_PS2>
 8001408:	e004      	b.n	8001414 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <process_PS2+0x60>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ff86 	bl	8001320 <leds_PS2>
		}
		sleep = 0;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <process_PS2+0x58>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 800141a:	f000 f86b 	bl	80014f4 <buf_has_data>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8001424:	f000 f83c 	bl	80014a0 <buf_pop>
 8001428:	4603      	mov	r3, r0
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe ffc6 	bl	80003bc <matrix_scan>
	else
		leds_PS2(leds_data);
}
 8001430:	e004      	b.n	800143c <process_PS2+0x54>
		leds_PS2(leds_data);
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <process_PS2+0x60>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff72 	bl	8001320 <leds_PS2>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200001ff 	.word	0x200001ff
 8001444:	200002b9 	.word	0x200002b9
 8001448:	200002b8 	.word	0x200002b8

0800144c <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <buf_push+0x48>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	425a      	negs	r2, r3
 800145e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001462:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001466:	bf58      	it	pl
 8001468:	4253      	negpl	r3, r2
 800146a:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <buf_push+0x4c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	429a      	cmp	r2, r3
 8001474:	d008      	beq.n	8001488 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <buf_push+0x48>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <buf_push+0x50>)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8001482:	4a04      	ldr	r2, [pc, #16]	; (8001494 <buf_push+0x48>)
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	7013      	strb	r3, [r2, #0]
    }
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000200 	.word	0x20000200
 8001498:	20000201 	.word	0x20000201
 800149c:	200002bc 	.word	0x200002bc

080014a0 <buf_pop>:

uint8_t buf_pop(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <buf_pop+0x48>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <buf_pop+0x4c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d012      	beq.n	80014dc <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <buf_pop+0x4c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <buf_pop+0x50>)
 80014be:	5c9b      	ldrb	r3, [r3, r2]
 80014c0:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <buf_pop+0x4c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	425a      	negs	r2, r3
 80014ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014d2:	bf58      	it	pl
 80014d4:	4253      	negpl	r3, r2
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <buf_pop+0x4c>)
 80014da:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80014dc:	79fb      	ldrb	r3, [r7, #7]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000200 	.word	0x20000200
 80014ec:	20000201 	.word	0x20000201
 80014f0:	200002bc 	.word	0x200002bc

080014f4 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <buf_has_data+0x20>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <buf_has_data+0x24>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000200 	.word	0x20000200
 8001518:	20000201 	.word	0x20000201

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_MspInit+0x5c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6193      	str	r3, [r2, #24]
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_MspInit+0x5c>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_MspInit+0x5c>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x5c>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_MspInit+0x60>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_MspInit+0x60>)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 f935 	bl	8001834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015d6:	f000 fd4c 	bl	8002072 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000080c 	.word	0x2000080c

080015e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80015e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ec:	f000 fbf8 	bl	8001de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f92f 	bl	800186c <HAL_Delay>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8001620:	f000 f80c 	bl	800163c <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001624:	bf00      	nop
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f000 f813 	bl	8001654 <check_us_counter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f8      	bne.n	8001626 <_delay_us+0x10>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <reset_us_counter>:

inline void reset_us_counter(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <reset_us_counter+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	200002fc 	.word	0x200002fc

08001654 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <check_us_counter+0x28>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	b29b      	uxth	r3, r3
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	429a      	cmp	r2, r3
 800166a:	bf8c      	ite	hi
 800166c:	2301      	movhi	r3, #1
 800166e:	2300      	movls	r3, #0
 8001670:	b2db      	uxtb	r3, r3
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200002fc 	.word	0x200002fc

08001680 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_TIM1_Init+0x98>)
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <MX_TIM1_Init+0x9c>)
 80016a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <MX_TIM1_Init+0x98>)
 80016a4:	222f      	movs	r2, #47	; 0x2f
 80016a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_TIM1_Init+0x98>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_TIM1_Init+0x98>)
 80016b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_TIM1_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_TIM1_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <MX_TIM1_Init+0x98>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_TIM1_Init+0x98>)
 80016ca:	f002 fbad 	bl	8003e28 <HAL_TIM_Base_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016d4:	f7ff fc91 	bl	8000ffa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_TIM1_Init+0x98>)
 80016e6:	f002 fc39 	bl	8003f5c <HAL_TIM_ConfigClockSource>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80016f0:	f7ff fc83 	bl	8000ffa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_TIM1_Init+0x98>)
 8001702:	f002 fddb 	bl	80042bc <HAL_TIMEx_MasterConfigSynchronization>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800170c:	f7ff fc75 	bl	8000ffa <Error_Handler>
  }

}
 8001710:	bf00      	nop
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200002fc 	.word	0x200002fc
 800171c:	40012c00 	.word	0x40012c00

08001720 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a09      	ldr	r2, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x34>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d10b      	bne.n	800174a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	4a08      	ldr	r2, [pc, #32]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173c:	6193      	str	r3, [r2, #24]
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_TIM_Base_MspInit+0x38>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40012c00 	.word	0x40012c00
 8001758:	40021000 	.word	0x40021000

0800175c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800175c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001768:	480a      	ldr	r0, [pc, #40]	; (8001794 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800176e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800177e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001782:	f7ff ff37 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f006 fcb1 	bl	80080ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff fbab 	bl	8000ee4 <main>
  bx lr
 800178e:	4770      	bx	lr
  ldr r3, =_sidata
 8001790:	080082cc 	.word	0x080082cc
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001798:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 800179c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 80017a0:	20000af8 	.word	0x20000af8

080017a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC1_2_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_Init+0x28>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_Init+0x28>)
 80017b2:	f043 0310 	orr.w	r3, r3, #16
 80017b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b8:	2003      	movs	r0, #3
 80017ba:	f000 f945 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f808 	bl	80017d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c4:	f7ff feaa 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x54>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x58>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f95d 	bl	8001ab2 <HAL_SYSTICK_Config>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e00e      	b.n	8001820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b0f      	cmp	r3, #15
 8001806:	d80a      	bhi.n	800181e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001808:	2200      	movs	r2, #0
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f000 f925 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001814:	4a06      	ldr	r2, [pc, #24]	; (8001830 <HAL_InitTick+0x5c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e000      	b.n	8001820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000004 	.word	0x20000004
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000008 	.word	0x20000008

08001834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x1c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x20>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a03      	ldr	r2, [pc, #12]	; (8001854 <HAL_IncTick+0x20>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	2000000c 	.word	0x2000000c
 8001854:	20000344 	.word	0x20000344

08001858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <HAL_GetTick+0x10>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	20000344 	.word	0x20000344

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff fff0 	bl	8001858 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_Delay+0x40>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffe0 	bl	8001858 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000000c 	.word	0x2000000c

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <__NVIC_EnableIRQ+0x34>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff90 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff2d 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff42 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e127      	b.n	8001d30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8116 	bne.w	8001d2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d034      	beq.n	8001b70 <HAL_GPIO_Init+0xa4>
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d80d      	bhi.n	8001b26 <HAL_GPIO_Init+0x5a>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d02b      	beq.n	8001b66 <HAL_GPIO_Init+0x9a>
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d804      	bhi.n	8001b1c <HAL_GPIO_Init+0x50>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d031      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d01c      	beq.n	8001b54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b1a:	e048      	b.n	8001bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d043      	beq.n	8001ba8 <HAL_GPIO_Init+0xdc>
 8001b20:	2b11      	cmp	r3, #17
 8001b22:	d01b      	beq.n	8001b5c <HAL_GPIO_Init+0x90>
          break;
 8001b24:	e043      	b.n	8001bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b26:	4a89      	ldr	r2, [pc, #548]	; (8001d4c <HAL_GPIO_Init+0x280>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d026      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
 8001b2c:	4a87      	ldr	r2, [pc, #540]	; (8001d4c <HAL_GPIO_Init+0x280>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d806      	bhi.n	8001b40 <HAL_GPIO_Init+0x74>
 8001b32:	4a87      	ldr	r2, [pc, #540]	; (8001d50 <HAL_GPIO_Init+0x284>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d020      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
 8001b38:	4a86      	ldr	r2, [pc, #536]	; (8001d54 <HAL_GPIO_Init+0x288>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01d      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
          break;
 8001b3e:	e036      	b.n	8001bae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b40:	4a85      	ldr	r2, [pc, #532]	; (8001d58 <HAL_GPIO_Init+0x28c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d019      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
 8001b46:	4a85      	ldr	r2, [pc, #532]	; (8001d5c <HAL_GPIO_Init+0x290>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d016      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
 8001b4c:	4a84      	ldr	r2, [pc, #528]	; (8001d60 <HAL_GPIO_Init+0x294>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0xae>
          break;
 8001b52:	e02c      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e028      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	3304      	adds	r3, #4
 8001b62:	623b      	str	r3, [r7, #32]
          break;
 8001b64:	e023      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	623b      	str	r3, [r7, #32]
          break;
 8001b6e:	e01e      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	330c      	adds	r3, #12
 8001b76:	623b      	str	r3, [r7, #32]
          break;
 8001b78:	e019      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b82:	2304      	movs	r3, #4
 8001b84:	623b      	str	r3, [r7, #32]
          break;
 8001b86:	e012      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b90:	2308      	movs	r3, #8
 8001b92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	611a      	str	r2, [r3, #16]
          break;
 8001b9a:	e008      	b.n	8001bae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	615a      	str	r2, [r3, #20]
          break;
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2bff      	cmp	r3, #255	; 0xff
 8001bb2:	d801      	bhi.n	8001bb8 <HAL_GPIO_Init+0xec>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	e001      	b.n	8001bbc <HAL_GPIO_Init+0xf0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2bff      	cmp	r3, #255	; 0xff
 8001bc2:	d802      	bhi.n	8001bca <HAL_GPIO_Init+0xfe>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_Init+0x104>
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	401a      	ands	r2, r3
 8001be2:	6a39      	ldr	r1, [r7, #32]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	431a      	orrs	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8096 	beq.w	8001d2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfe:	4b59      	ldr	r3, [pc, #356]	; (8001d64 <HAL_GPIO_Init+0x298>)
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_GPIO_Init+0x298>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6193      	str	r3, [r2, #24]
 8001c0a:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x298>)
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_GPIO_Init+0x29c>)
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x19e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4a      	ldr	r2, [pc, #296]	; (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x19a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a49      	ldr	r2, [pc, #292]	; (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x196>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a48      	ldr	r2, [pc, #288]	; (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x192>
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x1a0>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x1a0>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x1a0>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x1a0>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c7c:	493a      	ldr	r1, [pc, #232]	; (8001d68 <HAL_GPIO_Init+0x29c>)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4938      	ldr	r1, [pc, #224]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
 8001ca2:	e006      	b.n	8001cb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	4933      	ldr	r1, [pc, #204]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	492e      	ldr	r1, [pc, #184]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	4929      	ldr	r1, [pc, #164]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	4924      	ldr	r1, [pc, #144]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	608b      	str	r3, [r1, #8]
 8001cf2:	e006      	b.n	8001d02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	491f      	ldr	r1, [pc, #124]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	491a      	ldr	r1, [pc, #104]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60cb      	str	r3, [r1, #12]
 8001d1a:	e006      	b.n	8001d2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	4915      	ldr	r1, [pc, #84]	; (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001d26:	4013      	ands	r3, r2
 8001d28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f47f aed0 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001d40:	bf00      	nop
 8001d42:	372c      	adds	r7, #44	; 0x2c
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	10210000 	.word	0x10210000
 8001d50:	10110000 	.word	0x10110000
 8001d54:	10120000 	.word	0x10120000
 8001d58:	10310000 	.word	0x10310000
 8001d5c:	10320000 	.word	0x10320000
 8001d60:	10220000 	.word	0x10220000
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	40010c00 	.word	0x40010c00
 8001d74:	40011000 	.word	0x40011000
 8001d78:	40011400 	.word	0x40011400
 8001d7c:	40010400 	.word	0x40010400

08001d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	887b      	ldrh	r3, [r7, #2]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e001      	b.n	8001da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	807b      	strh	r3, [r7, #2]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dbe:	787b      	ldrb	r3, [r7, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc4:	887a      	ldrh	r2, [r7, #2]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dca:	e003      	b.n	8001dd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	4013      	ands	r3, r2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d006      	beq.n	8001e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f900 	bl	8001004 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af06      	add	r7, sp, #24
 8001e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0fd      	b.n	800201e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f005 fed8 	bl	8007bec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fabb 	bl	80043c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	687e      	ldr	r6, [r7, #4]
 8001e56:	466d      	mov	r5, sp
 8001e58:	f106 0410 	add.w	r4, r6, #16
 8001e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	1d33      	adds	r3, r6, #4
 8001e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e68:	6838      	ldr	r0, [r7, #0]
 8001e6a:	f002 fa85 	bl	8004378 <USB_CoreInit>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0ce      	b.n	800201e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fab6 	bl	80043f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
 8001e90:	e04c      	b.n	8001f2c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	440b      	add	r3, r1
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	b298      	uxth	r0, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	440b      	add	r3, r1
 8001ece:	3336      	adds	r3, #54	; 0x36
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eea:	7bfa      	ldrb	r2, [r7, #15]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3338      	adds	r3, #56	; 0x38
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	333c      	adds	r3, #60	; 0x3c
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3340      	adds	r3, #64	; 0x40
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d3ad      	bcc.n	8001e92 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e044      	b.n	8001fc6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f3c:	7bfa      	ldrb	r2, [r7, #15]
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	440b      	add	r3, r1
 8001f76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	73fb      	strb	r3, [r7, #15]
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d3b5      	bcc.n	8001f3c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	687e      	ldr	r6, [r7, #4]
 8001fd8:	466d      	mov	r5, sp
 8001fda:	f106 0410 	add.w	r4, r6, #16
 8001fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	602b      	str	r3, [r5, #0]
 8001fe6:	1d33      	adds	r3, r6, #4
 8001fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fea:	6838      	ldr	r0, [r7, #0]
 8001fec:	f002 fa10 	bl	8004410 <USB_DevInit>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d005      	beq.n	8002002 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00d      	b.n	800201e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f004 f9aa 	bl	8006370 <USB_DevDisconnect>

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002026 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_PCD_Start+0x16>
 8002038:	2302      	movs	r3, #2
 800203a:	e016      	b.n	800206a <HAL_PCD_Start+0x44>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 f9a5 	bl	8004398 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800204e:	2101      	movs	r1, #1
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f006 f814 	bl	800807e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f004 f97e 	bl	800635c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b088      	sub	sp, #32
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f004 f980 	bl	8006384 <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800208e:	d102      	bne.n	8002096 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fb4a 	bl	800272a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f004 f972 	bl	8006384 <USB_ReadInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020aa:	d112      	bne.n	80020d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020be:	b292      	uxth	r2, r2
 80020c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f005 fe0c 	bl	8007ce2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020ca:	2100      	movs	r1, #0
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f925 	bl	800231c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f004 f954 	bl	8006384 <USB_ReadInterrupts>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020e6:	d10b      	bne.n	8002100 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020fa:	b292      	uxth	r2, r2
 80020fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 f93d 	bl	8006384 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d10b      	bne.n	800212e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002128:	b292      	uxth	r2, r2
 800212a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f004 f926 	bl	8006384 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800213e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002142:	d126      	bne.n	8002192 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800214c:	b29a      	uxth	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0204 	bic.w	r2, r2, #4
 8002156:	b292      	uxth	r2, r2
 8002158:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002164:	b29a      	uxth	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0208 	bic.w	r2, r2, #8
 800216e:	b292      	uxth	r2, r2
 8002170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f005 fde3 	bl	8007d40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002182:	b29a      	uxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800218c:	b292      	uxth	r2, r2
 800218e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f8f4 	bl	8006384 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a6:	f040 8084 	bne.w	80022b2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	77fb      	strb	r3, [r7, #31]
 80021ae:	e011      	b.n	80021d4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	7ffb      	ldrb	r3, [r7, #31]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	441a      	add	r2, r3
 80021bc:	7ffb      	ldrb	r3, [r7, #31]
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	b292      	uxth	r2, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	f107 0120 	add.w	r1, r7, #32
 80021c8:	440b      	add	r3, r1
 80021ca:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80021ce:	7ffb      	ldrb	r3, [r7, #31]
 80021d0:	3301      	adds	r3, #1
 80021d2:	77fb      	strb	r3, [r7, #31]
 80021d4:	7ffb      	ldrb	r3, [r7, #31]
 80021d6:	2b07      	cmp	r3, #7
 80021d8:	d9ea      	bls.n	80021b0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0201 	orr.w	r2, r2, #1
 80021ec:	b292      	uxth	r2, r2
 80021ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	b292      	uxth	r2, r2
 8002206:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800220a:	bf00      	nop
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002214:	b29b      	uxth	r3, r3
 8002216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f6      	beq.n	800220c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002226:	b29a      	uxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	b292      	uxth	r2, r2
 8002232:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002236:	2300      	movs	r3, #0
 8002238:	77fb      	strb	r3, [r7, #31]
 800223a:	e010      	b.n	800225e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4611      	mov	r1, r2
 8002244:	7ffa      	ldrb	r2, [r7, #31]
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	440a      	add	r2, r1
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	f107 0120 	add.w	r1, r7, #32
 8002250:	440b      	add	r3, r1
 8002252:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002256:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002258:	7ffb      	ldrb	r3, [r7, #31]
 800225a:	3301      	adds	r3, #1
 800225c:	77fb      	strb	r3, [r7, #31]
 800225e:	7ffb      	ldrb	r3, [r7, #31]
 8002260:	2b07      	cmp	r3, #7
 8002262:	d9eb      	bls.n	800223c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0208 	orr.w	r2, r2, #8
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228e:	b292      	uxth	r2, r2
 8002290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800229c:	b29a      	uxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0204 	orr.w	r2, r2, #4
 80022a6:	b292      	uxth	r2, r2
 80022a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f005 fd36 	bl	8007d1e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f004 f864 	bl	8006384 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c6:	d10e      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022da:	b292      	uxth	r2, r2
 80022dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f005 fcf0 	bl	8007cc6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f004 f84a 	bl	8006384 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022fa:	d10b      	bne.n	8002314 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002304:	b29a      	uxth	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230e:	b292      	uxth	r2, r2
 8002310:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002314:	bf00      	nop
 8002316:	3720      	adds	r7, #32
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_PCD_SetAddress+0x1a>
 8002332:	2302      	movs	r3, #2
 8002334:	e013      	b.n	800235e <HAL_PCD_SetAddress+0x42>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fff1 	bl	8006336 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	4608      	mov	r0, r1
 8002370:	4611      	mov	r1, r2
 8002372:	461a      	mov	r2, r3
 8002374:	4603      	mov	r3, r0
 8002376:	70fb      	strb	r3, [r7, #3]
 8002378:	460b      	mov	r3, r1
 800237a:	803b      	strh	r3, [r7, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002388:	2b00      	cmp	r3, #0
 800238a:	da0e      	bge.n	80023aa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	705a      	strb	r2, [r3, #1]
 80023a8:	e00e      	b.n	80023c8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	f003 0207 	and.w	r2, r3, #7
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023d4:	883a      	ldrh	r2, [r7, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	78ba      	ldrb	r2, [r7, #2]
 80023de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023f2:	78bb      	ldrb	r3, [r7, #2]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d102      	bne.n	80023fe <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_PCD_EP_Open+0xa6>
 8002408:	2302      	movs	r3, #2
 800240a:	e00e      	b.n	800242a <HAL_PCD_EP_Open+0xc4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68f9      	ldr	r1, [r7, #12]
 800241a:	4618      	mov	r0, r3
 800241c:	f002 f818 	bl	8004450 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002428:	7afb      	ldrb	r3, [r7, #11]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800243e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	da0e      	bge.n	8002464 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4613      	mov	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	705a      	strb	r2, [r3, #1]
 8002462:	e00e      	b.n	8002482 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0207 	and.w	r2, r3, #7
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	b2da      	uxtb	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_PCD_EP_Close+0x6a>
 8002498:	2302      	movs	r3, #2
 800249a:	e00e      	b.n	80024ba <HAL_PCD_EP_Close+0x88>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fb3a 	bl	8004b24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
 80024ce:	460b      	mov	r3, r1
 80024d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	f003 0207 	and.w	r2, r3, #7
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	b2da      	uxtb	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	2b00      	cmp	r3, #0
 8002516:	d106      	bne.n	8002526 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6979      	ldr	r1, [r7, #20]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 fcec 	bl	8004efc <USB_EPStartXfer>
 8002524:	e005      	b.n	8002532 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6979      	ldr	r1, [r7, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fce5 	bl	8004efc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	460b      	mov	r3, r1
 800254a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	2201      	movs	r2, #1
 8002586:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	b2da      	uxtb	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6979      	ldr	r1, [r7, #20]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 fca9 	bl	8004efc <USB_EPStartXfer>
 80025aa:	e005      	b.n	80025b8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fca2 	bl	8004efc <USB_EPStartXfer>
  }

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	460b      	mov	r3, r1
 80025cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 0207 	and.w	r2, r3, #7
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d901      	bls.n	80025e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e04c      	b.n	800267a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da0e      	bge.n	8002606 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4413      	add	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	705a      	strb	r2, [r3, #1]
 8002604:	e00c      	b.n	8002620 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002606:	78fa      	ldrb	r2, [r7, #3]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_PCD_EP_SetStall+0x7e>
 800263c:	2302      	movs	r3, #2
 800263e:	e01c      	b.n	800267a <HAL_PCD_EP_SetStall+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68f9      	ldr	r1, [r7, #12]
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fd74 	bl	800613c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f003 fe99 	bl	80063a2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	429a      	cmp	r2, r3
 800269a:	d901      	bls.n	80026a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e040      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da0e      	bge.n	80026c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	705a      	strb	r2, [r3, #1]
 80026c4:	e00e      	b.n	80026e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0207 	and.w	r2, r3, #7
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_EP_ClrStall+0x82>
 8002700:	2302      	movs	r3, #2
 8002702:	e00e      	b.n	8002722 <HAL_PCD_EP_ClrStall+0xa0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fd62 	bl	80061dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b08e      	sub	sp, #56	; 0x38
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002732:	e2df      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800273c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800273e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 030f 	and.w	r3, r3, #15
 8002746:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800274a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 8158 	bne.w	8002a04 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002756:	f003 0310 	and.w	r3, r3, #16
 800275a:	2b00      	cmp	r3, #0
 800275c:	d152      	bne.n	8002804 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	81fb      	strh	r3, [r7, #14]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800277e:	b29b      	uxth	r3, r3
 8002780:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3328      	adds	r3, #40	; 0x28
 8002786:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	3302      	adds	r3, #2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	441a      	add	r2, r3
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027c2:	2100      	movs	r1, #0
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f005 fa64 	bl	8007c92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 828e 	beq.w	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8289 	bne.w	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b292      	uxth	r2, r2
 80027f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002802:	e277      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281a:	2b00      	cmp	r3, #0
 800281c:	d034      	beq.n	8002888 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	3306      	adds	r3, #6
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800285c:	b29b      	uxth	r3, r3
 800285e:	f003 fdef 	bl	8006440 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800286e:	4013      	ands	r3, r2
 8002870:	823b      	strh	r3, [r7, #16]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	8a3a      	ldrh	r2, [r7, #16]
 8002878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287c:	b292      	uxth	r2, r2
 800287e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f005 f9d9 	bl	8007c38 <HAL_PCD_SetupStageCallback>
 8002886:	e235      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002888:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800288c:	2b00      	cmp	r3, #0
 800288e:	f280 8231 	bge.w	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29a      	uxth	r2, r3
 800289a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800289e:	4013      	ands	r3, r2
 80028a0:	83bb      	strh	r3, [r7, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	8bba      	ldrh	r2, [r7, #28]
 80028a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ac:	b292      	uxth	r2, r2
 80028ae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	3306      	adds	r3, #6
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d019      	beq.n	8002918 <PCD_EP_ISR_Handler+0x1ee>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d015      	beq.n	8002918 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	6959      	ldr	r1, [r3, #20]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f003 fd9f 	bl	8006440 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	441a      	add	r2, r3
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002910:	2100      	movs	r1, #0
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f005 f9a2 	bl	8007c5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002926:	b29b      	uxth	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d112      	bne.n	8002966 <PCD_EP_ISR_Handler+0x23c>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800294a:	b29a      	uxth	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	801a      	strh	r2, [r3, #0]
 8002964:	e02f      	b.n	80029c6 <PCD_EP_ISR_Handler+0x29c>
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	2b3e      	cmp	r3, #62	; 0x3e
 800296c:	d813      	bhi.n	8002996 <PCD_EP_ISR_Handler+0x26c>
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <PCD_EP_ISR_Handler+0x25e>
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	3301      	adds	r3, #1
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	b29b      	uxth	r3, r3
 800298c:	029b      	lsls	r3, r3, #10
 800298e:	b29a      	uxth	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	801a      	strh	r2, [r3, #0]
 8002994:	e017      	b.n	80029c6 <PCD_EP_ISR_Handler+0x29c>
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	095b      	lsrs	r3, r3, #5
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <PCD_EP_ISR_Handler+0x286>
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	3b01      	subs	r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d6:	827b      	strh	r3, [r7, #18]
 80029d8:	8a7b      	ldrh	r3, [r7, #18]
 80029da:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029de:	827b      	strh	r3, [r7, #18]
 80029e0:	8a7b      	ldrh	r3, [r7, #18]
 80029e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029e6:	827b      	strh	r3, [r7, #18]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	8a7b      	ldrh	r3, [r7, #18]
 80029ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
 8002a02:	e177      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a16:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f280 80ea 	bge.w	8002bf4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a36:	4013      	ands	r3, r2
 8002a38:	853b      	strh	r3, [r7, #40]	; 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a52:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	7b1b      	ldrb	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d122      	bne.n	8002ab6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4413      	add	r3, r2
 8002a84:	3306      	adds	r3, #6
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a98:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 8087 	beq.w	8002bb0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6818      	ldr	r0, [r3, #0]
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	6959      	ldr	r1, [r3, #20]
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	88da      	ldrh	r2, [r3, #6]
 8002aae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ab0:	f003 fcc6 	bl	8006440 <USB_ReadPMA>
 8002ab4:	e07c      	b.n	8002bb0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d108      	bne.n	8002ad0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002abe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f923 	bl	8002d10 <HAL_PCD_EP_DB_Receive>
 8002aca:	4603      	mov	r3, r0
 8002acc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002ace:	e06f      	b.n	8002bb0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aea:	847b      	strh	r3, [r7, #34]	; 0x22
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	441a      	add	r2, r3
 8002afa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d021      	beq.n	8002b6e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b52:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02a      	beq.n	8002bb0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	6959      	ldr	r1, [r3, #20]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	891a      	ldrh	r2, [r3, #8]
 8002b66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b68:	f003 fc6a 	bl	8006440 <USB_ReadPMA>
 8002b6c:	e020      	b.n	8002bb0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	3306      	adds	r3, #6
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b96:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002b98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	6959      	ldr	r1, [r3, #20]
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	895a      	ldrh	r2, [r3, #10]
 8002baa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bac:	f003 fc48 	bl	8006440 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	69da      	ldr	r2, [r3, #28]
 8002bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bb6:	441a      	add	r2, r3
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bc2:	441a      	add	r2, r3
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d004      	beq.n	8002bda <PCD_EP_ISR_Handler+0x4b0>
 8002bd0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d206      	bcs.n	8002be8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f005 f83b 	bl	8007c5c <HAL_PCD_DataOutStageCallback>
 8002be6:	e005      	b.n	8002bf4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 f984 	bl	8004efc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d07a      	beq.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c2c:	843b      	strh	r3, [r7, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	441a      	add	r2, r3
 8002c3c:	8c3b      	ldrh	r3, [r7, #32]
 8002c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	78db      	ldrb	r3, [r3, #3]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d108      	bne.n	8002c64 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d146      	bne.n	8002ce8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002c5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d141      	bne.n	8002ce8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c8c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	8bfb      	ldrh	r3, [r7, #30]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d906      	bls.n	8002ca6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	699a      	ldr	r2, [r3, #24]
 8002c9c:	8bfb      	ldrh	r3, [r7, #30]
 8002c9e:	1ad2      	subs	r2, r2, r3
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	619a      	str	r2, [r3, #24]
 8002ca4:	e002      	b.n	8002cac <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	2200      	movs	r2, #0
 8002caa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f004 ffe9 	bl	8007c92 <HAL_PCD_DataInStageCallback>
 8002cc0:	e018      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	8bfb      	ldrh	r3, [r7, #30]
 8002cc8:	441a      	add	r2, r3
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	69da      	ldr	r2, [r3, #28]
 8002cd2:	8bfb      	ldrh	r3, [r7, #30]
 8002cd4:	441a      	add	r2, r3
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 f90b 	bl	8004efc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002ce6:	e005      	b.n	8002cf4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002cea:	461a      	mov	r2, r3
 8002cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f91b 	bl	8002f2a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	b21b      	sxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f6ff ad17 	blt.w	8002734 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3738      	adds	r7, #56	; 0x38
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d07e      	beq.n	8002e26 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d50:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	8b7b      	ldrh	r3, [r7, #26]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d306      	bcc.n	8002d6a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	8b7b      	ldrh	r3, [r7, #26]
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	619a      	str	r2, [r3, #24]
 8002d68:	e002      	b.n	8002d70 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d123      	bne.n	8002dc0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	833b      	strh	r3, [r7, #24]
 8002d94:	8b3b      	ldrh	r3, [r7, #24]
 8002d96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d9a:	833b      	strh	r3, [r7, #24]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	8b3b      	ldrh	r3, [r7, #24]
 8002dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dc0:	88fb      	ldrh	r3, [r7, #6]
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01f      	beq.n	8002e0a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de4:	82fb      	strh	r3, [r7, #22]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	441a      	add	r2, r3
 8002df4:	8afb      	ldrh	r3, [r7, #22]
 8002df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e0a:	8b7b      	ldrh	r3, [r7, #26]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8087 	beq.w	8002f20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6959      	ldr	r1, [r3, #20]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	891a      	ldrh	r2, [r3, #8]
 8002e1e:	8b7b      	ldrh	r3, [r7, #26]
 8002e20:	f003 fb0e 	bl	8006440 <USB_ReadPMA>
 8002e24:	e07c      	b.n	8002f20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3306      	adds	r3, #6
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	699a      	ldr	r2, [r3, #24]
 8002e54:	8b7b      	ldrh	r3, [r7, #26]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d306      	bcc.n	8002e68 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	8b7b      	ldrh	r3, [r7, #26]
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	619a      	str	r2, [r3, #24]
 8002e66:	e002      	b.n	8002e6e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d123      	bne.n	8002ebe <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e90:	83fb      	strh	r3, [r7, #30]
 8002e92:	8bfb      	ldrh	r3, [r7, #30]
 8002e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e98:	83fb      	strh	r3, [r7, #30]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	441a      	add	r2, r3
 8002ea8:	8bfb      	ldrh	r3, [r7, #30]
 8002eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11f      	bne.n	8002f08 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	83bb      	strh	r3, [r7, #28]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	8bbb      	ldrh	r3, [r7, #28]
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f08:	8b7b      	ldrh	r3, [r7, #26]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6959      	ldr	r1, [r3, #20]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	895a      	ldrh	r2, [r3, #10]
 8002f1a:	8b7b      	ldrh	r3, [r7, #26]
 8002f1c:	f003 fa90 	bl	8006440 <USB_ReadPMA>
    }
  }

  return count;
 8002f20:	8b7b      	ldrh	r3, [r7, #26]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b092      	sub	sp, #72	; 0x48
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	4613      	mov	r3, r2
 8002f36:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8132 	beq.w	80031a8 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	3302      	adds	r3, #2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f6c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d906      	bls.n	8002f86 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f7e:	1ad2      	subs	r2, r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	619a      	str	r2, [r3, #24]
 8002f84:	e002      	b.n	8002f8c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d12c      	bne.n	8002fee <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f004 fe79 	bl	8007c92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 822f 	beq.w	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc6:	827b      	strh	r3, [r7, #18]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	8013      	strh	r3, [r2, #0]
 8002fec:	e20d      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01f      	beq.n	8003038 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800302c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003034:	b29b      	uxth	r3, r3
 8003036:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 81e3 	bne.w	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800304a:	441a      	add	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003056:	441a      	add	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6a1a      	ldr	r2, [r3, #32]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d309      	bcc.n	800307c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	1ad2      	subs	r2, r2, r3
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	621a      	str	r2, [r3, #32]
 800307a:	e014      	b.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003084:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003090:	e009      	b.n	80030a6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	785b      	ldrb	r3, [r3, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d155      	bne.n	800315a <HAL_PCD_EP_DB_Transmit+0x230>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030bc:	b29b      	uxth	r3, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	4413      	add	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	011a      	lsls	r2, r3, #4
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4413      	add	r3, r2
 80030d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d112      	bne.n	8003102 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	801a      	strh	r2, [r3, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	801a      	strh	r2, [r3, #0]
 8003100:	e047      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x268>
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	2b3e      	cmp	r3, #62	; 0x3e
 8003106:	d811      	bhi.n	800312c <HAL_PCD_EP_DB_Transmit+0x202>
 8003108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	3301      	adds	r3, #1
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	b29b      	uxth	r3, r3
 8003122:	029b      	lsls	r3, r3, #10
 8003124:	b29a      	uxth	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	801a      	strh	r2, [r3, #0]
 800312a:	e032      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x268>
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2b00      	cmp	r3, #0
 800313a:	d102      	bne.n	8003142 <HAL_PCD_EP_DB_Transmit+0x218>
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	3b01      	subs	r3, #1
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	b29b      	uxth	r3, r3
 8003146:	029b      	lsls	r3, r3, #10
 8003148:	b29b      	uxth	r3, r3
 800314a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003152:	b29a      	uxth	r2, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e01b      	b.n	8003192 <HAL_PCD_EP_DB_Transmit+0x268>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	785b      	ldrb	r3, [r3, #1]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d117      	bne.n	8003192 <HAL_PCD_EP_DB_Transmit+0x268>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	4413      	add	r3, r2
 8003178:	623b      	str	r3, [r7, #32]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	011a      	lsls	r2, r3, #4
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	4413      	add	r3, r2
 8003184:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	b29a      	uxth	r2, r3
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	6959      	ldr	r1, [r3, #20]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	891a      	ldrh	r2, [r3, #8]
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f003 f909 	bl	80063b8 <USB_WritePMA>
 80031a6:	e130      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	4413      	add	r3, r2
 80031bc:	3306      	adds	r3, #6
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031d0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031d8:	429a      	cmp	r2, r3
 80031da:	d306      	bcc.n	80031ea <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031e2:	1ad2      	subs	r2, r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	619a      	str	r2, [r3, #24]
 80031e8:	e002      	b.n	80031f0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d12c      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f004 fd47 	bl	8007c92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003204:	88fb      	ldrh	r3, [r7, #6]
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80fd 	bne.w	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	461a      	mov	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800323c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800324c:	b29b      	uxth	r3, r3
 800324e:	8013      	strh	r3, [r2, #0]
 8003250:	e0db      	b.n	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11f      	bne.n	800329c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	441a      	add	r2, r3
 8003286:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	b29b      	uxth	r3, r3
 800329a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	f040 80b1 	bne.w	800340a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ae:	441a      	add	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ba:	441a      	add	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	6a1a      	ldr	r2, [r3, #32]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d309      	bcc.n	80032e0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	1ad2      	subs	r2, r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	621a      	str	r2, [r3, #32]
 80032de:	e014      	b.n	800330a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80032e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ea:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032f4:	e009      	b.n	800330a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d155      	bne.n	80033c4 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	647b      	str	r3, [r7, #68]	; 0x44
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332c:	4413      	add	r3, r2
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	011a      	lsls	r2, r3, #4
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	4413      	add	r3, r2
 800333a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800333e:	643b      	str	r3, [r7, #64]	; 0x40
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d112      	bne.n	800336c <HAL_PCD_EP_DB_Transmit+0x442>
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003350:	b29a      	uxth	r2, r3
 8003352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003354:	801a      	strh	r2, [r3, #0]
 8003356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003364:	b29a      	uxth	r2, r3
 8003366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e044      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2b3e      	cmp	r3, #62	; 0x3e
 8003370:	d811      	bhi.n	8003396 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	085b      	lsrs	r3, r3, #1
 8003376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	3301      	adds	r3, #1
 8003386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	b29b      	uxth	r3, r3
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	b29a      	uxth	r2, r3
 8003390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003392:	801a      	strh	r2, [r3, #0]
 8003394:	e02f      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_PCD_EP_DB_Transmit+0x482>
 80033a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a8:	3b01      	subs	r3, #1
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	029b      	lsls	r3, r3, #10
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033bc:	b29a      	uxth	r2, r3
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	801a      	strh	r2, [r3, #0]
 80033c2:	e018      	b.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d114      	bne.n	80033f6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033da:	4413      	add	r3, r2
 80033dc:	637b      	str	r3, [r7, #52]	; 0x34
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	011a      	lsls	r2, r3, #4
 80033e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033e6:	4413      	add	r3, r2
 80033e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	6959      	ldr	r1, [r3, #20]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	895a      	ldrh	r2, [r3, #10]
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	b29b      	uxth	r3, r3
 8003406:	f002 ffd7 	bl	80063b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003424:	823b      	strh	r3, [r7, #16]
 8003426:	8a3b      	ldrh	r3, [r7, #16]
 8003428:	f083 0310 	eor.w	r3, r3, #16
 800342c:	823b      	strh	r3, [r7, #16]
 800342e:	8a3b      	ldrh	r3, [r7, #16]
 8003430:	f083 0320 	eor.w	r3, r3, #32
 8003434:	823b      	strh	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	441a      	add	r2, r3
 8003444:	8a3b      	ldrh	r3, [r7, #16]
 8003446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800344e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003456:	b29b      	uxth	r3, r3
 8003458:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3748      	adds	r7, #72	; 0x48
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	460b      	mov	r3, r1
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	4613      	mov	r3, r2
 8003474:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00b      	beq.n	800349a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e009      	b.n	80034ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800349a:	897a      	ldrh	r2, [r7, #10]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034ae:	893b      	ldrh	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d107      	bne.n	80034c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	80da      	strh	r2, [r3, #6]
 80034c2:	e00b      	b.n	80034dc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	2201      	movs	r2, #1
 80034c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e26c      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8087 	beq.w	8003616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003508:	4b92      	ldr	r3, [pc, #584]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b04      	cmp	r3, #4
 8003512:	d00c      	beq.n	800352e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003514:	4b8f      	ldr	r3, [pc, #572]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 030c 	and.w	r3, r3, #12
 800351c:	2b08      	cmp	r3, #8
 800351e:	d112      	bne.n	8003546 <HAL_RCC_OscConfig+0x5e>
 8003520:	4b8c      	ldr	r3, [pc, #560]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d10b      	bne.n	8003546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d06c      	beq.n	8003614 <HAL_RCC_OscConfig+0x12c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d168      	bne.n	8003614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e246      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x76>
 8003550:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a7f      	ldr	r2, [pc, #508]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	e02e      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b7b      	ldr	r3, [pc, #492]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7a      	ldr	r2, [pc, #488]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a77      	ldr	r2, [pc, #476]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0xbc>
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a71      	ldr	r2, [pc, #452]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6e      	ldr	r2, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xd4>
 80035a4:	4b6b      	ldr	r3, [pc, #428]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a6a      	ldr	r2, [pc, #424]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b68      	ldr	r3, [pc, #416]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a67      	ldr	r2, [pc, #412]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe f948 	bl	8001858 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe f944 	bl	8001858 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1fa      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5d      	ldr	r3, [pc, #372]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xe4>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe f934 	bl	8001858 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe f930 	bl	8001858 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1e6      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x10c>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003622:	4b4c      	ldr	r3, [pc, #304]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x18c>
 800363a:	4b46      	ldr	r3, [pc, #280]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b43      	ldr	r3, [pc, #268]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x176>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1ba      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4939      	ldr	r1, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003682:	f7fe f8e9 	bl	8001858 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368a:	f7fe f8e5 	bl	8001858 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e19b      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4927      	ldr	r1, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <HAL_RCC_OscConfig+0x270>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe f8c8 	bl	8001858 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fe f8c4 	bl	8001858 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e17a      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d03a      	beq.n	800376c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d019      	beq.n	8003732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b17      	ldr	r3, [pc, #92]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe f8a8 	bl	8001858 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe f8a4 	bl	8001858 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e15a      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <HAL_RCC_OscConfig+0x26c>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800372a:	2001      	movs	r0, #1
 800372c:	f000 faa8 	bl	8003c80 <RCC_Delay>
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_OscConfig+0x274>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fe f88e 	bl	8001858 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373e:	e00f      	b.n	8003760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003740:	f7fe f88a 	bl	8001858 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d908      	bls.n	8003760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e140      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
 8003758:	42420000 	.word	0x42420000
 800375c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	4b9e      	ldr	r3, [pc, #632]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e9      	bne.n	8003740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a6 	beq.w	80038c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b97      	ldr	r3, [pc, #604]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b94      	ldr	r3, [pc, #592]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a93      	ldr	r2, [pc, #588]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]
 8003796:	4b91      	ldr	r3, [pc, #580]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b8e      	ldr	r3, [pc, #568]	; (80039e0 <HAL_RCC_OscConfig+0x4f8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <HAL_RCC_OscConfig+0x4f8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a8a      	ldr	r2, [pc, #552]	; (80039e0 <HAL_RCC_OscConfig+0x4f8>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fe f84b 	bl	8001858 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fe f847 	bl	8001858 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0fd      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x312>
 80037ec:	4b7b      	ldr	r3, [pc, #492]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	e02d      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x334>
 8003802:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	4a75      	ldr	r2, [pc, #468]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6213      	str	r3, [r2, #32]
 800380e:	4b73      	ldr	r3, [pc, #460]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a72      	ldr	r2, [pc, #456]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003814:	f023 0304 	bic.w	r3, r3, #4
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	e01c      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b05      	cmp	r3, #5
 8003822:	d10c      	bne.n	800383e <HAL_RCC_OscConfig+0x356>
 8003824:	4b6d      	ldr	r3, [pc, #436]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4a6c      	ldr	r2, [pc, #432]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800382a:	f043 0304 	orr.w	r3, r3, #4
 800382e:	6213      	str	r3, [r2, #32]
 8003830:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	4a69      	ldr	r2, [pc, #420]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6213      	str	r3, [r2, #32]
 800383c:	e00b      	b.n	8003856 <HAL_RCC_OscConfig+0x36e>
 800383e:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4a66      	ldr	r2, [pc, #408]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	4b64      	ldr	r3, [pc, #400]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	4a63      	ldr	r2, [pc, #396]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d015      	beq.n	800388a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385e:	f7fd fffb 	bl	8001858 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fd fff7 	bl	8001858 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e0ab      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387c:	4b57      	ldr	r3, [pc, #348]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0ee      	beq.n	8003866 <HAL_RCC_OscConfig+0x37e>
 8003888:	e014      	b.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fd ffe5 	bl	8001858 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	e00a      	b.n	80038a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fd ffe1 	bl	8001858 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e095      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a8:	4b4c      	ldr	r3, [pc, #304]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ee      	bne.n	8003892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038ba:	4b48      	ldr	r3, [pc, #288]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4a47      	ldr	r2, [pc, #284]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80038c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8081 	beq.w	80039d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038d0:	4b42      	ldr	r3, [pc, #264]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d061      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d146      	bne.n	8003972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x4fc>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ea:	f7fd ffb5 	bl	8001858 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd ffb1 	bl	8001858 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e067      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003904:	4b35      	ldr	r3, [pc, #212]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d108      	bne.n	800392c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	492d      	ldr	r1, [pc, #180]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800392c:	4b2b      	ldr	r3, [pc, #172]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a19      	ldr	r1, [r3, #32]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	430b      	orrs	r3, r1
 800393e:	4927      	ldr	r1, [pc, #156]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCC_OscConfig+0x4fc>)
 8003946:	2201      	movs	r2, #1
 8003948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7fd ff85 	bl	8001858 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003950:	e008      	b.n	8003964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003952:	f7fd ff81 	bl	8001858 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e037      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0f0      	beq.n	8003952 <HAL_RCC_OscConfig+0x46a>
 8003970:	e02f      	b.n	80039d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <HAL_RCC_OscConfig+0x4fc>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003978:	f7fd ff6e 	bl	8001858 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003980:	f7fd ff6a 	bl	8001858 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e020      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x498>
 800399e:	e018      	b.n	80039d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e013      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_RCC_OscConfig+0x4f4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d001      	beq.n	80039d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3718      	adds	r7, #24
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
 80039e4:	42420060 	.word	0x42420060

080039e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0d0      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b6a      	ldr	r3, [pc, #424]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d910      	bls.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 0207 	bic.w	r2, r3, #7
 8003a12:	4965      	ldr	r1, [pc, #404]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0b8      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a44:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5c:	4b53      	ldr	r3, [pc, #332]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b50      	ldr	r3, [pc, #320]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	494d      	ldr	r1, [pc, #308]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d040      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8e:	4b47      	ldr	r3, [pc, #284]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e07f      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b41      	ldr	r3, [pc, #260]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e073      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3d      	ldr	r3, [pc, #244]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e06b      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4936      	ldr	r1, [pc, #216]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7fd febe 	bl	8001858 <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7fd feba 	bl	8001858 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e053      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2d      	ldr	r3, [pc, #180]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d210      	bcs.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f023 0207 	bic.w	r2, r3, #7
 8003b1e:	4922      	ldr	r1, [pc, #136]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e032      	b.n	8003b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b44:	4b19      	ldr	r3, [pc, #100]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4916      	ldr	r1, [pc, #88]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b76:	f000 f821 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	4601      	mov	r1, r0
 8003b7c:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	5cd3      	ldrb	r3, [r2, r3]
 8003b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b8e:	4a09      	ldr	r2, [pc, #36]	; (8003bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fe1c 	bl	80017d4 <HAL_InitTick>

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40022000 	.word	0x40022000
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	080082b4 	.word	0x080082b4
 8003bb4:	20000004 	.word	0x20000004
 8003bb8:	20000008 	.word	0x20000008

08003bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b490      	push	{r4, r7}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bc4:	1d3c      	adds	r4, r7, #4
 8003bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 030c 	and.w	r3, r3, #12
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x40>
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x46>
 8003bfa:	e02d      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bfc:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bfe:	623b      	str	r3, [r7, #32]
      break;
 8003c00:	e02d      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	0c9b      	lsrs	r3, r3, #18
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c0e:	4413      	add	r3, r2
 8003c10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d013      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	0c5b      	lsrs	r3, r3, #17
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c2e:	4413      	add	r3, r2
 8003c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4a0f      	ldr	r2, [pc, #60]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3a:	fb02 f203 	mul.w	r2, r2, r3
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e004      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	623b      	str	r3, [r7, #32]
      break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c5a:	623b      	str	r3, [r7, #32]
      break;
 8003c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc90      	pop	{r4, r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	0800815c 	.word	0x0800815c
 8003c70:	0800816c 	.word	0x0800816c
 8003c74:	40021000 	.word	0x40021000
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	003d0900 	.word	0x003d0900

08003c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <RCC_Delay+0x34>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <RCC_Delay+0x38>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	0a5b      	lsrs	r3, r3, #9
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c9c:	bf00      	nop
  }
  while (Delay --);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1e5a      	subs	r2, r3, #1
 8003ca2:	60fa      	str	r2, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f9      	bne.n	8003c9c <RCC_Delay+0x1c>
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004
 8003cb8:	10624dd3 	.word	0x10624dd3

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d07d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cdc:	4b4f      	ldr	r3, [pc, #316]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10d      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce8:	4b4c      	ldr	r3, [pc, #304]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	4a4b      	ldr	r2, [pc, #300]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	61d3      	str	r3, [r2, #28]
 8003cf4:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d04:	4b46      	ldr	r3, [pc, #280]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d118      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d10:	4b43      	ldr	r3, [pc, #268]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a42      	ldr	r2, [pc, #264]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d1c:	f7fd fd9c 	bl	8001858 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d22:	e008      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd fd98 	bl	8001858 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e06d      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d36:	4b3a      	ldr	r3, [pc, #232]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d42:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d02e      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d027      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d60:	4b2e      	ldr	r3, [pc, #184]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d6a:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d70:	4b2c      	ldr	r3, [pc, #176]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d014      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fd fd67 	bl	8001858 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d8c:	e00a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fd fd63 	bl	8001858 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e036      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ee      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4917      	ldr	r1, [pc, #92]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4a13      	ldr	r2, [pc, #76]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	490b      	ldr	r1, [pc, #44]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d008      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	4904      	ldr	r1, [pc, #16]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	42420440 	.word	0x42420440

08003e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e041      	b.n	8003ebe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d106      	bne.n	8003e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fc66 	bl	8001720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4619      	mov	r1, r3
 8003e66:	4610      	mov	r0, r2
 8003e68:	f000 f930 	bl	80040cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d001      	beq.n	8003ee0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e032      	b.n	8003f46 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a18      	ldr	r2, [pc, #96]	; (8003f50 <HAL_TIM_Base_Start+0x88>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_TIM_Base_Start+0x48>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d009      	beq.n	8003f10 <HAL_TIM_Base_Start+0x48>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <HAL_TIM_Base_Start+0x8c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_Base_Start+0x48>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_TIM_Base_Start+0x90>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d111      	bne.n	8003f34 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d010      	beq.n	8003f44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	e007      	b.n	8003f44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000800 	.word	0x40000800

08003f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_ConfigClockSource+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0a6      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x166>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d067      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x120>
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d80b      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x6c>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d073      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d802      	bhi.n	8003fbe <HAL_TIM_ConfigClockSource+0x62>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d06f      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fbc:	e078      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d06c      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d06a      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fc6:	e073      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fc8:	2b70      	cmp	r3, #112	; 0x70
 8003fca:	d00d      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0x8c>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d804      	bhi.n	8003fda <HAL_TIM_ConfigClockSource+0x7e>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d033      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xe0>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d041      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fd8:	e06a      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d066      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x152>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d017      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fe6:	e063      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f000 f941 	bl	800427e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e04c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 f92a 	bl	800427e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e039      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	f000 f8a1 	bl	8004190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2150      	movs	r1, #80	; 0x50
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f8f8 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 800405a:	e029      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f8bf 	bl	80041ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2160      	movs	r1, #96	; 0x60
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f8e8 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 800407a:	e019      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f881 	bl	8004190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f8d8 	bl	800424a <TIM_ITRx_SetConfig>
      break;
 800409a:	e009      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 f8cf 	bl	800424a <TIM_ITRx_SetConfig>
        break;
 80040ac:	e000      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a29      	ldr	r2, [pc, #164]	; (8004184 <TIM_Base_SetConfig+0xb8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00b      	beq.n	80040fc <TIM_Base_SetConfig+0x30>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d007      	beq.n	80040fc <TIM_Base_SetConfig+0x30>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a26      	ldr	r2, [pc, #152]	; (8004188 <TIM_Base_SetConfig+0xbc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_Base_SetConfig+0x30>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a25      	ldr	r2, [pc, #148]	; (800418c <TIM_Base_SetConfig+0xc0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d108      	bne.n	800410e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1c      	ldr	r2, [pc, #112]	; (8004184 <TIM_Base_SetConfig+0xb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d00b      	beq.n	800412e <TIM_Base_SetConfig+0x62>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d007      	beq.n	800412e <TIM_Base_SetConfig+0x62>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <TIM_Base_SetConfig+0xbc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d003      	beq.n	800412e <TIM_Base_SetConfig+0x62>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <TIM_Base_SetConfig+0xc0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d108      	bne.n	8004140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <TIM_Base_SetConfig+0xb8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d103      	bne.n	8004174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	615a      	str	r2, [r3, #20]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800

08004190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f023 030a 	bic.w	r3, r3, #10
 80041cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 0210 	bic.w	r2, r3, #16
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004216:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	031b      	lsls	r3, r3, #12
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004228:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	621a      	str	r2, [r3, #32]
}
 8004240:	bf00      	nop
 8004242:	371c      	adds	r7, #28
 8004244:	46bd      	mov	sp, r7
 8004246:	bc80      	pop	{r7}
 8004248:	4770      	bx	lr

0800424a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	f043 0307 	orr.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
 800428a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004298:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e046      	b.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004320:	d009      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a10      	ldr	r2, [pc, #64]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d10c      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4313      	orrs	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800

08004378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004378:	b084      	sub	sp, #16
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	f107 0014 	add.w	r0, r7, #20
 8004386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	b004      	add	sp, #16
 8004396:	4770      	bx	lr

08004398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80043d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	4013      	ands	r3, r2
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004410:	b084      	sub	sp, #16
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	f107 0014 	add.w	r0, r7, #20
 800441e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	b004      	add	sp, #16
 800444e:	4770      	bx	lr

08004450 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004450:	b480      	push	{r7}
 8004452:	b09b      	sub	sp, #108	; 0x6c
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	78db      	ldrb	r3, [r3, #3]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d81f      	bhi.n	80044c2 <USB_ActivateEndpoint+0x72>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <USB_ActivateEndpoint+0x38>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	08004499 	.word	0x08004499
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044cb 	.word	0x080044cb
 8004494:	080044a7 	.word	0x080044a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004498:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800449c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044a4:	e012      	b.n	80044cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80044ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044b2:	e00b      	b.n	80044cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80044c0:	e004      	b.n	80044cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80044c8:	e000      	b.n	80044cc <USB_ActivateEndpoint+0x7c>
      break;
 80044ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	441a      	add	r2, r3
 80044d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80044da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4413      	add	r3, r2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	b29a      	uxth	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	441a      	add	r2, r3
 800451c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800452c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004530:	b29b      	uxth	r3, r3
 8004532:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	7b1b      	ldrb	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f040 8149 	bne.w	80047d0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8084 	beq.w	8004650 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004552:	b29b      	uxth	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4413      	add	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	011a      	lsls	r2, r3, #4
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	88db      	ldrh	r3, [r3, #6]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	b29b      	uxth	r3, r3
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	81fb      	strh	r3, [r7, #14]
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01b      	beq.n	80045cc <USB_ActivateEndpoint+0x17c>
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	81bb      	strh	r3, [r7, #12]
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	89bb      	ldrh	r3, [r7, #12]
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	78db      	ldrb	r3, [r3, #3]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d020      	beq.n	8004616 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ea:	813b      	strh	r3, [r7, #8]
 80045ec:	893b      	ldrh	r3, [r7, #8]
 80045ee:	f083 0320 	eor.w	r3, r3, #32
 80045f2:	813b      	strh	r3, [r7, #8]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	893b      	ldrh	r3, [r7, #8]
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
 8004614:	e27f      	b.n	8004b16 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	881b      	ldrh	r3, [r3, #0]
 8004622:	b29b      	uxth	r3, r3
 8004624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800462c:	817b      	strh	r3, [r7, #10]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	897b      	ldrh	r3, [r7, #10]
 800463a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800463e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464a:	b29b      	uxth	r3, r3
 800464c:	8013      	strh	r3, [r2, #0]
 800464e:	e262      	b.n	8004b16 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	4413      	add	r3, r2
 8004662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	011a      	lsls	r2, r3, #4
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	4413      	add	r3, r2
 800466e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	88db      	ldrh	r3, [r3, #6]
 8004678:	085b      	lsrs	r3, r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800468e:	b29b      	uxth	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	4413      	add	r3, r2
 8004696:	627b      	str	r3, [r7, #36]	; 0x24
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	011a      	lsls	r2, r3, #4
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	4413      	add	r3, r2
 80046a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d112      	bne.n	80046d6 <USB_ActivateEndpoint+0x286>
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	e02f      	b.n	8004736 <USB_ActivateEndpoint+0x2e6>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b3e      	cmp	r3, #62	; 0x3e
 80046dc:	d813      	bhi.n	8004706 <USB_ActivateEndpoint+0x2b6>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	663b      	str	r3, [r7, #96]	; 0x60
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <USB_ActivateEndpoint+0x2a8>
 80046f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046f4:	3301      	adds	r3, #1
 80046f6:	663b      	str	r3, [r7, #96]	; 0x60
 80046f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	029b      	lsls	r3, r3, #10
 80046fe:	b29a      	uxth	r2, r3
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	e017      	b.n	8004736 <USB_ActivateEndpoint+0x2e6>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <USB_ActivateEndpoint+0x2d0>
 800471a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800471c:	3b01      	subs	r3, #1
 800471e:	663b      	str	r3, [r7, #96]	; 0x60
 8004720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	83fb      	strh	r3, [r7, #30]
 8004744:	8bfb      	ldrh	r3, [r7, #30]
 8004746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01b      	beq.n	8004786 <USB_ActivateEndpoint+0x336>
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004764:	83bb      	strh	r3, [r7, #28]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8bbb      	ldrh	r3, [r7, #28]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800477a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	837b      	strh	r3, [r7, #26]
 800479e:	8b7b      	ldrh	r3, [r7, #26]
 80047a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047a4:	837b      	strh	r3, [r7, #26]
 80047a6:	8b7b      	ldrh	r3, [r7, #26]
 80047a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047ac:	837b      	strh	r3, [r7, #26]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	8b7b      	ldrh	r3, [r7, #26]
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
 80047ce:	e1a2      	b.n	8004b16 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	441a      	add	r2, r3
 80047f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80047f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004800:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004808:	b29b      	uxth	r3, r3
 800480a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800481c:	4413      	add	r3, r2
 800481e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	011a      	lsls	r2, r3, #4
 8004826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004828:	4413      	add	r3, r2
 800482a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800482e:	657b      	str	r3, [r7, #84]	; 0x54
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	891b      	ldrh	r3, [r3, #8]
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	b29b      	uxth	r3, r3
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	653b      	str	r3, [r7, #80]	; 0x50
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004850:	4413      	add	r3, r2
 8004852:	653b      	str	r3, [r7, #80]	; 0x50
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	4413      	add	r3, r2
 800485e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	895b      	ldrh	r3, [r3, #10]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	b29b      	uxth	r3, r3
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004872:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b00      	cmp	r3, #0
 800487a:	f040 8091 	bne.w	80049a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800488c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800488e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <USB_ActivateEndpoint+0x47e>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	873b      	strh	r3, [r7, #56]	; 0x38
 80048dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <USB_ActivateEndpoint+0x4ce>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800490a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800491a:	b29b      	uxth	r3, r3
 800491c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004936:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004938:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800493c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800493e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004940:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004944:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	441a      	add	r2, r3
 8004950:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497c:	867b      	strh	r3, [r7, #50]	; 0x32
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
 800499e:	e0ba      	b.n	8004b16 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01d      	beq.n	80049f8 <USB_ActivateEndpoint+0x5a8>
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01d      	beq.n	8004a50 <USB_ActivateEndpoint+0x600>
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d024      	beq.n	8004aa2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a76:	f083 0320 	eor.w	r3, r3, #32
 8004a7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
 8004aa0:	e01d      	b.n	8004ade <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	441a      	add	r2, r3
 8004ac6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004b16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	376c      	adds	r7, #108	; 0x6c
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr

08004b24 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b08d      	sub	sp, #52	; 0x34
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	7b1b      	ldrb	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 808e 	bne.w	8004c54 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d044      	beq.n	8004bca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	881b      	ldrh	r3, [r3, #0]
 8004b4c:	81bb      	strh	r3, [r7, #12]
 8004b4e:	89bb      	ldrh	r3, [r7, #12]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <USB_DeactivateEndpoint+0x6c>
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6e:	817b      	strh	r3, [r7, #10]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	441a      	add	r2, r3
 8004b7a:	897b      	ldrh	r3, [r7, #10]
 8004b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba6:	813b      	strh	r3, [r7, #8]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	441a      	add	r2, r3
 8004bb2:	893b      	ldrh	r3, [r7, #8]
 8004bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	8013      	strh	r3, [r2, #0]
 8004bc8:	e192      	b.n	8004ef0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	827b      	strh	r3, [r7, #18]
 8004bd8:	8a7b      	ldrh	r3, [r7, #18]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01b      	beq.n	8004c1a <USB_DeactivateEndpoint+0xf6>
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	823b      	strh	r3, [r7, #16]
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	441a      	add	r2, r3
 8004c04:	8a3b      	ldrh	r3, [r7, #16]
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	81fb      	strh	r3, [r7, #14]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	441a      	add	r2, r3
 8004c3c:	89fb      	ldrh	r3, [r7, #14]
 8004c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	8013      	strh	r3, [r2, #0]
 8004c52:	e14d      	b.n	8004ef0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	785b      	ldrb	r3, [r3, #1]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f040 80a5 	bne.w	8004da8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	843b      	strh	r3, [r7, #32]
 8004c6c:	8c3b      	ldrh	r3, [r7, #32]
 8004c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d01b      	beq.n	8004cae <USB_DeactivateEndpoint+0x18a>
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8c:	83fb      	strh	r3, [r7, #30]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	441a      	add	r2, r3
 8004c98:	8bfb      	ldrh	r3, [r7, #30]
 8004c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	881b      	ldrh	r3, [r3, #0]
 8004cba:	83bb      	strh	r3, [r7, #28]
 8004cbc:	8bbb      	ldrh	r3, [r7, #28]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01b      	beq.n	8004cfe <USB_DeactivateEndpoint+0x1da>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cdc:	837b      	strh	r3, [r7, #26]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	441a      	add	r2, r3
 8004ce8:	8b7b      	ldrh	r3, [r7, #26]
 8004cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	833b      	strh	r3, [r7, #24]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	441a      	add	r2, r3
 8004d20:	8b3b      	ldrh	r3, [r7, #24]
 8004d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4c:	82fb      	strh	r3, [r7, #22]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	8afb      	ldrh	r3, [r7, #22]
 8004d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d84:	82bb      	strh	r3, [r7, #20]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	8abb      	ldrh	r3, [r7, #20]
 8004d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	8013      	strh	r3, [r2, #0]
 8004da6:	e0a3      	b.n	8004ef0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004db6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01b      	beq.n	8004df8 <USB_DeactivateEndpoint+0x2d4>
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	881b      	ldrh	r3, [r3, #0]
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <USB_DeactivateEndpoint+0x324>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004edc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3734      	adds	r7, #52	; 0x34
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b0c4      	sub	sp, #272	; 0x110
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	1d3b      	adds	r3, r7, #4
 8004f04:	6018      	str	r0, [r3, #0]
 8004f06:	463b      	mov	r3, r7
 8004f08:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f0a:	463b      	mov	r3, r7
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	f040 8557 	bne.w	80059c4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699a      	ldr	r2, [r3, #24]
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d905      	bls.n	8004f32 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004f26:	463b      	mov	r3, r7
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004f30:	e004      	b.n	8004f3c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004f32:	463b      	mov	r3, r7
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f3c:	463b      	mov	r3, r7
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	7b1b      	ldrb	r3, [r3, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d12c      	bne.n	8004fa0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f46:	463b      	mov	r3, r7
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6959      	ldr	r1, [r3, #20]
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	88da      	ldrh	r2, [r3, #6]
 8004f52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	1d38      	adds	r0, r7, #4
 8004f5a:	6800      	ldr	r0, [r0, #0]
 8004f5c:	f001 fa2c 	bl	80063b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4413      	add	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	463b      	mov	r3, r7
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	011a      	lsls	r2, r3, #4
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004f88:	f107 0310 	add.w	r3, r7, #16
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	f000 bcdd 	b.w	800595a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	f040 8347 	bne.w	800563a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fac:	463b      	mov	r3, r7
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a1a      	ldr	r2, [r3, #32]
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	f240 82eb 	bls.w	8005594 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004fbe:	1d3b      	adds	r3, r7, #4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	463b      	mov	r3, r7
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004fdc:	1d3b      	adds	r3, r7, #4
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004fee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005002:	463b      	mov	r3, r7
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500c:	1ad2      	subs	r2, r2, r3
 800500e:	463b      	mov	r3, r7
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005014:	1d3b      	adds	r3, r7, #4
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	881b      	ldrh	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8159 	beq.w	80052e2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
 8005036:	463b      	mov	r3, r7
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d164      	bne.n	800510a <USB_EPStartXfer+0x20e>
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	1d3b      	adds	r3, r7, #4
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005054:	4413      	add	r3, r2
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	011a      	lsls	r2, r3, #4
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	4413      	add	r3, r2
 8005064:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d112      	bne.n	8005098 <USB_EPStartXfer+0x19c>
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800507c:	b29a      	uxth	r2, r3
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	b29b      	uxth	r3, r3
 8005088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005090:	b29a      	uxth	r2, r3
 8005092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	e054      	b.n	8005142 <USB_EPStartXfer+0x246>
 8005098:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800509c:	2b3e      	cmp	r3, #62	; 0x3e
 800509e:	d817      	bhi.n	80050d0 <USB_EPStartXfer+0x1d4>
 80050a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050a4:	085b      	lsrs	r3, r3, #1
 80050a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <USB_EPStartXfer+0x1c4>
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ba:	3301      	adds	r3, #1
 80050bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e038      	b.n	8005142 <USB_EPStartXfer+0x246>
 80050d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <USB_EPStartXfer+0x1f4>
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ea:	3b01      	subs	r3, #1
 80050ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80050f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	029b      	lsls	r3, r3, #10
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005102:	b29a      	uxth	r2, r3
 8005104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e01b      	b.n	8005142 <USB_EPStartXfer+0x246>
 800510a:	463b      	mov	r3, r7
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	785b      	ldrb	r3, [r3, #1]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d116      	bne.n	8005142 <USB_EPStartXfer+0x246>
 8005114:	1d3b      	adds	r3, r7, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800511c:	b29b      	uxth	r3, r3
 800511e:	461a      	mov	r2, r3
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	4413      	add	r3, r2
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
 8005126:	463b      	mov	r3, r7
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	011a      	lsls	r2, r3, #4
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	4413      	add	r3, r2
 8005132:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005136:	633b      	str	r3, [r7, #48]	; 0x30
 8005138:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513c:	b29a      	uxth	r2, r3
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005142:	463b      	mov	r3, r7
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	895b      	ldrh	r3, [r3, #10]
 8005148:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514c:	463b      	mov	r3, r7
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005156:	b29b      	uxth	r3, r3
 8005158:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800515c:	1d38      	adds	r0, r7, #4
 800515e:	6800      	ldr	r0, [r0, #0]
 8005160:	f001 f92a 	bl	80063b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800516e:	441a      	add	r2, r3
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005176:	463b      	mov	r3, r7
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	463b      	mov	r3, r7
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d909      	bls.n	800519a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	463b      	mov	r3, r7
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	621a      	str	r2, [r3, #32]
 8005198:	e008      	b.n	80051ac <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800519a:	463b      	mov	r3, r7
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80051a4:	463b      	mov	r3, r7
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d164      	bne.n	8005280 <USB_EPStartXfer+0x384>
 80051b6:	1d3b      	adds	r3, r7, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	463b      	mov	r3, r7
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	011a      	lsls	r2, r3, #4
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d112      	bne.n	800520e <USB_EPStartXfer+0x312>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005206:	b29a      	uxth	r2, r3
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e057      	b.n	80052be <USB_EPStartXfer+0x3c2>
 800520e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005212:	2b3e      	cmp	r3, #62	; 0x3e
 8005214:	d817      	bhi.n	8005246 <USB_EPStartXfer+0x34a>
 8005216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005220:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <USB_EPStartXfer+0x33a>
 800522c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005230:	3301      	adds	r3, #1
 8005232:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005236:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800523a:	b29b      	uxth	r3, r3
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	b29a      	uxth	r2, r3
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	e03b      	b.n	80052be <USB_EPStartXfer+0x3c2>
 8005246:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2b00      	cmp	r3, #0
 800525a:	d104      	bne.n	8005266 <USB_EPStartXfer+0x36a>
 800525c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005260:	3b01      	subs	r3, #1
 8005262:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005266:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800526a:	b29b      	uxth	r3, r3
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	b29b      	uxth	r3, r3
 8005270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005278:	b29a      	uxth	r2, r3
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	e01e      	b.n	80052be <USB_EPStartXfer+0x3c2>
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d119      	bne.n	80052be <USB_EPStartXfer+0x3c2>
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	891b      	ldrh	r3, [r3, #8]
 80052c4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c8:	463b      	mov	r3, r7
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6959      	ldr	r1, [r3, #20]
 80052ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052d8:	1d38      	adds	r0, r7, #4
 80052da:	6800      	ldr	r0, [r0, #0]
 80052dc:	f001 f86c 	bl	80063b8 <USB_WritePMA>
 80052e0:	e33b      	b.n	800595a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052e2:	463b      	mov	r3, r7
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d164      	bne.n	80053b6 <USB_EPStartXfer+0x4ba>
 80052ec:	1d3b      	adds	r3, r7, #4
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f2:	1d3b      	adds	r3, r7, #4
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005300:	4413      	add	r3, r2
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	463b      	mov	r3, r7
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	011a      	lsls	r2, r3, #4
 800530c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530e:	4413      	add	r3, r2
 8005310:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005314:	64bb      	str	r3, [r7, #72]	; 0x48
 8005316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d112      	bne.n	8005344 <USB_EPStartXfer+0x448>
 800531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005328:	b29a      	uxth	r2, r3
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	801a      	strh	r2, [r3, #0]
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533c:	b29a      	uxth	r2, r3
 800533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005340:	801a      	strh	r2, [r3, #0]
 8005342:	e057      	b.n	80053f4 <USB_EPStartXfer+0x4f8>
 8005344:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005348:	2b3e      	cmp	r3, #62	; 0x3e
 800534a:	d817      	bhi.n	800537c <USB_EPStartXfer+0x480>
 800534c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <USB_EPStartXfer+0x470>
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005366:	3301      	adds	r3, #1
 8005368:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800536c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005370:	b29b      	uxth	r3, r3
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	b29a      	uxth	r2, r3
 8005376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e03b      	b.n	80053f4 <USB_EPStartXfer+0x4f8>
 800537c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <USB_EPStartXfer+0x4a0>
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	3b01      	subs	r3, #1
 8005398:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800539c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053b2:	801a      	strh	r2, [r3, #0]
 80053b4:	e01e      	b.n	80053f4 <USB_EPStartXfer+0x4f8>
 80053b6:	463b      	mov	r3, r7
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d119      	bne.n	80053f4 <USB_EPStartXfer+0x4f8>
 80053c0:	1d3b      	adds	r3, r7, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	657b      	str	r3, [r7, #84]	; 0x54
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d4:	4413      	add	r3, r2
 80053d6:	657b      	str	r3, [r7, #84]	; 0x54
 80053d8:	463b      	mov	r3, r7
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	011a      	lsls	r2, r3, #4
 80053e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e2:	4413      	add	r3, r2
 80053e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053e8:	653b      	str	r3, [r7, #80]	; 0x50
 80053ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053f4:	463b      	mov	r3, r7
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	891b      	ldrh	r3, [r3, #8]
 80053fa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053fe:	463b      	mov	r3, r7
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6959      	ldr	r1, [r3, #20]
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	b29b      	uxth	r3, r3
 800540a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800540e:	1d38      	adds	r0, r7, #4
 8005410:	6800      	ldr	r0, [r0, #0]
 8005412:	f000 ffd1 	bl	80063b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695a      	ldr	r2, [r3, #20]
 800541c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005420:	441a      	add	r2, r3
 8005422:	463b      	mov	r3, r7
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6a1a      	ldr	r2, [r3, #32]
 800542e:	463b      	mov	r3, r7
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d909      	bls.n	800544c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005438:	463b      	mov	r3, r7
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6a1a      	ldr	r2, [r3, #32]
 800543e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005442:	1ad2      	subs	r2, r2, r3
 8005444:	463b      	mov	r3, r7
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	e008      	b.n	800545e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800544c:	463b      	mov	r3, r7
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800545e:	1d3b      	adds	r3, r7, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	647b      	str	r3, [r7, #68]	; 0x44
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d164      	bne.n	8005538 <USB_EPStartXfer+0x63c>
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005474:	1d3b      	adds	r3, r7, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547c:	b29b      	uxth	r3, r3
 800547e:	461a      	mov	r2, r3
 8005480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005482:	4413      	add	r3, r2
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005486:	463b      	mov	r3, r7
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	011a      	lsls	r2, r3, #4
 800548e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005490:	4413      	add	r3, r2
 8005492:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
 8005498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800549c:	2b00      	cmp	r3, #0
 800549e:	d112      	bne.n	80054c6 <USB_EPStartXfer+0x5ca>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e054      	b.n	8005570 <USB_EPStartXfer+0x674>
 80054c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054ca:	2b3e      	cmp	r3, #62	; 0x3e
 80054cc:	d817      	bhi.n	80054fe <USB_EPStartXfer+0x602>
 80054ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d2:	085b      	lsrs	r3, r3, #1
 80054d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d004      	beq.n	80054ee <USB_EPStartXfer+0x5f2>
 80054e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e8:	3301      	adds	r3, #1
 80054ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	029b      	lsls	r3, r3, #10
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e038      	b.n	8005570 <USB_EPStartXfer+0x674>
 80054fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005508:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <USB_EPStartXfer+0x622>
 8005514:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005518:	3b01      	subs	r3, #1
 800551a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800551e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005530:	b29a      	uxth	r2, r3
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e01b      	b.n	8005570 <USB_EPStartXfer+0x674>
 8005538:	463b      	mov	r3, r7
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d116      	bne.n	8005570 <USB_EPStartXfer+0x674>
 8005542:	1d3b      	adds	r3, r7, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554a:	b29b      	uxth	r3, r3
 800554c:	461a      	mov	r2, r3
 800554e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005550:	4413      	add	r3, r2
 8005552:	647b      	str	r3, [r7, #68]	; 0x44
 8005554:	463b      	mov	r3, r7
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011a      	lsls	r2, r3, #4
 800555c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555e:	4413      	add	r3, r2
 8005560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
 8005566:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800556a:	b29a      	uxth	r2, r3
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005570:	463b      	mov	r3, r7
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	895b      	ldrh	r3, [r3, #10]
 8005576:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6959      	ldr	r1, [r3, #20]
 8005580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005584:	b29b      	uxth	r3, r3
 8005586:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800558a:	1d38      	adds	r0, r7, #4
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f000 ff13 	bl	80063b8 <USB_WritePMA>
 8005592:	e1e2      	b.n	800595a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005594:	463b      	mov	r3, r7
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800559e:	1d3b      	adds	r3, r7, #4
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	463b      	mov	r3, r7
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80055bc:	1d3b      	adds	r3, r7, #4
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	463b      	mov	r3, r7
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	441a      	add	r2, r3
 80055ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80055ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055de:	b29b      	uxth	r3, r3
 80055e0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055e2:	1d3b      	adds	r3, r7, #4
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	663b      	str	r3, [r7, #96]	; 0x60
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055f6:	4413      	add	r3, r2
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	011a      	lsls	r2, r3, #4
 8005602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005604:	4413      	add	r3, r2
 8005606:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800560a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800560c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005610:	b29a      	uxth	r2, r3
 8005612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005614:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	891b      	ldrh	r3, [r3, #8]
 800561c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800562a:	b29b      	uxth	r3, r3
 800562c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005630:	1d38      	adds	r0, r7, #4
 8005632:	6800      	ldr	r0, [r0, #0]
 8005634:	f000 fec0 	bl	80063b8 <USB_WritePMA>
 8005638:	e18f      	b.n	800595a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800563a:	1d3b      	adds	r3, r7, #4
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	463b      	mov	r3, r7
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 808f 	beq.w	8005774 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	67bb      	str	r3, [r7, #120]	; 0x78
 800565c:	463b      	mov	r3, r7
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d164      	bne.n	8005730 <USB_EPStartXfer+0x834>
 8005666:	1d3b      	adds	r3, r7, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	673b      	str	r3, [r7, #112]	; 0x70
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567a:	4413      	add	r3, r2
 800567c:	673b      	str	r3, [r7, #112]	; 0x70
 800567e:	463b      	mov	r3, r7
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	011a      	lsls	r2, r3, #4
 8005686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005688:	4413      	add	r3, r2
 800568a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800568e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005690:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d112      	bne.n	80056be <USB_EPStartXfer+0x7c2>
 8005698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a6:	801a      	strh	r2, [r3, #0]
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	801a      	strh	r2, [r3, #0]
 80056bc:	e054      	b.n	8005768 <USB_EPStartXfer+0x86c>
 80056be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c2:	2b3e      	cmp	r3, #62	; 0x3e
 80056c4:	d817      	bhi.n	80056f6 <USB_EPStartXfer+0x7fa>
 80056c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ca:	085b      	lsrs	r3, r3, #1
 80056cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <USB_EPStartXfer+0x7ea>
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e0:	3301      	adds	r3, #1
 80056e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	029b      	lsls	r3, r3, #10
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	e038      	b.n	8005768 <USB_EPStartXfer+0x86c>
 80056f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <USB_EPStartXfer+0x81a>
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	3b01      	subs	r3, #1
 8005712:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571a:	b29b      	uxth	r3, r3
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005728:	b29a      	uxth	r2, r3
 800572a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e01b      	b.n	8005768 <USB_EPStartXfer+0x86c>
 8005730:	463b      	mov	r3, r7
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d116      	bne.n	8005768 <USB_EPStartXfer+0x86c>
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005748:	4413      	add	r3, r2
 800574a:	67bb      	str	r3, [r7, #120]	; 0x78
 800574c:	463b      	mov	r3, r7
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	011a      	lsls	r2, r3, #4
 8005754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005756:	4413      	add	r3, r2
 8005758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800575c:	677b      	str	r3, [r7, #116]	; 0x74
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	b29a      	uxth	r2, r3
 8005764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005766:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	895b      	ldrh	r3, [r3, #10]
 800576e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005772:	e097      	b.n	80058a4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d168      	bne.n	8005850 <USB_EPStartXfer+0x954>
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005786:	1d3b      	adds	r3, r7, #4
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800578e:	b29b      	uxth	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005796:	4413      	add	r3, r2
 8005798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	011a      	lsls	r2, r3, #4
 80057a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057a8:	4413      	add	r3, r2
 80057aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d112      	bne.n	80057de <USB_EPStartXfer+0x8e2>
 80057b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057da:	801a      	strh	r2, [r3, #0]
 80057dc:	e05d      	b.n	800589a <USB_EPStartXfer+0x99e>
 80057de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e2:	2b3e      	cmp	r3, #62	; 0x3e
 80057e4:	d817      	bhi.n	8005816 <USB_EPStartXfer+0x91a>
 80057e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057ea:	085b      	lsrs	r3, r3, #1
 80057ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80057f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <USB_EPStartXfer+0x90a>
 80057fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005800:	3301      	adds	r3, #1
 8005802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005806:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800580a:	b29b      	uxth	r3, r3
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	b29a      	uxth	r2, r3
 8005810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e041      	b.n	800589a <USB_EPStartXfer+0x99e>
 8005816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <USB_EPStartXfer+0x93a>
 800582c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005830:	3b01      	subs	r3, #1
 8005832:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800583a:	b29b      	uxth	r3, r3
 800583c:	029b      	lsls	r3, r3, #10
 800583e:	b29b      	uxth	r3, r3
 8005840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005848:	b29a      	uxth	r2, r3
 800584a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800584c:	801a      	strh	r2, [r3, #0]
 800584e:	e024      	b.n	800589a <USB_EPStartXfer+0x99e>
 8005850:	463b      	mov	r3, r7
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d11f      	bne.n	800589a <USB_EPStartXfer+0x99e>
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005872:	4413      	add	r3, r2
 8005874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005878:	463b      	mov	r3, r7
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005884:	4413      	add	r3, r2
 8005886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800588a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005892:	b29a      	uxth	r2, r3
 8005894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005898:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800589a:	463b      	mov	r3, r7
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	891b      	ldrh	r3, [r3, #8]
 80058a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a4:	463b      	mov	r3, r7
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6959      	ldr	r1, [r3, #20]
 80058aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80058b4:	1d38      	adds	r0, r7, #4
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	f000 fd7e 	bl	80063b8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d122      	bne.n	800590c <USB_EPStartXfer+0xa10>
 80058c6:	1d3b      	adds	r3, r7, #4
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	463b      	mov	r3, r7
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80058e4:	1d3b      	adds	r3, r7, #4
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	463b      	mov	r3, r7
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80058f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005906:	b29b      	uxth	r3, r3
 8005908:	8013      	strh	r3, [r2, #0]
 800590a:	e026      	b.n	800595a <USB_EPStartXfer+0xa5e>
 800590c:	463b      	mov	r3, r7
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d121      	bne.n	800595a <USB_EPStartXfer+0xa5e>
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	463b      	mov	r3, r7
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29b      	uxth	r3, r3
 8005928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800592c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005930:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	463b      	mov	r3, r7
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	441a      	add	r2, r3
 8005942:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800595a:	1d3b      	adds	r3, r7, #4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	f107 020e 	add.w	r2, r7, #14
 8005970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	8013      	strh	r3, [r2, #0]
 800597a:	f107 030e 	add.w	r3, r7, #14
 800597e:	f107 020e 	add.w	r2, r7, #14
 8005982:	8812      	ldrh	r2, [r2, #0]
 8005984:	f082 0210 	eor.w	r2, r2, #16
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	f107 030e 	add.w	r3, r7, #14
 800598e:	f107 020e 	add.w	r2, r7, #14
 8005992:	8812      	ldrh	r2, [r2, #0]
 8005994:	f082 0220 	eor.w	r2, r2, #32
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	1d3b      	adds	r3, r7, #4
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	463b      	mov	r3, r7
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	441a      	add	r2, r3
 80059a8:	f107 030e 	add.w	r3, r7, #14
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059be:	b29b      	uxth	r3, r3
 80059c0:	8013      	strh	r3, [r2, #0]
 80059c2:	e3b5      	b.n	8006130 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	7b1b      	ldrb	r3, [r3, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f040 8090 	bne.w	8005af0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	463b      	mov	r3, r7
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d90e      	bls.n	80059fe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80059ea:	463b      	mov	r3, r7
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	619a      	str	r2, [r3, #24]
 80059fc:	e008      	b.n	8005a10 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80059fe:	463b      	mov	r3, r7
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005a08:	463b      	mov	r3, r7
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a18:	1d3b      	adds	r3, r7, #4
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a28:	4413      	add	r3, r2
 8005a2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a2e:	463b      	mov	r3, r7
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	011a      	lsls	r2, r3, #4
 8005a36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d116      	bne.n	8005a7a <USB_EPStartXfer+0xb7e>
 8005a4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e32c      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
 8005a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a7e:	2b3e      	cmp	r3, #62	; 0x3e
 8005a80:	d818      	bhi.n	8005ab4 <USB_EPStartXfer+0xbb8>
 8005a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d004      	beq.n	8005aa2 <USB_EPStartXfer+0xba6>
 8005a98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e30f      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
 8005ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	f003 031f 	and.w	r3, r3, #31
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <USB_EPStartXfer+0xbd8>
 8005aca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ad4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e2f1      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005af0:	463b      	mov	r3, r7
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	78db      	ldrb	r3, [r3, #3]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	f040 818f 	bne.w	8005e1a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d175      	bne.n	8005bf2 <USB_EPStartXfer+0xcf6>
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b1e:	4413      	add	r3, r2
 8005b20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b24:	463b      	mov	r3, r7
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	011a      	lsls	r2, r3, #4
 8005b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b30:	4413      	add	r3, r2
 8005b32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <USB_EPStartXfer+0xc76>
 8005b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e065      	b.n	8005c3e <USB_EPStartXfer+0xd42>
 8005b72:	463b      	mov	r3, r7
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b3e      	cmp	r3, #62	; 0x3e
 8005b7a:	d81a      	bhi.n	8005bb2 <USB_EPStartXfer+0xcb6>
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b88:	463b      	mov	r3, r7
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <USB_EPStartXfer+0xca4>
 8005b96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	029b      	lsls	r3, r3, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e045      	b.n	8005c3e <USB_EPStartXfer+0xd42>
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <USB_EPStartXfer+0xcda>
 8005bcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	029b      	lsls	r3, r3, #10
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e025      	b.n	8005c3e <USB_EPStartXfer+0xd42>
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d120      	bne.n	8005c3e <USB_EPStartXfer+0xd42>
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c04:	1d3b      	adds	r3, r7, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c14:	4413      	add	r3, r2
 8005c16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	011a      	lsls	r2, r3, #4
 8005c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c26:	4413      	add	r3, r2
 8005c28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c30:	463b      	mov	r3, r7
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	1d3b      	adds	r3, r7, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d175      	bne.n	8005d3c <USB_EPStartXfer+0xe40>
 8005c50:	1d3b      	adds	r3, r7, #4
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c58:	1d3b      	adds	r3, r7, #4
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c68:	4413      	add	r3, r2
 8005c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c6e:	463b      	mov	r3, r7
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c84:	463b      	mov	r3, r7
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d116      	bne.n	8005cbc <USB_EPStartXfer+0xdc0>
 8005c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca0:	801a      	strh	r2, [r3, #0]
 8005ca2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cb8:	801a      	strh	r2, [r3, #0]
 8005cba:	e061      	b.n	8005d80 <USB_EPStartXfer+0xe84>
 8005cbc:	463b      	mov	r3, r7
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc4:	d81a      	bhi.n	8005cfc <USB_EPStartXfer+0xe00>
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <USB_EPStartXfer+0xdee>
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cf8:	801a      	strh	r2, [r3, #0]
 8005cfa:	e041      	b.n	8005d80 <USB_EPStartXfer+0xe84>
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d08:	463b      	mov	r3, r7
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d104      	bne.n	8005d20 <USB_EPStartXfer+0xe24>
 8005d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e021      	b.n	8005d80 <USB_EPStartXfer+0xe84>
 8005d3c:	463b      	mov	r3, r7
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d11c      	bne.n	8005d80 <USB_EPStartXfer+0xe84>
 8005d46:	1d3b      	adds	r3, r7, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	461a      	mov	r2, r3
 8005d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d56:	4413      	add	r3, r2
 8005d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d68:	4413      	add	r3, r2
 8005d6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d7e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d80:	463b      	mov	r3, r7
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 81a4 	beq.w	80060d4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	463b      	mov	r3, r7
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005da0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <USB_EPStartXfer+0xebc>
 8005dac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005db8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005dbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 8187 	bne.w	80060d4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f040 8180 	bne.w	80060d4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	463b      	mov	r3, r7
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	463b      	mov	r3, r7
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	441a      	add	r2, r3
 8005e00:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
 8005e18:	e15c      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e1a:	463b      	mov	r3, r7
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	78db      	ldrb	r3, [r3, #3]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	f040 8155 	bne.w	80060d0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e26:	463b      	mov	r3, r7
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d90e      	bls.n	8005e54 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005e40:	463b      	mov	r3, r7
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4a:	1ad2      	subs	r2, r2, r3
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	619a      	str	r2, [r3, #24]
 8005e52:	e008      	b.n	8005e66 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005e54:	463b      	mov	r3, r7
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005e5e:	463b      	mov	r3, r7
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e66:	463b      	mov	r3, r7
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d16f      	bne.n	8005f50 <USB_EPStartXfer+0x1054>
 8005e70:	1d3b      	adds	r3, r7, #4
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e78:	1d3b      	adds	r3, r7, #4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e88:	4413      	add	r3, r2
 8005e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e8e:	463b      	mov	r3, r7
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	011a      	lsls	r2, r3, #4
 8005e96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ea0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d116      	bne.n	8005eda <USB_EPStartXfer+0xfde>
 8005eac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ebe:	801a      	strh	r2, [r3, #0]
 8005ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e05f      	b.n	8005f9a <USB_EPStartXfer+0x109e>
 8005eda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ede:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee0:	d818      	bhi.n	8005f14 <USB_EPStartXfer+0x1018>
 8005ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <USB_EPStartXfer+0x1006>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	3301      	adds	r3, #1
 8005efe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	029b      	lsls	r3, r3, #10
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f10:	801a      	strh	r2, [r3, #0]
 8005f12:	e042      	b.n	8005f9a <USB_EPStartXfer+0x109e>
 8005f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f22:	f003 031f 	and.w	r3, r3, #31
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <USB_EPStartXfer+0x1038>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	029b      	lsls	r3, r3, #10
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e024      	b.n	8005f9a <USB_EPStartXfer+0x109e>
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d11f      	bne.n	8005f9a <USB_EPStartXfer+0x109e>
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f72:	4413      	add	r3, r2
 8005f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f78:	463b      	mov	r3, r7
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	011a      	lsls	r2, r3, #4
 8005f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f84:	4413      	add	r3, r2
 8005f86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	1d3b      	adds	r3, r7, #4
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	785b      	ldrb	r3, [r3, #1]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d16f      	bne.n	800608c <USB_EPStartXfer+0x1190>
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fb4:	1d3b      	adds	r3, r7, #4
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fca:	463b      	mov	r3, r7
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	011a      	lsls	r2, r3, #4
 8005fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d116      	bne.n	8006016 <USB_EPStartXfer+0x111a>
 8005fe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ffa:	801a      	strh	r2, [r3, #0]
 8005ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b29b      	uxth	r3, r3
 8006004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e05e      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
 8006016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601a:	2b3e      	cmp	r3, #62	; 0x3e
 800601c:	d818      	bhi.n	8006050 <USB_EPStartXfer+0x1154>
 800601e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <USB_EPStartXfer+0x1142>
 8006034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006038:	3301      	adds	r3, #1
 800603a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	b29b      	uxth	r3, r3
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e041      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <USB_EPStartXfer+0x1174>
 8006066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606a:	3b01      	subs	r3, #1
 800606c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006074:	b29b      	uxth	r3, r3
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	e023      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
 800608c:	463b      	mov	r3, r7
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d11e      	bne.n	80060d4 <USB_EPStartXfer+0x11d8>
 8006096:	1d3b      	adds	r3, r7, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800609e:	b29b      	uxth	r3, r3
 80060a0:	461a      	mov	r2, r3
 80060a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060a6:	4413      	add	r3, r2
 80060a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	011a      	lsls	r2, r3, #4
 80060b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	e001      	b.n	80060d4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e02e      	b.n	8006132 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80060fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80060fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006102:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006106:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800610a:	1d3b      	adds	r3, r7, #4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	463b      	mov	r3, r7
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800611c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d020      	beq.n	8006190 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006164:	81bb      	strh	r3, [r7, #12]
 8006166:	89bb      	ldrh	r3, [r7, #12]
 8006168:	f083 0310 	eor.w	r3, r3, #16
 800616c:	81bb      	strh	r3, [r7, #12]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	441a      	add	r2, r3
 8006178:	89bb      	ldrh	r3, [r7, #12]
 800617a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800617e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800618a:	b29b      	uxth	r3, r3
 800618c:	8013      	strh	r3, [r2, #0]
 800618e:	e01f      	b.n	80061d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	81fb      	strh	r3, [r7, #14]
 80061a8:	89fb      	ldrh	r3, [r7, #14]
 80061aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061ae:	81fb      	strh	r3, [r7, #14]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	89fb      	ldrh	r3, [r7, #14]
 80061bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	7b1b      	ldrb	r3, [r3, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 809d 	bne.w	800632a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d04c      	beq.n	8006292 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	823b      	strh	r3, [r7, #16]
 8006206:	8a3b      	ldrh	r3, [r7, #16]
 8006208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <USB_EPClearStall+0x6c>
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	b29b      	uxth	r3, r3
 800621e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	81fb      	strh	r3, [r7, #14]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	441a      	add	r2, r3
 8006232:	89fb      	ldrh	r3, [r7, #14]
 8006234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006244:	b29b      	uxth	r3, r3
 8006246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	78db      	ldrb	r3, [r3, #3]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d06c      	beq.n	800632a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	881b      	ldrh	r3, [r3, #0]
 800625c:	b29b      	uxth	r3, r3
 800625e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006266:	81bb      	strh	r3, [r7, #12]
 8006268:	89bb      	ldrh	r3, [r7, #12]
 800626a:	f083 0320 	eor.w	r3, r3, #32
 800626e:	81bb      	strh	r3, [r7, #12]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	89bb      	ldrh	r3, [r7, #12]
 800627c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
 8006290:	e04b      	b.n	800632a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	82fb      	strh	r3, [r7, #22]
 80062a0:	8afb      	ldrh	r3, [r7, #22]
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <USB_EPClearStall+0x106>
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	82bb      	strh	r3, [r7, #20]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	441a      	add	r2, r3
 80062cc:	8abb      	ldrh	r3, [r7, #20]
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f8:	827b      	strh	r3, [r7, #18]
 80062fa:	8a7b      	ldrh	r3, [r7, #18]
 80062fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006300:	827b      	strh	r3, [r7, #18]
 8006302:	8a7b      	ldrh	r3, [r7, #18]
 8006304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006308:	827b      	strh	r3, [r7, #18]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	441a      	add	r2, r3
 8006314:	8a7b      	ldrh	r3, [r7, #18]
 8006316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800631a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006326:	b29b      	uxth	r3, r3
 8006328:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	4770      	bx	lr

08006336 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2280      	movs	r2, #128	; 0x80
 800634c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr

08006384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006392:	b29b      	uxth	r3, r3
 8006394:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006396:	68fb      	ldr	r3, [r7, #12]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	bc80      	pop	{r7}
 80063a0:	4770      	bx	lr

080063a2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b08d      	sub	sp, #52	; 0x34
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	460b      	mov	r3, r1
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80063ce:	88bb      	ldrh	r3, [r7, #4]
 80063d0:	3301      	adds	r3, #1
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	005a      	lsls	r2, r3, #1
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80063ec:	6a3b      	ldr	r3, [r7, #32]
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f0:	e01e      	b.n	8006430 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	3301      	adds	r3, #1
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b29b      	uxth	r3, r3
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	b29a      	uxth	r2, r3
 8006414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006416:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	3302      	adds	r3, #2
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	3302      	adds	r3, #2
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	3301      	adds	r3, #1
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642c:	3b01      	subs	r3, #1
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1dd      	bne.n	80063f2 <USB_WritePMA+0x3a>
  }
}
 8006436:	bf00      	nop
 8006438:	3734      	adds	r7, #52	; 0x34
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006440:	b480      	push	{r7}
 8006442:	b08b      	sub	sp, #44	; 0x2c
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	460b      	mov	r3, r1
 8006450:	80fb      	strh	r3, [r7, #6]
 8006452:	4613      	mov	r3, r2
 8006454:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006456:	88bb      	ldrh	r3, [r7, #4]
 8006458:	085b      	lsrs	r3, r3, #1
 800645a:	b29b      	uxth	r3, r3
 800645c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	005a      	lsls	r2, r3, #1
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006472:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
 8006478:	e01b      	b.n	80064b2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	3302      	adds	r3, #2
 8006486:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	b2da      	uxtb	r2, r3
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	3302      	adds	r3, #2
 80064aa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	3b01      	subs	r3, #1
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e0      	bne.n	800647a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80064b8:	88bb      	ldrh	r3, [r7, #4]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	701a      	strb	r2, [r3, #0]
  }
}
 80064d4:	bf00      	nop
 80064d6:	372c      	adds	r7, #44	; 0x2c
 80064d8:	46bd      	mov	sp, r7
 80064da:	bc80      	pop	{r7}
 80064dc:	4770      	bx	lr
	...

080064e0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80064ec:	2308      	movs	r3, #8
 80064ee:	2203      	movs	r2, #3
 80064f0:	2181      	movs	r1, #129	; 0x81
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fc99 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80064fe:	2301      	movs	r3, #1
 8006500:	2203      	movs	r2, #3
 8006502:	2101      	movs	r1, #1
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 fc90 	bl	8007e2a <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800650a:	2010      	movs	r0, #16
 800650c:	f001 fda2 	bl	8008054 <USBD_static_malloc>
 8006510:	4602      	mov	r2, r0
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8006518:	2301      	movs	r3, #1
 800651a:	4a0b      	ldr	r2, [pc, #44]	; (8006548 <USBD_HID_Init+0x68>)
 800651c:	2101      	movs	r1, #1
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f001 fd74 	bl	800800c <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 800652e:	2302      	movs	r3, #2
 8006530:	e005      	b.n	800653e <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	2200      	movs	r2, #0
 800653a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000204 	.word	0x20000204

0800654c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800655e:	2301      	movs	r3, #1
 8006560:	4a06      	ldr	r2, [pc, #24]	; (800657c <USBD_HID_DataOut+0x30>)
 8006562:	2101      	movs	r1, #1
 8006564:	f7fb ffad 	bl	80024c2 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8006568:	4b04      	ldr	r3, [pc, #16]	; (800657c <USBD_HID_DataOut+0x30>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fa fe93 	bl	8001298 <SET_LEDS_Callback>

	return USBD_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	20000204 	.word	0x20000204

08006580 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800658c:	2181      	movs	r1, #129	; 0x81
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fc71 	bl	8007e76 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 fd5e 	bl	800806c <USBD_static_free>
    pdev->pClassData = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d045      	beq.n	800667e <USBD_HID_Setup+0xba>
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	f040 80d3 	bne.w	800679e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	3b02      	subs	r3, #2
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d835      	bhi.n	800666e <USBD_HID_Setup+0xaa>
 8006602:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <USBD_HID_Setup+0x44>)
 8006604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006608:	0800665f 	.word	0x0800665f
 800660c:	0800663f 	.word	0x0800663f
 8006610:	0800666f 	.word	0x0800666f
 8006614:	0800666f 	.word	0x0800666f
 8006618:	0800666f 	.word	0x0800666f
 800661c:	0800666f 	.word	0x0800666f
 8006620:	0800666f 	.word	0x0800666f
 8006624:	0800666f 	.word	0x0800666f
 8006628:	0800664d 	.word	0x0800664d
 800662c:	08006631 	.word	0x08006631
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	885b      	ldrh	r3, [r3, #2]
 8006634:	b2db      	uxtb	r3, r3
 8006636:	461a      	mov	r2, r3
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	601a      	str	r2, [r3, #0]
          break;
 800663c:	e01e      	b.n	800667c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2201      	movs	r2, #1
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f937 	bl	80078b8 <USBD_CtlSendData>
          break;
 800664a:	e017      	b.n	800667c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	885b      	ldrh	r3, [r3, #2]
 8006650:	0a1b      	lsrs	r3, r3, #8
 8006652:	b29b      	uxth	r3, r3
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	605a      	str	r2, [r3, #4]
          break;
 800665c:	e00e      	b.n	800667c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3304      	adds	r3, #4
 8006662:	2201      	movs	r2, #1
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f926 	bl	80078b8 <USBD_CtlSendData>
          break;
 800666c:	e006      	b.n	800667c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f8b7 	bl	80077e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006676:	2302      	movs	r3, #2
 8006678:	75fb      	strb	r3, [r7, #23]
          break;
 800667a:	bf00      	nop
      }
      break;
 800667c:	e096      	b.n	80067ac <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	2b0b      	cmp	r3, #11
 8006684:	f200 8083 	bhi.w	800678e <USBD_HID_Setup+0x1ca>
 8006688:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <USBD_HID_Setup+0xcc>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066c1 	.word	0x080066c1
 8006694:	0800678f 	.word	0x0800678f
 8006698:	0800678f 	.word	0x0800678f
 800669c:	0800678f 	.word	0x0800678f
 80066a0:	0800678f 	.word	0x0800678f
 80066a4:	0800678f 	.word	0x0800678f
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	0800678f 	.word	0x0800678f
 80066b0:	0800678f 	.word	0x0800678f
 80066b4:	0800678f 	.word	0x0800678f
 80066b8:	08006741 	.word	0x08006741
 80066bc:	08006769 	.word	0x08006769
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d107      	bne.n	80066da <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066ca:	f107 030e 	add.w	r3, r7, #14
 80066ce:	2202      	movs	r2, #2
 80066d0:	4619      	mov	r1, r3
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f8f0 	bl	80078b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066d8:	e060      	b.n	800679c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 f881 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 80066e2:	2302      	movs	r3, #2
 80066e4:	75fb      	strb	r3, [r7, #23]
          break;
 80066e6:	e059      	b.n	800679c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	885b      	ldrh	r3, [r3, #2]
 80066ec:	0a1b      	lsrs	r3, r3, #8
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	2b22      	cmp	r3, #34	; 0x22
 80066f2:	d108      	bne.n	8006706 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	88db      	ldrh	r3, [r3, #6]
 80066f8:	2b73      	cmp	r3, #115	; 0x73
 80066fa:	bf28      	it	cs
 80066fc:	2373      	movcs	r3, #115	; 0x73
 80066fe:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8006700:	4b2d      	ldr	r3, [pc, #180]	; (80067b8 <USBD_HID_Setup+0x1f4>)
 8006702:	61bb      	str	r3, [r7, #24]
 8006704:	e015      	b.n	8006732 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	885b      	ldrh	r3, [r3, #2]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b21      	cmp	r3, #33	; 0x21
 8006710:	d108      	bne.n	8006724 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006712:	4b2a      	ldr	r3, [pc, #168]	; (80067bc <USBD_HID_Setup+0x1f8>)
 8006714:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	88db      	ldrh	r3, [r3, #6]
 800671a:	2b09      	cmp	r3, #9
 800671c:	bf28      	it	cs
 800671e:	2309      	movcs	r3, #9
 8006720:	83fb      	strh	r3, [r7, #30]
 8006722:	e006      	b.n	8006732 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 f85c 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800672c:	2302      	movs	r3, #2
 800672e:	75fb      	strb	r3, [r7, #23]
            break;
 8006730:	e034      	b.n	800679c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006732:	8bfb      	ldrh	r3, [r7, #30]
 8006734:	461a      	mov	r2, r3
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 f8bd 	bl	80078b8 <USBD_CtlSendData>
          break;
 800673e:	e02d      	b.n	800679c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006746:	2b03      	cmp	r3, #3
 8006748:	d107      	bne.n	800675a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3308      	adds	r3, #8
 800674e:	2201      	movs	r2, #1
 8006750:	4619      	mov	r1, r3
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 f8b0 	bl	80078b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006758:	e020      	b.n	800679c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 f841 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006762:	2302      	movs	r3, #2
 8006764:	75fb      	strb	r3, [r7, #23]
          break;
 8006766:	e019      	b.n	800679c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800676e:	2b03      	cmp	r3, #3
 8006770:	d106      	bne.n	8006780 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	885b      	ldrh	r3, [r3, #2]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800677e:	e00d      	b.n	800679c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 f82e 	bl	80077e4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006788:	2302      	movs	r3, #2
 800678a:	75fb      	strb	r3, [r7, #23]
          break;
 800678c:	e006      	b.n	800679c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 f827 	bl	80077e4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006796:	2302      	movs	r3, #2
 8006798:	75fb      	strb	r3, [r7, #23]
          break;
 800679a:	bf00      	nop
      }
      break;
 800679c:	e006      	b.n	80067ac <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 f81f 	bl	80077e4 <USBD_CtlError>
      ret = USBD_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	75fb      	strb	r3, [r7, #23]
      break;
 80067aa:	bf00      	nop
  }

  return ret;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200000e4 	.word	0x200000e4
 80067bc:	200000cc 	.word	0x200000cc

080067c0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d10c      	bne.n	80067fa <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	7b1b      	ldrb	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d108      	bne.n	80067fa <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	2201      	movs	r2, #1
 80067ec:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	2181      	movs	r1, #129	; 0x81
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f001 fbe6 	bl	8007fc6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2229      	movs	r2, #41	; 0x29
 8006810:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006812:	4b03      	ldr	r3, [pc, #12]	; (8006820 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20000048 	.word	0x20000048

08006824 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2229      	movs	r2, #41	; 0x29
 8006830:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006832:	4b03      	ldr	r3, [pc, #12]	; (8006840 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	bc80      	pop	{r7}
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	20000074 	.word	0x20000074

08006844 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2229      	movs	r2, #41	; 0x29
 8006850:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006852:	4b03      	ldr	r3, [pc, #12]	; (8006860 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006854:	4618      	mov	r0, r3
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	bc80      	pop	{r7}
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	200000a0 	.word	0x200000a0

08006864 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8006870:	f7fa fae8 	bl	8000e44 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	2200      	movs	r2, #0
 800687c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	220a      	movs	r2, #10
 8006894:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006896:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	bc80      	pop	{r7}
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200000d8 	.word	0x200000d8

080068a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068bc:	2302      	movs	r3, #2
 80068be:	e01a      	b.n	80068f6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	79fa      	ldrb	r2, [r7, #7]
 80068ec:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f001 fa38 	bl	8007d64 <USBD_LL_Init>

  return USBD_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068fe:	b480      	push	{r7}
 8006900:	b085      	sub	sp, #20
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d006      	beq.n	8006920 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]
 800691e:	e001      	b.n	8006924 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006920:	2302      	movs	r3, #2
 8006922:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fa5b 	bl	8007df4 <USBD_LL_Start>

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006968:	2302      	movs	r3, #2
 800696a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00c      	beq.n	8006990 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	4611      	mov	r1, r2
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006990:	7bfb      	ldrb	r3, [r7, #15]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	78fa      	ldrb	r2, [r7, #3]
 80069b0:	4611      	mov	r1, r2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 feca 	bl	800776c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069f4:	f003 031f 	and.w	r3, r3, #31
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d00c      	beq.n	8006a16 <USBD_LL_SetupStage+0x56>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d302      	bcc.n	8006a06 <USBD_LL_SetupStage+0x46>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d010      	beq.n	8006a26 <USBD_LL_SetupStage+0x66>
 8006a04:	e017      	b.n	8006a36 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9ca 	bl	8006da8 <USBD_StdDevReq>
      break;
 8006a14:	e01a      	b.n	8006a4c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa2c 	bl	8006e7c <USBD_StdItfReq>
      break;
 8006a24:	e012      	b.n	8006a4c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa6a 	bl	8006f08 <USBD_StdEPReq>
      break;
 8006a34:	e00a      	b.n	8006a4c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f001 fa35 	bl	8007eb4 <USBD_LL_StallEP>
      break;
 8006a4a:	bf00      	nop
  }

  return USBD_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b086      	sub	sp, #24
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	60f8      	str	r0, [r7, #12]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	607a      	str	r2, [r7, #4]
 8006a62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d14b      	bne.n	8006b02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a78:	2b03      	cmp	r3, #3
 8006a7a:	d134      	bne.n	8006ae6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d919      	bls.n	8006abc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	1ad2      	subs	r2, r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d203      	bcs.n	8006aaa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	e002      	b.n	8006ab0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6879      	ldr	r1, [r7, #4]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 ff2d 	bl	8007914 <USBD_CtlContinueRx>
 8006aba:	e038      	b.n	8006b2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d105      	bne.n	8006ade <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 ff2a 	bl	8007938 <USBD_CtlSendStatus>
 8006ae4:	e023      	b.n	8006b2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aec:	2b05      	cmp	r3, #5
 8006aee:	d11e      	bne.n	8006b2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006af8:	2100      	movs	r1, #0
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f001 f9da 	bl	8007eb4 <USBD_LL_StallEP>
 8006b00:	e015      	b.n	8006b2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00d      	beq.n	8006b2a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d108      	bne.n	8006b2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	7afa      	ldrb	r2, [r7, #11]
 8006b22:	4611      	mov	r1, r2
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	4798      	blx	r3
 8006b28:	e001      	b.n	8006b2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e000      	b.n	8006b30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	460b      	mov	r3, r1
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d17f      	bne.n	8006c4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d15c      	bne.n	8006c16 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d915      	bls.n	8006b94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	1ad2      	subs	r2, r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 feb5 	bl	80078f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b86:	2300      	movs	r3, #0
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 fa3d 	bl	800800c <USBD_LL_PrepareReceive>
 8006b92:	e04e      	b.n	8006c32 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	6912      	ldr	r2, [r2, #16]
 8006b9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ba0:	fb02 f201 	mul.w	r2, r2, r1
 8006ba4:	1a9b      	subs	r3, r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d11c      	bne.n	8006be4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d316      	bcc.n	8006be4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d20f      	bcs.n	8006be4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 fe91 	bl	80078f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2100      	movs	r1, #0
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f001 fa15 	bl	800800c <USBD_LL_PrepareReceive>
 8006be2:	e026      	b.n	8006c32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d105      	bne.n	8006c06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c06:	2180      	movs	r1, #128	; 0x80
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f001 f953 	bl	8007eb4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fea5 	bl	800795e <USBD_CtlReceiveStatus>
 8006c14:	e00d      	b.n	8006c32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d004      	beq.n	8006c2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d103      	bne.n	8006c32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 f941 	bl	8007eb4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d11d      	bne.n	8006c78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fe83 	bl	8006948 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c4a:	e015      	b.n	8006c78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d108      	bne.n	8006c74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	7afa      	ldrb	r2, [r7, #11]
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	4798      	blx	r3
 8006c72:	e001      	b.n	8006c78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c74:	2302      	movs	r3, #2
 8006c76:	e000      	b.n	8006c7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c8a:	2340      	movs	r3, #64	; 0x40
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2100      	movs	r1, #0
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f8ca 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2240      	movs	r2, #64	; 0x40
 8006ca2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f8bc 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2240      	movs	r2, #64	; 0x40
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6852      	ldr	r2, [r2, #4]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	4798      	blx	r3
  }

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr

08006d22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr

08006d4a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d105      	bne.n	8006d68 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	370c      	adds	r7, #12
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bc80      	pop	{r7}
 8006d72:	4770      	bx	lr

08006d74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d10b      	bne.n	8006d9e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d004      	beq.n	8006dcc <USBD_StdDevReq+0x24>
 8006dc2:	2b40      	cmp	r3, #64	; 0x40
 8006dc4:	d002      	beq.n	8006dcc <USBD_StdDevReq+0x24>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <USBD_StdDevReq+0x34>
 8006dca:	e04c      	b.n	8006e66 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	6839      	ldr	r1, [r7, #0]
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
      break;
 8006dda:	e049      	b.n	8006e70 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	785b      	ldrb	r3, [r3, #1]
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	d83a      	bhi.n	8006e5a <USBD_StdDevReq+0xb2>
 8006de4:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBD_StdDevReq+0x44>)
 8006de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dea:	bf00      	nop
 8006dec:	08006e3d 	.word	0x08006e3d
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e5b 	.word	0x08006e5b
 8006df8:	08006e47 	.word	0x08006e47
 8006dfc:	08006e5b 	.word	0x08006e5b
 8006e00:	08006e1f 	.word	0x08006e1f
 8006e04:	08006e15 	.word	0x08006e15
 8006e08:	08006e5b 	.word	0x08006e5b
 8006e0c:	08006e33 	.word	0x08006e33
 8006e10:	08006e29 	.word	0x08006e29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9d4 	bl	80071c4 <USBD_GetDescriptor>
          break;
 8006e1c:	e022      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb37 	bl	8007494 <USBD_SetAddress>
          break;
 8006e26:	e01d      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fb74 	bl	8007518 <USBD_SetConfig>
          break;
 8006e30:	e018      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fbfd 	bl	8007634 <USBD_GetConfig>
          break;
 8006e3a:	e013      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc2c 	bl	800769c <USBD_GetStatus>
          break;
 8006e44:	e00e      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fc5a 	bl	8007702 <USBD_SetFeature>
          break;
 8006e4e:	e009      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fc69 	bl	800772a <USBD_ClrFeature>
          break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcc1 	bl	80077e4 <USBD_CtlError>
          break;
 8006e62:	bf00      	nop
      }
      break;
 8006e64:	e004      	b.n	8006e70 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fcbb 	bl	80077e4 <USBD_CtlError>
      break;
 8006e6e:	bf00      	nop
  }

  return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d003      	beq.n	8006e9e <USBD_StdItfReq+0x22>
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	d001      	beq.n	8006e9e <USBD_StdItfReq+0x22>
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d12a      	bne.n	8006ef4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d81d      	bhi.n	8006ee6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d813      	bhi.n	8006edc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88db      	ldrh	r3, [r3, #6]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d110      	bne.n	8006ef0 <USBD_StdItfReq+0x74>
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10d      	bne.n	8006ef0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fd2f 	bl	8007938 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006eda:	e009      	b.n	8006ef0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fc80 	bl	80077e4 <USBD_CtlError>
          break;
 8006ee4:	e004      	b.n	8006ef0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fc7b 	bl	80077e4 <USBD_CtlError>
          break;
 8006eee:	e000      	b.n	8006ef2 <USBD_StdItfReq+0x76>
          break;
 8006ef0:	bf00      	nop
      }
      break;
 8006ef2:	e004      	b.n	8006efe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ef4:	6839      	ldr	r1, [r7, #0]
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc74 	bl	80077e4 <USBD_CtlError>
      break;
 8006efc:	bf00      	nop
  }

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d004      	beq.n	8006f32 <USBD_StdEPReq+0x2a>
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d002      	beq.n	8006f32 <USBD_StdEPReq+0x2a>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <USBD_StdEPReq+0x3a>
 8006f30:	e13d      	b.n	80071ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
      break;
 8006f40:	e13a      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d10a      	bne.n	8006f64 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	e12a      	b.n	80071ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	785b      	ldrb	r3, [r3, #1]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d03e      	beq.n	8006fea <USBD_StdEPReq+0xe2>
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d002      	beq.n	8006f76 <USBD_StdEPReq+0x6e>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d070      	beq.n	8007056 <USBD_StdEPReq+0x14e>
 8006f74:	e115      	b.n	80071a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d002      	beq.n	8006f86 <USBD_StdEPReq+0x7e>
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d015      	beq.n	8006fb0 <USBD_StdEPReq+0xa8>
 8006f84:	e02b      	b.n	8006fde <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00c      	beq.n	8006fa6 <USBD_StdEPReq+0x9e>
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d009      	beq.n	8006fa6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 ff8c 	bl	8007eb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 ff88 	bl	8007eb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa4:	e020      	b.n	8006fe8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc1b 	bl	80077e4 <USBD_CtlError>
              break;
 8006fae:	e01b      	b.n	8006fe8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10e      	bne.n	8006fd6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <USBD_StdEPReq+0xce>
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b80      	cmp	r3, #128	; 0x80
 8006fc2:	d008      	beq.n	8006fd6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	88db      	ldrh	r3, [r3, #6]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d104      	bne.n	8006fd6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 ff6f 	bl	8007eb4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fcae 	bl	8007938 <USBD_CtlSendStatus>

              break;
 8006fdc:	e004      	b.n	8006fe8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fbff 	bl	80077e4 <USBD_CtlError>
              break;
 8006fe6:	bf00      	nop
          }
          break;
 8006fe8:	e0e0      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d002      	beq.n	8006ffa <USBD_StdEPReq+0xf2>
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d015      	beq.n	8007024 <USBD_StdEPReq+0x11c>
 8006ff8:	e026      	b.n	8007048 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00c      	beq.n	800701a <USBD_StdEPReq+0x112>
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d009      	beq.n	800701a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 ff52 	bl	8007eb4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007010:	2180      	movs	r1, #128	; 0x80
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 ff4e 	bl	8007eb4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007018:	e01c      	b.n	8007054 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fbe1 	bl	80077e4 <USBD_CtlError>
              break;
 8007022:	e017      	b.n	8007054 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	885b      	ldrh	r3, [r3, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d112      	bne.n	8007052 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 ff59 	bl	8007ef2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc79 	bl	8007938 <USBD_CtlSendStatus>
              }
              break;
 8007046:	e004      	b.n	8007052 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fbca 	bl	80077e4 <USBD_CtlError>
              break;
 8007050:	e000      	b.n	8007054 <USBD_StdEPReq+0x14c>
              break;
 8007052:	bf00      	nop
          }
          break;
 8007054:	e0aa      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	2b02      	cmp	r3, #2
 800705e:	d002      	beq.n	8007066 <USBD_StdEPReq+0x15e>
 8007060:	2b03      	cmp	r3, #3
 8007062:	d032      	beq.n	80070ca <USBD_StdEPReq+0x1c2>
 8007064:	e097      	b.n	8007196 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007066:	7bbb      	ldrb	r3, [r7, #14]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <USBD_StdEPReq+0x174>
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b80      	cmp	r3, #128	; 0x80
 8007070:	d004      	beq.n	800707c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fbb5 	bl	80077e4 <USBD_CtlError>
                break;
 800707a:	e091      	b.n	80071a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	da0b      	bge.n	800709c <USBD_StdEPReq+0x194>
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800708a:	4613      	mov	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	3310      	adds	r3, #16
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	4413      	add	r3, r2
 8007098:	3304      	adds	r3, #4
 800709a:	e00b      	b.n	80070b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a2:	4613      	mov	r3, r2
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	4413      	add	r3, r2
 80070b2:	3304      	adds	r3, #4
 80070b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2202      	movs	r2, #2
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fbf8 	bl	80078b8 <USBD_CtlSendData>
              break;
 80070c8:	e06a      	b.n	80071a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da11      	bge.n	80070f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3318      	adds	r3, #24
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d117      	bne.n	800711c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb78 	bl	80077e4 <USBD_CtlError>
                  break;
 80070f4:	e054      	b.n	80071a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	f003 020f 	and.w	r2, r3, #15
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fb65 	bl	80077e4 <USBD_CtlError>
                  break;
 800711a:	e041      	b.n	80071a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800711c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007120:	2b00      	cmp	r3, #0
 8007122:	da0b      	bge.n	800713c <USBD_StdEPReq+0x234>
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	3310      	adds	r3, #16
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4413      	add	r3, r2
 8007138:	3304      	adds	r3, #4
 800713a:	e00b      	b.n	8007154 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800713c:	7bbb      	ldrb	r3, [r7, #14]
 800713e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	3304      	adds	r3, #4
 8007154:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007156:	7bbb      	ldrb	r3, [r7, #14]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <USBD_StdEPReq+0x25a>
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d103      	bne.n	800716a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e00e      	b.n	8007188 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	4619      	mov	r1, r3
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fede 	bl	8007f30 <USBD_LL_IsStallEP>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	e002      	b.n	8007188 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2202      	movs	r2, #2
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fb92 	bl	80078b8 <USBD_CtlSendData>
              break;
 8007194:	e004      	b.n	80071a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fb23 	bl	80077e4 <USBD_CtlError>
              break;
 800719e:	bf00      	nop
          }
          break;
 80071a0:	e004      	b.n	80071ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fb1d 	bl	80077e4 <USBD_CtlError>
          break;
 80071aa:	bf00      	nop
      }
      break;
 80071ac:	e004      	b.n	80071b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fb17 	bl	80077e4 <USBD_CtlError>
      break;
 80071b6:	bf00      	nop
  }

  return ret;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
	...

080071c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071ce:	2300      	movs	r3, #0
 80071d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	885b      	ldrh	r3, [r3, #2]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b06      	cmp	r3, #6
 80071e6:	f200 8128 	bhi.w	800743a <USBD_GetDescriptor+0x276>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBD_GetDescriptor+0x2c>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	0800720d 	.word	0x0800720d
 80071f4:	08007225 	.word	0x08007225
 80071f8:	08007265 	.word	0x08007265
 80071fc:	0800743b 	.word	0x0800743b
 8007200:	0800743b 	.word	0x0800743b
 8007204:	080073db 	.word	0x080073db
 8007208:	08007407 	.word	0x08007407
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	7c12      	ldrb	r2, [r2, #16]
 8007218:	f107 0108 	add.w	r1, r7, #8
 800721c:	4610      	mov	r0, r2
 800721e:	4798      	blx	r3
 8007220:	60f8      	str	r0, [r7, #12]
      break;
 8007222:	e112      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7c1b      	ldrb	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10d      	bne.n	8007248 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f107 0208 	add.w	r2, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3301      	adds	r3, #1
 8007242:	2202      	movs	r2, #2
 8007244:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007246:	e100      	b.n	800744a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	f107 0208 	add.w	r2, r7, #8
 8007254:	4610      	mov	r0, r2
 8007256:	4798      	blx	r3
 8007258:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	2202      	movs	r2, #2
 8007260:	701a      	strb	r2, [r3, #0]
      break;
 8007262:	e0f2      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	885b      	ldrh	r3, [r3, #2]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b05      	cmp	r3, #5
 800726c:	f200 80ac 	bhi.w	80073c8 <USBD_GetDescriptor+0x204>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <USBD_GetDescriptor+0xb4>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	08007291 	.word	0x08007291
 800727c:	080072c5 	.word	0x080072c5
 8007280:	080072f9 	.word	0x080072f9
 8007284:	0800732d 	.word	0x0800732d
 8007288:	08007361 	.word	0x08007361
 800728c:	08007395 	.word	0x08007395
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00b      	beq.n	80072b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	7c12      	ldrb	r2, [r2, #16]
 80072a8:	f107 0108 	add.w	r1, r7, #8
 80072ac:	4610      	mov	r0, r2
 80072ae:	4798      	blx	r3
 80072b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b2:	e091      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fa94 	bl	80077e4 <USBD_CtlError>
            err++;
 80072bc:	7afb      	ldrb	r3, [r7, #11]
 80072be:	3301      	adds	r3, #1
 80072c0:	72fb      	strb	r3, [r7, #11]
          break;
 80072c2:	e089      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00b      	beq.n	80072e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	7c12      	ldrb	r2, [r2, #16]
 80072dc:	f107 0108 	add.w	r1, r7, #8
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
 80072e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072e6:	e077      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072e8:	6839      	ldr	r1, [r7, #0]
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa7a 	bl	80077e4 <USBD_CtlError>
            err++;
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	3301      	adds	r3, #1
 80072f4:	72fb      	strb	r3, [r7, #11]
          break;
 80072f6:	e06f      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00b      	beq.n	800731c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	7c12      	ldrb	r2, [r2, #16]
 8007310:	f107 0108 	add.w	r1, r7, #8
 8007314:	4610      	mov	r0, r2
 8007316:	4798      	blx	r3
 8007318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731a:	e05d      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fa60 	bl	80077e4 <USBD_CtlError>
            err++;
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	3301      	adds	r3, #1
 8007328:	72fb      	strb	r3, [r7, #11]
          break;
 800732a:	e055      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00b      	beq.n	8007350 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	7c12      	ldrb	r2, [r2, #16]
 8007344:	f107 0108 	add.w	r1, r7, #8
 8007348:	4610      	mov	r0, r2
 800734a:	4798      	blx	r3
 800734c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800734e:	e043      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa46 	bl	80077e4 <USBD_CtlError>
            err++;
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	3301      	adds	r3, #1
 800735c:	72fb      	strb	r3, [r7, #11]
          break;
 800735e:	e03b      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	7c12      	ldrb	r2, [r2, #16]
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	4610      	mov	r0, r2
 800737e:	4798      	blx	r3
 8007380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007382:	e029      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa2c 	bl	80077e4 <USBD_CtlError>
            err++;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	3301      	adds	r3, #1
 8007390:	72fb      	strb	r3, [r7, #11]
          break;
 8007392:	e021      	b.n	80073d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	7c12      	ldrb	r2, [r2, #16]
 80073ac:	f107 0108 	add.w	r1, r7, #8
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b6:	e00f      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fa12 	bl	80077e4 <USBD_CtlError>
            err++;
 80073c0:	7afb      	ldrb	r3, [r7, #11]
 80073c2:	3301      	adds	r3, #1
 80073c4:	72fb      	strb	r3, [r7, #11]
          break;
 80073c6:	e007      	b.n	80073d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa0a 	bl	80077e4 <USBD_CtlError>
          err++;
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	3301      	adds	r3, #1
 80073d4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073d6:	e038      	b.n	800744a <USBD_GetDescriptor+0x286>
 80073d8:	e037      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	7c1b      	ldrb	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d109      	bne.n	80073f6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ea:	f107 0208 	add.w	r2, r7, #8
 80073ee:	4610      	mov	r0, r2
 80073f0:	4798      	blx	r3
 80073f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f4:	e029      	b.n	800744a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9f3 	bl	80077e4 <USBD_CtlError>
        err++;
 80073fe:	7afb      	ldrb	r3, [r7, #11]
 8007400:	3301      	adds	r3, #1
 8007402:	72fb      	strb	r3, [r7, #11]
      break;
 8007404:	e021      	b.n	800744a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7c1b      	ldrb	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10d      	bne.n	800742a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f107 0208 	add.w	r2, r7, #8
 800741a:	4610      	mov	r0, r2
 800741c:	4798      	blx	r3
 800741e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3301      	adds	r3, #1
 8007424:	2207      	movs	r2, #7
 8007426:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007428:	e00f      	b.n	800744a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f9d9 	bl	80077e4 <USBD_CtlError>
        err++;
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	3301      	adds	r3, #1
 8007436:	72fb      	strb	r3, [r7, #11]
      break;
 8007438:	e007      	b.n	800744a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 f9d1 	bl	80077e4 <USBD_CtlError>
      err++;
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	3301      	adds	r3, #1
 8007446:	72fb      	strb	r3, [r7, #11]
      break;
 8007448:	bf00      	nop
  }

  if (err != 0U)
 800744a:	7afb      	ldrb	r3, [r7, #11]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d11c      	bne.n	800748a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007450:	893b      	ldrh	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d011      	beq.n	800747a <USBD_GetDescriptor+0x2b6>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	88db      	ldrh	r3, [r3, #6]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88da      	ldrh	r2, [r3, #6]
 8007462:	893b      	ldrh	r3, [r7, #8]
 8007464:	4293      	cmp	r3, r2
 8007466:	bf28      	it	cs
 8007468:	4613      	movcs	r3, r2
 800746a:	b29b      	uxth	r3, r3
 800746c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800746e:	893b      	ldrh	r3, [r7, #8]
 8007470:	461a      	mov	r2, r3
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa1f 	bl	80078b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	88db      	ldrh	r3, [r3, #6]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d104      	bne.n	800748c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa58 	bl	8007938 <USBD_CtlSendStatus>
 8007488:	e000      	b.n	800748c <USBD_GetDescriptor+0x2c8>
    return;
 800748a:	bf00      	nop
    }
  }
}
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop

08007494 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	889b      	ldrh	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d130      	bne.n	8007508 <USBD_SetAddress+0x74>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d12c      	bne.n	8007508 <USBD_SetAddress+0x74>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	885b      	ldrh	r3, [r3, #2]
 80074b2:	2b7f      	cmp	r3, #127	; 0x7f
 80074b4:	d828      	bhi.n	8007508 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	885b      	ldrh	r3, [r3, #2]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	2b03      	cmp	r3, #3
 80074ca:	d104      	bne.n	80074d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f988 	bl	80077e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d4:	e01c      	b.n	8007510 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fd50 	bl	8007f88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fa25 	bl	8007938 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d004      	beq.n	80074fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074fc:	e008      	b.n	8007510 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007506:	e003      	b.n	8007510 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f96a 	bl	80077e4 <USBD_CtlError>
  }
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	4b41      	ldr	r3, [pc, #260]	; (8007630 <USBD_SetConfig+0x118>)
 800752a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800752c:	4b40      	ldr	r3, [pc, #256]	; (8007630 <USBD_SetConfig+0x118>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d904      	bls.n	800753e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 f954 	bl	80077e4 <USBD_CtlError>
 800753c:	e075      	b.n	800762a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007544:	2b02      	cmp	r3, #2
 8007546:	d002      	beq.n	800754e <USBD_SetConfig+0x36>
 8007548:	2b03      	cmp	r3, #3
 800754a:	d023      	beq.n	8007594 <USBD_SetConfig+0x7c>
 800754c:	e062      	b.n	8007614 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800754e:	4b38      	ldr	r3, [pc, #224]	; (8007630 <USBD_SetConfig+0x118>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d01a      	beq.n	800758c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007556:	4b36      	ldr	r3, [pc, #216]	; (8007630 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2203      	movs	r2, #3
 8007564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007568:	4b31      	ldr	r3, [pc, #196]	; (8007630 <USBD_SetConfig+0x118>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff f9f4 	bl	800695c <USBD_SetClassConfig>
 8007574:	4603      	mov	r3, r0
 8007576:	2b02      	cmp	r3, #2
 8007578:	d104      	bne.n	8007584 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f931 	bl	80077e4 <USBD_CtlError>
            return;
 8007582:	e052      	b.n	800762a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f9d7 	bl	8007938 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800758a:	e04e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9d3 	bl	8007938 <USBD_CtlSendStatus>
        break;
 8007592:	e04a      	b.n	800762a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007594:	4b26      	ldr	r3, [pc, #152]	; (8007630 <USBD_SetConfig+0x118>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d112      	bne.n	80075c2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075a4:	4b22      	ldr	r3, [pc, #136]	; (8007630 <USBD_SetConfig+0x118>)
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075ae:	4b20      	ldr	r3, [pc, #128]	; (8007630 <USBD_SetConfig+0x118>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7ff f9f0 	bl	800699a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f9bc 	bl	8007938 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c0:	e033      	b.n	800762a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075c2:	4b1b      	ldr	r3, [pc, #108]	; (8007630 <USBD_SetConfig+0x118>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d01d      	beq.n	800760c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7ff f9de 	bl	800699a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <USBD_SetConfig+0x118>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075e8:	4b11      	ldr	r3, [pc, #68]	; (8007630 <USBD_SetConfig+0x118>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff f9b4 	bl	800695c <USBD_SetClassConfig>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d104      	bne.n	8007604 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f8f1 	bl	80077e4 <USBD_CtlError>
            return;
 8007602:	e012      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f997 	bl	8007938 <USBD_CtlSendStatus>
        break;
 800760a:	e00e      	b.n	800762a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f993 	bl	8007938 <USBD_CtlSendStatus>
        break;
 8007612:	e00a      	b.n	800762a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8e4 	bl	80077e4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800761c:	4b04      	ldr	r3, [pc, #16]	; (8007630 <USBD_SetConfig+0x118>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f9b9 	bl	800699a <USBD_ClrClassConfig>
        break;
 8007628:	bf00      	nop
    }
  }
}
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000205 	.word	0x20000205

08007634 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	88db      	ldrh	r3, [r3, #6]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d004      	beq.n	8007650 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f8cb 	bl	80077e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800764e:	e021      	b.n	8007694 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	2b01      	cmp	r3, #1
 8007658:	db17      	blt.n	800768a <USBD_GetConfig+0x56>
 800765a:	2b02      	cmp	r3, #2
 800765c:	dd02      	ble.n	8007664 <USBD_GetConfig+0x30>
 800765e:	2b03      	cmp	r3, #3
 8007660:	d00b      	beq.n	800767a <USBD_GetConfig+0x46>
 8007662:	e012      	b.n	800768a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3308      	adds	r3, #8
 800766e:	2201      	movs	r2, #1
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f920 	bl	80078b8 <USBD_CtlSendData>
        break;
 8007678:	e00c      	b.n	8007694 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3304      	adds	r3, #4
 800767e:	2201      	movs	r2, #1
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f918 	bl	80078b8 <USBD_CtlSendData>
        break;
 8007688:	e004      	b.n	8007694 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f8a9 	bl	80077e4 <USBD_CtlError>
        break;
 8007692:	bf00      	nop
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	3b01      	subs	r3, #1
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d81e      	bhi.n	80076f0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	88db      	ldrh	r3, [r3, #6]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d004      	beq.n	80076c4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f891 	bl	80077e4 <USBD_CtlError>
        break;
 80076c2:	e01a      	b.n	80076fa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f043 0202 	orr.w	r2, r3, #2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	330c      	adds	r3, #12
 80076e4:	2202      	movs	r2, #2
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 f8e5 	bl	80078b8 <USBD_CtlSendData>
      break;
 80076ee:	e004      	b.n	80076fa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f876 	bl	80077e4 <USBD_CtlError>
      break;
 80076f8:	bf00      	nop
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f90b 	bl	8007938 <USBD_CtlSendStatus>
  }
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773a:	3b01      	subs	r3, #1
 800773c:	2b02      	cmp	r3, #2
 800773e:	d80b      	bhi.n	8007758 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	885b      	ldrh	r3, [r3, #2]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10c      	bne.n	8007762 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f8f1 	bl	8007938 <USBD_CtlSendStatus>
      }
      break;
 8007756:	e004      	b.n	8007762 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f842 	bl	80077e4 <USBD_CtlError>
      break;
 8007760:	e000      	b.n	8007764 <USBD_ClrFeature+0x3a>
      break;
 8007762:	bf00      	nop
  }
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785a      	ldrb	r2, [r3, #1]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	3302      	adds	r3, #2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	b29a      	uxth	r2, r3
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	3303      	adds	r3, #3
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	021b      	lsls	r3, r3, #8
 8007798:	b29b      	uxth	r3, r3
 800779a:	4413      	add	r3, r2
 800779c:	b29a      	uxth	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	3304      	adds	r3, #4
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	3305      	adds	r3, #5
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	4413      	add	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	3306      	adds	r3, #6
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	3307      	adds	r3, #7
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4413      	add	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	80da      	strh	r2, [r3, #6]

}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077ee:	2180      	movs	r1, #128	; 0x80
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb5f 	bl	8007eb4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077f6:	2100      	movs	r1, #0
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fb5b 	bl	8007eb4 <USBD_LL_StallEP>
}
 80077fe:	bf00      	nop
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d032      	beq.n	8007882 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f834 	bl	800788a <USBD_GetLen>
 8007822:	4603      	mov	r3, r0
 8007824:	3301      	adds	r3, #1
 8007826:	b29b      	uxth	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	75fa      	strb	r2, [r7, #23]
 8007836:	461a      	mov	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4413      	add	r3, r2
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	7812      	ldrb	r2, [r2, #0]
 8007840:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	1c5a      	adds	r2, r3, #1
 8007846:	75fa      	strb	r2, [r7, #23]
 8007848:	461a      	mov	r2, r3
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	2203      	movs	r2, #3
 8007850:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007852:	e012      	b.n	800787a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	60fa      	str	r2, [r7, #12]
 800785a:	7dfa      	ldrb	r2, [r7, #23]
 800785c:	1c51      	adds	r1, r2, #1
 800785e:	75f9      	strb	r1, [r7, #23]
 8007860:	4611      	mov	r1, r2
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	440a      	add	r2, r1
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	75fa      	strb	r2, [r7, #23]
 8007870:	461a      	mov	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4413      	add	r3, r2
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e8      	bne.n	8007854 <USBD_GetString+0x4e>
    }
  }
}
 8007882:	bf00      	nop
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007896:	e005      	b.n	80078a4 <USBD_GetLen+0x1a>
  {
    len++;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	3301      	adds	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3301      	adds	r3, #1
 80078a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f5      	bne.n	8007898 <USBD_GetLen+0xe>
  }

  return len;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078da:	88fb      	ldrh	r3, [r7, #6]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fb70 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	2100      	movs	r1, #0
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 fb5e 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	4613      	mov	r3, r2
 8007920:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	2100      	movs	r1, #0
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 fb6f 	bl	800800c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2204      	movs	r2, #4
 8007944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007948:	2300      	movs	r3, #0
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fb39 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2205      	movs	r2, #5
 800796a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800796e:	2300      	movs	r3, #0
 8007970:	2200      	movs	r2, #0
 8007972:	2100      	movs	r1, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fb49 	bl	800800c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007988:	2200      	movs	r2, #0
 800798a:	490e      	ldr	r1, [pc, #56]	; (80079c4 <MX_USB_DEVICE_Init+0x40>)
 800798c:	480e      	ldr	r0, [pc, #56]	; (80079c8 <MX_USB_DEVICE_Init+0x44>)
 800798e:	f7fe ff8b 	bl	80068a8 <USBD_Init>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007998:	f7f9 fb2f 	bl	8000ffa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800799c:	490b      	ldr	r1, [pc, #44]	; (80079cc <MX_USB_DEVICE_Init+0x48>)
 800799e:	480a      	ldr	r0, [pc, #40]	; (80079c8 <MX_USB_DEVICE_Init+0x44>)
 80079a0:	f7fe ffad 	bl	80068fe <USBD_RegisterClass>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079aa:	f7f9 fb26 	bl	8000ffa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079ae:	4806      	ldr	r0, [pc, #24]	; (80079c8 <MX_USB_DEVICE_Init+0x44>)
 80079b0:	f7fe ffbe 	bl	8006930 <USBD_Start>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80079ba:	f7f9 fb1e 	bl	8000ffa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079be:	bf00      	nop
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000158 	.word	0x20000158
 80079c8:	20000348 	.word	0x20000348
 80079cc:	20000010 	.word	0x20000010

080079d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2212      	movs	r2, #18
 80079e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079e2:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bc80      	pop	{r7}
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	20000174 	.word	0x20000174

080079f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2204      	movs	r2, #4
 8007a04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bc80      	pop	{r7}
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	20000188 	.word	0x20000188

08007a18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d105      	bne.n	8007a36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	4907      	ldr	r1, [pc, #28]	; (8007a4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a2e:	4808      	ldr	r0, [pc, #32]	; (8007a50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a30:	f7ff fee9 	bl	8007806 <USBD_GetString>
 8007a34:	e004      	b.n	8007a40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	4904      	ldr	r1, [pc, #16]	; (8007a4c <USBD_FS_ProductStrDescriptor+0x34>)
 8007a3a:	4805      	ldr	r0, [pc, #20]	; (8007a50 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a3c:	f7ff fee3 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a40:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	2000060c 	.word	0x2000060c
 8007a50:	08008170 	.word	0x08008170

08007a54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	6039      	str	r1, [r7, #0]
 8007a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	4904      	ldr	r1, [pc, #16]	; (8007a74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a64:	4804      	ldr	r0, [pc, #16]	; (8007a78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a66:	f7ff fece 	bl	8007806 <USBD_GetString>
  return USBD_StrDesc;
 8007a6a:	4b02      	ldr	r3, [pc, #8]	; (8007a74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	2000060c 	.word	0x2000060c
 8007a78:	08008184 	.word	0x08008184

08007a7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	221a      	movs	r2, #26
 8007a8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a8e:	f000 f843 	bl	8007b18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a92:	4b02      	ldr	r3, [pc, #8]	; (8007a9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	2000018c 	.word	0x2000018c

08007aa0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d105      	bne.n	8007abe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4907      	ldr	r1, [pc, #28]	; (8007ad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ab6:	4808      	ldr	r0, [pc, #32]	; (8007ad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ab8:	f7ff fea5 	bl	8007806 <USBD_GetString>
 8007abc:	e004      	b.n	8007ac8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4904      	ldr	r1, [pc, #16]	; (8007ad4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ac2:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ac4:	f7ff fe9f 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ac8:	4b02      	ldr	r3, [pc, #8]	; (8007ad4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	2000060c 	.word	0x2000060c
 8007ad8:	08008198 	.word	0x08008198

08007adc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	6039      	str	r1, [r7, #0]
 8007ae6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d105      	bne.n	8007afa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	4907      	ldr	r1, [pc, #28]	; (8007b10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007af2:	4808      	ldr	r0, [pc, #32]	; (8007b14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007af4:	f7ff fe87 	bl	8007806 <USBD_GetString>
 8007af8:	e004      	b.n	8007b04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	4904      	ldr	r1, [pc, #16]	; (8007b10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007afe:	4805      	ldr	r0, [pc, #20]	; (8007b14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b00:	f7ff fe81 	bl	8007806 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b04:	4b02      	ldr	r3, [pc, #8]	; (8007b10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	2000060c 	.word	0x2000060c
 8007b14:	080081a4 	.word	0x080081a4

08007b18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b1e:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <Get_SerialNum+0x44>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b24:	4b0e      	ldr	r3, [pc, #56]	; (8007b60 <Get_SerialNum+0x48>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b2a:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <Get_SerialNum+0x4c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4413      	add	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d009      	beq.n	8007b52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b3e:	2208      	movs	r2, #8
 8007b40:	4909      	ldr	r1, [pc, #36]	; (8007b68 <Get_SerialNum+0x50>)
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f814 	bl	8007b70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b48:	2204      	movs	r2, #4
 8007b4a:	4908      	ldr	r1, [pc, #32]	; (8007b6c <Get_SerialNum+0x54>)
 8007b4c:	68b8      	ldr	r0, [r7, #8]
 8007b4e:	f000 f80f 	bl	8007b70 <IntToUnicode>
  }
}
 8007b52:	bf00      	nop
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	1ffff7e8 	.word	0x1ffff7e8
 8007b60:	1ffff7ec 	.word	0x1ffff7ec
 8007b64:	1ffff7f0 	.word	0x1ffff7f0
 8007b68:	2000018e 	.word	0x2000018e
 8007b6c:	2000019e 	.word	0x2000019e

08007b70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	75fb      	strb	r3, [r7, #23]
 8007b86:	e027      	b.n	8007bd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	0f1b      	lsrs	r3, r3, #28
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d80b      	bhi.n	8007ba8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	0f1b      	lsrs	r3, r3, #28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3230      	adds	r2, #48	; 0x30
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e00a      	b.n	8007bbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	0f1b      	lsrs	r3, r3, #28
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3237      	adds	r2, #55	; 0x37
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	3301      	adds	r3, #1
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
 8007bd8:	7dfa      	ldrb	r2, [r7, #23]
 8007bda:	79fb      	ldrb	r3, [r7, #7]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d3d3      	bcc.n	8007b88 <IntToUnicode+0x18>
  }
}
 8007be0:	bf00      	nop
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <HAL_PCD_MspInit+0x44>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d113      	bne.n	8007c26 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <HAL_PCD_MspInit+0x48>)
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	4a0c      	ldr	r2, [pc, #48]	; (8007c34 <HAL_PCD_MspInit+0x48>)
 8007c04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c08:	61d3      	str	r3, [r2, #28]
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_PCD_MspInit+0x48>)
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2100      	movs	r1, #0
 8007c1a:	2014      	movs	r0, #20
 8007c1c:	f7f9 ff1f 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007c20:	2014      	movs	r0, #20
 8007c22:	f7f9 ff38 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40005c00 	.word	0x40005c00
 8007c34:	40021000 	.word	0x40021000

08007c38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f7fe feb6 	bl	80069c0 <USBD_LL_SetupStage>
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	440b      	add	r3, r1
 8007c7c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7fe fee6 	bl	8006a56 <USBD_LL_DataOutStage>
}
 8007c8a:	bf00      	nop
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007ca4:	78fa      	ldrb	r2, [r7, #3]
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	440b      	add	r3, r1
 8007cb2:	333c      	adds	r3, #60	; 0x3c
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	f7fe ff3d 	bl	8006b38 <USBD_LL_DataInStage>
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff f84d 	bl	8006d74 <USBD_LL_SOF>
}
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cea:	2301      	movs	r3, #1
 8007cec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d001      	beq.n	8007cfa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007cf6:	f7f9 f980 	bl	8000ffa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d00:	7bfa      	ldrb	r2, [r7, #15]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe fffd 	bl	8006d04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe ffb6 	bl	8006c82 <USBD_LL_Reset>
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fe fff8 	bl	8006d22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8007d32:	2001      	movs	r0, #1
 8007d34:	f7f9 fae2 	bl	80012fc <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8007d48:	2000      	movs	r0, #0
 8007d4a:	f7f9 fad7 	bl	80012fc <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe fff8 	bl	8006d4a <USBD_LL_Resume>
}
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007d6c:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <USBD_LL_Init+0x88>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1d      	ldr	r2, [pc, #116]	; (8007dec <USBD_LL_Init+0x88>)
 8007d78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007d7c:	4b1b      	ldr	r3, [pc, #108]	; (8007dec <USBD_LL_Init+0x88>)
 8007d7e:	4a1c      	ldr	r2, [pc, #112]	; (8007df0 <USBD_LL_Init+0x8c>)
 8007d80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d82:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <USBD_LL_Init+0x88>)
 8007d84:	2208      	movs	r2, #8
 8007d86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d88:	4b18      	ldr	r3, [pc, #96]	; (8007dec <USBD_LL_Init+0x88>)
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d8e:	4b17      	ldr	r3, [pc, #92]	; (8007dec <USBD_LL_Init+0x88>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <USBD_LL_Init+0x88>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d9a:	4b14      	ldr	r3, [pc, #80]	; (8007dec <USBD_LL_Init+0x88>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007da0:	4812      	ldr	r0, [pc, #72]	; (8007dec <USBD_LL_Init+0x88>)
 8007da2:	f7fa f835 	bl	8001e10 <HAL_PCD_Init>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007dac:	f7f9 f925 	bl	8000ffa <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007db6:	2318      	movs	r3, #24
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	f7fb fb52 	bl	8003464 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dc6:	2358      	movs	r3, #88	; 0x58
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	f7fb fb4a 	bl	8003464 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2181      	movs	r1, #129	; 0x81
 8007dde:	f7fb fb41 	bl	8003464 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	2000080c 	.word	0x2000080c
 8007df0:	40005c00 	.word	0x40005c00

08007df4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fa f90b 	bl	8002026 <HAL_PCD_Start>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f93c 	bl	8008094 <USBD_Get_USB_Status>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	461a      	mov	r2, r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	70fb      	strb	r3, [r7, #3]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70bb      	strb	r3, [r7, #2]
 8007e40:	4613      	mov	r3, r2
 8007e42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e52:	78bb      	ldrb	r3, [r7, #2]
 8007e54:	883a      	ldrh	r2, [r7, #0]
 8007e56:	78f9      	ldrb	r1, [r7, #3]
 8007e58:	f7fa fa85 	bl	8002366 <HAL_PCD_EP_Open>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f916 	bl	8008094 <USBD_Get_USB_Status>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fa facc 	bl	8002432 <HAL_PCD_EP_Close>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f8f7 	bl	8008094 <USBD_Get_USB_Status>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fa fb75 	bl	80025c2 <HAL_PCD_EP_SetStall>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f8d8 	bl	8008094 <USBD_Get_USB_Status>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fa fbb6 	bl	8002682 <HAL_PCD_EP_ClrStall>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f8b9 	bl	8008094 <USBD_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0c      	bge.n	8007f66 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	4613      	mov	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4413      	add	r3, r2
 8007f5c:	00db      	lsls	r3, r3, #3
 8007f5e:	440b      	add	r3, r1
 8007f60:	3302      	adds	r3, #2
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	e00b      	b.n	8007f7e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6c:	68f9      	ldr	r1, [r7, #12]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	440b      	add	r3, r1
 8007f78:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007f7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bc80      	pop	{r7}
 8007f86:	4770      	bx	lr

08007f88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fa f9b8 	bl	800231c <HAL_PCD_SetAddress>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f86e 	bl	8008094 <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	72fb      	strb	r3, [r7, #11]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	7af9      	ldrb	r1, [r7, #11]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	f7fa faa5 	bl	800253c <HAL_PCD_EP_Transmit>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f84b 	bl	8008094 <USBD_Get_USB_Status>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008002:	7dbb      	ldrb	r3, [r7, #22]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	461a      	mov	r2, r3
 8008018:	460b      	mov	r3, r1
 800801a:	72fb      	strb	r3, [r7, #11]
 800801c:	4613      	mov	r3, r2
 800801e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	7af9      	ldrb	r1, [r7, #11]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	f7fa fa45 	bl	80024c2 <HAL_PCD_EP_Receive>
 8008038:	4603      	mov	r3, r0
 800803a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800803c:	7dfb      	ldrb	r3, [r7, #23]
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f828 	bl	8008094 <USBD_Get_USB_Status>
 8008044:	4603      	mov	r3, r0
 8008046:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008048:	7dbb      	ldrb	r3, [r7, #22]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800805c:	4b02      	ldr	r3, [pc, #8]	; (8008068 <USBD_static_malloc+0x14>)
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	20000208 	.word	0x20000208

0800806c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807e:	b480      	push	{r7}
 8008080:	b083      	sub	sp, #12
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d817      	bhi.n	80080d8 <USBD_Get_USB_Status+0x44>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <USBD_Get_USB_Status+0x1c>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080c1 	.word	0x080080c1
 80080b4:	080080c7 	.word	0x080080c7
 80080b8:	080080cd 	.word	0x080080cd
 80080bc:	080080d3 	.word	0x080080d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	e00b      	b.n	80080de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ca:	e008      	b.n	80080de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080cc:	2301      	movs	r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
    break;
 80080d0:	e005      	b.n	80080de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080d2:	2302      	movs	r3, #2
 80080d4:	73fb      	strb	r3, [r7, #15]
    break;
 80080d6:	e002      	b.n	80080de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	73fb      	strb	r3, [r7, #15]
    break;
 80080dc:	bf00      	nop
  }
  return usb_status;
 80080de:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <__libc_init_array>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	2500      	movs	r5, #0
 80080f0:	4e0c      	ldr	r6, [pc, #48]	; (8008124 <__libc_init_array+0x38>)
 80080f2:	4c0d      	ldr	r4, [pc, #52]	; (8008128 <__libc_init_array+0x3c>)
 80080f4:	1ba4      	subs	r4, r4, r6
 80080f6:	10a4      	asrs	r4, r4, #2
 80080f8:	42a5      	cmp	r5, r4
 80080fa:	d109      	bne.n	8008110 <__libc_init_array+0x24>
 80080fc:	f000 f822 	bl	8008144 <_init>
 8008100:	2500      	movs	r5, #0
 8008102:	4e0a      	ldr	r6, [pc, #40]	; (800812c <__libc_init_array+0x40>)
 8008104:	4c0a      	ldr	r4, [pc, #40]	; (8008130 <__libc_init_array+0x44>)
 8008106:	1ba4      	subs	r4, r4, r6
 8008108:	10a4      	asrs	r4, r4, #2
 800810a:	42a5      	cmp	r5, r4
 800810c:	d105      	bne.n	800811a <__libc_init_array+0x2e>
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008114:	4798      	blx	r3
 8008116:	3501      	adds	r5, #1
 8008118:	e7ee      	b.n	80080f8 <__libc_init_array+0xc>
 800811a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800811e:	4798      	blx	r3
 8008120:	3501      	adds	r5, #1
 8008122:	e7f2      	b.n	800810a <__libc_init_array+0x1e>
 8008124:	080082c4 	.word	0x080082c4
 8008128:	080082c4 	.word	0x080082c4
 800812c:	080082c4 	.word	0x080082c4
 8008130:	080082c8 	.word	0x080082c8

08008134 <memset>:
 8008134:	4603      	mov	r3, r0
 8008136:	4402      	add	r2, r0
 8008138:	4293      	cmp	r3, r2
 800813a:	d100      	bne.n	800813e <memset+0xa>
 800813c:	4770      	bx	lr
 800813e:	f803 1b01 	strb.w	r1, [r3], #1
 8008142:	e7f9      	b.n	8008138 <memset+0x4>

08008144 <_init>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr

08008150 <_fini>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr
