
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009010  08009010  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08009010  08009010  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009010  08009010  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009010  08009010  00019010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08009018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de8  200001a8  080091c0  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f90  080091c0  00021f90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f6d  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d91  00000000  00000000  0003a13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001310  00000000  00000000  0003ded0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003f1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c050  00000000  00000000  00040360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001321a  00000000  00000000  0005c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000911f3  00000000  00000000  0006f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001007bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  00100838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008e60 	.word	0x08008e60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008e60 	.word	0x08008e60

0800014c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8000152:	4b21      	ldr	r3, [pc, #132]	; (80001d8 <_DoInit+0x8c>)
 8000154:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2202      	movs	r2, #2
 800015a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	2202      	movs	r2, #2
 8000160:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4a1d      	ldr	r2, [pc, #116]	; (80001dc <_DoInit+0x90>)
 8000166:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	4a1d      	ldr	r2, [pc, #116]	; (80001e0 <_DoInit+0x94>)
 800016c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000174:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	2200      	movs	r2, #0
 800017a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2200      	movs	r2, #0
 8000186:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	4a14      	ldr	r2, [pc, #80]	; (80001dc <_DoInit+0x90>)
 800018c:	649a      	str	r2, [r3, #72]	; 0x48
  p->aDown[0].pBuffer       = _acDownBuffer;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <_DoInit+0x98>)
 8000192:	64da      	str	r2, [r3, #76]	; 0x4c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2210      	movs	r2, #16
 8000198:	651a      	str	r2, [r3, #80]	; 0x50
  p->aDown[0].RdOff         = 0u;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	2200      	movs	r2, #0
 800019e:	659a      	str	r2, [r3, #88]	; 0x58
  p->aDown[0].WrOff         = 0u;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	2200      	movs	r2, #0
 80001a4:	655a      	str	r2, [r3, #84]	; 0x54
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2200      	movs	r2, #0
 80001aa:	65da      	str	r2, [r3, #92]	; 0x5c
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3307      	adds	r3, #7
 80001b0:	4a0d      	ldr	r2, [pc, #52]	; (80001e8 <_DoInit+0x9c>)
 80001b2:	6810      	ldr	r0, [r2, #0]
 80001b4:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	4a0c      	ldr	r2, [pc, #48]	; (80001ec <_DoInit+0xa0>)
 80001ba:	6810      	ldr	r0, [r2, #0]
 80001bc:	6018      	str	r0, [r3, #0]
 80001be:	8891      	ldrh	r1, [r2, #4]
 80001c0:	7992      	ldrb	r2, [r2, #6]
 80001c2:	8099      	strh	r1, [r3, #4]
 80001c4:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2220      	movs	r2, #32
 80001ca:	719a      	strb	r2, [r3, #6]
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000163c 	.word	0x2000163c
 80001dc:	08008e78 	.word	0x08008e78
 80001e0:	200001c4 	.word	0x200001c4
 80001e4:	200005c4 	.word	0x200005c4
 80001e8:	08008e84 	.word	0x08008e84
 80001ec:	08008e88 	.word	0x08008e88

080001f0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	60f8      	str	r0, [r7, #12]
 80001f8:	60b9      	str	r1, [r7, #8]
 80001fa:	607a      	str	r2, [r7, #4]
  char*    pDst;
#endif
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80001fc:	2300      	movs	r3, #0
 80001fe:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	691b      	ldr	r3, [r3, #16]
 800020a:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
 800020c:	693a      	ldr	r2, [r7, #16]
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	429a      	cmp	r2, r3
 8000212:	d905      	bls.n	8000220 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000214:	693a      	ldr	r2, [r7, #16]
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	1ad3      	subs	r3, r2, r3
 800021a:	3b01      	subs	r3, #1
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	e007      	b.n	8000230 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	6939      	ldr	r1, [r7, #16]
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	1acb      	subs	r3, r1, r3
 800022a:	4413      	add	r3, r2
 800022c:	3b01      	subs	r3, #1
 800022e:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	689a      	ldr	r2, [r3, #8]
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	69fa      	ldr	r2, [r7, #28]
 800023a:	4293      	cmp	r3, r2
 800023c:	bf28      	it	cs
 800023e:	4613      	movcs	r3, r2
 8000240:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000242:	69fa      	ldr	r2, [r7, #28]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4293      	cmp	r3, r2
 8000248:	bf28      	it	cs
 800024a:	4613      	movcs	r3, r2
 800024c:	61fb      	str	r3, [r7, #28]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	4413      	add	r3, r2
 8000256:	69fa      	ldr	r2, [r7, #28]
 8000258:	68b9      	ldr	r1, [r7, #8]
 800025a:	4618      	mov	r0, r3
 800025c:	f008 fdec 	bl	8008e38 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8000260:	69ba      	ldr	r2, [r7, #24]
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	4413      	add	r3, r2
 8000266:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
 8000268:	68ba      	ldr	r2, [r7, #8]
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	4413      	add	r3, r2
 800026e:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1ad3      	subs	r3, r2, r3
 8000276:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8000278:	697a      	ldr	r2, [r7, #20]
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	4413      	add	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	429a      	cmp	r2, r3
 8000288:	d101      	bne.n	800028e <_WriteBlocking+0x9e>
      WrOff = 0u;
 800028a:	2300      	movs	r3, #0
 800028c:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d1b5      	bne.n	8000206 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
 800029a:	69bb      	ldr	r3, [r7, #24]
}
 800029c:	4618      	mov	r0, r3
 800029e:	3720      	adds	r7, #32
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
  unsigned Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*    pDst;
#endif

  WrOff = pRing->WrOff;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	69fb      	ldr	r3, [r7, #28]
 80002bc:	1ad3      	subs	r3, r2, r3
 80002be:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80002c0:	69ba      	ldr	r2, [r7, #24]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d90e      	bls.n	80002e6 <_WriteNoCheck+0x42>
    while (NumBytes--) {
      *pDst++ = *pData++;
    };
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	685a      	ldr	r2, [r3, #4]
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	4413      	add	r3, r2
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	68b9      	ldr	r1, [r7, #8]
 80002d4:	4618      	mov	r0, r3
 80002d6:	f008 fdaf 	bl	8008e38 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
 80002da:	69fa      	ldr	r2, [r7, #28]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	441a      	add	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	60da      	str	r2, [r3, #12]
    NumBytesAtOnce = NumBytes - Rem;
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80002e4:	e01a      	b.n	800031c <_WriteNoCheck+0x78>
    NumBytesAtOnce = Rem;
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	4413      	add	r3, r2
 80002f2:	697a      	ldr	r2, [r7, #20]
 80002f4:	68b9      	ldr	r1, [r7, #8]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f008 fd9e 	bl	8008e38 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	617b      	str	r3, [r7, #20]
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6858      	ldr	r0, [r3, #4]
 8000308:	68ba      	ldr	r2, [r7, #8]
 800030a:	69bb      	ldr	r3, [r7, #24]
 800030c:	4413      	add	r3, r2
 800030e:	697a      	ldr	r2, [r7, #20]
 8000310:	4619      	mov	r1, r3
 8000312:	f008 fd91 	bl	8008e38 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	60da      	str	r2, [r3, #12]
}
 800031c:	bf00      	nop
 800031e:	3720      	adds	r7, #32
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8000338:	693a      	ldr	r2, [r7, #16]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	429a      	cmp	r2, r3
 800033e:	d808      	bhi.n	8000352 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	1ad2      	subs	r2, r2, r3
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	4413      	add	r3, r2
 800034c:	3b01      	subs	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	e004      	b.n	800035c <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8000352:	693a      	ldr	r2, [r7, #16]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800035c:	697b      	ldr	r3, [r7, #20]
}
 800035e:	4618      	mov	r0, r3
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4613      	mov	r3, r2
 800037e:	005b      	lsls	r3, r3, #1
 8000380:	4413      	add	r3, r2
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	4a1e      	ldr	r2, [pc, #120]	; (8000400 <SEGGER_RTT_WriteNoLock+0x98>)
 8000386:	4413      	add	r3, r2
 8000388:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d017      	beq.n	80003c2 <SEGGER_RTT_WriteNoLock+0x5a>
 8000392:	2b01      	cmp	r3, #1
 8000394:	d302      	bcc.n	800039c <SEGGER_RTT_WriteNoLock+0x34>
 8000396:	2b02      	cmp	r3, #2
 8000398:	d023      	beq.n	80003e2 <SEGGER_RTT_WriteNoLock+0x7a>
 800039a:	e029      	b.n	80003f0 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800039c:	6978      	ldr	r0, [r7, #20]
 800039e:	f7ff ffc1 	bl	8000324 <_GetAvailWriteSpace>
 80003a2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80003a4:	693a      	ldr	r2, [r7, #16]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d202      	bcs.n	80003b2 <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80003b0:	e021      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
      Status = NumBytes;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80003b6:	687a      	ldr	r2, [r7, #4]
 80003b8:	69b9      	ldr	r1, [r7, #24]
 80003ba:	6978      	ldr	r0, [r7, #20]
 80003bc:	f7ff ff72 	bl	80002a4 <_WriteNoCheck>
    break;
 80003c0:	e019      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80003c2:	6978      	ldr	r0, [r7, #20]
 80003c4:	f7ff ffae 	bl	8000324 <_GetAvailWriteSpace>
 80003c8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	4293      	cmp	r3, r2
 80003d0:	bf28      	it	cs
 80003d2:	4613      	movcs	r3, r2
 80003d4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80003d6:	69fa      	ldr	r2, [r7, #28]
 80003d8:	69b9      	ldr	r1, [r7, #24]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff62 	bl	80002a4 <_WriteNoCheck>
    break;
 80003e0:	e009      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	69b9      	ldr	r1, [r7, #24]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff02 	bl	80001f0 <_WriteBlocking>
 80003ec:	61f8      	str	r0, [r7, #28]
    break;
 80003ee:	e002      	b.n	80003f6 <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
    break;
 80003f4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80003f6:	69fb      	ldr	r3, [r7, #28]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000163c 	.word	0x2000163c

08000404 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <SEGGER_RTT_Write+0x44>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <SEGGER_RTT_Write+0x18>
 8000418:	f7ff fe98 	bl	800014c <_DoInit>
  SEGGER_RTT_LOCK();
 800041c:	f3ef 8311 	mrs	r3, BASEPRI
 8000420:	f04f 0120 	mov.w	r1, #32
 8000424:	f381 8811 	msr	BASEPRI, r1
 8000428:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	68b9      	ldr	r1, [r7, #8]
 800042e:	68f8      	ldr	r0, [r7, #12]
 8000430:	f7ff ff9a 	bl	8000368 <SEGGER_RTT_WriteNoLock>
 8000434:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
 800043c:	693b      	ldr	r3, [r7, #16]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	2000163c 	.word	0x2000163c

0800044c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  _DoInit();
 8000450:	f7ff fe7c 	bl	800014c <_DoInit>
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}

08000458 <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	460b      	mov	r3, r1
 8000462:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	429a      	cmp	r2, r3
 8000474:	d80e      	bhi.n	8000494 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	4413      	add	r3, r2
 800047e:	78fa      	ldrb	r2, [r7, #3]
 8000480:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	689a      	ldr	r2, [r3, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	429a      	cmp	r2, r3
 800049e:	d115      	bne.n	80004cc <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	6918      	ldr	r0, [r3, #16]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	461a      	mov	r2, r3
 80004ae:	f7ff ffa9 	bl	8000404 <SEGGER_RTT_Write>
 80004b2:	4602      	mov	r2, r0
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d004      	beq.n	80004c6 <_StoreChar+0x6e>
      p->ReturnValue = -1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f04f 32ff 	mov.w	r2, #4294967295
 80004c2:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
 80004c4:	e002      	b.n	80004cc <_StoreChar+0x74>
      p->Cnt = 0u;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	609a      	str	r2, [r3, #8]
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08a      	sub	sp, #40	; 0x28
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
 80004e0:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80004e6:	2301      	movs	r3, #1
 80004e8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80004ee:	e007      	b.n	8000500 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80004f0:	6a3a      	ldr	r2, [r7, #32]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f8:	623b      	str	r3, [r7, #32]
    Width++;
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	3301      	adds	r3, #1
 80004fe:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8000500:	6a3a      	ldr	r2, [r7, #32]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	d2f3      	bcs.n	80004f0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	429a      	cmp	r2, r3
 800050e:	d901      	bls.n	8000514 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8000514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	2b00      	cmp	r3, #0
 800051c:	d125      	bne.n	800056a <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
 800051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000520:	2b00      	cmp	r3, #0
 8000522:	d022      	beq.n	800056a <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8000524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b00      	cmp	r3, #0
 800052c:	d005      	beq.n	800053a <_PrintUnsigned+0x66>
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <_PrintUnsigned+0x66>
        c = '0';
 8000534:	2330      	movs	r3, #48	; 0x30
 8000536:	76fb      	strb	r3, [r7, #27]
 8000538:	e001      	b.n	800053e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800053a:	2320      	movs	r3, #32
 800053c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800053e:	e00b      	b.n	8000558 <_PrintUnsigned+0x84>
        FieldWidth--;
 8000540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000542:	3b01      	subs	r3, #1
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8000546:	7efb      	ldrb	r3, [r7, #27]
 8000548:	4619      	mov	r1, r3
 800054a:	68f8      	ldr	r0, [r7, #12]
 800054c:	f7ff ff84 	bl	8000458 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	68db      	ldr	r3, [r3, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db07      	blt.n	8000568 <_PrintUnsigned+0x94>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800055a:	2b00      	cmp	r3, #0
 800055c:	d005      	beq.n	800056a <_PrintUnsigned+0x96>
 800055e:	69fa      	ldr	r2, [r7, #28]
 8000560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000562:	429a      	cmp	r2, r3
 8000564:	d3ec      	bcc.n	8000540 <_PrintUnsigned+0x6c>
 8000566:	e000      	b.n	800056a <_PrintUnsigned+0x96>
          break;
 8000568:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	2b00      	cmp	r3, #0
 8000570:	db55      	blt.n	800061e <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d903      	bls.n	8000580 <_PrintUnsigned+0xac>
        NumDigits--;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	e009      	b.n	8000594 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000584:	fbb2 f3f3 	udiv	r3, r2, r3
 8000588:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800058a:	697a      	ldr	r2, [r7, #20]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	d200      	bcs.n	8000594 <_PrintUnsigned+0xc0>
          break;
 8000592:	e005      	b.n	80005a0 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
 8000594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800059e:	e7e8      	b.n	8000572 <_PrintUnsigned+0x9e>
    }
    //
    // Output digits
    //
    do {
      Div = v / Digit;
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a8:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <_PrintUnsigned+0x154>)
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f7ff ff48 	bl	8000458 <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db08      	blt.n	80005e2 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
 80005d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
 80005da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1df      	bne.n	80005a0 <_PrintUnsigned+0xcc>
 80005e0:	e000      	b.n	80005e4 <_PrintUnsigned+0x110>
        break;
 80005e2:	bf00      	nop
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80005e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d017      	beq.n	800061e <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
 80005ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d014      	beq.n	800061e <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80005f4:	e00a      	b.n	800060c <_PrintUnsigned+0x138>
          FieldWidth--;
 80005f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005f8:	3b01      	subs	r3, #1
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
 80005fc:	2120      	movs	r1, #32
 80005fe:	68f8      	ldr	r0, [r7, #12]
 8000600:	f7ff ff2a 	bl	8000458 <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db07      	blt.n	800061c <_PrintUnsigned+0x148>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800060c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d005      	beq.n	800061e <_PrintUnsigned+0x14a>
 8000612:	69fa      	ldr	r2, [r7, #28]
 8000614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000616:	429a      	cmp	r2, r3
 8000618:	d3ed      	bcc.n	80005f6 <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
 800061a:	e000      	b.n	800061e <_PrintUnsigned+0x14a>
            break;
 800061c:	bf00      	nop
}
 800061e:	bf00      	nop
 8000620:	3728      	adds	r7, #40	; 0x28
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	08008ef0 	.word	0x08008ef0

0800062c <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	bfb8      	it	lt
 8000640:	425b      	neglt	r3, r3
 8000642:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8000644:	2301      	movs	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8000648:	e007      	b.n	800065a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000652:	613b      	str	r3, [r7, #16]
    Width++;
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	3301      	adds	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	693a      	ldr	r2, [r7, #16]
 800065e:	429a      	cmp	r2, r3
 8000660:	daf3      	bge.n	800064a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	429a      	cmp	r2, r3
 8000668:	d901      	bls.n	800066e <_PrintInt+0x42>
    Width = NumDigits;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800066e:	6a3b      	ldr	r3, [r7, #32]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00a      	beq.n	800068a <_PrintInt+0x5e>
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b00      	cmp	r3, #0
 8000678:	db04      	blt.n	8000684 <_PrintInt+0x58>
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <_PrintInt+0x5e>
    FieldWidth--;
 8000684:	6a3b      	ldr	r3, [r7, #32]
 8000686:	3b01      	subs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d002      	beq.n	800069a <_PrintInt+0x6e>
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d01c      	beq.n	80006d4 <_PrintInt+0xa8>
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d117      	bne.n	80006d4 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d014      	beq.n	80006d4 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006aa:	e00a      	b.n	80006c2 <_PrintInt+0x96>
        FieldWidth--;
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80006b2:	2120      	movs	r1, #32
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff fecf 	bl	8000458 <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db07      	blt.n	80006d2 <_PrintInt+0xa6>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <_PrintInt+0xa8>
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d3ed      	bcc.n	80006ac <_PrintInt+0x80>
 80006d0:	e000      	b.n	80006d4 <_PrintInt+0xa8>
          break;
 80006d2:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db4a      	blt.n	8000772 <_PrintInt+0x146>
    if (v < 0) {
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da07      	bge.n	80006f2 <_PrintInt+0xc6>
      v = -v;
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	425b      	negs	r3, r3
 80006e6:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
 80006e8:	212d      	movs	r1, #45	; 0x2d
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f7ff feb4 	bl	8000458 <_StoreChar>
 80006f0:	e008      	b.n	8000704 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80006f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d003      	beq.n	8000704 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
 80006fc:	212b      	movs	r1, #43	; 0x2b
 80006fe:	68f8      	ldr	r0, [r7, #12]
 8000700:	f7ff feaa 	bl	8000458 <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	db32      	blt.n	8000772 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	2b00      	cmp	r3, #0
 8000714:	d01f      	beq.n	8000756 <_PrintInt+0x12a>
 8000716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	d11a      	bne.n	8000756 <_PrintInt+0x12a>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d117      	bne.n	8000756 <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d014      	beq.n	8000756 <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800072c:	e00a      	b.n	8000744 <_PrintInt+0x118>
            FieldWidth--;
 800072e:	6a3b      	ldr	r3, [r7, #32]
 8000730:	3b01      	subs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
 8000734:	2130      	movs	r1, #48	; 0x30
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f7ff fe8e 	bl	8000458 <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db07      	blt.n	8000754 <_PrintInt+0x128>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8000744:	6a3b      	ldr	r3, [r7, #32]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <_PrintInt+0x12a>
 800074a:	697a      	ldr	r2, [r7, #20]
 800074c:	6a3b      	ldr	r3, [r7, #32]
 800074e:	429a      	cmp	r2, r3
 8000750:	d3ed      	bcc.n	800072e <_PrintInt+0x102>
 8000752:	e000      	b.n	8000756 <_PrintInt+0x12a>
              break;
 8000754:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	2b00      	cmp	r3, #0
 800075c:	db09      	blt.n	8000772 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	6a3b      	ldr	r3, [r7, #32]
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68f8      	ldr	r0, [r7, #12]
 800076e:	f7ff feb1 	bl	80004d4 <_PrintUnsigned>
      }
    }
  }
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b0a2      	sub	sp, #136	; 0x88
 8000780:	af02      	add	r7, sp, #8
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  BufferDesc.Cnt            = 0u;
 8000792:	2300      	movs	r3, #0
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  BufferDesc.RTTBufferIndex = BufferIndex;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	663b      	str	r3, [r7, #96]	; 0x60
  BufferDesc.ReturnValue    = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	65fb      	str	r3, [r7, #92]	; 0x5c

  do {
    c = *sFormat;
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    sFormat++;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	3301      	adds	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
 80007ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f000 8161 	beq.w	8000a78 <SEGGER_RTT_vprintf+0x2fc>
      break;
    }
    if (c == '%') {
 80007b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007ba:	2b25      	cmp	r3, #37	; 0x25
 80007bc:	f040 814f 	bne.w	8000a5e <SEGGER_RTT_vprintf+0x2e2>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80007c0:	2300      	movs	r3, #0
 80007c2:	673b      	str	r3, [r7, #112]	; 0x70
      v = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	67bb      	str	r3, [r7, #120]	; 0x78
      do {
        c = *sFormat;
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        switch (c) {
 80007d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80007d4:	3b23      	subs	r3, #35	; 0x23
 80007d6:	2b0d      	cmp	r3, #13
 80007d8:	d83e      	bhi.n	8000858 <SEGGER_RTT_vprintf+0xdc>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <SEGGER_RTT_vprintf+0x64>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	08000849 	.word	0x08000849
 80007e4:	08000859 	.word	0x08000859
 80007e8:	08000859 	.word	0x08000859
 80007ec:	08000859 	.word	0x08000859
 80007f0:	08000859 	.word	0x08000859
 80007f4:	08000859 	.word	0x08000859
 80007f8:	08000859 	.word	0x08000859
 80007fc:	08000859 	.word	0x08000859
 8000800:	08000839 	.word	0x08000839
 8000804:	08000859 	.word	0x08000859
 8000808:	08000819 	.word	0x08000819
 800080c:	08000859 	.word	0x08000859
 8000810:	08000859 	.word	0x08000859
 8000814:	08000829 	.word	0x08000829
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8000818:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	673b      	str	r3, [r7, #112]	; 0x70
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	3301      	adds	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e01a      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8000828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	673b      	str	r3, [r7, #112]	; 0x70
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	e012      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8000838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	673b      	str	r3, [r7, #112]	; 0x70
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	3301      	adds	r3, #1
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	e00a      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8000848:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	673b      	str	r3, [r7, #112]	; 0x70
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	3301      	adds	r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	e002      	b.n	800085e <SEGGER_RTT_vprintf+0xe2>
        default:  v = 0; break;
 8000858:	2300      	movs	r3, #0
 800085a:	67bb      	str	r3, [r7, #120]	; 0x78
 800085c:	bf00      	nop
        }
      } while (v);
 800085e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1b1      	bne.n	80007c8 <SEGGER_RTT_vprintf+0x4c>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8000864:	2300      	movs	r3, #0
 8000866:	66fb      	str	r3, [r7, #108]	; 0x6c
      do {
        c = *sFormat;
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        if ((c < '0') || (c > '9')) {
 8000870:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000874:	2b2f      	cmp	r3, #47	; 0x2f
 8000876:	d912      	bls.n	800089e <SEGGER_RTT_vprintf+0x122>
 8000878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800087c:	2b39      	cmp	r3, #57	; 0x39
 800087e:	d80e      	bhi.n	800089e <SEGGER_RTT_vprintf+0x122>
          break;
        }
        sFormat++;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
 8000886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000888:	4613      	mov	r3, r2
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	461a      	mov	r2, r3
 8000892:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000896:	4413      	add	r3, r2
 8000898:	3b30      	subs	r3, #48	; 0x30
 800089a:	66fb      	str	r3, [r7, #108]	; 0x6c
        c = *sFormat;
 800089c:	e7e4      	b.n	8000868 <SEGGER_RTT_vprintf+0xec>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800089e:	2300      	movs	r3, #0
 80008a0:	677b      	str	r3, [r7, #116]	; 0x74
      c = *sFormat;
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      if (c == '.') {
 80008aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008ae:	2b2e      	cmp	r3, #46	; 0x2e
 80008b0:	d11d      	bne.n	80008ee <SEGGER_RTT_vprintf+0x172>
        sFormat++;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3301      	adds	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          if ((c < '0') || (c > '9')) {
 80008c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008c4:	2b2f      	cmp	r3, #47	; 0x2f
 80008c6:	d912      	bls.n	80008ee <SEGGER_RTT_vprintf+0x172>
 80008c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008cc:	2b39      	cmp	r3, #57	; 0x39
 80008ce:	d80e      	bhi.n	80008ee <SEGGER_RTT_vprintf+0x172>
            break;
          }
          sFormat++;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3301      	adds	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
 80008d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	4413      	add	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	461a      	mov	r2, r3
 80008e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008e6:	4413      	add	r3, r2
 80008e8:	3b30      	subs	r3, #48	; 0x30
 80008ea:	677b      	str	r3, [r7, #116]	; 0x74
          c = *sFormat;
 80008ec:	e7e4      	b.n	80008b8 <SEGGER_RTT_vprintf+0x13c>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      do {
        if ((c == 'l') || (c == 'h')) {
 80008f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008fa:	2b6c      	cmp	r3, #108	; 0x6c
 80008fc:	d003      	beq.n	8000906 <SEGGER_RTT_vprintf+0x18a>
 80008fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000902:	2b68      	cmp	r3, #104	; 0x68
 8000904:	d107      	bne.n	8000916 <SEGGER_RTT_vprintf+0x19a>
          c = *sFormat;
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
          sFormat++;
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3301      	adds	r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
        if ((c == 'l') || (c == 'h')) {
 8000914:	e7ef      	b.n	80008f6 <SEGGER_RTT_vprintf+0x17a>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8000916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800091a:	2b64      	cmp	r3, #100	; 0x64
 800091c:	d028      	beq.n	8000970 <SEGGER_RTT_vprintf+0x1f4>
 800091e:	2b64      	cmp	r3, #100	; 0x64
 8000920:	dc07      	bgt.n	8000932 <SEGGER_RTT_vprintf+0x1b6>
 8000922:	2b58      	cmp	r3, #88	; 0x58
 8000924:	d04a      	beq.n	80009bc <SEGGER_RTT_vprintf+0x240>
 8000926:	2b63      	cmp	r3, #99	; 0x63
 8000928:	d00f      	beq.n	800094a <SEGGER_RTT_vprintf+0x1ce>
 800092a:	2b25      	cmp	r3, #37	; 0x25
 800092c:	f000 808c 	beq.w	8000a48 <SEGGER_RTT_vprintf+0x2cc>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8000930:	e091      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8000932:	2b73      	cmp	r3, #115	; 0x73
 8000934:	d055      	beq.n	80009e2 <SEGGER_RTT_vprintf+0x266>
 8000936:	2b73      	cmp	r3, #115	; 0x73
 8000938:	dc02      	bgt.n	8000940 <SEGGER_RTT_vprintf+0x1c4>
 800093a:	2b70      	cmp	r3, #112	; 0x70
 800093c:	d071      	beq.n	8000a22 <SEGGER_RTT_vprintf+0x2a6>
        break;
 800093e:	e08a      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
      switch (c) {
 8000940:	2b75      	cmp	r3, #117	; 0x75
 8000942:	d028      	beq.n	8000996 <SEGGER_RTT_vprintf+0x21a>
 8000944:	2b78      	cmp	r3, #120	; 0x78
 8000946:	d039      	beq.n	80009bc <SEGGER_RTT_vprintf+0x240>
        break;
 8000948:	e085      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1d19      	adds	r1, r3, #4
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6011      	str	r1, [r2, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	67bb      	str	r3, [r7, #120]	; 0x78
        c0 = (char)v;
 8000958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800095a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        _StoreChar(&BufferDesc, c0);
 800095e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fd75 	bl	8000458 <_StoreChar>
        break;
 800096e:	e072      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	1d19      	adds	r1, r3, #4
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6011      	str	r1, [r2, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800097e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800098c:	220a      	movs	r2, #10
 800098e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000990:	f7ff fe4c 	bl	800062c <_PrintInt>
        break;
 8000994:	e05f      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1d19      	adds	r1, r3, #4
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	6011      	str	r1, [r2, #0]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80009a4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80009a6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80009aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009b4:	220a      	movs	r2, #10
 80009b6:	f7ff fd8d 	bl	80004d4 <_PrintUnsigned>
        break;
 80009ba:	e04c      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1d19      	adds	r1, r3, #4
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6011      	str	r1, [r2, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80009ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80009cc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80009d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80009da:	2210      	movs	r2, #16
 80009dc:	f7ff fd7a 	bl	80004d4 <_PrintUnsigned>
        break;
 80009e0:	e039      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
          const char * s = va_arg(*pParamList, const char *);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	1d19      	adds	r1, r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	6011      	str	r1, [r2, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	66bb      	str	r3, [r7, #104]	; 0x68
            c = *s;
 80009f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            s++;
 80009f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009fa:	3301      	adds	r3, #1
 80009fc:	66bb      	str	r3, [r7, #104]	; 0x68
            if (c == '\0') {
 80009fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00b      	beq.n	8000a1e <SEGGER_RTT_vprintf+0x2a2>
           _StoreChar(&BufferDesc, c);
 8000a06:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd21 	bl	8000458 <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
 8000a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	dae9      	bge.n	80009f0 <SEGGER_RTT_vprintf+0x274>
        break;
 8000a1c:	e01b      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
              break;
 8000a1e:	bf00      	nop
        break;
 8000a20:	e019      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        v = va_arg(*pParamList, int);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	1d19      	adds	r1, r3, #4
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	6011      	str	r1, [r2, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	67bb      	str	r3, [r7, #120]	; 0x78
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
 8000a30:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000a32:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a36:	2300      	movs	r3, #0
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2308      	movs	r3, #8
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2308      	movs	r3, #8
 8000a40:	2210      	movs	r2, #16
 8000a42:	f7ff fd47 	bl	80004d4 <_PrintUnsigned>
        break;
 8000a46:	e006      	b.n	8000a56 <SEGGER_RTT_vprintf+0x2da>
        _StoreChar(&BufferDesc, '%');
 8000a48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a4c:	2125      	movs	r1, #37	; 0x25
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fd02 	bl	8000458 <_StoreChar>
        break;
 8000a54:	bf00      	nop
      }
      sFormat++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	e007      	b.n	8000a6e <SEGGER_RTT_vprintf+0x2f2>
    } else {
      _StoreChar(&BufferDesc, c);
 8000a5e:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8000a62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a66:	4611      	mov	r1, r2
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fcf5 	bl	8000458 <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
 8000a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	f6bf ae94 	bge.w	800079e <SEGGER_RTT_vprintf+0x22>
 8000a76:	e000      	b.n	8000a7a <SEGGER_RTT_vprintf+0x2fe>
      break;
 8000a78:	bf00      	nop

  if (BufferDesc.ReturnValue > 0) {
 8000a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dd0d      	ble.n	8000a9c <SEGGER_RTT_vprintf+0x320>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
 8000a80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <SEGGER_RTT_vprintf+0x318>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
 8000a86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fcb8 	bl	8000404 <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
 8000a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a98:	4413      	add	r3, r2
 8000a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  }
  return BufferDesc.ReturnValue;
 8000a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3780      	adds	r7, #128	; 0x80
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop

08000aa8 <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
 8000aa8:	b40e      	push	{r1, r2, r3}
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  va_list ParamList;

  va_start(ParamList, sFormat);
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	60fb      	str	r3, [r7, #12]
  return SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	461a      	mov	r2, r3
 8000abe:	69f9      	ldr	r1, [r7, #28]
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fe5b 	bl	800077c <SEGGER_RTT_vprintf>
 8000ac6:	4603      	mov	r3, r0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ad2:	b003      	add	sp, #12
 8000ad4:	4770      	bx	lr
	...

08000ad8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b50      	ldr	r3, [pc, #320]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4a4f      	ldr	r2, [pc, #316]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6193      	str	r3, [r2, #24]
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a49      	ldr	r2, [pc, #292]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b0a:	f043 0320 	orr.w	r3, r3, #32
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0320 	and.w	r3, r3, #32
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a43      	ldr	r2, [pc, #268]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b41      	ldr	r3, [pc, #260]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b34:	4b3e      	ldr	r3, [pc, #248]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a3d      	ldr	r2, [pc, #244]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b3a:	f043 0308 	orr.w	r3, r3, #8
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b3b      	ldr	r3, [pc, #236]	; (8000c30 <MX_GPIO_Init+0x158>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	4838      	ldr	r0, [pc, #224]	; (8000c34 <MX_GPIO_Init+0x15c>)
 8000b54:	f001 ffad 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	4836      	ldr	r0, [pc, #216]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000b60:	f001 ffa7 	bl	8002ab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482d      	ldr	r0, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x15c>)
 8000b7e:	f001 fe27 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4828      	ldr	r0, [pc, #160]	; (8000c34 <MX_GPIO_Init+0x15c>)
 8000b94:	f001 fe1c 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b98:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000b9c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4823      	ldr	r0, [pc, #140]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000baa:	f001 fe11 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000bae:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000bb2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	481f      	ldr	r0, [pc, #124]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000bc0:	f001 fe06 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000bc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4816      	ldr	r0, [pc, #88]	; (8000c38 <MX_GPIO_Init+0x160>)
 8000bde:	f001 fdf7 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_GPIO_Init+0x168>)
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000bf8:	f001 fdea 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <MX_GPIO_Init+0x164>)
 8000c12:	f001 fddd 	bl	80027d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2101      	movs	r1, #1
 8000c1a:	2017      	movs	r0, #23
 8000c1c:	f001 fda1 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c20:	2017      	movs	r0, #23
 8000c22:	f001 fdba 	bl	800279a <HAL_NVIC_EnableIRQ>

}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40011000 	.word	0x40011000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	10210000 	.word	0x10210000

08000c44 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <data_low+0x44>)
 8000c52:	f001 ff2e 	bl	8002ab2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2302      	movs	r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <data_low+0x44>)
 8000c7a:	f001 fda9 	bl	80027d0 <HAL_GPIO_Init>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <clock_low>:

void clock_low(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <clock_low+0x44>)
 8000c9a:	f001 ff0a 	bl	8002ab2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <clock_low+0x44>)
 8000cc2:	f001 fd85 	bl	80027d0 <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010c00 	.word	0x40010c00

08000cd4 <data_release>:

void data_release(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cea:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <data_release+0x34>)
 8000cfa:	f001 fd69 	bl	80027d0 <HAL_GPIO_Init>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <clock_release>:

void clock_release(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <clock_release+0x34>)
 8000d26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <clock_release+0x38>)
 8000d32:	f001 fd4d 	bl	80027d0 <HAL_GPIO_Init>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	10210000 	.word	0x10210000
 8000d44:	40010c00 	.word	0x40010c00

08000d48 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 8000d52:	4bb5      	ldr	r3, [pc, #724]	; (8001028 <matrix_scan+0x2e0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 8000d58:	2106      	movs	r1, #6
 8000d5a:	201f      	movs	r0, #31
 8000d5c:	f000 f98c 	bl	8001078 <matrix_is_on>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <matrix_scan+0x24>
        matrix_break(PAUSE);
 8000d66:	20fe      	movs	r0, #254	; 0xfe
 8000d68:	f000 f9f4 	bl	8001154 <matrix_break>
    }

	if (code == 0)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 817c 	beq.w	800106c <matrix_scan+0x324>
		return;

	switch (state) {
 8000d74:	4bad      	ldr	r3, [pc, #692]	; (800102c <matrix_scan+0x2e4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b0d      	cmp	r3, #13
 8000d7a:	f200 8172 	bhi.w	8001062 <matrix_scan+0x31a>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <matrix_scan+0x3c>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000dbd 	.word	0x08000dbd
 8000d88:	08000eb9 	.word	0x08000eb9
 8000d8c:	08000e3d 	.word	0x08000e3d
 8000d90:	08000f09 	.word	0x08000f09
 8000d94:	08000f6d 	.word	0x08000f6d
 8000d98:	08000f85 	.word	0x08000f85
 8000d9c:	08000f9d 	.word	0x08000f9d
 8000da0:	08000fb5 	.word	0x08000fb5
 8000da4:	08000fcd 	.word	0x08000fcd
 8000da8:	08000fe5 	.word	0x08000fe5
 8000dac:	08000ffd 	.word	0x08000ffd
 8000db0:	0800101b 	.word	0x0800101b
 8000db4:	08001039 	.word	0x08001039
 8000db8:	0800104f 	.word	0x0800104f
		case INIT:
			switch (code) {
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2b84      	cmp	r3, #132	; 0x84
 8000dc0:	d01f      	beq.n	8000e02 <matrix_scan+0xba>
 8000dc2:	2b84      	cmp	r3, #132	; 0x84
 8000dc4:	dc04      	bgt.n	8000dd0 <matrix_scan+0x88>
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d022      	beq.n	8000e10 <matrix_scan+0xc8>
 8000dca:	2b83      	cmp	r3, #131	; 0x83
 8000dcc:	d012      	beq.n	8000df4 <matrix_scan+0xac>
 8000dce:	e025      	b.n	8000e1c <matrix_scan+0xd4>
 8000dd0:	2be1      	cmp	r3, #225	; 0xe1
 8000dd2:	d00b      	beq.n	8000dec <matrix_scan+0xa4>
 8000dd4:	2bf0      	cmp	r3, #240	; 0xf0
 8000dd6:	d005      	beq.n	8000de4 <matrix_scan+0x9c>
 8000dd8:	2be0      	cmp	r3, #224	; 0xe0
 8000dda:	d11f      	bne.n	8000e1c <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 8000ddc:	4b93      	ldr	r3, [pc, #588]	; (800102c <matrix_scan+0x2e4>)
 8000dde:	2202      	movs	r2, #2
 8000de0:	701a      	strb	r2, [r3, #0]
					break;
 8000de2:	e02a      	b.n	8000e3a <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000de4:	4b91      	ldr	r3, [pc, #580]	; (800102c <matrix_scan+0x2e4>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
					break;
 8000dea:	e026      	b.n	8000e3a <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 8000dec:	4b8f      	ldr	r3, [pc, #572]	; (800102c <matrix_scan+0x2e4>)
 8000dee:	2204      	movs	r2, #4
 8000df0:	701a      	strb	r2, [r3, #0]
					break;
 8000df2:	e022      	b.n	8000e3a <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000df4:	2083      	movs	r0, #131	; 0x83
 8000df6:	f000 f95b 	bl	80010b0 <matrix_make>
					state = INIT;
 8000dfa:	4b8c      	ldr	r3, [pc, #560]	; (800102c <matrix_scan+0x2e4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
					break;
 8000e00:	e01b      	b.n	8000e3a <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000e02:	20fc      	movs	r0, #252	; 0xfc
 8000e04:	f000 f954 	bl	80010b0 <matrix_make>
					state = INIT;
 8000e08:	4b88      	ldr	r3, [pc, #544]	; (800102c <matrix_scan+0x2e4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
					break;
 8000e0e:	e014      	b.n	8000e3a <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000e10:	f000 f9f4 	bl	80011fc <matrix_clear>
					state = INIT;
 8000e14:	4b85      	ldr	r3, [pc, #532]	; (800102c <matrix_scan+0x2e4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
					break;
 8000e1a:	e00e      	b.n	8000e3a <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db04      	blt.n	8000e2e <matrix_scan+0xe6>
						matrix_make(code);
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f942 	bl	80010b0 <matrix_make>
 8000e2c:	e001      	b.n	8000e32 <matrix_scan+0xea>
					} else {
						matrix_clear();
 8000e2e:	f000 f9e5 	bl	80011fc <matrix_clear>
					}
					state = INIT;
 8000e32:	4b7e      	ldr	r3, [pc, #504]	; (800102c <matrix_scan+0x2e4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000e38:	e116      	b.n	8001068 <matrix_scan+0x320>
 8000e3a:	e115      	b.n	8001068 <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b59      	cmp	r3, #89	; 0x59
 8000e40:	d00d      	beq.n	8000e5e <matrix_scan+0x116>
 8000e42:	2b59      	cmp	r3, #89	; 0x59
 8000e44:	dc04      	bgt.n	8000e50 <matrix_scan+0x108>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d01c      	beq.n	8000e84 <matrix_scan+0x13c>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d007      	beq.n	8000e5e <matrix_scan+0x116>
 8000e4e:	e020      	b.n	8000e92 <matrix_scan+0x14a>
 8000e50:	2b83      	cmp	r3, #131	; 0x83
 8000e52:	d010      	beq.n	8000e76 <matrix_scan+0x12e>
 8000e54:	2bf0      	cmp	r3, #240	; 0xf0
 8000e56:	d00a      	beq.n	8000e6e <matrix_scan+0x126>
 8000e58:	2b7e      	cmp	r3, #126	; 0x7e
 8000e5a:	d004      	beq.n	8000e66 <matrix_scan+0x11e>
 8000e5c:	e019      	b.n	8000e92 <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000e5e:	4b73      	ldr	r3, [pc, #460]	; (800102c <matrix_scan+0x2e4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
					break;
 8000e64:	e027      	b.n	8000eb6 <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 8000e66:	4b71      	ldr	r3, [pc, #452]	; (800102c <matrix_scan+0x2e4>)
 8000e68:	220b      	movs	r2, #11
 8000e6a:	701a      	strb	r2, [r3, #0]
					break;
 8000e6c:	e023      	b.n	8000eb6 <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 8000e6e:	4b6f      	ldr	r3, [pc, #444]	; (800102c <matrix_scan+0x2e4>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	701a      	strb	r2, [r3, #0]
					break;
 8000e74:	e01f      	b.n	8000eb6 <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 8000e76:	2083      	movs	r0, #131	; 0x83
 8000e78:	f000 f91a 	bl	80010b0 <matrix_make>
					state = INIT;
 8000e7c:	4b6b      	ldr	r3, [pc, #428]	; (800102c <matrix_scan+0x2e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
					break;
 8000e82:	e018      	b.n	8000eb6 <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f913 	bl	80010b0 <matrix_make>
					state = INIT;
 8000e8a:	4b68      	ldr	r3, [pc, #416]	; (800102c <matrix_scan+0x2e4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
					break;
 8000e90:	e011      	b.n	8000eb6 <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db07      	blt.n	8000eaa <matrix_scan+0x162>
						matrix_make(code|0x80);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f904 	bl	80010b0 <matrix_make>
 8000ea8:	e001      	b.n	8000eae <matrix_scan+0x166>
					} else {
						matrix_clear();
 8000eaa:	f000 f9a7 	bl	80011fc <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000eae:	4b5f      	ldr	r3, [pc, #380]	; (800102c <matrix_scan+0x2e4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000eb4:	e0d8      	b.n	8001068 <matrix_scan+0x320>
 8000eb6:	e0d7      	b.n	8001068 <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b84      	cmp	r3, #132	; 0x84
 8000ebc:	d00a      	beq.n	8000ed4 <matrix_scan+0x18c>
 8000ebe:	2bf0      	cmp	r3, #240	; 0xf0
 8000ec0:	d00f      	beq.n	8000ee2 <matrix_scan+0x19a>
 8000ec2:	2b83      	cmp	r3, #131	; 0x83
 8000ec4:	d110      	bne.n	8000ee8 <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 8000ec6:	2083      	movs	r0, #131	; 0x83
 8000ec8:	f000 f944 	bl	8001154 <matrix_break>
					state = INIT;
 8000ecc:	4b57      	ldr	r3, [pc, #348]	; (800102c <matrix_scan+0x2e4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
					break;
 8000ed2:	e018      	b.n	8000f06 <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000ed4:	20fc      	movs	r0, #252	; 0xfc
 8000ed6:	f000 f93d 	bl	8001154 <matrix_break>
					state = INIT;
 8000eda:	4b54      	ldr	r3, [pc, #336]	; (800102c <matrix_scan+0x2e4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
					break;
 8000ee0:	e011      	b.n	8000f06 <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000ee2:	f000 f98b 	bl	80011fc <matrix_clear>
					//clear_keyboard();
					break;
 8000ee6:	e00e      	b.n	8000f06 <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db04      	blt.n	8000efa <matrix_scan+0x1b2>
					matrix_break(code);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f92e 	bl	8001154 <matrix_break>
 8000ef8:	e001      	b.n	8000efe <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 8000efa:	f000 f97f 	bl	80011fc <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 8000efe:	4b4b      	ldr	r3, [pc, #300]	; (800102c <matrix_scan+0x2e4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f04:	e0b0      	b.n	8001068 <matrix_scan+0x320>
 8000f06:	e0af      	b.n	8001068 <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b12      	cmp	r3, #18
 8000f0c:	d009      	beq.n	8000f22 <matrix_scan+0x1da>
 8000f0e:	2b12      	cmp	r3, #18
 8000f10:	dc02      	bgt.n	8000f18 <matrix_scan+0x1d0>
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d010      	beq.n	8000f38 <matrix_scan+0x1f0>
 8000f16:	e016      	b.n	8000f46 <matrix_scan+0x1fe>
 8000f18:	2b59      	cmp	r3, #89	; 0x59
 8000f1a:	d002      	beq.n	8000f22 <matrix_scan+0x1da>
 8000f1c:	2b83      	cmp	r3, #131	; 0x83
 8000f1e:	d004      	beq.n	8000f2a <matrix_scan+0x1e2>
 8000f20:	e011      	b.n	8000f46 <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000f22:	4b42      	ldr	r3, [pc, #264]	; (800102c <matrix_scan+0x2e4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
					break;
 8000f28:	e01f      	b.n	8000f6a <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 8000f2a:	2083      	movs	r0, #131	; 0x83
 8000f2c:	f000 f912 	bl	8001154 <matrix_break>
					state = INIT;
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <matrix_scan+0x2e4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
					break;
 8000f36:	e018      	b.n	8000f6a <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f90b 	bl	8001154 <matrix_break>
					state = INIT;
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	; (800102c <matrix_scan+0x2e4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	701a      	strb	r2, [r3, #0]
					break;
 8000f44:	e011      	b.n	8000f6a <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db07      	blt.n	8000f5e <matrix_scan+0x216>
						matrix_break(code|0x80);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f8fc 	bl	8001154 <matrix_break>
 8000f5c:	e001      	b.n	8000f62 <matrix_scan+0x21a>
					} else {
						matrix_clear();
 8000f5e:	f000 f94d 	bl	80011fc <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <matrix_scan+0x2e4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f68:	e07e      	b.n	8001068 <matrix_scan+0x320>
 8000f6a:	e07d      	b.n	8001068 <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b14      	cmp	r3, #20
 8000f70:	d104      	bne.n	8000f7c <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <matrix_scan+0x2e4>)
 8000f74:	2205      	movs	r2, #5
 8000f76:	701a      	strb	r2, [r3, #0]
					break;
 8000f78:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000f7a:	e075      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <matrix_scan+0x2e4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
			break;
 8000f82:	e071      	b.n	8001068 <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b77      	cmp	r3, #119	; 0x77
 8000f88:	d104      	bne.n	8000f94 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <matrix_scan+0x2e4>)
 8000f8c:	2206      	movs	r2, #6
 8000f8e:	701a      	strb	r2, [r3, #0]
					break;
 8000f90:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000f92:	e069      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <matrix_scan+0x2e4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
			break;
 8000f9a:	e065      	b.n	8001068 <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2be1      	cmp	r3, #225	; 0xe1
 8000fa0:	d104      	bne.n	8000fac <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <matrix_scan+0x2e4>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	701a      	strb	r2, [r3, #0]
					break;
 8000fa8:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000faa:	e05d      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <matrix_scan+0x2e4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
			break;
 8000fb2:	e059      	b.n	8001068 <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	2bf0      	cmp	r3, #240	; 0xf0
 8000fb8:	d104      	bne.n	8000fc4 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <matrix_scan+0x2e4>)
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	701a      	strb	r2, [r3, #0]
					break;
 8000fc0:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000fc2:	e051      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <matrix_scan+0x2e4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
			break;
 8000fca:	e04d      	b.n	8001068 <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b14      	cmp	r3, #20
 8000fd0:	d104      	bne.n	8000fdc <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <matrix_scan+0x2e4>)
 8000fd4:	2209      	movs	r2, #9
 8000fd6:	701a      	strb	r2, [r3, #0]
					break;
 8000fd8:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000fda:	e045      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <matrix_scan+0x2e4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
			break;
 8000fe2:	e041      	b.n	8001068 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	2bf0      	cmp	r3, #240	; 0xf0
 8000fe8:	d104      	bne.n	8000ff4 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <matrix_scan+0x2e4>)
 8000fec:	220a      	movs	r2, #10
 8000fee:	701a      	strb	r2, [r3, #0]
					break;
 8000ff0:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000ff2:	e039      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8000ff4:	4b0d      	ldr	r3, [pc, #52]	; (800102c <matrix_scan+0x2e4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
			break;
 8000ffa:	e035      	b.n	8001068 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b77      	cmp	r3, #119	; 0x77
 8001000:	d107      	bne.n	8001012 <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 8001002:	20fe      	movs	r0, #254	; 0xfe
 8001004:	f000 f854 	bl	80010b0 <matrix_make>
					state = INIT;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <matrix_scan+0x2e4>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
					break;
 800100e:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8001010:	e02a      	b.n	8001068 <matrix_scan+0x320>
					state = INIT;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <matrix_scan+0x2e4>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
			break;
 8001018:	e026      	b.n	8001068 <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2be0      	cmp	r3, #224	; 0xe0
 800101e:	d107      	bne.n	8001030 <matrix_scan+0x2e8>
				state = E0_7E_E0;
 8001020:	4b02      	ldr	r3, [pc, #8]	; (800102c <matrix_scan+0x2e4>)
 8001022:	220c      	movs	r2, #12
 8001024:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8001026:	e01f      	b.n	8001068 <matrix_scan+0x320>
 8001028:	200005f4 	.word	0x200005f4
 800102c:	200005f5 	.word	0x200005f5
				state = INIT;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <matrix_scan+0x32c>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
			break;
 8001036:	e017      	b.n	8001068 <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2bf0      	cmp	r3, #240	; 0xf0
 800103c:	d103      	bne.n	8001046 <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <matrix_scan+0x32c>)
 8001040:	220d      	movs	r2, #13
 8001042:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8001044:	e010      	b.n	8001068 <matrix_scan+0x320>
				state = INIT;
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <matrix_scan+0x32c>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			break;
 800104c:	e00c      	b.n	8001068 <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b7e      	cmp	r3, #126	; 0x7e
 8001052:	d102      	bne.n	800105a <matrix_scan+0x312>
				matrix_make(PAUSE);
 8001054:	20fe      	movs	r0, #254	; 0xfe
 8001056:	f000 f82b 	bl	80010b0 <matrix_make>
			state = INIT;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <matrix_scan+0x32c>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			break;
 8001060:	e002      	b.n	8001068 <matrix_scan+0x320>
		default:
			state = INIT;
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <matrix_scan+0x32c>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 8001068:	bf00      	nop
 800106a:	e000      	b.n	800106e <matrix_scan+0x326>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200005f5 	.word	0x200005f5

08001078 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	460a      	mov	r2, r1
 8001082:	71fb      	strb	r3, [r7, #7]
 8001084:	4613      	mov	r3, r2
 8001086:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <matrix_is_on+0x34>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	b25a      	sxtb	r2, r3
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	b25b      	sxtb	r3, r3
 800109a:	4013      	ands	r3, r2
 800109c:	b25b      	sxtb	r3, r3
 800109e:	b2db      	uxtb	r3, r3
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200005d4 	.word	0x200005d4

080010b0 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	08db      	lsrs	r3, r3, #3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f7ff ffd4 	bl	8001078 <matrix_is_on>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d135      	bne.n	8001142 <matrix_make+0x92>
	    matrix[ROW(code)] |= 1<<COL(code);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <matrix_make+0x9c>)
 80010e0:	5c9b      	ldrb	r3, [r3, r2]
 80010e2:	b25a      	sxtb	r2, r3
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	2101      	movs	r1, #1
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b259      	sxtb	r1, r3
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	08db      	lsrs	r3, r3, #3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	b2c9      	uxtb	r1, r1
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <matrix_make+0x9c>)
 8001102:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <matrix_make+0xa0>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	08db      	lsrs	r3, r3, #3
 800110e:	b2da      	uxtb	r2, r3
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	4610      	mov	r0, r2
 800111c:	f000 fb1c 	bl	8001758 <keymap_key_to_keycode>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2bf0      	cmp	r3, #240	; 0xf0
 8001128:	d902      	bls.n	8001130 <matrix_make+0x80>
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2bf4      	cmp	r3, #244	; 0xf4
 800112e:	d904      	bls.n	800113a <matrix_make+0x8a>
	    	prog_push_code(code, 1);
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2101      	movs	r1, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f8a7 	bl	8001288 <prog_push_code>
		register_code(keycode);
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fb21 	bl	8001784 <register_code>
    }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200005d4 	.word	0x200005d4
 8001150:	200005f4 	.word	0x200005f4

08001154 <matrix_break>:

void matrix_break(uint8_t code)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	b2da      	uxtb	r2, r3
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4619      	mov	r1, r3
 800116e:	4610      	mov	r0, r2
 8001170:	f7ff ff82 	bl	8001078 <matrix_is_on>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d037      	beq.n	80011ea <matrix_break+0x96>
        matrix[ROW(code)] &= ~(1<<COL(code));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	08db      	lsrs	r3, r3, #3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <matrix_break+0xa0>)
 8001184:	5c9b      	ldrb	r3, [r3, r2]
 8001186:	b25a      	sxtb	r2, r3
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	b25b      	sxtb	r3, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	b25b      	sxtb	r3, r3
 800119a:	4013      	ands	r3, r2
 800119c:	b259      	sxtb	r1, r3
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	08db      	lsrs	r3, r3, #3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <matrix_break+0xa0>)
 80011aa:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <matrix_break+0xa4>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	4619      	mov	r1, r3
 80011c2:	4610      	mov	r0, r2
 80011c4:	f000 fac8 	bl	8001758 <keymap_key_to_keycode>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2bf0      	cmp	r3, #240	; 0xf0
 80011d0:	d902      	bls.n	80011d8 <matrix_break+0x84>
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2bf4      	cmp	r3, #244	; 0xf4
 80011d6:	d904      	bls.n	80011e2 <matrix_break+0x8e>
	    	prog_push_code(code, 0);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f000 f853 	bl	8001288 <prog_push_code>
		unregister_code(keycode);
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 fb9f 	bl	8001928 <unregister_code>
    }
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200005d4 	.word	0x200005d4
 80011f8:	200005f4 	.word	0x200005f4

080011fc <matrix_clear>:

void matrix_clear(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]
 8001206:	e006      	b.n	8001216 <matrix_clear+0x1a>
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <matrix_clear+0x2c>)
 800120c:	2100      	movs	r1, #0
 800120e:	54d1      	strb	r1, [r2, r3]
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	3301      	adds	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b1f      	cmp	r3, #31
 800121a:	d9f5      	bls.n	8001208 <matrix_clear+0xc>
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	200005d4 	.word	0x200005d4

0800122c <is_prog_error>:
static uint32_t arr[KP_END-KP_START+1][PROG_MAX_POS];
static uint8_t current_code = 0;
static uint16_t current_pos = 0;
static uint32_t last_prog_time = 0;

uint8_t is_prog_error(void) { return prog_error; }
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <is_prog_error+0x10>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	200005f8 	.word	0x200005f8

08001240 <is_disco_time>:
uint8_t is_prog_in_progress(void) { return programming_in_progress; }
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }

uint8_t is_disco_time(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <is_disco_time+0x3c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d009      	beq.n	8001260 <is_disco_time+0x20>
 800124c:	f001 f986 	bl	800255c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <is_disco_time+0x3c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800125c:	4293      	cmp	r3, r2
 800125e:	d807      	bhi.n	8001270 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <is_disco_time+0x40>)
 8001262:	781b      	ldrb	r3, [r3, #0]
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 8001264:	2b00      	cmp	r3, #0
 8001266:	d103      	bne.n	8001270 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <is_disco_time+0x44>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <is_disco_time+0x34>
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 8001270:	2301      	movs	r3, #1
 8001272:	e000      	b.n	8001276 <is_disco_time+0x36>
 8001274:	2300      	movs	r3, #0
 8001276:	b2db      	uxtb	r3, r3
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200005fc 	.word	0x200005fc
 8001280:	200005f6 	.word	0x200005f6
 8001284:	200005f7 	.word	0x200005f7

08001288 <prog_push_code>:
 * 8 last bits -> code
 *
 * All written inverted (so empty flash 0xffff -> transforms to 0x0000, which means no code last code)
 */
void prog_push_code(uint8_t code, uint8_t make)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	460a      	mov	r2, r1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	uint32_t packet = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
	if (!programming_in_progress)
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <prog_push_code+0xc0>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d04d      	beq.n	8001340 <prog_push_code+0xb8>
		return;
#ifdef DEBUG
	SEGGER_RTT_printf(0, "%X \n", code);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4928      	ldr	r1, [pc, #160]	; (800134c <prog_push_code+0xc4>)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff fbfc 	bl	8000aa8 <SEGGER_RTT_printf>
#endif
	if (current_pos == PROG_MAX_POS)
 80012b0:	4b27      	ldr	r3, [pc, #156]	; (8001350 <prog_push_code+0xc8>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b8:	d103      	bne.n	80012c2 <prog_push_code+0x3a>
	{
		prog_error = 1;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <prog_push_code+0xcc>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
		return;
 80012c0:	e03f      	b.n	8001342 <prog_push_code+0xba>
	}
	if (last_prog_time)
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <prog_push_code+0xd0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d011      	beq.n	80012ee <prog_push_code+0x66>
	{
		packet = HAL_GetTick() - last_prog_time;
 80012ca:	f001 f947 	bl	800255c <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <prog_push_code+0xd0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
		if (packet >= (1 << 23))
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80012de:	d302      	bcc.n	80012e6 <prog_push_code+0x5e>
			packet = ~0;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
 80012e4:	60fb      	str	r3, [r7, #12]
		packet = (packet >> PROG_TIME_MULT) << 9; // divide 64 and shift time to the right
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	025b      	lsls	r3, r3, #9
 80012ec:	60fb      	str	r3, [r7, #12]
	}
	if (packet == 0)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <prog_push_code+0x72>
		packet = (1<<9);
 80012f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f8:	60fb      	str	r3, [r7, #12]
	last_prog_time = HAL_GetTick();
 80012fa:	f001 f92f 	bl	800255c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <prog_push_code+0xd0>)
 8001302:	601a      	str	r2, [r3, #0]
	if (make)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <prog_push_code+0x8a>
		packet |= (1<<8);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001310:	60fb      	str	r3, [r7, #12]
	packet |= code;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
	arr[current_code - KP_START][current_pos++] = ~packet;
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <prog_push_code+0xd4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	f1a3 01f1 	sub.w	r1, r3, #241	; 0xf1
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <prog_push_code+0xc8>)
 8001324:	881b      	ldrh	r3, [r3, #0]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	b290      	uxth	r0, r2
 800132a:	4a09      	ldr	r2, [pc, #36]	; (8001350 <prog_push_code+0xc8>)
 800132c:	8010      	strh	r0, [r2, #0]
 800132e:	461c      	mov	r4, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43da      	mvns	r2, r3
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <prog_push_code+0xd8>)
 8001336:	020b      	lsls	r3, r1, #8
 8001338:	4423      	add	r3, r4
 800133a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800133e:	e000      	b.n	8001342 <prog_push_code+0xba>
		return;
 8001340:	bf00      	nop
}
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	200005f6 	.word	0x200005f6
 800134c:	08008e90 	.word	0x08008e90
 8001350:	20001606 	.word	0x20001606
 8001354:	200005f8 	.word	0x200005f8
 8001358:	20001608 	.word	0x20001608
 800135c:	20001604 	.word	0x20001604
 8001360:	20000604 	.word	0x20000604

08001364 <prog_pop_code>:


void prog_pop_code(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint32_t packet;
	if (!prog_is_running)
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <prog_pop_code+0xc4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d053      	beq.n	800141a <prog_pop_code+0xb6>
		return;
	if (next_time < HAL_GetTick())
 8001372:	f001 f8f3 	bl	800255c <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	4b2c      	ldr	r3, [pc, #176]	; (800142c <prog_pop_code+0xc8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d94f      	bls.n	8001420 <prog_pop_code+0xbc>
	{
		if ((packet = ~arr[current_code - KP_START][current_pos++]))
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <prog_pop_code+0xcc>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f1a3 02f1 	sub.w	r2, r3, #241	; 0xf1
 8001388:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <prog_pop_code+0xd0>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	1c59      	adds	r1, r3, #1
 800138e:	b288      	uxth	r0, r1
 8001390:	4928      	ldr	r1, [pc, #160]	; (8001434 <prog_pop_code+0xd0>)
 8001392:	8008      	strh	r0, [r1, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	4928      	ldr	r1, [pc, #160]	; (8001438 <prog_pop_code+0xd4>)
 8001398:	0213      	lsls	r3, r2, #8
 800139a:	4403      	add	r3, r0
 800139c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d02c      	beq.n	8001404 <prog_pop_code+0xa0>
		{
			if (packet & (1<<8))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <prog_pop_code+0x5c>
				matrix_make((uint8_t)(packet & 0xFF));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe79 	bl	80010b0 <matrix_make>
 80013be:	e004      	b.n	80013ca <prog_pop_code+0x66>
			else
				matrix_break((uint8_t)(packet & 0xFF));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fec5 	bl	8001154 <matrix_break>

			if (current_pos < PROG_MAX_POS)
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <prog_pop_code+0xd0>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d818      	bhi.n	8001404 <prog_pop_code+0xa0>
			{
				packet = ~arr[current_code - KP_START][current_pos];
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <prog_pop_code+0xcc>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3bf1      	subs	r3, #241	; 0xf1
 80013d8:	4a16      	ldr	r2, [pc, #88]	; (8001434 <prog_pop_code+0xd0>)
 80013da:	8812      	ldrh	r2, [r2, #0]
 80013dc:	4611      	mov	r1, r2
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <prog_pop_code+0xd4>)
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	440b      	add	r3, r1
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	607b      	str	r3, [r7, #4]
				next_time = HAL_GetTick() + ((packet>>9)<<PROG_TIME_MULT);
 80013ec:	f001 f8b6 	bl	800255c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0a5b      	lsrs	r3, r3, #9
 80013f6:	019b      	lsls	r3, r3, #6
 80013f8:	4413      	add	r3, r2
 80013fa:	4a0c      	ldr	r2, [pc, #48]	; (800142c <prog_pop_code+0xc8>)
 80013fc:	6013      	str	r3, [r2, #0]
				if (packet)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10c      	bne.n	800141e <prog_pop_code+0xba>
					return; // completed successfully, wait next step
			}
		}

		prog_is_running = 0;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <prog_pop_code+0xc4>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		current_pos = 0;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <prog_pop_code+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]
		next_time = 0;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <prog_pop_code+0xc8>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
		return;
 8001416:	bf00      	nop
 8001418:	e002      	b.n	8001420 <prog_pop_code+0xbc>
		return;
 800141a:	bf00      	nop
 800141c:	e000      	b.n	8001420 <prog_pop_code+0xbc>
					return; // completed successfully, wait next step
 800141e:	bf00      	nop
	}

}
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200005f7 	.word	0x200005f7
 800142c:	20000600 	.word	0x20000600
 8001430:	20001604 	.word	0x20001604
 8001434:	20001606 	.word	0x20001606
 8001438:	20000604 	.word	0x20000604

0800143c <reset_prog>:

void reset_prog(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	current_pos = 0;
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <reset_prog+0x24>)
 8001442:	2200      	movs	r2, #0
 8001444:	801a      	strh	r2, [r3, #0]
	last_prog_time = 0;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <reset_prog+0x28>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	prog_error = 0;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <reset_prog+0x2c>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
	next_time = 0;
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <reset_prog+0x30>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20001606 	.word	0x20001606
 8001464:	20001608 	.word	0x20001608
 8001468:	200005f8 	.word	0x200005f8
 800146c:	20000600 	.word	0x20000600

08001470 <erase_prog>:

void erase_prog(uint8_t code)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
	for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	81fb      	strh	r3, [r7, #14]
 800147e:	e00d      	b.n	800149c <erase_prog+0x2c>
		arr[code - KP_START][i] = 0xFFFFFFFF;
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f1a3 02f1 	sub.w	r2, r3, #241	; 0xf1
 8001486:	89fb      	ldrh	r3, [r7, #14]
 8001488:	4908      	ldr	r1, [pc, #32]	; (80014ac <erase_prog+0x3c>)
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	4413      	add	r3, r2
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	3301      	adds	r3, #1
 800149a:	81fb      	strh	r3, [r7, #14]
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d9ee      	bls.n	8001480 <erase_prog+0x10>
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	20000604 	.word	0x20000604

080014b0 <prog_pressed>:


void prog_pressed(uint8_t code)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
	if (key_timer)
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <prog_pressed+0x44>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d111      	bne.n	80014e6 <prog_pressed+0x36>
		return; // another prog key pressed!
	// TODO detect if we are in programming or program is running, and compare code
	if (programming_in_progress && (code != current_code))
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <prog_pressed+0x48>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <prog_pressed+0x24>
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <prog_pressed+0x4c>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10a      	bne.n	80014ea <prog_pressed+0x3a>
		return; // ignore key_press from over keys
	current_code = code; // remember this code!
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <prog_pressed+0x4c>)
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	7013      	strb	r3, [r2, #0]
	key_timer = HAL_GetTick();
 80014da:	f001 f83f 	bl	800255c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <prog_pressed+0x44>)
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e002      	b.n	80014ec <prog_pressed+0x3c>
		return; // another prog key pressed!
 80014e6:	bf00      	nop
 80014e8:	e000      	b.n	80014ec <prog_pressed+0x3c>
		return; // ignore key_press from over keys
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200005fc 	.word	0x200005fc
 80014f8:	200005f6 	.word	0x200005f6
 80014fc:	20001604 	.word	0x20001604

08001500 <prog_released>:

void prog_released(uint8_t code)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	if (code != current_code)
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <prog_released+0x78>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	79fa      	ldrb	r2, [r7, #7]
 8001510:	429a      	cmp	r2, r3
 8001512:	d12d      	bne.n	8001570 <prog_released+0x70>
		return; // we are in programming, ignore other prog buttons
	if (key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)))
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <prog_released+0x7c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d011      	beq.n	8001540 <prog_released+0x40>
 800151c:	f001 f81e 	bl	800255c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <prog_released+0x7c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800152c:	4293      	cmp	r3, r2
 800152e:	d907      	bls.n	8001540 <prog_released+0x40>
	{
		// key pressed long, start programming
		programming_in_progress = 1;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <prog_released+0x80>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
		// TODO PAGE erase
		erase_prog(code);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff99 	bl	8001470 <erase_prog>
 800153e:	e013      	b.n	8001568 <prog_released+0x68>
	}
	else
	{
		// key pressed short, stop programming or do some nice things
		if (programming_in_progress)
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <prog_released+0x80>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <prog_released+0x50>
		{
			programming_in_progress = 0;
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <prog_released+0x80>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e00b      	b.n	8001568 <prog_released+0x68>
		}
		else
		{
			reset_prog();
 8001550:	f7ff ff74 	bl	800143c <reset_prog>
			prog_is_running = !prog_is_running;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <prog_released+0x84>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <prog_released+0x84>)
 8001566:	701a      	strb	r2, [r3, #0]
		}
	}
	key_timer = 0;
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <prog_released+0x7c>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e000      	b.n	8001572 <prog_released+0x72>
		return; // we are in programming, ignore other prog buttons
 8001570:	bf00      	nop
}
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20001604 	.word	0x20001604
 800157c:	200005fc 	.word	0x200005fc
 8001580:	200005f6 	.word	0x200005f6
 8001584:	200005f7 	.word	0x200005f7

08001588 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

static void send_system(uint16_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <send_system+0x4c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	88fa      	ldrh	r2, [r7, #6]
 8001598:	429a      	cmp	r2, r3
 800159a:	d017      	beq.n	80015cc <send_system+0x44>
	last_data = data;
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <send_system+0x4c>)
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 80015a2:	2302      	movs	r3, #2
 80015a4:	733b      	strb	r3, [r7, #12]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 80015ac:	bf00      	nop
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <send_system+0x50>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0fb      	beq.n	80015ae <send_system+0x26>
	ready_to_send = 0;
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <send_system+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2203      	movs	r2, #3
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <send_system+0x54>)
 80015c6:	f005 ff7d 	bl	80074c4 <USBD_HID_SendReport>
 80015ca:	e000      	b.n	80015ce <send_system+0x46>
	if (data == last_data) return;
 80015cc:	bf00      	nop
}
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20001610 	.word	0x20001610
 80015d8:	20000000 	.word	0x20000000
 80015dc:	200017e0 	.word	0x200017e0

080015e0 <send_consumer>:

static void send_consumer(uint16_t data)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <send_consumer+0x4c>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	88fa      	ldrh	r2, [r7, #6]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d017      	beq.n	8001624 <send_consumer+0x44>
	last_data = data;
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <send_consumer+0x4c>)
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 80015fa:	2303      	movs	r3, #3
 80015fc:	733b      	strb	r3, [r7, #12]
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 8001604:	bf00      	nop
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <send_consumer+0x50>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0fb      	beq.n	8001606 <send_consumer+0x26>
	ready_to_send = 0;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <send_consumer+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2203      	movs	r2, #3
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	; (8001634 <send_consumer+0x54>)
 800161e:	f005 ff51 	bl	80074c4 <USBD_HID_SendReport>
 8001622:	e000      	b.n	8001626 <send_consumer+0x46>
	if (data == last_data) return;
 8001624:	bf00      	nop
}
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20001612 	.word	0x20001612
 8001630:	20000000 	.word	0x20000000
 8001634:	200017e0 	.word	0x200017e0

08001638 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <add_mods+0x24>)
 8001644:	781a      	ldrb	r2, [r3, #0]
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4313      	orrs	r3, r2
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <add_mods+0x24>)
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	2000160c 	.word	0x2000160c

08001660 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	43db      	mvns	r3, r3
 8001670:	b25a      	sxtb	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <del_mods+0x2c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b25b      	sxtb	r3, r3
 8001678:	4013      	ands	r3, r2
 800167a:	b25b      	sxtb	r3, r3
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b03      	ldr	r3, [pc, #12]	; (800168c <del_mods+0x2c>)
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	2000160c 	.word	0x2000160c

08001690 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 800169e:	23ff      	movs	r3, #255	; 0xff
 80016a0:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 80016a2:	e01b      	b.n	80016dc <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 80016a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <add_key_byte+0x80>)
 80016aa:	4413      	add	r3, r2
 80016ac:	78db      	ldrb	r3, [r3, #3]
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d018      	beq.n	80016e6 <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 80016b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016bc:	d108      	bne.n	80016d0 <add_key_byte+0x40>
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <add_key_byte+0x80>)
 80016c4:	4413      	add	r3, r2
 80016c6:	78db      	ldrb	r3, [r3, #3]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <add_key_byte+0x40>
            empty = i;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e0:	2b05      	cmp	r3, #5
 80016e2:	dddf      	ble.n	80016a4 <add_key_byte+0x14>
 80016e4:	e000      	b.n	80016e8 <add_key_byte+0x58>
            break;
 80016e6:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d10a      	bne.n	8001706 <add_key_byte+0x76>
        if (empty != -1) {
 80016f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 80016fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <add_key_byte+0x80>)
 8001700:	4413      	add	r3, r2
 8001702:	79fa      	ldrb	r2, [r7, #7]
 8001704:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	200016b4 	.word	0x200016b4

08001714 <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e00e      	b.n	8001742 <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <del_key_byte+0x40>)
 8001728:	4413      	add	r3, r2
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	79fa      	ldrb	r2, [r7, #7]
 800172e:	429a      	cmp	r2, r3
 8001730:	d104      	bne.n	800173c <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <del_key_byte+0x40>)
 8001736:	4413      	add	r3, r2
 8001738:	2200      	movs	r2, #0
 800173a:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	3301      	adds	r3, #1
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	2b05      	cmp	r3, #5
 8001746:	d9ed      	bls.n	8001724 <del_key_byte+0x10>
        }
    }
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	200016b4 	.word	0x200016b4

08001758 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8001768:	79fa      	ldrb	r2, [r7, #7]
 800176a:	79bb      	ldrb	r3, [r7, #6]
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <keymap_key_to_keycode+0x28>)
 800176e:	00d2      	lsls	r2, r2, #3
 8001770:	440a      	add	r2, r1
 8001772:	4413      	add	r3, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	08008f00 	.word	0x08008f00

08001784 <register_code>:


void register_code(uint8_t code)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80c5 	beq.w	8001920 <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2bf0      	cmp	r3, #240	; 0xf0
 800179a:	d906      	bls.n	80017aa <register_code+0x26>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2bf4      	cmp	r3, #244	; 0xf4
 80017a0:	d803      	bhi.n	80017aa <register_code+0x26>
	{
    	prog_pressed(code);
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe83 	bl	80014b0 <prog_pressed>
	}

    if (code == KC_LOGOFF)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2bf0      	cmp	r3, #240	; 0xf0
 80017ae:	d108      	bne.n	80017c2 <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 80017b0:	2008      	movs	r0, #8
 80017b2:	f7ff ff41 	bl	8001638 <add_mods>
    	add_key_byte(KC_L);
 80017b6:	200f      	movs	r0, #15
 80017b8:	f7ff ff6a 	bl	8001690 <add_key_byte>
	    send_keyboard_report();
 80017bc:	f000 f9fe 	bl	8001bbc <send_keyboard_report>
 80017c0:	e0af      	b.n	8001922 <register_code+0x19e>
    }
    else if IS_KEY(code)
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d909      	bls.n	80017dc <register_code+0x58>
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	2ba4      	cmp	r3, #164	; 0xa4
 80017cc:	d806      	bhi.n	80017dc <register_code+0x58>
    {
	    add_key_byte(code);
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <add_key_byte>
	    send_keyboard_report();
 80017d6:	f000 f9f1 	bl	8001bbc <send_keyboard_report>
 80017da:	e0a2      	b.n	8001922 <register_code+0x19e>
    }
    else if IS_MOD(code) {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2bdf      	cmp	r3, #223	; 0xdf
 80017e0:	d90f      	bls.n	8001802 <register_code+0x7e>
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2be7      	cmp	r3, #231	; 0xe7
 80017e6:	d80c      	bhi.n	8001802 <register_code+0x7e>
        add_mods(MOD_BIT(code));
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	2201      	movs	r2, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff1e 	bl	8001638 <add_mods>
        send_keyboard_report();
 80017fc:	f000 f9de 	bl	8001bbc <send_keyboard_report>
 8001800:	e08f      	b.n	8001922 <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2ba4      	cmp	r3, #164	; 0xa4
 8001806:	d916      	bls.n	8001836 <register_code+0xb2>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2ba7      	cmp	r3, #167	; 0xa7
 800180c:	d813      	bhi.n	8001836 <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2ba5      	cmp	r3, #165	; 0xa5
 8001812:	d00b      	beq.n	800182c <register_code+0xa8>
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2ba6      	cmp	r3, #166	; 0xa6
 8001818:	d006      	beq.n	8001828 <register_code+0xa4>
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2ba7      	cmp	r3, #167	; 0xa7
 800181e:	d101      	bne.n	8001824 <register_code+0xa0>
 8001820:	2383      	movs	r3, #131	; 0x83
 8001822:	e004      	b.n	800182e <register_code+0xaa>
 8001824:	2300      	movs	r3, #0
 8001826:	e002      	b.n	800182e <register_code+0xaa>
 8001828:	2382      	movs	r3, #130	; 0x82
 800182a:	e000      	b.n	800182e <register_code+0xaa>
 800182c:	2381      	movs	r3, #129	; 0x81
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff feaa 	bl	8001588 <send_system>
 8001834:	e075      	b.n	8001922 <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2ba7      	cmp	r3, #167	; 0xa7
 800183a:	d972      	bls.n	8001922 <register_code+0x19e>
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	2bba      	cmp	r3, #186	; 0xba
 8001840:	d86f      	bhi.n	8001922 <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2ba8      	cmp	r3, #168	; 0xa8
 8001846:	d066      	beq.n	8001916 <register_code+0x192>
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2ba9      	cmp	r3, #169	; 0xa9
 800184c:	d061      	beq.n	8001912 <register_code+0x18e>
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2baa      	cmp	r3, #170	; 0xaa
 8001852:	d05c      	beq.n	800190e <register_code+0x18a>
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2bab      	cmp	r3, #171	; 0xab
 8001858:	d057      	beq.n	800190a <register_code+0x186>
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2bac      	cmp	r3, #172	; 0xac
 800185e:	d052      	beq.n	8001906 <register_code+0x182>
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	2bad      	cmp	r3, #173	; 0xad
 8001864:	d04d      	beq.n	8001902 <register_code+0x17e>
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2bb0      	cmp	r3, #176	; 0xb0
 800186a:	d048      	beq.n	80018fe <register_code+0x17a>
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2bae      	cmp	r3, #174	; 0xae
 8001870:	d043      	beq.n	80018fa <register_code+0x176>
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2baf      	cmp	r3, #175	; 0xaf
 8001876:	d03d      	beq.n	80018f4 <register_code+0x170>
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2bb1      	cmp	r3, #177	; 0xb1
 800187c:	d037      	beq.n	80018ee <register_code+0x16a>
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	2bb2      	cmp	r3, #178	; 0xb2
 8001882:	d031      	beq.n	80018e8 <register_code+0x164>
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2bb3      	cmp	r3, #179	; 0xb3
 8001888:	d02b      	beq.n	80018e2 <register_code+0x15e>
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2bb4      	cmp	r3, #180	; 0xb4
 800188e:	d025      	beq.n	80018dc <register_code+0x158>
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	2bb5      	cmp	r3, #181	; 0xb5
 8001894:	d01f      	beq.n	80018d6 <register_code+0x152>
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2bb6      	cmp	r3, #182	; 0xb6
 800189a:	d019      	beq.n	80018d0 <register_code+0x14c>
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2bb7      	cmp	r3, #183	; 0xb7
 80018a0:	d013      	beq.n	80018ca <register_code+0x146>
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2bb8      	cmp	r3, #184	; 0xb8
 80018a6:	d00d      	beq.n	80018c4 <register_code+0x140>
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2bb9      	cmp	r3, #185	; 0xb9
 80018ac:	d007      	beq.n	80018be <register_code+0x13a>
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	2bba      	cmp	r3, #186	; 0xba
 80018b2:	d102      	bne.n	80018ba <register_code+0x136>
 80018b4:	f240 232a 	movw	r3, #554	; 0x22a
 80018b8:	e02e      	b.n	8001918 <register_code+0x194>
 80018ba:	2300      	movs	r3, #0
 80018bc:	e02c      	b.n	8001918 <register_code+0x194>
 80018be:	f240 2327 	movw	r3, #551	; 0x227
 80018c2:	e029      	b.n	8001918 <register_code+0x194>
 80018c4:	f240 2326 	movw	r3, #550	; 0x226
 80018c8:	e026      	b.n	8001918 <register_code+0x194>
 80018ca:	f240 2325 	movw	r3, #549	; 0x225
 80018ce:	e023      	b.n	8001918 <register_code+0x194>
 80018d0:	f44f 7309 	mov.w	r3, #548	; 0x224
 80018d4:	e020      	b.n	8001918 <register_code+0x194>
 80018d6:	f240 2323 	movw	r3, #547	; 0x223
 80018da:	e01d      	b.n	8001918 <register_code+0x194>
 80018dc:	f240 2321 	movw	r3, #545	; 0x221
 80018e0:	e01a      	b.n	8001918 <register_code+0x194>
 80018e2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80018e6:	e017      	b.n	8001918 <register_code+0x194>
 80018e8:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80018ec:	e014      	b.n	8001918 <register_code+0x194>
 80018ee:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 80018f2:	e011      	b.n	8001918 <register_code+0x194>
 80018f4:	f240 1383 	movw	r3, #387	; 0x183
 80018f8:	e00e      	b.n	8001918 <register_code+0x194>
 80018fa:	23cd      	movs	r3, #205	; 0xcd
 80018fc:	e00c      	b.n	8001918 <register_code+0x194>
 80018fe:	23cc      	movs	r3, #204	; 0xcc
 8001900:	e00a      	b.n	8001918 <register_code+0x194>
 8001902:	23b7      	movs	r3, #183	; 0xb7
 8001904:	e008      	b.n	8001918 <register_code+0x194>
 8001906:	23b6      	movs	r3, #182	; 0xb6
 8001908:	e006      	b.n	8001918 <register_code+0x194>
 800190a:	23b5      	movs	r3, #181	; 0xb5
 800190c:	e004      	b.n	8001918 <register_code+0x194>
 800190e:	23ea      	movs	r3, #234	; 0xea
 8001910:	e002      	b.n	8001918 <register_code+0x194>
 8001912:	23e9      	movs	r3, #233	; 0xe9
 8001914:	e000      	b.n	8001918 <register_code+0x194>
 8001916:	23e2      	movs	r3, #226	; 0xe2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fe61 	bl	80015e0 <send_consumer>
 800191e:	e000      	b.n	8001922 <register_code+0x19e>
        return;
 8001920:	bf00      	nop
    }
}
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <unregister_code>:

void unregister_code(uint8_t code)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d049      	beq.n	80019cc <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2bf0      	cmp	r3, #240	; 0xf0
 800193c:	d906      	bls.n	800194c <unregister_code+0x24>
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2bf4      	cmp	r3, #244	; 0xf4
 8001942:	d803      	bhi.n	800194c <unregister_code+0x24>
	{
    	prog_released(code);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fdda 	bl	8001500 <prog_released>
	}

    if (code == KC_LOGOFF)
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2bf0      	cmp	r3, #240	; 0xf0
 8001950:	d108      	bne.n	8001964 <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 8001952:	2008      	movs	r0, #8
 8001954:	f7ff fe84 	bl	8001660 <del_mods>
    	del_key_byte(KC_L);
 8001958:	200f      	movs	r0, #15
 800195a:	f7ff fedb 	bl	8001714 <del_key_byte>
    	send_keyboard_report();
 800195e:	f000 f92d 	bl	8001bbc <send_keyboard_report>
 8001962:	e034      	b.n	80019ce <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d909      	bls.n	800197e <unregister_code+0x56>
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2ba4      	cmp	r3, #164	; 0xa4
 800196e:	d806      	bhi.n	800197e <unregister_code+0x56>
        del_key_byte(code);
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fece 	bl	8001714 <del_key_byte>
        send_keyboard_report();
 8001978:	f000 f920 	bl	8001bbc <send_keyboard_report>
 800197c:	e027      	b.n	80019ce <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2bdf      	cmp	r3, #223	; 0xdf
 8001982:	d90f      	bls.n	80019a4 <unregister_code+0x7c>
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2be7      	cmp	r3, #231	; 0xe7
 8001988:	d80c      	bhi.n	80019a4 <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	2201      	movs	r2, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fe61 	bl	8001660 <del_mods>
        send_keyboard_report();
 800199e:	f000 f90d 	bl	8001bbc <send_keyboard_report>
 80019a2:	e014      	b.n	80019ce <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2ba4      	cmp	r3, #164	; 0xa4
 80019a8:	d906      	bls.n	80019b8 <unregister_code+0x90>
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2ba7      	cmp	r3, #167	; 0xa7
 80019ae:	d803      	bhi.n	80019b8 <unregister_code+0x90>
	    send_system(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fde9 	bl	8001588 <send_system>
 80019b6:	e00a      	b.n	80019ce <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2ba7      	cmp	r3, #167	; 0xa7
 80019bc:	d907      	bls.n	80019ce <unregister_code+0xa6>
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2bba      	cmp	r3, #186	; 0xba
 80019c2:	d804      	bhi.n	80019ce <unregister_code+0xa6>
    	send_consumer(0);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fe0b 	bl	80015e0 <send_consumer>
 80019ca:	e000      	b.n	80019ce <unregister_code+0xa6>
        return;
 80019cc:	bf00      	nop
	}
}
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_time = 0;
	static uint8_t blinking = 0;
	static uint8_t last_blink = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 80019d8:	4b4e      	ldr	r3, [pc, #312]	; (8001b14 <process_keyboard_USB+0x140>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <process_keyboard_USB+0x144>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d031      	beq.n	8001a48 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <process_keyboard_USB+0x148>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 80019ec:	4b4b      	ldr	r3, [pc, #300]	; (8001b1c <process_keyboard_USB+0x148>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <process_keyboard_USB+0x14c>)
 80019f4:	22fa      	movs	r2, #250	; 0xfa
 80019f6:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 80019f8:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <process_keyboard_USB+0x144>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	4a47      	ldr	r2, [pc, #284]	; (8001b24 <process_keyboard_USB+0x150>)
 8001a06:	4413      	add	r3, r2
 8001a08:	2209      	movs	r2, #9
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4846      	ldr	r0, [pc, #280]	; (8001b28 <process_keyboard_USB+0x154>)
 8001a0e:	f005 fd59 	bl	80074c4 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8001a12:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <process_keyboard_USB+0x144>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	425a      	negs	r2, r3
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	f002 020f 	and.w	r2, r2, #15
 8001a22:	bf58      	it	pl
 8001a24:	4253      	negpl	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b3b      	ldr	r3, [pc, #236]	; (8001b18 <process_keyboard_USB+0x144>)
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e00c      	b.n	8001a48 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <process_keyboard_USB+0x14c>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <process_keyboard_USB+0x14c>)
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <process_keyboard_USB+0x14c>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <process_keyboard_USB+0x148>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
	}

	if (is_disco_time())
 8001a48:	f7ff fbfa 	bl	8001240 <is_disco_time>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04d      	beq.n	8001aee <process_keyboard_USB+0x11a>
	{
		if (!blinking)
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <process_keyboard_USB+0x158>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <process_keyboard_USB+0x96>
		{
			blinking = 1;
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <process_keyboard_USB+0x158>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
			blink_time = HAL_GetTick();
 8001a60:	f000 fd7c 	bl	800255c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <process_keyboard_USB+0x15c>)
 8001a68:	601a      	str	r2, [r3, #0]
		}

		if (((HAL_GetTick() - blink_time)&(1<<8))&&last_blink)
 8001a6a:	f000 fd77 	bl	800255c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <process_keyboard_USB+0x15c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d016      	beq.n	8001aac <process_keyboard_USB+0xd8>
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <process_keyboard_USB+0x160>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d012      	beq.n	8001aac <process_keyboard_USB+0xd8>
		{
			last_blink = 0;
 8001a86:	4b2b      	ldr	r3, [pc, #172]	; (8001b34 <process_keyboard_USB+0x160>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <process_keyboard_USB+0x164>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001a92:	f7ff fbcb 	bl	800122c <is_prog_error>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <process_keyboard_USB+0xd0>
				leds_PS2(PS2_LED_CAPS_LOCK|PS2_LED_NUM_LOCK);
 8001a9c:	2006      	movs	r0, #6
 8001a9e:	f000 fabf 	bl	8002020 <leds_PS2>
			if (is_prog_error())
 8001aa2:	e034      	b.n	8001b0e <process_keyboard_USB+0x13a>
			else
				leds_PS2(PS2_LED_CAPS_LOCK);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f000 fabb 	bl	8002020 <leds_PS2>
			if (is_prog_error())
 8001aaa:	e030      	b.n	8001b0e <process_keyboard_USB+0x13a>
		}
		else if ((!((HAL_GetTick() - blink_time)&(1<<8)))&&(!last_blink))
 8001aac:	f000 fd56 	bl	800255c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <process_keyboard_USB+0x15c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d126      	bne.n	8001b0e <process_keyboard_USB+0x13a>
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <process_keyboard_USB+0x160>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d122      	bne.n	8001b0e <process_keyboard_USB+0x13a>
		{
			last_blink = 1;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <process_keyboard_USB+0x160>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001ace:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <process_keyboard_USB+0x164>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001ad4:	f7ff fbaa 	bl	800122c <is_prog_error>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <process_keyboard_USB+0x112>
				leds_PS2(0);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fa9e 	bl	8002020 <leds_PS2>
	{
		blinking = 0;
		leds_updated = 1;
		leds_PS2(leds_data);
	}
}
 8001ae4:	e013      	b.n	8001b0e <process_keyboard_USB+0x13a>
				leds_PS2(PS2_LED_NUM_LOCK);
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f000 fa9a 	bl	8002020 <leds_PS2>
}
 8001aec:	e00f      	b.n	8001b0e <process_keyboard_USB+0x13a>
	else if (blinking)
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <process_keyboard_USB+0x158>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <process_keyboard_USB+0x13a>
		blinking = 0;
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <process_keyboard_USB+0x158>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		leds_updated = 1;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <process_keyboard_USB+0x164>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <process_keyboard_USB+0x168>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fa8a 	bl	8002020 <leds_PS2>
}
 8001b0c:	e7ff      	b.n	8001b0e <process_keyboard_USB+0x13a>
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000160d 	.word	0x2000160d
 8001b18:	2000160e 	.word	0x2000160e
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000002 	.word	0x20000002
 8001b24:	200016c0 	.word	0x200016c0
 8001b28:	200017e0 	.word	0x200017e0
 8001b2c:	20001614 	.word	0x20001614
 8001b30:	20001618 	.word	0x20001618
 8001b34:	2000161c 	.word	0x2000161c
 8001b38:	20001751 	.word	0x20001751
 8001b3c:	20001750 	.word	0x20001750

08001b40 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <USB_HID_buffer_sent_Callback+0x14>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000

08001b58 <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <kbuf_push+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	3301      	adds	r3, #1
 8001b66:	425a      	negs	r2, r3
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	f002 020f 	and.w	r2, r2, #15
 8001b70:	bf58      	it	pl
 8001b72:	4253      	negpl	r3, r2
 8001b74:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <kbuf_push+0x5c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d011      	beq.n	8001ba4 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <kbuf_push+0x58>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <kbuf_push+0x60>)
 8001b88:	460b      	mov	r3, r1
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	4413      	add	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6810      	ldr	r0, [r2, #0]
 8001b94:	6851      	ldr	r1, [r2, #4]
 8001b96:	6018      	str	r0, [r3, #0]
 8001b98:	6059      	str	r1, [r3, #4]
 8001b9a:	7a12      	ldrb	r2, [r2, #8]
 8001b9c:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <kbuf_push+0x58>)
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	7013      	strb	r3, [r2, #0]
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000160d 	.word	0x2000160d
 8001bb4:	2000160e 	.word	0x2000160e
 8001bb8:	200016c0 	.word	0x200016c0

08001bbc <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <send_keyboard_report+0x1c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <send_keyboard_report+0x20>)
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <send_keyboard_report+0x1c>)
 8001bcc:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 8001bce:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <send_keyboard_report+0x1c>)
 8001bd0:	f7ff ffc2 	bl	8001b58 <kbuf_push>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200016b4 	.word	0x200016b4
 8001bdc:	2000160c 	.word	0x2000160c

08001be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001be4:	f000 fc62 	bl	80024ac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be8:	f000 f82c 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bec:	f7fe ff74 	bl	8000ad8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001bf0:	f006 fd4a 	bl	8008688 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001bf4:	f000 fbc6 	bl	8002384 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001bf8:	480f      	ldr	r0, [pc, #60]	; (8001c38 <main+0x58>)
 8001bfa:	f002 ffe7 	bl	8004bcc <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 8001bfe:	20fa      	movs	r0, #250	; 0xfa
 8001c00:	f000 fb80 	bl	8002304 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c0a:	480c      	ldr	r0, [pc, #48]	; (8001c3c <main+0x5c>)
 8001c0c:	f000 ff51 	bl	8002ab2 <HAL_GPIO_WritePin>
  reset_us_counter();
 8001c10:	f000 fb96 	bl	8002340 <reset_us_counter>
  init_PS2();
 8001c14:	f000 f976 	bl	8001f04 <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <main+0x60>)
 8001c20:	f000 ff47 	bl	8002ab2 <HAL_GPIO_WritePin>

#ifdef DEBUG
  SEGGER_RTT_Init();
 8001c24:	f7fe fc12 	bl	800044c <SEGGER_RTT_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001c28:	f000 fa5e 	bl	80020e8 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8001c2c:	f7ff fed2 	bl	80019d4 <process_keyboard_USB>
	  _delay_ms(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 fb67 	bl	8002304 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001c36:	e7f7      	b.n	8001c28 <main+0x48>
 8001c38:	20001794 	.word	0x20001794
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40011000 	.word	0x40011000

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b094      	sub	sp, #80	; 0x50
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	2228      	movs	r2, #40	; 0x28
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 f8fb 	bl	8008e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c82:	2301      	movs	r3, #1
 8001c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c86:	2302      	movs	r3, #2
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 faa6 	bl	80041ec <HAL_RCC_OscConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ca6:	f000 f828 	bl	8001cfa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001caa:	230f      	movs	r3, #15
 8001cac:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fd10 	bl	80046ec <HAL_RCC_ClockConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cd2:	f000 f812 	bl	8001cfa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cde:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fe6c 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cee:	f000 f804 	bl	8001cfa <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3750      	adds	r7, #80	; 0x50
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfe:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <Error_Handler+0x6>
	...

08001d04 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	f040 80e6 	bne.w	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8001d18:	4b74      	ldr	r3, [pc, #464]	; (8001eec <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d060      	beq.n	8001de2 <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8001d20:	4b72      	ldr	r3, [pc, #456]	; (8001eec <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d109      	bne.n	8001d3c <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8001d2e:	4b70      	ldr	r3, [pc, #448]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
				return;
 8001d3a:	e0d3      	b.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8001d3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	2b07      	cmp	r3, #7
 8001d44:	dc1b      	bgt.n	8001d7e <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8001d46:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001d4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d52:	fa42 f303 	asr.w	r3, r2, r3
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00c      	beq.n	8001d78 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b61      	ldr	r3, [pc, #388]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001d70:	701a      	strb	r2, [r3, #0]
					data_release();
 8001d72:	f7fe ffaf 	bl	8000cd4 <data_release>
 8001d76:	e02a      	b.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8001d78:	f7fe ff64 	bl	8000c44 <data_low>
 8001d7c:	e027      	b.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8001d7e:	4b5c      	ldr	r3, [pc, #368]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001d80:	f993 3000 	ldrsb.w	r3, [r3]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d109      	bne.n	8001d9c <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8001d88:	4b5a      	ldr	r3, [pc, #360]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8001d90:	f7fe ffa0 	bl	8000cd4 <data_release>
 8001d94:	e01b      	b.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8001d96:	f7fe ff55 	bl	8000c44 <data_low>
 8001d9a:	e018      	b.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8001d9c:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8001da2:	2b09      	cmp	r3, #9
 8001da4:	d102      	bne.n	8001dac <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8001da6:	f7fe ff95 	bl	8000cd4 <data_release>
 8001daa:	e010      	b.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dae:	f993 3000 	ldrsb.w	r3, [r3]
 8001db2:	2b0a      	cmp	r3, #10
 8001db4:	d10b      	bne.n	8001dce <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8001db6:	f7fe ff8d 	bl	8000cd4 <data_release>
				sendMode = 0;
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8001dc0:	4b4c      	ldr	r3, [pc, #304]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8001dc6:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
				return;
 8001dcc:	e08a      	b.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8001dce:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	b25a      	sxtb	r2, r3
 8001ddc:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dde:	701a      	strb	r2, [r3, #0]
			return;
 8001de0:	e080      	b.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8001de2:	20c8      	movs	r0, #200	; 0xc8
 8001de4:	f000 fab8 	bl	8002358 <check_us_counter>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 8001dee:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8001df4:	f000 faa4 	bl	8002340 <reset_us_counter>
			if (bitNr == 0)
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10e      	bne.n	8001e20 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e06:	483d      	ldr	r0, [pc, #244]	; (8001efc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001e08:	f000 fe3c 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d167      	bne.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8001e12:	4b3b      	ldr	r3, [pc, #236]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e056      	b.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8001e20:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e22:	f993 3000 	ldrsb.w	r3, [r3]
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	dc1f      	bgt.n	8001e6a <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8001e2a:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	085b      	lsrs	r3, r3, #1
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001e34:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3a:	4830      	ldr	r0, [pc, #192]	; (8001efc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001e3c:	f000 fe22 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d043      	beq.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001e52:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001e54:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b23      	ldr	r3, [pc, #140]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e031      	b.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e6c:	f993 3000 	ldrsb.w	r3, [r3]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d112      	bne.n	8001e9a <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001e74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e78:	4820      	ldr	r0, [pc, #128]	; (8001efc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001e7a:	f000 fe03 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d024      	beq.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	e019      	b.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001e9c:	f993 3000 	ldrsb.w	r3, [r3]
 8001ea0:	2b0a      	cmp	r3, #10
 8001ea2:	d114      	bne.n	8001ece <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8001ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea8:	4814      	ldr	r0, [pc, #80]	; (8001efc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001eaa:	f000 fdeb 	bl	8002a84 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_GPIO_EXTI_Callback+0x1c2>
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d004      	beq.n	8001ec6 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 f945 	bl	8002150 <buf_push>
				bitNr = 0;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
				return;
 8001ecc:	e00a      	b.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	b25a      	sxtb	r2, r3
 8001edc:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e000      	b.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 8001ee2:	bf00      	nop
	}
}
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2000161d 	.word	0x2000161d
 8001ef0:	2000161f 	.word	0x2000161f
 8001ef4:	20001623 	.word	0x20001623
 8001ef8:	2000161e 	.word	0x2000161e
 8001efc:	40010c00 	.word	0x40010c00
 8001f00:	20001624 	.word	0x20001624

08001f04 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8001f0a:	20ff      	movs	r0, #255	; 0xff
 8001f0c:	f000 f820 	bl	8001f50 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8001f10:	f000 f8cc 	bl	80020ac <wait_response_PS2>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2bfa      	cmp	r3, #250	; 0xfa
 8001f18:	d004      	beq.n	8001f24 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8001f1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1e:	f000 f9f1 	bl	8002304 <_delay_ms>
		send_PS2(PS2_RESET);
 8001f22:	e7f2      	b.n	8001f0a <init_PS2+0x6>
			break;
 8001f24:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e007      	b.n	8001f3c <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8001f2c:	f000 f8be 	bl	80020ac <wait_response_PS2>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2baa      	cmp	r3, #170	; 0xaa
 8001f34:	d006      	beq.n	8001f44 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	71fb      	strb	r3, [r7, #7]
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f4      	bne.n	8001f2c <init_PS2+0x28>
			break;
	}
}
 8001f42:	e000      	b.n	8001f46 <init_PS2+0x42>
			break;
 8001f44:	bf00      	nop
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <send_PS2+0x3c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
	clock_low();
 8001f60:	f7fe fe94 	bl	8000c8c <clock_low>
	bitNr = 0;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <send_PS2+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <send_PS2+0x44>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8001f70:	2064      	movs	r0, #100	; 0x64
 8001f72:	f000 f9d2 	bl	800231a <_delay_us>

	data_low();
 8001f76:	f7fe fe65 	bl	8000c44 <data_low>
	_delay_us(10);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f000 f9cd 	bl	800231a <_delay_us>
	clock_release();
 8001f80:	f7fe fec4 	bl	8000d0c <clock_release>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000161d 	.word	0x2000161d
 8001f90:	2000161f 	.word	0x2000161f
 8001f94:	2000161e 	.word	0x2000161e

08001f98 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SET_LEDS_Callback+0x5c>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <SET_LEDS_Callback+0x60>)
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	7013      	strb	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20001751 	.word	0x20001751
 8001ff8:	20001750 	.word	0x20001750

08001ffc <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <USBD_Sleep_Callback+0x20>)
 800200e:	701a      	strb	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20001620 	.word	0x20001620

08002020 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <leds_PS2+0x84>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02f      	beq.n	8002092 <leds_PS2+0x72>
		return;
	if (buf_has_data())
 8002032:	f000 f8e1 	bl	80021f8 <buf_has_data>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12c      	bne.n	8002096 <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <leds_PS2+0x84>)
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	4817      	ldr	r0, [pc, #92]	; (80020a8 <leds_PS2+0x88>)
 800204a:	f000 fd32 	bl	8002ab2 <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 800204e:	2305      	movs	r3, #5
 8002050:	73fb      	strb	r3, [r7, #15]
 8002052:	e01a      	b.n	800208a <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 8002054:	20ed      	movs	r0, #237	; 0xed
 8002056:	f7ff ff7b 	bl	8001f50 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 800205a:	f000 f827 	bl	80020ac <wait_response_PS2>
 800205e:	4603      	mov	r3, r0
 8002060:	2bfa      	cmp	r3, #250	; 0xfa
 8002062:	d003      	beq.n	800206c <leds_PS2+0x4c>
		{
			_delay_ms(20);
 8002064:	2014      	movs	r0, #20
 8002066:	f000 f94d 	bl	8002304 <_delay_ms>
			continue;
 800206a:	e00b      	b.n	8002084 <leds_PS2+0x64>
		}
		send_PS2(led);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff6e 	bl	8001f50 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8002074:	f000 f81a 	bl	80020ac <wait_response_PS2>
 8002078:	4603      	mov	r3, r0
 800207a:	2bfa      	cmp	r3, #250	; 0xfa
 800207c:	d00d      	beq.n	800209a <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 800207e:	2014      	movs	r0, #20
 8002080:	f000 f940 	bl	8002304 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3b01      	subs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfb      	ldrb	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e1      	bne.n	8002054 <leds_PS2+0x34>
 8002090:	e004      	b.n	800209c <leds_PS2+0x7c>
		return;
 8002092:	bf00      	nop
 8002094:	e002      	b.n	800209c <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <leds_PS2+0x7c>
			return;
 800209a:	bf00      	nop
	}
}
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20001751 	.word	0x20001751
 80020a8:	40011000 	.word	0x40011000

080020ac <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 80020b2:	2319      	movs	r3, #25
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	e00a      	b.n	80020ce <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 80020b8:	f000 f89e 	bl	80021f8 <buf_has_data>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f000 f91e 	bl	8002304 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	71fb      	strb	r3, [r7, #7]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f1      	bne.n	80020b8 <wait_response_PS2+0xc>
 80020d4:	e000      	b.n	80020d8 <wait_response_PS2+0x2c>
			break;
 80020d6:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80020d8:	f000 f864 	bl	80021a4 <buf_pop>
 80020dc:	4603      	mov	r3, r0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if (sleep)
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <process_PS2+0x5c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d012      	beq.n	800211a <process_PS2+0x32>
	{
		leds_updated = 1;
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <process_PS2+0x60>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <process_PS2+0x5c>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d103      	bne.n	800210a <process_PS2+0x22>
		{
			leds_PS2(0);
 8002102:	2000      	movs	r0, #0
 8002104:	f7ff ff8c 	bl	8002020 <leds_PS2>
 8002108:	e004      	b.n	8002114 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <process_PS2+0x64>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff86 	bl	8002020 <leds_PS2>
		}
		sleep = 0;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <process_PS2+0x5c>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 800211a:	f000 f86d 	bl	80021f8 <buf_has_data>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8002124:	f000 f83e 	bl	80021a4 <buf_pop>
 8002128:	4603      	mov	r3, r0
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fe0c 	bl	8000d48 <matrix_scan>
 8002130:	e004      	b.n	800213c <process_PS2+0x54>
	else
		leds_PS2(leds_data);
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <process_PS2+0x64>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff72 	bl	8002020 <leds_PS2>
	prog_pop_code();
 800213c:	f7ff f912 	bl	8001364 <prog_pop_code>
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20001620 	.word	0x20001620
 8002148:	20001751 	.word	0x20001751
 800214c:	20001750 	.word	0x20001750

08002150 <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <buf_push+0x48>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	3301      	adds	r3, #1
 8002160:	425a      	negs	r2, r3
 8002162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002166:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800216a:	bf58      	it	pl
 800216c:	4253      	negpl	r3, r2
 800216e:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <buf_push+0x4c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	429a      	cmp	r2, r3
 8002178:	d008      	beq.n	800218c <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <buf_push+0x48>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <buf_push+0x50>)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <buf_push+0x48>)
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	7013      	strb	r3, [r2, #0]
    }
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20001621 	.word	0x20001621
 800219c:	20001622 	.word	0x20001622
 80021a0:	20001754 	.word	0x20001754

080021a4 <buf_pop>:

uint8_t buf_pop(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <buf_pop+0x48>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <buf_pop+0x4c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d012      	beq.n	80021e0 <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <buf_pop+0x4c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <buf_pop+0x50>)
 80021c2:	5c9b      	ldrb	r3, [r3, r2]
 80021c4:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <buf_pop+0x4c>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	425a      	negs	r2, r3
 80021ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80021d6:	bf58      	it	pl
 80021d8:	4253      	negpl	r3, r2
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <buf_pop+0x4c>)
 80021de:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	20001621 	.word	0x20001621
 80021f0:	20001622 	.word	0x20001622
 80021f4:	20001754 	.word	0x20001754

080021f8 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <buf_has_data+0x20>)
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <buf_has_data+0x24>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20001621 	.word	0x20001621
 800221c:	20001622 	.word	0x20001622

08002220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <HAL_MspInit+0x5c>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_MspInit+0x5c>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6193      	str	r3, [r2, #24]
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_MspInit+0x5c>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_MspInit+0x5c>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_MspInit+0x5c>)
 8002244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002248:	61d3      	str	r3, [r2, #28]
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_MspInit+0x5c>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_MspInit+0x60>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_MspInit+0x60>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40021000 	.word	0x40021000
 8002280:	40010000 	.word	0x40010000

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <NMI_Handler+0x4>

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <MemManage_Handler+0x4>

08002296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ca:	f000 f935 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80022da:	f000 fd4c 	bl	8002d76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20001ca4 	.word	0x20001ca4

080022e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022f0:	f000 fbf8 	bl	8002ae4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f92f 	bl	8002570 <HAL_Delay>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8002324:	f000 f80c 	bl	8002340 <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8002328:	bf00      	nop
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f813 	bl	8002358 <check_us_counter>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f8      	bne.n	800232a <_delay_us+0x10>
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <reset_us_counter>:

inline void reset_us_counter(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <reset_us_counter+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2200      	movs	r2, #0
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20001794 	.word	0x20001794

08002358 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <check_us_counter+0x28>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	b29b      	uxth	r3, r3
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	429a      	cmp	r2, r3
 800236e:	bf8c      	ite	hi
 8002370:	2301      	movhi	r3, #1
 8002372:	2300      	movls	r3, #0
 8002374:	b2db      	uxtb	r3, r3
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20001794 	.word	0x20001794

08002384 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002398:	463b      	mov	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_TIM1_Init+0x98>)
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <MX_TIM1_Init+0x9c>)
 80023a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_TIM1_Init+0x98>)
 80023a8:	222f      	movs	r2, #47	; 0x2f
 80023aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_TIM1_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_TIM1_Init+0x98>)
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_TIM1_Init+0x98>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <MX_TIM1_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <MX_TIM1_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <MX_TIM1_Init+0x98>)
 80023ce:	f002 fbad 	bl	8004b2c <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023d8:	f7ff fc8f 	bl	8001cfa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023e2:	f107 0308 	add.w	r3, r7, #8
 80023e6:	4619      	mov	r1, r3
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <MX_TIM1_Init+0x98>)
 80023ea:	f002 fc39 	bl	8004c60 <HAL_TIM_ConfigClockSource>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80023f4:	f7ff fc81 	bl	8001cfa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023f8:	2300      	movs	r3, #0
 80023fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <MX_TIM1_Init+0x98>)
 8002406:	f002 fddb 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002410:	f7ff fc73 	bl	8001cfa <Error_Handler>
  }

}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20001794 	.word	0x20001794
 8002420:	40012c00 	.word	0x40012c00

08002424 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_TIM_Base_MspInit+0x34>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10b      	bne.n	800244e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 800243c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002440:	6193      	str	r3, [r2, #24]
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_Base_MspInit+0x38>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40021000 	.word	0x40021000

08002460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002460:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002462:	e003      	b.n	800246c <LoopCopyDataInit>

08002464 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002466:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002468:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800246a:	3104      	adds	r1, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800246c:	480a      	ldr	r0, [pc, #40]	; (8002498 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002470:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002472:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002474:	d3f6      	bcc.n	8002464 <CopyDataInit>
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002478:	e002      	b.n	8002480 <LoopFillZerobss>

0800247a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800247c:	f842 3b04 	str.w	r3, [r2], #4

08002480 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002482:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002484:	d3f9      	bcc.n	800247a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002486:	f7ff ff37 	bl	80022f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f006 fcb1 	bl	8008df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248e:	f7ff fba7 	bl	8001be0 <main>
  bx lr
 8002492:	4770      	bx	lr
  ldr r3, =_sidata
 8002494:	08009018 	.word	0x08009018
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800249c:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 80024a0:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 80024a4:	20001f90 	.word	0x20001f90

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	; (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 f945 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff feaa 	bl	8002220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 f95d 	bl	80027b6 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 f925 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	; (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000004 	.word	0x20000004
 8002530:	2000000c 	.word	0x2000000c
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_IncTick+0x1c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_IncTick+0x20>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_IncTick+0x20>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	2000000c 	.word	0x2000000c
 8002558:	200017dc 	.word	0x200017dc

0800255c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b02      	ldr	r3, [pc, #8]	; (800256c <HAL_GetTick+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	200017dc 	.word	0x200017dc

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fff0 	bl	800255c <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_Delay+0x40>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffe0 	bl	800255c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <__NVIC_EnableIRQ+0x34>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100

08002650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002660:	2b00      	cmp	r3, #0
 8002662:	db0a      	blt.n	800267a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	490c      	ldr	r1, [pc, #48]	; (800269c <__NVIC_SetPriority+0x4c>)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	440b      	add	r3, r1
 8002674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002678:	e00a      	b.n	8002690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4908      	ldr	r1, [pc, #32]	; (80026a0 <__NVIC_SetPriority+0x50>)
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	3b04      	subs	r3, #4
 8002688:	0112      	lsls	r2, r2, #4
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	440b      	add	r3, r1
 800268e:	761a      	strb	r2, [r3, #24]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b089      	sub	sp, #36	; 0x24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f1c3 0307 	rsb	r3, r3, #7
 80026be:	2b04      	cmp	r3, #4
 80026c0:	bf28      	it	cs
 80026c2:	2304      	movcs	r3, #4
 80026c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3304      	adds	r3, #4
 80026ca:	2b06      	cmp	r3, #6
 80026cc:	d902      	bls.n	80026d4 <NVIC_EncodePriority+0x30>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3b03      	subs	r3, #3
 80026d2:	e000      	b.n	80026d6 <NVIC_EncodePriority+0x32>
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	fa01 f303 	lsl.w	r3, r1, r3
 80026f6:	43d9      	mvns	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026fc:	4313      	orrs	r3, r2
         );
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	; 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff90 	bl	8002650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	; (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff2d 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff42 	bl	80025fc <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff90 	bl	80026a4 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5f 	bl	8002650 <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff35 	bl	8002618 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b08b      	sub	sp, #44	; 0x2c
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e127      	b.n	8002a34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027e4:	2201      	movs	r2, #1
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8116 	bne.w	8002a2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b12      	cmp	r3, #18
 8002808:	d034      	beq.n	8002874 <HAL_GPIO_Init+0xa4>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d80d      	bhi.n	800282a <HAL_GPIO_Init+0x5a>
 800280e:	2b02      	cmp	r3, #2
 8002810:	d02b      	beq.n	800286a <HAL_GPIO_Init+0x9a>
 8002812:	2b02      	cmp	r3, #2
 8002814:	d804      	bhi.n	8002820 <HAL_GPIO_Init+0x50>
 8002816:	2b00      	cmp	r3, #0
 8002818:	d031      	beq.n	800287e <HAL_GPIO_Init+0xae>
 800281a:	2b01      	cmp	r3, #1
 800281c:	d01c      	beq.n	8002858 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800281e:	e048      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002820:	2b03      	cmp	r3, #3
 8002822:	d043      	beq.n	80028ac <HAL_GPIO_Init+0xdc>
 8002824:	2b11      	cmp	r3, #17
 8002826:	d01b      	beq.n	8002860 <HAL_GPIO_Init+0x90>
          break;
 8002828:	e043      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800282a:	4a89      	ldr	r2, [pc, #548]	; (8002a50 <HAL_GPIO_Init+0x280>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d026      	beq.n	800287e <HAL_GPIO_Init+0xae>
 8002830:	4a87      	ldr	r2, [pc, #540]	; (8002a50 <HAL_GPIO_Init+0x280>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d806      	bhi.n	8002844 <HAL_GPIO_Init+0x74>
 8002836:	4a87      	ldr	r2, [pc, #540]	; (8002a54 <HAL_GPIO_Init+0x284>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d020      	beq.n	800287e <HAL_GPIO_Init+0xae>
 800283c:	4a86      	ldr	r2, [pc, #536]	; (8002a58 <HAL_GPIO_Init+0x288>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d01d      	beq.n	800287e <HAL_GPIO_Init+0xae>
          break;
 8002842:	e036      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002844:	4a85      	ldr	r2, [pc, #532]	; (8002a5c <HAL_GPIO_Init+0x28c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d019      	beq.n	800287e <HAL_GPIO_Init+0xae>
 800284a:	4a85      	ldr	r2, [pc, #532]	; (8002a60 <HAL_GPIO_Init+0x290>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d016      	beq.n	800287e <HAL_GPIO_Init+0xae>
 8002850:	4a84      	ldr	r2, [pc, #528]	; (8002a64 <HAL_GPIO_Init+0x294>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <HAL_GPIO_Init+0xae>
          break;
 8002856:	e02c      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	623b      	str	r3, [r7, #32]
          break;
 800285e:	e028      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	3304      	adds	r3, #4
 8002866:	623b      	str	r3, [r7, #32]
          break;
 8002868:	e023      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	3308      	adds	r3, #8
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e01e      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	330c      	adds	r3, #12
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e019      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002886:	2304      	movs	r3, #4
 8002888:	623b      	str	r3, [r7, #32]
          break;
 800288a:	e012      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d105      	bne.n	80028a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002894:	2308      	movs	r3, #8
 8002896:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	611a      	str	r2, [r3, #16]
          break;
 800289e:	e008      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a0:	2308      	movs	r3, #8
 80028a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	615a      	str	r2, [r3, #20]
          break;
 80028aa:	e002      	b.n	80028b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
          break;
 80028b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2bff      	cmp	r3, #255	; 0xff
 80028b6:	d801      	bhi.n	80028bc <HAL_GPIO_Init+0xec>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	e001      	b.n	80028c0 <HAL_GPIO_Init+0xf0>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2bff      	cmp	r3, #255	; 0xff
 80028c6:	d802      	bhi.n	80028ce <HAL_GPIO_Init+0xfe>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x104>
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3b08      	subs	r3, #8
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	210f      	movs	r1, #15
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	401a      	ands	r2, r3
 80028e6:	6a39      	ldr	r1, [r7, #32]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	431a      	orrs	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8096 	beq.w	8002a2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_GPIO_Init+0x298>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	4a58      	ldr	r2, [pc, #352]	; (8002a68 <HAL_GPIO_Init+0x298>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6193      	str	r3, [r2, #24]
 800290e:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_GPIO_Init+0x298>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800291a:	4a54      	ldr	r2, [pc, #336]	; (8002a6c <HAL_GPIO_Init+0x29c>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002926:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4013      	ands	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_GPIO_Init+0x2a0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_GPIO_Init+0x19e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <HAL_GPIO_Init+0x2a4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00d      	beq.n	800296a <HAL_GPIO_Init+0x19a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a49      	ldr	r2, [pc, #292]	; (8002a78 <HAL_GPIO_Init+0x2a8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <HAL_GPIO_Init+0x196>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a48      	ldr	r2, [pc, #288]	; (8002a7c <HAL_GPIO_Init+0x2ac>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_GPIO_Init+0x192>
 800295e:	2303      	movs	r3, #3
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x1a0>
 8002962:	2304      	movs	r3, #4
 8002964:	e004      	b.n	8002970 <HAL_GPIO_Init+0x1a0>
 8002966:	2302      	movs	r3, #2
 8002968:	e002      	b.n	8002970 <HAL_GPIO_Init+0x1a0>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <HAL_GPIO_Init+0x1a0>
 800296e:	2300      	movs	r3, #0
 8002970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002972:	f002 0203 	and.w	r2, r2, #3
 8002976:	0092      	lsls	r2, r2, #2
 8002978:	4093      	lsls	r3, r2
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002980:	493a      	ldr	r1, [pc, #232]	; (8002a6c <HAL_GPIO_Init+0x29c>)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800299a:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4938      	ldr	r1, [pc, #224]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
 80029a6:	e006      	b.n	80029b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029a8:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	4933      	ldr	r1, [pc, #204]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	492e      	ldr	r1, [pc, #184]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
 80029ce:	e006      	b.n	80029de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	4929      	ldr	r1, [pc, #164]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	4924      	ldr	r1, [pc, #144]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	491f      	ldr	r1, [pc, #124]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	491a      	ldr	r1, [pc, #104]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60cb      	str	r3, [r1, #12]
 8002a1e:	e006      	b.n	8002a2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	4915      	ldr	r1, [pc, #84]	; (8002a80 <HAL_GPIO_Init+0x2b0>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	3301      	adds	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f47f aed0 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002a44:	bf00      	nop
 8002a46:	372c      	adds	r7, #44	; 0x2c
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	10210000 	.word	0x10210000
 8002a54:	10110000 	.word	0x10110000
 8002a58:	10120000 	.word	0x10120000
 8002a5c:	10310000 	.word	0x10310000
 8002a60:	10320000 	.word	0x10320000
 8002a64:	10220000 	.word	0x10220000
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	40010c00 	.word	0x40010c00
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	887b      	ldrh	r3, [r7, #2]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	e001      	b.n	8002aa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	807b      	strh	r3, [r7, #2]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac2:	787b      	ldrb	r3, [r7, #1]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ace:	e003      	b.n	8002ad8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	041a      	lsls	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002aee:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d006      	beq.n	8002b08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002afa:	4a05      	ldr	r2, [pc, #20]	; (8002b10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f8fe 	bl	8001d04 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40010400 	.word	0x40010400

08002b14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b08b      	sub	sp, #44	; 0x2c
 8002b18:	af06      	add	r7, sp, #24
 8002b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0fd      	b.n	8002d22 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f005 fed8 	bl	80088f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f002 fabb 	bl	80050c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	687e      	ldr	r6, [r7, #4]
 8002b5a:	466d      	mov	r5, sp
 8002b5c:	f106 0410 	add.w	r4, r6, #16
 8002b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	602b      	str	r3, [r5, #0]
 8002b68:	1d33      	adds	r3, r6, #4
 8002b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6c:	6838      	ldr	r0, [r7, #0]
 8002b6e:	f002 fa85 	bl	800507c <USB_CoreInit>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0ce      	b.n	8002d22 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fab6 	bl	80050fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e04c      	b.n	8002c30 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	b298      	uxth	r0, r3
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3336      	adds	r3, #54	; 0x36
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	3303      	adds	r3, #3
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3338      	adds	r3, #56	; 0x38
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	333c      	adds	r3, #60	; 0x3c
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	3340      	adds	r3, #64	; 0x40
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3ad      	bcc.n	8002b96 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e044      	b.n	8002cca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
 8002cca:	7bfa      	ldrb	r2, [r7, #15]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d3b5      	bcc.n	8002c40 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	687e      	ldr	r6, [r7, #4]
 8002cdc:	466d      	mov	r5, sp
 8002cde:	f106 0410 	add.w	r4, r6, #16
 8002ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	602b      	str	r3, [r5, #0]
 8002cea:	1d33      	adds	r3, r6, #4
 8002cec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f002 fa10 	bl	8005114 <USB_DevInit>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00d      	b.n	8002d22 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f004 f9aa 	bl	8007074 <USB_DevDisconnect>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_Start+0x16>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e016      	b.n	8002d6e <HAL_PCD_Start+0x44>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 f9a5 	bl	800509c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d52:	2101      	movs	r1, #1
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f006 f814 	bl	8008d82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 f97e 	bl	8007060 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b088      	sub	sp, #32
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f980 	bl	8007088 <USB_ReadInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fb4a 	bl	800342e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f004 f972 	bl	8007088 <USB_ReadInterrupts>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d112      	bne.n	8002dd6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f005 fe0c 	bl	80089e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f925 	bl	8003020 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 f954 	bl	8007088 <USB_ReadInterrupts>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dea:	d10b      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 f93d 	bl	8007088 <USB_ReadInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d10b      	bne.n	8002e32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 f926 	bl	8007088 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e46:	d126      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0208 	bic.w	r2, r2, #8
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 fde3 	bl	8008a44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e90:	b292      	uxth	r2, r2
 8002e92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 f8f4 	bl	8007088 <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eaa:	f040 8084 	bne.w	8002fb6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	77fb      	strb	r3, [r7, #31]
 8002eb2:	e011      	b.n	8002ed8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	441a      	add	r2, r3
 8002ec0:	7ffb      	ldrb	r3, [r7, #31]
 8002ec2:	8812      	ldrh	r2, [r2, #0]
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f107 0120 	add.w	r1, r7, #32
 8002ecc:	440b      	add	r3, r1
 8002ece:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	7ffb      	ldrb	r3, [r7, #31]
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	d9ea      	bls.n	8002eb4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0201 	orr.w	r2, r2, #1
 8002ef0:	b292      	uxth	r2, r2
 8002ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f0e:	bf00      	nop
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f6      	beq.n	8002f10 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f34:	b292      	uxth	r2, r2
 8002f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	77fb      	strb	r3, [r7, #31]
 8002f3e:	e010      	b.n	8002f62 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4611      	mov	r1, r2
 8002f48:	7ffa      	ldrb	r2, [r7, #31]
 8002f4a:	0092      	lsls	r2, r2, #2
 8002f4c:	440a      	add	r2, r1
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	f107 0120 	add.w	r1, r7, #32
 8002f54:	440b      	add	r3, r1
 8002f56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f5a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d9eb      	bls.n	8002f40 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f005 fd36 	bl	8008a22 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f004 f864 	bl	8007088 <USB_ReadInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fca:	d10e      	bne.n	8002fea <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f005 fcf0 	bl	80089ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 f84a 	bl	8007088 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d10b      	bne.n	8003018 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003008:	b29a      	uxth	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003012:	b292      	uxth	r2, r2
 8003014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003018:	bf00      	nop
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_SetAddress+0x1a>
 8003036:	2302      	movs	r3, #2
 8003038:	e013      	b.n	8003062 <HAL_PCD_SetAddress+0x42>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fff1 	bl	800703a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	4608      	mov	r0, r1
 8003074:	4611      	mov	r1, r2
 8003076:	461a      	mov	r2, r3
 8003078:	4603      	mov	r3, r0
 800307a:	70fb      	strb	r3, [r7, #3]
 800307c:	460b      	mov	r3, r1
 800307e:	803b      	strh	r3, [r7, #0]
 8003080:	4613      	mov	r3, r2
 8003082:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308c:	2b00      	cmp	r3, #0
 800308e:	da0e      	bge.n	80030ae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	705a      	strb	r2, [r3, #1]
 80030ac:	e00e      	b.n	80030cc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	f003 0207 	and.w	r2, r3, #7
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030d8:	883a      	ldrh	r2, [r7, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	78ba      	ldrb	r2, [r7, #2]
 80030e2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030f6:	78bb      	ldrb	r3, [r7, #2]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d102      	bne.n	8003102 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Open+0xa6>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Open+0xc4>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f002 f818 	bl	8005154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800312c:	7afb      	ldrb	r3, [r7, #11]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da0e      	bge.n	8003168 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00e      	b.n	8003186 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_PCD_EP_Close+0x6a>
 800319c:	2302      	movs	r3, #2
 800319e:	e00e      	b.n	80031be <HAL_PCD_EP_Close+0x88>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f002 fb3a 	bl	8005828 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f003 0207 	and.w	r2, r3, #7
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2200      	movs	r2, #0
 8003204:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	b2da      	uxtb	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003212:	7afb      	ldrb	r3, [r7, #11]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6979      	ldr	r1, [r7, #20]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 fcec 	bl	8005c00 <USB_EPStartXfer>
 8003228:	e005      	b.n	8003236 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	4618      	mov	r0, r3
 8003232:	f002 fce5 	bl	8005c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	460b      	mov	r3, r1
 800324e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	1c5a      	adds	r2, r3, #1
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2201      	movs	r2, #1
 800328a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	b2da      	uxtb	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003298:	7afb      	ldrb	r3, [r7, #11]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fca9 	bl	8005c00 <USB_EPStartXfer>
 80032ae:	e005      	b.n	80032bc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6979      	ldr	r1, [r7, #20]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f002 fca2 	bl	8005c00 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 0207 	and.w	r2, r3, #7
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d901      	bls.n	80032e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e04c      	b.n	800337e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da0e      	bge.n	800330a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	705a      	strb	r2, [r3, #1]
 8003308:	e00c      	b.n	8003324 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2201      	movs	r2, #1
 8003328:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_PCD_EP_SetStall+0x7e>
 8003340:	2302      	movs	r3, #2
 8003342:	e01c      	b.n	800337e <HAL_PCD_EP_SetStall+0xb8>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fd74 	bl	8006e40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	2b00      	cmp	r3, #0
 8003360:	d108      	bne.n	8003374 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f003 fe99 	bl	80070a6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d901      	bls.n	80033a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e040      	b.n	8003426 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	da0e      	bge.n	80033ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	705a      	strb	r2, [r3, #1]
 80033c8:	e00e      	b.n	80033e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 0207 	and.w	r2, r3, #7
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_PCD_EP_ClrStall+0x82>
 8003404:	2302      	movs	r3, #2
 8003406:	e00e      	b.n	8003426 <HAL_PCD_EP_ClrStall+0xa0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fd62 	bl	8006ee0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b08e      	sub	sp, #56	; 0x38
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003436:	e2df      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003440:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800344e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8158 	bne.w	8003708 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003458:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d152      	bne.n	8003508 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800346e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003472:	81fb      	strh	r3, [r7, #14]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	89fb      	ldrh	r3, [r7, #14]
 800347a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800347e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003482:	b29b      	uxth	r3, r3
 8003484:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3328      	adds	r3, #40	; 0x28
 800348a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	3302      	adds	r3, #2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	441a      	add	r2, r3
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034c6:	2100      	movs	r1, #0
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f005 fa64 	bl	8008996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 828e 	beq.w	80039f8 <PCD_EP_ISR_Handler+0x5ca>
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f040 8289 	bne.w	80039f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	b292      	uxth	r2, r2
 80034fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003506:	e277      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800351a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351e:	2b00      	cmp	r3, #0
 8003520:	d034      	beq.n	800358c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352a:	b29b      	uxth	r3, r3
 800352c:	461a      	mov	r2, r3
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	3306      	adds	r3, #6
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003560:	b29b      	uxth	r3, r3
 8003562:	f003 fdef 	bl	8007144 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	b29a      	uxth	r2, r3
 800356e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003572:	4013      	ands	r3, r2
 8003574:	823b      	strh	r3, [r7, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	8a3a      	ldrh	r2, [r7, #16]
 800357c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003580:	b292      	uxth	r2, r2
 8003582:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f005 f9d9 	bl	800893c <HAL_PCD_SetupStageCallback>
 800358a:	e235      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800358c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003590:	2b00      	cmp	r3, #0
 8003592:	f280 8231 	bge.w	80039f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29a      	uxth	r2, r3
 800359e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035a2:	4013      	ands	r3, r2
 80035a4:	83bb      	strh	r3, [r7, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	8bba      	ldrh	r2, [r7, #28]
 80035ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	3306      	adds	r3, #6
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d019      	beq.n	800361c <PCD_EP_ISR_Handler+0x1ee>
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d015      	beq.n	800361c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	6959      	ldr	r1, [r3, #20]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003600:	b29b      	uxth	r3, r3
 8003602:	f003 fd9f 	bl	8007144 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	695a      	ldr	r2, [r3, #20]
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	441a      	add	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003614:	2100      	movs	r1, #0
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f005 f9a2 	bl	8008960 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362a:	b29b      	uxth	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	4413      	add	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d112      	bne.n	800366a <PCD_EP_ISR_Handler+0x23c>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800364e:	b29a      	uxth	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	801a      	strh	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003662:	b29a      	uxth	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e02f      	b.n	80036ca <PCD_EP_ISR_Handler+0x29c>
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	2b3e      	cmp	r3, #62	; 0x3e
 8003670:	d813      	bhi.n	800369a <PCD_EP_ISR_Handler+0x26c>
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <PCD_EP_ISR_Handler+0x25e>
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	b29b      	uxth	r3, r3
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	e017      	b.n	80036ca <PCD_EP_ISR_Handler+0x29c>
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	633b      	str	r3, [r7, #48]	; 0x30
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d102      	bne.n	80036b4 <PCD_EP_ISR_Handler+0x286>
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	3b01      	subs	r3, #1
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	029b      	lsls	r3, r3, #10
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036da:	827b      	strh	r3, [r7, #18]
 80036dc:	8a7b      	ldrh	r3, [r7, #18]
 80036de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036e2:	827b      	strh	r3, [r7, #18]
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
 80036e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036ea:	827b      	strh	r3, [r7, #18]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	8a7b      	ldrh	r3, [r7, #18]
 80036f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003702:	b29b      	uxth	r3, r3
 8003704:	8013      	strh	r3, [r2, #0]
 8003706:	e177      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	461a      	mov	r2, r3
 800370e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800371a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800371e:	2b00      	cmp	r3, #0
 8003720:	f280 80ea 	bge.w	80038f8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29a      	uxth	r2, r3
 8003736:	f640 738f 	movw	r3, #3983	; 0xf8f
 800373a:	4013      	ands	r3, r2
 800373c:	853b      	strh	r3, [r7, #40]	; 0x28
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800374e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003752:	b292      	uxth	r2, r2
 8003754:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003756:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	4413      	add	r3, r2
 800376a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d122      	bne.n	80037ba <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4413      	add	r3, r2
 8003788:	3306      	adds	r3, #6
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800379e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	6959      	ldr	r1, [r3, #20]
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	88da      	ldrh	r2, [r3, #6]
 80037b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b4:	f003 fcc6 	bl	8007144 <USB_ReadPMA>
 80037b8:	e07c      	b.n	80038b4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	78db      	ldrb	r3, [r3, #3]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d108      	bne.n	80037d4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037c4:	461a      	mov	r2, r3
 80037c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f923 	bl	8003a14 <HAL_PCD_EP_DB_Receive>
 80037ce:	4603      	mov	r3, r0
 80037d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037d2:	e06f      	b.n	80038b4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003810:	b29b      	uxth	r3, r3
 8003812:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	461a      	mov	r2, r3
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d021      	beq.n	8003872 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	3302      	adds	r3, #2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003856:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003858:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800385a:	2b00      	cmp	r3, #0
 800385c:	d02a      	beq.n	80038b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	6959      	ldr	r1, [r3, #20]
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	891a      	ldrh	r2, [r3, #8]
 800386a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800386c:	f003 fc6a 	bl	8007144 <USB_ReadPMA>
 8003870:	e020      	b.n	80038b4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	3306      	adds	r3, #6
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800389c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	6959      	ldr	r1, [r3, #20]
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	895a      	ldrh	r2, [r3, #10]
 80038ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038b0:	f003 fc48 	bl	8007144 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ba:	441a      	add	r2, r3
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038c6:	441a      	add	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <PCD_EP_ISR_Handler+0x4b0>
 80038d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d206      	bcs.n	80038ec <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	4619      	mov	r1, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f005 f83b 	bl	8008960 <HAL_PCD_DataOutStageCallback>
 80038ea:	e005      	b.n	80038f8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038f2:	4618      	mov	r0, r3
 80038f4:	f002 f984 	bl	8005c00 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07a      	beq.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003902:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	843b      	strh	r3, [r7, #32]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	441a      	add	r2, r3
 8003940:	8c3b      	ldrh	r3, [r7, #32]
 8003942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800394a:	b29b      	uxth	r3, r3
 800394c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d108      	bne.n	8003968 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800395a:	2b02      	cmp	r3, #2
 800395c:	d146      	bne.n	80039ec <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800395e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d141      	bne.n	80039ec <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003970:	b29b      	uxth	r3, r3
 8003972:	461a      	mov	r2, r3
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	3302      	adds	r3, #2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003990:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	699a      	ldr	r2, [r3, #24]
 8003996:	8bfb      	ldrh	r3, [r7, #30]
 8003998:	429a      	cmp	r2, r3
 800399a:	d906      	bls.n	80039aa <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	8bfb      	ldrh	r3, [r7, #30]
 80039a2:	1ad2      	subs	r2, r2, r3
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	619a      	str	r2, [r3, #24]
 80039a8:	e002      	b.n	80039b0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f004 ffe9 	bl	8008996 <HAL_PCD_DataInStageCallback>
 80039c4:	e018      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	8bfb      	ldrh	r3, [r7, #30]
 80039cc:	441a      	add	r2, r3
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	8bfb      	ldrh	r3, [r7, #30]
 80039d8:	441a      	add	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039e4:	4618      	mov	r0, r3
 80039e6:	f002 f90b 	bl	8005c00 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039ea:	e005      	b.n	80039f8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039ee:	461a      	mov	r2, r3
 80039f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f91b 	bl	8003c2e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f6ff ad17 	blt.w	8003438 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3738      	adds	r7, #56	; 0x38
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07e      	beq.n	8003b2a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3302      	adds	r3, #2
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	8b7b      	ldrh	r3, [r7, #26]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d306      	bcc.n	8003a6e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	8b7b      	ldrh	r3, [r7, #26]
 8003a66:	1ad2      	subs	r2, r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	619a      	str	r2, [r3, #24]
 8003a6c:	e002      	b.n	8003a74 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d123      	bne.n	8003ac4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	833b      	strh	r3, [r7, #24]
 8003a98:	8b3b      	ldrh	r3, [r7, #24]
 8003a9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a9e:	833b      	strh	r3, [r7, #24]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	8b3b      	ldrh	r3, [r7, #24]
 8003ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d01f      	beq.n	8003b0e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae8:	82fb      	strh	r3, [r7, #22]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	461a      	mov	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	441a      	add	r2, r3
 8003af8:	8afb      	ldrh	r3, [r7, #22]
 8003afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b0e:	8b7b      	ldrh	r3, [r7, #26]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 8087 	beq.w	8003c24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6959      	ldr	r1, [r3, #20]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	891a      	ldrh	r2, [r3, #8]
 8003b22:	8b7b      	ldrh	r3, [r7, #26]
 8003b24:	f003 fb0e 	bl	8007144 <USB_ReadPMA>
 8003b28:	e07c      	b.n	8003c24 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3306      	adds	r3, #6
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b52:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	8b7b      	ldrh	r3, [r7, #26]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d306      	bcc.n	8003b6c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	699a      	ldr	r2, [r3, #24]
 8003b62:	8b7b      	ldrh	r3, [r7, #26]
 8003b64:	1ad2      	subs	r2, r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	619a      	str	r2, [r3, #24]
 8003b6a:	e002      	b.n	8003b72 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d123      	bne.n	8003bc2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b94:	83fb      	strh	r3, [r7, #30]
 8003b96:	8bfb      	ldrh	r3, [r7, #30]
 8003b98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b9c:	83fb      	strh	r3, [r7, #30]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11f      	bne.n	8003c0c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	83bb      	strh	r3, [r7, #28]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	8bbb      	ldrh	r3, [r7, #28]
 8003bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c0c:	8b7b      	ldrh	r3, [r7, #26]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6959      	ldr	r1, [r3, #20]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	895a      	ldrh	r2, [r3, #10]
 8003c1e:	8b7b      	ldrh	r3, [r7, #26]
 8003c20:	f003 fa90 	bl	8007144 <USB_ReadPMA>
    }
  }

  return count;
 8003c24:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b092      	sub	sp, #72	; 0x48
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8132 	beq.w	8003eac <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c70:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	699a      	ldr	r2, [r3, #24]
 8003c76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d906      	bls.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	619a      	str	r2, [r3, #24]
 8003c88:	e002      	b.n	8003c90 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d12c      	bne.n	8003cf2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f004 fe79 	bl	8008996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ca4:	88fb      	ldrh	r3, [r7, #6]
 8003ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 822f 	beq.w	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cca:	827b      	strh	r3, [r7, #18]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	441a      	add	r2, r3
 8003cda:	8a7b      	ldrh	r3, [r7, #18]
 8003cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	8013      	strh	r3, [r2, #0]
 8003cf0:	e20d      	b.n	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01f      	beq.n	8003d3c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	441a      	add	r2, r3
 8003d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	f040 81e3 	bne.w	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d4e:	441a      	add	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d309      	bcc.n	8003d80 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6a1a      	ldr	r2, [r3, #32]
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	1ad2      	subs	r2, r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	621a      	str	r2, [r3, #32]
 8003d7e:	e014      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003d88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d8a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d94:	e009      	b.n	8003daa <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d155      	bne.n	8003e5e <HAL_PCD_EP_DB_Transmit+0x230>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	011a      	lsls	r2, r3, #4
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d112      	bne.n	8003e06 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	801a      	strh	r2, [r3, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	e047      	b.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x268>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	2b3e      	cmp	r3, #62	; 0x3e
 8003e0a:	d811      	bhi.n	8003e30 <HAL_PCD_EP_DB_Transmit+0x202>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	3301      	adds	r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	029b      	lsls	r3, r3, #10
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e032      	b.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x268>
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <HAL_PCD_EP_DB_Transmit+0x218>
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	3b01      	subs	r3, #1
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	029b      	lsls	r3, r3, #10
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	801a      	strh	r2, [r3, #0]
 8003e5c:	e01b      	b.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x268>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d117      	bne.n	8003e96 <HAL_PCD_EP_DB_Transmit+0x268>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	623b      	str	r3, [r7, #32]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	011a      	lsls	r2, r3, #4
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	4413      	add	r3, r2
 8003e88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6959      	ldr	r1, [r3, #20]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	891a      	ldrh	r2, [r3, #8]
 8003ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f003 f909 	bl	80070bc <USB_WritePMA>
 8003eaa:	e130      	b.n	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3306      	adds	r3, #6
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d306      	bcc.n	8003eee <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ee6:	1ad2      	subs	r2, r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	619a      	str	r2, [r3, #24]
 8003eec:	e002      	b.n	8003ef4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d12c      	bne.n	8003f56 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	4619      	mov	r1, r3
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f004 fd47 	bl	8008996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 80fd 	bne.w	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	8013      	strh	r3, [r2, #0]
 8003f54:	e0db      	b.n	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11f      	bne.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f040 80b1 	bne.w	800410e <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fb2:	441a      	add	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d309      	bcc.n	8003fe4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6a1a      	ldr	r2, [r3, #32]
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	621a      	str	r2, [r3, #32]
 8003fe2:	e014      	b.n	800400e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d106      	bne.n	8003ffa <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003fec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ff8:	e009      	b.n	800400e <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d155      	bne.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x49a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	4413      	add	r3, r2
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	4413      	add	r3, r2
 800403e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004042:	643b      	str	r3, [r7, #64]	; 0x40
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	2b00      	cmp	r3, #0
 8004048:	d112      	bne.n	8004070 <HAL_PCD_EP_DB_Transmit+0x442>
 800404a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004054:	b29a      	uxth	r2, r3
 8004056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004068:	b29a      	uxth	r2, r3
 800406a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	e044      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004072:	2b3e      	cmp	r3, #62	; 0x3e
 8004074:	d811      	bhi.n	800409a <HAL_PCD_EP_DB_Transmit+0x46c>
 8004076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_PCD_EP_DB_Transmit+0x45e>
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	3301      	adds	r3, #1
 800408a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408e:	b29b      	uxth	r3, r3
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	b29a      	uxth	r2, r3
 8004094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	e02f      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x4cc>
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x482>
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	3b01      	subs	r3, #1
 80040ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e018      	b.n	80040fa <HAL_PCD_EP_DB_Transmit+0x4cc>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d114      	bne.n	80040fa <HAL_PCD_EP_DB_Transmit+0x4cc>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d8:	b29b      	uxth	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	4413      	add	r3, r2
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	011a      	lsls	r2, r3, #4
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	4413      	add	r3, r2
 80040ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	6959      	ldr	r1, [r3, #20]
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	895a      	ldrh	r2, [r3, #10]
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	b29b      	uxth	r3, r3
 800410a:	f002 ffd7 	bl	80070bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004128:	823b      	strh	r3, [r7, #16]
 800412a:	8a3b      	ldrh	r3, [r7, #16]
 800412c:	f083 0310 	eor.w	r3, r3, #16
 8004130:	823b      	strh	r3, [r7, #16]
 8004132:	8a3b      	ldrh	r3, [r7, #16]
 8004134:	f083 0320 	eor.w	r3, r3, #32
 8004138:	823b      	strh	r3, [r7, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8a3b      	ldrh	r3, [r7, #16]
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3748      	adds	r7, #72	; 0x48
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	817b      	strh	r3, [r7, #10]
 8004176:	4613      	mov	r3, r2
 8004178:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800417a:	897b      	ldrh	r3, [r7, #10]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e009      	b.n	80041b2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800419e:	897a      	ldrh	r2, [r7, #10]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d107      	bne.n	80041c8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2200      	movs	r2, #0
 80041bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	80da      	strh	r2, [r3, #6]
 80041c6:	e00b      	b.n	80041e0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2201      	movs	r2, #1
 80041cc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	b29a      	uxth	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e26c      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 8087 	beq.w	800431a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800420c:	4b92      	ldr	r3, [pc, #584]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b04      	cmp	r3, #4
 8004216:	d00c      	beq.n	8004232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004218:	4b8f      	ldr	r3, [pc, #572]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	d112      	bne.n	800424a <HAL_RCC_OscConfig+0x5e>
 8004224:	4b8c      	ldr	r3, [pc, #560]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d10b      	bne.n	800424a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004232:	4b89      	ldr	r3, [pc, #548]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d06c      	beq.n	8004318 <HAL_RCC_OscConfig+0x12c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d168      	bne.n	8004318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e246      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x76>
 8004254:	4b80      	ldr	r3, [pc, #512]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a7f      	ldr	r2, [pc, #508]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e02e      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x98>
 800426a:	4b7b      	ldr	r3, [pc, #492]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a7a      	ldr	r2, [pc, #488]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b78      	ldr	r3, [pc, #480]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a77      	ldr	r2, [pc, #476]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800427c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0xbc>
 800428e:	4b72      	ldr	r3, [pc, #456]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a71      	ldr	r2, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b6f      	ldr	r3, [pc, #444]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e00b      	b.n	80042c0 <HAL_RCC_OscConfig+0xd4>
 80042a8:	4b6b      	ldr	r3, [pc, #428]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a67      	ldr	r2, [pc, #412]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d013      	beq.n	80042f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe f948 	bl	800255c <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fe f944 	bl	800255c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	; 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1fa      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b5d      	ldr	r3, [pc, #372]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0xe4>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe f934 	bl	800255c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe f930 	bl	800255c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1e6      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	4b53      	ldr	r3, [pc, #332]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x10c>
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d063      	beq.n	80043ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004326:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004332:	4b49      	ldr	r3, [pc, #292]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f003 030c 	and.w	r3, r3, #12
 800433a:	2b08      	cmp	r3, #8
 800433c:	d11c      	bne.n	8004378 <HAL_RCC_OscConfig+0x18c>
 800433e:	4b46      	ldr	r3, [pc, #280]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d116      	bne.n	8004378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	4b43      	ldr	r3, [pc, #268]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x176>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1ba      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4939      	ldr	r1, [pc, #228]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	e03a      	b.n	80043ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d020      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004380:	4b36      	ldr	r3, [pc, #216]	; (800445c <HAL_RCC_OscConfig+0x270>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fe f8e9 	bl	800255c <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438e:	f7fe f8e5 	bl	800255c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e19b      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4927      	ldr	r1, [pc, #156]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
 80043c0:	e015      	b.n	80043ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c2:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_RCC_OscConfig+0x270>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fe f8c8 	bl	800255c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fe f8c4 	bl	800255c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e17a      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	4b1d      	ldr	r3, [pc, #116]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d03a      	beq.n	8004470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d019      	beq.n	8004436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004402:	4b17      	ldr	r3, [pc, #92]	; (8004460 <HAL_RCC_OscConfig+0x274>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004408:	f7fe f8a8 	bl	800255c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fe f8a4 	bl	800255c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e15a      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCC_OscConfig+0x26c>)
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800442e:	2001      	movs	r0, #1
 8004430:	f000 faa8 	bl	8004984 <RCC_Delay>
 8004434:	e01c      	b.n	8004470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <HAL_RCC_OscConfig+0x274>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443c:	f7fe f88e 	bl	800255c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004442:	e00f      	b.n	8004464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fe f88a 	bl	800255c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d908      	bls.n	8004464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e140      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	42420000 	.word	0x42420000
 8004460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	4b9e      	ldr	r3, [pc, #632]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e9      	bne.n	8004444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80a6 	beq.w	80045ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b97      	ldr	r3, [pc, #604]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	4b94      	ldr	r3, [pc, #592]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	4a93      	ldr	r2, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	61d3      	str	r3, [r2, #28]
 800449a:	4b91      	ldr	r3, [pc, #580]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044aa:	4b8e      	ldr	r3, [pc, #568]	; (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d118      	bne.n	80044e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b6:	4b8b      	ldr	r3, [pc, #556]	; (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a8a      	ldr	r2, [pc, #552]	; (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7fe f84b 	bl	800255c <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fe f847 	bl	800255c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e0fd      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044dc:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCC_OscConfig+0x4f8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x312>
 80044f0:	4b7b      	ldr	r3, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	4a7a      	ldr	r2, [pc, #488]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6213      	str	r3, [r2, #32]
 80044fc:	e02d      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x334>
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4a72      	ldr	r2, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6213      	str	r3, [r2, #32]
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x356>
 8004528:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a6c      	ldr	r2, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	4b6a      	ldr	r3, [pc, #424]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	4a69      	ldr	r2, [pc, #420]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6213      	str	r3, [r2, #32]
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x36e>
 8004542:	4b67      	ldr	r3, [pc, #412]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a66      	ldr	r2, [pc, #408]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	4b64      	ldr	r3, [pc, #400]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	4a63      	ldr	r2, [pc, #396]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fd fffb 	bl	800255c <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fd fff7 	bl	800255c <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0ab      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x37e>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fd ffe5 	bl	800255c <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fd ffe1 	bl	800255c <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e095      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b4c      	ldr	r3, [pc, #304]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b48      	ldr	r3, [pc, #288]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	4a47      	ldr	r2, [pc, #284]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 8081 	beq.w	80046d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d061      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d146      	bne.n	8004676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b3f      	ldr	r3, [pc, #252]	; (80046e8 <HAL_RCC_OscConfig+0x4fc>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fd ffb5 	bl	800255c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fd ffb1 	bl	800255c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e067      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461c:	d108      	bne.n	8004630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	492d      	ldr	r1, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a19      	ldr	r1, [r3, #32]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	430b      	orrs	r3, r1
 8004642:	4927      	ldr	r1, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004648:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <HAL_RCC_OscConfig+0x4fc>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7fd ff85 	bl	800255c <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fd ff81 	bl	800255c <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e037      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004668:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_OscConfig+0x46a>
 8004674:	e02f      	b.n	80046d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <HAL_RCC_OscConfig+0x4fc>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd ff6e 	bl	800255c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004684:	f7fd ff6a 	bl	800255c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e020      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x498>
 80046a2:	e018      	b.n	80046d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e013      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_OscConfig+0x4f4>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
 80046e8:	42420060 	.word	0x42420060

080046ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0d0      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b6a      	ldr	r3, [pc, #424]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d910      	bls.n	8004730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b67      	ldr	r3, [pc, #412]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 0207 	bic.w	r2, r3, #7
 8004716:	4965      	ldr	r1, [pc, #404]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b63      	ldr	r3, [pc, #396]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0b8      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004748:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800474e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004752:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a52      	ldr	r2, [pc, #328]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800476a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	494d      	ldr	r1, [pc, #308]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	4313      	orrs	r3, r2
 800477c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d040      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d115      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e073      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3d      	ldr	r3, [pc, #244]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e06b      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4936      	ldr	r1, [pc, #216]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fd febe 	bl	800255c <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fd feba 	bl	800255c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e053      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2d      	ldr	r3, [pc, #180]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b27      	ldr	r3, [pc, #156]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d210      	bcs.n	800483c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 0207 	bic.w	r2, r3, #7
 8004822:	4922      	ldr	r1, [pc, #136]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e032      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4916      	ldr	r1, [pc, #88]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	490e      	ldr	r1, [pc, #56]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800487a:	f000 f821 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800487e:	4601      	mov	r1, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	4a0a      	ldr	r2, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 800488c:	5cd3      	ldrb	r3, [r2, r3]
 800488e:	fa21 f303 	lsr.w	r3, r1, r3
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1d0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fd fe1c 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40021000 	.word	0x40021000
 80048b4:	08009000 	.word	0x08009000
 80048b8:	20000004 	.word	0x20000004
 80048bc:	20000008 	.word	0x20000008

080048c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b490      	push	{r4, r7}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048c6:	4b2a      	ldr	r3, [pc, #168]	; (8004970 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048c8:	1d3c      	adds	r4, r7, #4
 80048ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	2300      	movs	r3, #0
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d002      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x40>
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x46>
 80048fe:	e02d      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004900:	4b1e      	ldr	r3, [pc, #120]	; (800497c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004902:	623b      	str	r3, [r7, #32]
      break;
 8004904:	e02d      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	0c9b      	lsrs	r3, r3, #18
 800490a:	f003 030f 	and.w	r3, r3, #15
 800490e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004912:	4413      	add	r3, r2
 8004914:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004918:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0c5b      	lsrs	r3, r3, #17
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004932:	4413      	add	r3, r2
 8004934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	4a0f      	ldr	r2, [pc, #60]	; (800497c <HAL_RCC_GetSysClockFreq+0xbc>)
 800493e:	fb02 f203 	mul.w	r2, r2, r3
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
 800494a:	e004      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	4a0c      	ldr	r2, [pc, #48]	; (8004980 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	623b      	str	r3, [r7, #32]
      break;
 800495a:	e002      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <HAL_RCC_GetSysClockFreq+0xbc>)
 800495e:	623b      	str	r3, [r7, #32]
      break;
 8004960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004962:	6a3b      	ldr	r3, [r7, #32]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3728      	adds	r7, #40	; 0x28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc90      	pop	{r4, r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	08008e98 	.word	0x08008e98
 8004974:	08008ea8 	.word	0x08008ea8
 8004978:	40021000 	.word	0x40021000
 800497c:	007a1200 	.word	0x007a1200
 8004980:	003d0900 	.word	0x003d0900

08004984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <RCC_Delay+0x34>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <RCC_Delay+0x38>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0a5b      	lsrs	r3, r3, #9
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a0:	bf00      	nop
  }
  while (Delay --);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	60fa      	str	r2, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f9      	bne.n	80049a0 <RCC_Delay+0x1c>
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bc80      	pop	{r7}
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000004 	.word	0x20000004
 80049bc:	10624dd3 	.word	0x10624dd3

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d07d      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e0:	4b4f      	ldr	r3, [pc, #316]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ec:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f6:	61d3      	str	r3, [r2, #28]
 80049f8:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d118      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a14:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a20:	f7fd fd9c 	bl	800255c <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	e008      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fd fd98 	bl	800255c <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e06d      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02e      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d027      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a64:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a74:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a7a:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fd67 	bl	800255c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fd fd63 	bl	800255c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e036      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ee      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4917      	ldr	r1, [pc, #92]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	490b      	ldr	r1, [pc, #44]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40007000 	.word	0x40007000
 8004b28:	42420440 	.word	0x42420440

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fc66 	bl	8002424 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 f930 	bl	8004dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e032      	b.n	8004c4a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <HAL_TIM_Base_Start+0x88>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_TIM_Base_Start+0x48>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfe:	d009      	beq.n	8004c14 <HAL_TIM_Base_Start+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <HAL_TIM_Base_Start+0x8c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_TIM_Base_Start+0x48>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <HAL_TIM_Base_Start+0x90>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d111      	bne.n	8004c38 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d010      	beq.n	8004c48 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0201 	orr.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c36:	e007      	b.n	8004c48 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800

08004c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_ConfigClockSource+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0a6      	b.n	8004dc6 <HAL_TIM_ConfigClockSource+0x166>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b40      	cmp	r3, #64	; 0x40
 8004cae:	d067      	beq.n	8004d80 <HAL_TIM_ConfigClockSource+0x120>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d80b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x6c>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d073      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d802      	bhi.n	8004cc2 <HAL_TIM_ConfigClockSource+0x62>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06f      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004cc0:	e078      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d06c      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
 8004cc6:	2b30      	cmp	r3, #48	; 0x30
 8004cc8:	d06a      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004cca:	e073      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ccc:	2b70      	cmp	r3, #112	; 0x70
 8004cce:	d00d      	beq.n	8004cec <HAL_TIM_ConfigClockSource+0x8c>
 8004cd0:	2b70      	cmp	r3, #112	; 0x70
 8004cd2:	d804      	bhi.n	8004cde <HAL_TIM_ConfigClockSource+0x7e>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d033      	beq.n	8004d40 <HAL_TIM_ConfigClockSource+0xe0>
 8004cd8:	2b60      	cmp	r3, #96	; 0x60
 8004cda:	d041      	beq.n	8004d60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004cdc:	e06a      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d066      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0x152>
 8004ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ce8:	d017      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004cea:	e063      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f000 f941 	bl	8004f82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e04c      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6899      	ldr	r1, [r3, #8]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f000 f92a 	bl	8004f82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3c:	609a      	str	r2, [r3, #8]
      break;
 8004d3e:	e039      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6859      	ldr	r1, [r3, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	f000 f8a1 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2150      	movs	r1, #80	; 0x50
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f8f8 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e029      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	f000 f8bf 	bl	8004ef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2160      	movs	r1, #96	; 0x60
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f8e8 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e019      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6859      	ldr	r1, [r3, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	f000 f881 	bl	8004e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2140      	movs	r1, #64	; 0x40
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f8d8 	bl	8004f4e <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e009      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f000 f8cf 	bl	8004f4e <TIM_ITRx_SetConfig>
        break;
 8004db0:	e000      	b.n	8004db4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004db2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
	...

08004dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <TIM_Base_SetConfig+0xb8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <TIM_Base_SetConfig+0xbc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x30>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a25      	ldr	r2, [pc, #148]	; (8004e90 <TIM_Base_SetConfig+0xc0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <TIM_Base_SetConfig+0xb8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d007      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <TIM_Base_SetConfig+0xbc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_Base_SetConfig+0x62>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a18      	ldr	r2, [pc, #96]	; (8004e90 <TIM_Base_SetConfig+0xc0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d108      	bne.n	8004e44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <TIM_Base_SetConfig+0xb8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	40012c00 	.word	0x40012c00
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800

08004e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 030a 	bic.w	r3, r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f023 0210 	bic.w	r2, r3, #16
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	031b      	lsls	r3, r3, #12
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	621a      	str	r2, [r3, #32]
}
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f043 0307 	orr.w	r3, r3, #7
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
 8004f8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	021a      	lsls	r2, r3, #8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	609a      	str	r2, [r3, #8]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e046      	b.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a16      	ldr	r2, [pc, #88]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005024:	d009      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a10      	ldr	r2, [pc, #64]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d10c      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005040:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	4313      	orrs	r3, r2
 800504a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800

0800507c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800507c:	b084      	sub	sp, #16
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	f107 0014 	add.w	r0, r7, #20
 800508a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	b004      	add	sp, #16
 800509a:	4770      	bx	lr

0800509c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050dc:	b29a      	uxth	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	43db      	mvns	r3, r3
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005114:	b084      	sub	sp, #16
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	f107 0014 	add.w	r0, r7, #20
 8005122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr

08005154 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005154:	b480      	push	{r7}
 8005156:	b09b      	sub	sp, #108	; 0x6c
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	78db      	ldrb	r3, [r3, #3]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d81f      	bhi.n	80051c6 <USB_ActivateEndpoint+0x72>
 8005186:	a201      	add	r2, pc, #4	; (adr r2, 800518c <USB_ActivateEndpoint+0x38>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051cf 	.word	0x080051cf
 8005198:	080051ab 	.word	0x080051ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800519c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051a8:	e012      	b.n	80051d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051b6:	e00b      	b.n	80051d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051c4:	e004      	b.n	80051d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80051cc:	e000      	b.n	80051d0 <USB_ActivateEndpoint+0x7c>
      break;
 80051ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	b29a      	uxth	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	4313      	orrs	r3, r2
 8005212:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005234:	b29b      	uxth	r3, r3
 8005236:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	7b1b      	ldrb	r3, [r3, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f040 8149 	bne.w	80054d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	785b      	ldrb	r3, [r3, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8084 	beq.w	8005354 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	011a      	lsls	r2, r3, #4
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	88db      	ldrh	r3, [r3, #6]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	81fb      	strh	r3, [r7, #14]
 800528e:	89fb      	ldrh	r3, [r7, #14]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <USB_ActivateEndpoint+0x17c>
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	81bb      	strh	r3, [r7, #12]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	441a      	add	r2, r3
 80052ba:	89bb      	ldrh	r3, [r7, #12]
 80052bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d020      	beq.n	800531a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052ee:	813b      	strh	r3, [r7, #8]
 80052f0:	893b      	ldrh	r3, [r7, #8]
 80052f2:	f083 0320 	eor.w	r3, r3, #32
 80052f6:	813b      	strh	r3, [r7, #8]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	893b      	ldrh	r3, [r7, #8]
 8005304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005314:	b29b      	uxth	r3, r3
 8005316:	8013      	strh	r3, [r2, #0]
 8005318:	e27f      	b.n	800581a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005330:	817b      	strh	r3, [r7, #10]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	897b      	ldrh	r3, [r7, #10]
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]
 8005352:	e262      	b.n	800581a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	4413      	add	r3, r2
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005370:	4413      	add	r3, r2
 8005372:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	88db      	ldrh	r3, [r3, #6]
 800537c:	085b      	lsrs	r3, r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005392:	b29b      	uxth	r3, r3
 8005394:	461a      	mov	r2, r3
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	4413      	add	r3, r2
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	011a      	lsls	r2, r3, #4
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	4413      	add	r3, r2
 80053a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053aa:	623b      	str	r3, [r7, #32]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d112      	bne.n	80053da <USB_ActivateEndpoint+0x286>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	e02f      	b.n	800543a <USB_ActivateEndpoint+0x2e6>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b3e      	cmp	r3, #62	; 0x3e
 80053e0:	d813      	bhi.n	800540a <USB_ActivateEndpoint+0x2b6>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	085b      	lsrs	r3, r3, #1
 80053e8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <USB_ActivateEndpoint+0x2a8>
 80053f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053f8:	3301      	adds	r3, #1
 80053fa:	663b      	str	r3, [r7, #96]	; 0x60
 80053fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29a      	uxth	r2, r3
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e017      	b.n	800543a <USB_ActivateEndpoint+0x2e6>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	663b      	str	r3, [r7, #96]	; 0x60
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 031f 	and.w	r3, r3, #31
 800541a:	2b00      	cmp	r3, #0
 800541c:	d102      	bne.n	8005424 <USB_ActivateEndpoint+0x2d0>
 800541e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005420:	3b01      	subs	r3, #1
 8005422:	663b      	str	r3, [r7, #96]	; 0x60
 8005424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005426:	b29b      	uxth	r3, r3
 8005428:	029b      	lsls	r3, r3, #10
 800542a:	b29b      	uxth	r3, r3
 800542c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005434:	b29a      	uxth	r2, r3
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	83fb      	strh	r3, [r7, #30]
 8005448:	8bfb      	ldrh	r3, [r7, #30]
 800544a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01b      	beq.n	800548a <USB_ActivateEndpoint+0x336>
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	b29b      	uxth	r3, r3
 8005460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005468:	83bb      	strh	r3, [r7, #28]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	441a      	add	r2, r3
 8005474:	8bbb      	ldrh	r3, [r7, #28]
 8005476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800547a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	837b      	strh	r3, [r7, #26]
 80054a2:	8b7b      	ldrh	r3, [r7, #26]
 80054a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054a8:	837b      	strh	r3, [r7, #26]
 80054aa:	8b7b      	ldrh	r3, [r7, #26]
 80054ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054b0:	837b      	strh	r3, [r7, #26]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	8b7b      	ldrh	r3, [r7, #26]
 80054be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	8013      	strh	r3, [r2, #0]
 80054d2:	e1a2      	b.n	800581a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	441a      	add	r2, r3
 80054f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80054fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005504:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550c:	b29b      	uxth	r3, r3
 800550e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	65bb      	str	r3, [r7, #88]	; 0x58
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005520:	4413      	add	r3, r2
 8005522:	65bb      	str	r3, [r7, #88]	; 0x58
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	011a      	lsls	r2, r3, #4
 800552a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800552c:	4413      	add	r3, r2
 800552e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005532:	657b      	str	r3, [r7, #84]	; 0x54
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	891b      	ldrh	r3, [r3, #8]
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	653b      	str	r3, [r7, #80]	; 0x50
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800554e:	b29b      	uxth	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005554:	4413      	add	r3, r2
 8005556:	653b      	str	r3, [r7, #80]	; 0x50
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005560:	4413      	add	r3, r2
 8005562:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	085b      	lsrs	r3, r3, #1
 800556e:	b29b      	uxth	r3, r3
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005576:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b00      	cmp	r3, #0
 800557e:	f040 8091 	bne.w	80056a4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005590:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01b      	beq.n	80055d2 <USB_ActivateEndpoint+0x47e>
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	873b      	strh	r3, [r7, #56]	; 0x38
 80055e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01b      	beq.n	8005622 <USB_ActivateEndpoint+0x4ce>
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005600:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	441a      	add	r2, r3
 800560c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800560e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800561a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800561e:	b29b      	uxth	r3, r3
 8005620:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005638:	86bb      	strh	r3, [r7, #52]	; 0x34
 800563a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800563c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005640:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005642:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005648:	86bb      	strh	r3, [r7, #52]	; 0x34
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	441a      	add	r2, r3
 8005654:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800565a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005666:	b29b      	uxth	r3, r3
 8005668:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	867b      	strh	r3, [r7, #50]	; 0x32
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	441a      	add	r2, r3
 800568c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800568e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800569a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800569e:	b29b      	uxth	r3, r3
 80056a0:	8013      	strh	r3, [r2, #0]
 80056a2:	e0ba      	b.n	800581a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d01d      	beq.n	80056fc <USB_ActivateEndpoint+0x5a8>
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	441a      	add	r2, r3
 80056e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	881b      	ldrh	r3, [r3, #0]
 8005708:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800570c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01d      	beq.n	8005754 <USB_ActivateEndpoint+0x600>
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	881b      	ldrh	r3, [r3, #0]
 8005724:	b29b      	uxth	r3, r3
 8005726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800572a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	441a      	add	r2, r3
 800573c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005750:	b29b      	uxth	r3, r3
 8005752:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	78db      	ldrb	r3, [r3, #3]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d024      	beq.n	80057a6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800577a:	f083 0320 	eor.w	r3, r3, #32
 800577e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	8013      	strh	r3, [r2, #0]
 80057a4:	e01d      	b.n	80057e2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	441a      	add	r2, r3
 80057ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057de:	b29b      	uxth	r3, r3
 80057e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800581a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800581e:	4618      	mov	r0, r3
 8005820:	376c      	adds	r7, #108	; 0x6c
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005828:	b480      	push	{r7}
 800582a:	b08d      	sub	sp, #52	; 0x34
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	7b1b      	ldrb	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 808e 	bne.w	8005958 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	785b      	ldrb	r3, [r3, #1]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d044      	beq.n	80058ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	81bb      	strh	r3, [r7, #12]
 8005852:	89bb      	ldrh	r3, [r7, #12]
 8005854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01b      	beq.n	8005894 <USB_DeactivateEndpoint+0x6c>
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	817b      	strh	r3, [r7, #10]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	441a      	add	r2, r3
 800587e:	897b      	ldrh	r3, [r7, #10]
 8005880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005890:	b29b      	uxth	r3, r3
 8005892:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058aa:	813b      	strh	r3, [r7, #8]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	441a      	add	r2, r3
 80058b6:	893b      	ldrh	r3, [r7, #8]
 80058b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	8013      	strh	r3, [r2, #0]
 80058cc:	e192      	b.n	8005bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	827b      	strh	r3, [r7, #18]
 80058dc:	8a7b      	ldrh	r3, [r7, #18]
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01b      	beq.n	800591e <USB_DeactivateEndpoint+0xf6>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	823b      	strh	r3, [r7, #16]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	8a3b      	ldrh	r3, [r7, #16]
 800590a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	81fb      	strh	r3, [r7, #14]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	441a      	add	r2, r3
 8005940:	89fb      	ldrh	r3, [r7, #14]
 8005942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	b29b      	uxth	r3, r3
 8005954:	8013      	strh	r3, [r2, #0]
 8005956:	e14d      	b.n	8005bf4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 80a5 	bne.w	8005aac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	843b      	strh	r3, [r7, #32]
 8005970:	8c3b      	ldrh	r3, [r7, #32]
 8005972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01b      	beq.n	80059b2 <USB_DeactivateEndpoint+0x18a>
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	83fb      	strh	r3, [r7, #30]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	8bfb      	ldrh	r3, [r7, #30]
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	83bb      	strh	r3, [r7, #28]
 80059c0:	8bbb      	ldrh	r3, [r7, #28]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01b      	beq.n	8005a02 <USB_DeactivateEndpoint+0x1da>
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	837b      	strh	r3, [r7, #26]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	441a      	add	r2, r3
 80059ec:	8b7b      	ldrh	r3, [r7, #26]
 80059ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	833b      	strh	r3, [r7, #24]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	8b3b      	ldrh	r3, [r7, #24]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a50:	82fb      	strh	r3, [r7, #22]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	441a      	add	r2, r3
 8005a5c:	8afb      	ldrh	r3, [r7, #22]
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	82bb      	strh	r3, [r7, #20]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	441a      	add	r2, r3
 8005a94:	8abb      	ldrh	r3, [r7, #20]
 8005a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8013      	strh	r3, [r2, #0]
 8005aaa:	e0a3      	b.n	8005bf4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <USB_DeactivateEndpoint+0x2d4>
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ada:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d01b      	beq.n	8005b4c <USB_DeactivateEndpoint+0x324>
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	441a      	add	r2, r3
 8005b36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	441a      	add	r2, r3
 8005b6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	847b      	strh	r3, [r7, #34]	; 0x22
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3734      	adds	r7, #52	; 0x34
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b0c4      	sub	sp, #272	; 0x110
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	1d3b      	adds	r3, r7, #4
 8005c08:	6018      	str	r0, [r3, #0]
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	f040 8557 	bne.w	80066c8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	463b      	mov	r3, r7
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d905      	bls.n	8005c36 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005c2a:	463b      	mov	r3, r7
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005c34:	e004      	b.n	8005c40 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005c36:	463b      	mov	r3, r7
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c40:	463b      	mov	r3, r7
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	7b1b      	ldrb	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12c      	bne.n	8005ca4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6959      	ldr	r1, [r3, #20]
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	88da      	ldrh	r2, [r3, #6]
 8005c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	1d38      	adds	r0, r7, #4
 8005c5e:	6800      	ldr	r0, [r0, #0]
 8005c60:	f001 fa2c 	bl	80070bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	1d3b      	adds	r3, r7, #4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	4413      	add	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	011a      	lsls	r2, r3, #4
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c8c:	f107 0310 	add.w	r3, r7, #16
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	f107 0310 	add.w	r3, r7, #16
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	f000 bcdd 	b.w	800665e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78db      	ldrb	r3, [r3, #3]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	f040 8347 	bne.w	800633e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	f240 82eb 	bls.w	8006298 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cdc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005ce0:	1d3b      	adds	r3, r7, #4
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	441a      	add	r2, r3
 8005cee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d10:	1ad2      	subs	r2, r2, r3
 8005d12:	463b      	mov	r3, r7
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d18:	1d3b      	adds	r3, r7, #4
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f000 8159 	beq.w	8005fe6 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d34:	1d3b      	adds	r3, r7, #4
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3a:	463b      	mov	r3, r7
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d164      	bne.n	8005e0e <USB_EPStartXfer+0x20e>
 8005d44:	1d3b      	adds	r3, r7, #4
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	4413      	add	r3, r2
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5c:	463b      	mov	r3, r7
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d112      	bne.n	8005d9c <USB_EPStartXfer+0x19c>
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	801a      	strh	r2, [r3, #0]
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	e054      	b.n	8005e46 <USB_EPStartXfer+0x246>
 8005d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da0:	2b3e      	cmp	r3, #62	; 0x3e
 8005da2:	d817      	bhi.n	8005dd4 <USB_EPStartXfer+0x1d4>
 8005da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da8:	085b      	lsrs	r3, r3, #1
 8005daa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d004      	beq.n	8005dc4 <USB_EPStartXfer+0x1c4>
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	029b      	lsls	r3, r3, #10
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd0:	801a      	strh	r2, [r3, #0]
 8005dd2:	e038      	b.n	8005e46 <USB_EPStartXfer+0x246>
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <USB_EPStartXfer+0x1f4>
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	029b      	lsls	r3, r3, #10
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	e01b      	b.n	8005e46 <USB_EPStartXfer+0x246>
 8005e0e:	463b      	mov	r3, r7
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d116      	bne.n	8005e46 <USB_EPStartXfer+0x246>
 8005e18:	1d3b      	adds	r3, r7, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	461a      	mov	r2, r3
 8005e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e26:	4413      	add	r3, r2
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	011a      	lsls	r2, r3, #4
 8005e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e34:	4413      	add	r3, r2
 8005e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8005e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e46:	463b      	mov	r3, r7
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	895b      	ldrh	r3, [r3, #10]
 8005e4c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e50:	463b      	mov	r3, r7
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6959      	ldr	r1, [r3, #20]
 8005e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e60:	1d38      	adds	r0, r7, #4
 8005e62:	6800      	ldr	r0, [r0, #0]
 8005e64:	f001 f92a 	bl	80070bc <USB_WritePMA>
            ep->xfer_buff += len;
 8005e68:	463b      	mov	r3, r7
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e72:	441a      	add	r2, r3
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e7a:	463b      	mov	r3, r7
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d909      	bls.n	8005e9e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e94:	1ad2      	subs	r2, r2, r3
 8005e96:	463b      	mov	r3, r7
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	621a      	str	r2, [r3, #32]
 8005e9c:	e008      	b.n	8005eb0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005ea8:	463b      	mov	r3, r7
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2200      	movs	r2, #0
 8005eae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d164      	bne.n	8005f84 <USB_EPStartXfer+0x384>
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	4413      	add	r3, r2
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d112      	bne.n	8005f12 <USB_EPStartXfer+0x312>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e057      	b.n	8005fc2 <USB_EPStartXfer+0x3c2>
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	2b3e      	cmp	r3, #62	; 0x3e
 8005f18:	d817      	bhi.n	8005f4a <USB_EPStartXfer+0x34a>
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <USB_EPStartXfer+0x33a>
 8005f30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f34:	3301      	adds	r3, #1
 8005f36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e03b      	b.n	8005fc2 <USB_EPStartXfer+0x3c2>
 8005f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0x36a>
 8005f60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e01e      	b.n	8005fc2 <USB_EPStartXfer+0x3c2>
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d119      	bne.n	8005fc2 <USB_EPStartXfer+0x3c2>
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	4413      	add	r3, r2
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	011a      	lsls	r2, r3, #4
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	891b      	ldrh	r3, [r3, #8]
 8005fc8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6959      	ldr	r1, [r3, #20]
 8005fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005fdc:	1d38      	adds	r0, r7, #4
 8005fde:	6800      	ldr	r0, [r0, #0]
 8005fe0:	f001 f86c 	bl	80070bc <USB_WritePMA>
 8005fe4:	e33b      	b.n	800665e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fe6:	463b      	mov	r3, r7
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d164      	bne.n	80060ba <USB_EPStartXfer+0x4ba>
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ff6:	1d3b      	adds	r3, r7, #4
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006004:	4413      	add	r3, r2
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	463b      	mov	r3, r7
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	011a      	lsls	r2, r3, #4
 8006010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006012:	4413      	add	r3, r2
 8006014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006018:	64bb      	str	r3, [r7, #72]	; 0x48
 800601a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d112      	bne.n	8006048 <USB_EPStartXfer+0x448>
 8006022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800602c:	b29a      	uxth	r2, r3
 800602e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29a      	uxth	r2, r3
 8006042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	e057      	b.n	80060f8 <USB_EPStartXfer+0x4f8>
 8006048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604c:	2b3e      	cmp	r3, #62	; 0x3e
 800604e:	d817      	bhi.n	8006080 <USB_EPStartXfer+0x480>
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <USB_EPStartXfer+0x470>
 8006066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606a:	3301      	adds	r3, #1
 800606c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006074:	b29b      	uxth	r3, r3
 8006076:	029b      	lsls	r3, r3, #10
 8006078:	b29a      	uxth	r2, r3
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e03b      	b.n	80060f8 <USB_EPStartXfer+0x4f8>
 8006080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800608a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <USB_EPStartXfer+0x4a0>
 8006096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800609a:	3b01      	subs	r3, #1
 800609c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80060a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	029b      	lsls	r3, r3, #10
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	e01e      	b.n	80060f8 <USB_EPStartXfer+0x4f8>
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	785b      	ldrb	r3, [r3, #1]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d119      	bne.n	80060f8 <USB_EPStartXfer+0x4f8>
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	657b      	str	r3, [r7, #84]	; 0x54
 80060ca:	1d3b      	adds	r3, r7, #4
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	461a      	mov	r2, r3
 80060d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d8:	4413      	add	r3, r2
 80060da:	657b      	str	r3, [r7, #84]	; 0x54
 80060dc:	463b      	mov	r3, r7
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	011a      	lsls	r2, r3, #4
 80060e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060e6:	4413      	add	r3, r2
 80060e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ec:	653b      	str	r3, [r7, #80]	; 0x50
 80060ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	891b      	ldrh	r3, [r3, #8]
 80060fe:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006102:	463b      	mov	r3, r7
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6959      	ldr	r1, [r3, #20]
 8006108:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800610c:	b29b      	uxth	r3, r3
 800610e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006112:	1d38      	adds	r0, r7, #4
 8006114:	6800      	ldr	r0, [r0, #0]
 8006116:	f000 ffd1 	bl	80070bc <USB_WritePMA>
            ep->xfer_buff += len;
 800611a:	463b      	mov	r3, r7
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006124:	441a      	add	r2, r3
 8006126:	463b      	mov	r3, r7
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800612c:	463b      	mov	r3, r7
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	463b      	mov	r3, r7
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	429a      	cmp	r2, r3
 800613a:	d909      	bls.n	8006150 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006146:	1ad2      	subs	r2, r2, r3
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	621a      	str	r2, [r3, #32]
 800614e:	e008      	b.n	8006162 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006150:	463b      	mov	r3, r7
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800615a:	463b      	mov	r3, r7
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2200      	movs	r2, #0
 8006160:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006162:	1d3b      	adds	r3, r7, #4
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	647b      	str	r3, [r7, #68]	; 0x44
 8006168:	463b      	mov	r3, r7
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d164      	bne.n	800623c <USB_EPStartXfer+0x63c>
 8006172:	1d3b      	adds	r3, r7, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006178:	1d3b      	adds	r3, r7, #4
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006180:	b29b      	uxth	r3, r3
 8006182:	461a      	mov	r2, r3
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	4413      	add	r3, r2
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	011a      	lsls	r2, r3, #4
 8006192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006194:	4413      	add	r3, r2
 8006196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
 800619c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d112      	bne.n	80061ca <USB_EPStartXfer+0x5ca>
 80061a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e054      	b.n	8006274 <USB_EPStartXfer+0x674>
 80061ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ce:	2b3e      	cmp	r3, #62	; 0x3e
 80061d0:	d817      	bhi.n	8006202 <USB_EPStartXfer+0x602>
 80061d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <USB_EPStartXfer+0x5f2>
 80061e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061ec:	3301      	adds	r3, #1
 80061ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80061f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	e038      	b.n	8006274 <USB_EPStartXfer+0x674>
 8006202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800620c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006210:	f003 031f 	and.w	r3, r3, #31
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USB_EPStartXfer+0x622>
 8006218:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800621c:	3b01      	subs	r3, #1
 800621e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006226:	b29b      	uxth	r3, r3
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006234:	b29a      	uxth	r2, r3
 8006236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006238:	801a      	strh	r2, [r3, #0]
 800623a:	e01b      	b.n	8006274 <USB_EPStartXfer+0x674>
 800623c:	463b      	mov	r3, r7
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	785b      	ldrb	r3, [r3, #1]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d116      	bne.n	8006274 <USB_EPStartXfer+0x674>
 8006246:	1d3b      	adds	r3, r7, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006254:	4413      	add	r3, r2
 8006256:	647b      	str	r3, [r7, #68]	; 0x44
 8006258:	463b      	mov	r3, r7
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	011a      	lsls	r2, r3, #4
 8006260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006262:	4413      	add	r3, r2
 8006264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006268:	643b      	str	r3, [r7, #64]	; 0x40
 800626a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626e:	b29a      	uxth	r2, r3
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006274:	463b      	mov	r3, r7
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	895b      	ldrh	r3, [r3, #10]
 800627a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800627e:	463b      	mov	r3, r7
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6959      	ldr	r1, [r3, #20]
 8006284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006288:	b29b      	uxth	r3, r3
 800628a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800628e:	1d38      	adds	r0, r7, #4
 8006290:	6800      	ldr	r0, [r0, #0]
 8006292:	f000 ff13 	bl	80070bc <USB_WritePMA>
 8006296:	e1e2      	b.n	800665e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	463b      	mov	r3, r7
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80062b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80062c0:	1d3b      	adds	r3, r7, #4
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	463b      	mov	r3, r7
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80062d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062e6:	1d3b      	adds	r3, r7, #4
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	663b      	str	r3, [r7, #96]	; 0x60
 80062ec:	1d3b      	adds	r3, r7, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fa:	4413      	add	r3, r2
 80062fc:	663b      	str	r3, [r7, #96]	; 0x60
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006308:	4413      	add	r3, r2
 800630a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800630e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006314:	b29a      	uxth	r2, r3
 8006316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006318:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	891b      	ldrh	r3, [r3, #8]
 8006320:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6959      	ldr	r1, [r3, #20]
 800632a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800632e:	b29b      	uxth	r3, r3
 8006330:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006334:	1d38      	adds	r0, r7, #4
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	f000 fec0 	bl	80070bc <USB_WritePMA>
 800633c:	e18f      	b.n	800665e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800633e:	1d3b      	adds	r3, r7, #4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	463b      	mov	r3, r7
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 808f 	beq.w	8006478 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006360:	463b      	mov	r3, r7
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d164      	bne.n	8006434 <USB_EPStartXfer+0x834>
 800636a:	1d3b      	adds	r3, r7, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	673b      	str	r3, [r7, #112]	; 0x70
 8006370:	1d3b      	adds	r3, r7, #4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800637e:	4413      	add	r3, r2
 8006380:	673b      	str	r3, [r7, #112]	; 0x70
 8006382:	463b      	mov	r3, r7
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	011a      	lsls	r2, r3, #4
 800638a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800638c:	4413      	add	r3, r2
 800638e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d112      	bne.n	80063c2 <USB_EPStartXfer+0x7c2>
 800639c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e054      	b.n	800646c <USB_EPStartXfer+0x86c>
 80063c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063c6:	2b3e      	cmp	r3, #62	; 0x3e
 80063c8:	d817      	bhi.n	80063fa <USB_EPStartXfer+0x7fa>
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d004      	beq.n	80063ea <USB_EPStartXfer+0x7ea>
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	3301      	adds	r3, #1
 80063e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e038      	b.n	800646c <USB_EPStartXfer+0x86c>
 80063fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <USB_EPStartXfer+0x81a>
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006414:	3b01      	subs	r3, #1
 8006416:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641e:	b29b      	uxth	r3, r3
 8006420:	029b      	lsls	r3, r3, #10
 8006422:	b29b      	uxth	r3, r3
 8006424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800642c:	b29a      	uxth	r2, r3
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e01b      	b.n	800646c <USB_EPStartXfer+0x86c>
 8006434:	463b      	mov	r3, r7
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	785b      	ldrb	r3, [r3, #1]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d116      	bne.n	800646c <USB_EPStartXfer+0x86c>
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800644c:	4413      	add	r3, r2
 800644e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	011a      	lsls	r2, r3, #4
 8006458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645a:	4413      	add	r3, r2
 800645c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006460:	677b      	str	r3, [r7, #116]	; 0x74
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	b29a      	uxth	r2, r3
 8006468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800646a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800646c:	463b      	mov	r3, r7
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	895b      	ldrh	r3, [r3, #10]
 8006472:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006476:	e097      	b.n	80065a8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006478:	463b      	mov	r3, r7
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d168      	bne.n	8006554 <USB_EPStartXfer+0x954>
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800648a:	1d3b      	adds	r3, r7, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006492:	b29b      	uxth	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800649a:	4413      	add	r3, r2
 800649c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80064a0:	463b      	mov	r3, r7
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	011a      	lsls	r2, r3, #4
 80064a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80064ac:	4413      	add	r3, r2
 80064ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d112      	bne.n	80064e2 <USB_EPStartXfer+0x8e2>
 80064bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ca:	801a      	strh	r2, [r3, #0]
 80064cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	e05d      	b.n	800659e <USB_EPStartXfer+0x99e>
 80064e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064e6:	2b3e      	cmp	r3, #62	; 0x3e
 80064e8:	d817      	bhi.n	800651a <USB_EPStartXfer+0x91a>
 80064ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80064f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <USB_EPStartXfer+0x90a>
 8006500:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006504:	3301      	adds	r3, #1
 8006506:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800650a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800650e:	b29b      	uxth	r3, r3
 8006510:	029b      	lsls	r3, r3, #10
 8006512:	b29a      	uxth	r2, r3
 8006514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006516:	801a      	strh	r2, [r3, #0]
 8006518:	e041      	b.n	800659e <USB_EPStartXfer+0x99e>
 800651a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006528:	f003 031f 	and.w	r3, r3, #31
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <USB_EPStartXfer+0x93a>
 8006530:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006534:	3b01      	subs	r3, #1
 8006536:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800653a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800653e:	b29b      	uxth	r3, r3
 8006540:	029b      	lsls	r3, r3, #10
 8006542:	b29b      	uxth	r3, r3
 8006544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654c:	b29a      	uxth	r2, r3
 800654e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	e024      	b.n	800659e <USB_EPStartXfer+0x99e>
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d11f      	bne.n	800659e <USB_EPStartXfer+0x99e>
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006576:	4413      	add	r3, r2
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800657c:	463b      	mov	r3, r7
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	011a      	lsls	r2, r3, #4
 8006584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006588:	4413      	add	r3, r2
 800658a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800658e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800659c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800659e:	463b      	mov	r3, r7
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	891b      	ldrh	r3, [r3, #8]
 80065a4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065a8:	463b      	mov	r3, r7
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6959      	ldr	r1, [r3, #20]
 80065ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80065b8:	1d38      	adds	r0, r7, #4
 80065ba:	6800      	ldr	r0, [r0, #0]
 80065bc:	f000 fd7e 	bl	80070bc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80065c0:	463b      	mov	r3, r7
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	785b      	ldrb	r3, [r3, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d122      	bne.n	8006610 <USB_EPStartXfer+0xa10>
 80065ca:	1d3b      	adds	r3, r7, #4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	463b      	mov	r3, r7
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	463b      	mov	r3, r7
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	441a      	add	r2, r3
 80065f6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80065fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800660a:	b29b      	uxth	r3, r3
 800660c:	8013      	strh	r3, [r2, #0]
 800660e:	e026      	b.n	800665e <USB_EPStartXfer+0xa5e>
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d121      	bne.n	800665e <USB_EPStartXfer+0xa5e>
 800661a:	1d3b      	adds	r3, r7, #4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	463b      	mov	r3, r7
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	b29b      	uxth	r3, r3
 800662c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	441a      	add	r2, r3
 8006646:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800664a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	b29b      	uxth	r3, r3
 800665c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	b29b      	uxth	r3, r3
 8006670:	f107 020e 	add.w	r2, r7, #14
 8006674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	8013      	strh	r3, [r2, #0]
 800667e:	f107 030e 	add.w	r3, r7, #14
 8006682:	f107 020e 	add.w	r2, r7, #14
 8006686:	8812      	ldrh	r2, [r2, #0]
 8006688:	f082 0210 	eor.w	r2, r2, #16
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	f107 030e 	add.w	r3, r7, #14
 8006692:	f107 020e 	add.w	r2, r7, #14
 8006696:	8812      	ldrh	r2, [r2, #0]
 8006698:	f082 0220 	eor.w	r2, r2, #32
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	1d3b      	adds	r3, r7, #4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	441a      	add	r2, r3
 80066ac:	f107 030e 	add.w	r3, r7, #14
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	8013      	strh	r3, [r2, #0]
 80066c6:	e3b5      	b.n	8006e34 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	7b1b      	ldrb	r3, [r3, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 8090 	bne.w	80067f4 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80066d4:	463b      	mov	r3, r7
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d90e      	bls.n	8006702 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80066ee:	463b      	mov	r3, r7
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	619a      	str	r2, [r3, #24]
 8006700:	e008      	b.n	8006714 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006702:	463b      	mov	r3, r7
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800670c:	463b      	mov	r3, r7
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006724:	b29b      	uxth	r3, r3
 8006726:	461a      	mov	r2, r3
 8006728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800672c:	4413      	add	r3, r2
 800672e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006732:	463b      	mov	r3, r7
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	011a      	lsls	r2, r3, #4
 800673a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800673e:	4413      	add	r3, r2
 8006740:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d116      	bne.n	800677e <USB_EPStartXfer+0xb7e>
 8006750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006768:	881b      	ldrh	r3, [r3, #0]
 800676a:	b29b      	uxth	r3, r3
 800676c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800677a:	801a      	strh	r2, [r3, #0]
 800677c:	e32c      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	2b3e      	cmp	r3, #62	; 0x3e
 8006784:	d818      	bhi.n	80067b8 <USB_EPStartXfer+0xbb8>
 8006786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d004      	beq.n	80067a6 <USB_EPStartXfer+0xba6>
 800679c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067a0:	3301      	adds	r3, #1
 80067a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e30f      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
 80067b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USB_EPStartXfer+0xbd8>
 80067ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e2f1      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80067f4:	463b      	mov	r3, r7
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	f040 818f 	bne.w	8006b1e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006800:	463b      	mov	r3, r7
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	785b      	ldrb	r3, [r3, #1]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d175      	bne.n	80068f6 <USB_EPStartXfer+0xcf6>
 800680a:	1d3b      	adds	r3, r7, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006812:	1d3b      	adds	r3, r7, #4
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681a:	b29b      	uxth	r3, r3
 800681c:	461a      	mov	r2, r3
 800681e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006822:	4413      	add	r3, r2
 8006824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	011a      	lsls	r2, r3, #4
 8006830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006834:	4413      	add	r3, r2
 8006836:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800683a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d116      	bne.n	8006876 <USB_EPStartXfer+0xc76>
 8006848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006854:	b29a      	uxth	r2, r3
 8006856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800685a:	801a      	strh	r2, [r3, #0]
 800685c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800686c:	b29a      	uxth	r2, r3
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e065      	b.n	8006942 <USB_EPStartXfer+0xd42>
 8006876:	463b      	mov	r3, r7
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b3e      	cmp	r3, #62	; 0x3e
 800687e:	d81a      	bhi.n	80068b6 <USB_EPStartXfer+0xcb6>
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	085b      	lsrs	r3, r3, #1
 8006888:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800688c:	463b      	mov	r3, r7
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <USB_EPStartXfer+0xca4>
 800689a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800689e:	3301      	adds	r3, #1
 80068a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	029b      	lsls	r3, r3, #10
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e045      	b.n	8006942 <USB_EPStartXfer+0xd42>
 80068b6:	463b      	mov	r3, r7
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <USB_EPStartXfer+0xcda>
 80068d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068d4:	3b01      	subs	r3, #1
 80068d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068de:	b29b      	uxth	r3, r3
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e025      	b.n	8006942 <USB_EPStartXfer+0xd42>
 80068f6:	463b      	mov	r3, r7
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d120      	bne.n	8006942 <USB_EPStartXfer+0xd42>
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006908:	1d3b      	adds	r3, r7, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006910:	b29b      	uxth	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006918:	4413      	add	r3, r2
 800691a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800691e:	463b      	mov	r3, r7
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	011a      	lsls	r2, r3, #4
 8006926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800692a:	4413      	add	r3, r2
 800692c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006934:	463b      	mov	r3, r7
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	b29a      	uxth	r2, r3
 800693c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006940:	801a      	strh	r2, [r3, #0]
 8006942:	1d3b      	adds	r3, r7, #4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800694a:	463b      	mov	r3, r7
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d175      	bne.n	8006a40 <USB_EPStartXfer+0xe40>
 8006954:	1d3b      	adds	r3, r7, #4
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800695c:	1d3b      	adds	r3, r7, #4
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006964:	b29b      	uxth	r3, r3
 8006966:	461a      	mov	r2, r3
 8006968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800696c:	4413      	add	r3, r2
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	011a      	lsls	r2, r3, #4
 800697a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800697e:	4413      	add	r3, r2
 8006980:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006988:	463b      	mov	r3, r7
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d116      	bne.n	80069c0 <USB_EPStartXfer+0xdc0>
 8006992:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800699e:	b29a      	uxth	r2, r3
 80069a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069a4:	801a      	strh	r2, [r3, #0]
 80069a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	e061      	b.n	8006a84 <USB_EPStartXfer+0xe84>
 80069c0:	463b      	mov	r3, r7
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b3e      	cmp	r3, #62	; 0x3e
 80069c8:	d81a      	bhi.n	8006a00 <USB_EPStartXfer+0xe00>
 80069ca:	463b      	mov	r3, r7
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	085b      	lsrs	r3, r3, #1
 80069d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <USB_EPStartXfer+0xdee>
 80069e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e8:	3301      	adds	r3, #1
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	e041      	b.n	8006a84 <USB_EPStartXfer+0xe84>
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <USB_EPStartXfer+0xe24>
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e021      	b.n	8006a84 <USB_EPStartXfer+0xe84>
 8006a40:	463b      	mov	r3, r7
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d11c      	bne.n	8006a84 <USB_EPStartXfer+0xe84>
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a60:	463b      	mov	r3, r7
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	011a      	lsls	r2, r3, #4
 8006a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006a82:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006a84:	463b      	mov	r3, r7
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 81a4 	beq.w	8006dd8 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	463b      	mov	r3, r7
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006aa4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <USB_EPStartXfer+0xebc>
 8006ab0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10d      	bne.n	8006ad8 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006abc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f040 8187 	bne.w	8006dd8 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006aca:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8180 	bne.w	8006dd8 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006ad8:	1d3b      	adds	r3, r7, #4
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	463b      	mov	r3, r7
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006af6:	1d3b      	adds	r3, r7, #4
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	8013      	strh	r3, [r2, #0]
 8006b1c:	e15c      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006b1e:	463b      	mov	r3, r7
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	78db      	ldrb	r3, [r3, #3]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	f040 8155 	bne.w	8006dd4 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006b2a:	463b      	mov	r3, r7
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699a      	ldr	r2, [r3, #24]
 8006b30:	463b      	mov	r3, r7
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d90e      	bls.n	8006b58 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006b3a:	463b      	mov	r3, r7
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006b44:	463b      	mov	r3, r7
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	463b      	mov	r3, r7
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	619a      	str	r2, [r3, #24]
 8006b56:	e008      	b.n	8006b6a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006b62:	463b      	mov	r3, r7
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	785b      	ldrb	r3, [r3, #1]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d16f      	bne.n	8006c54 <USB_EPStartXfer+0x1054>
 8006b74:	1d3b      	adds	r3, r7, #4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b7c:	1d3b      	adds	r3, r7, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b92:	463b      	mov	r3, r7
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	011a      	lsls	r2, r3, #4
 8006b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d116      	bne.n	8006bde <USB_EPStartXfer+0xfde>
 8006bb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bc2:	801a      	strh	r2, [r3, #0]
 8006bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	e05f      	b.n	8006c9e <USB_EPStartXfer+0x109e>
 8006bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be2:	2b3e      	cmp	r3, #62	; 0x3e
 8006be4:	d818      	bhi.n	8006c18 <USB_EPStartXfer+0x1018>
 8006be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bf4:	f003 0301 	and.w	r3, r3, #1
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d004      	beq.n	8006c06 <USB_EPStartXfer+0x1006>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c00:	3301      	adds	r3, #1
 8006c02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	029b      	lsls	r3, r3, #10
 8006c0e:	b29a      	uxth	r2, r3
 8006c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c14:	801a      	strh	r2, [r3, #0]
 8006c16:	e042      	b.n	8006c9e <USB_EPStartXfer+0x109e>
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1c:	095b      	lsrs	r3, r3, #5
 8006c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d104      	bne.n	8006c38 <USB_EPStartXfer+0x1038>
 8006c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c32:	3b01      	subs	r3, #1
 8006c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	029b      	lsls	r3, r3, #10
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	e024      	b.n	8006c9e <USB_EPStartXfer+0x109e>
 8006c54:	463b      	mov	r3, r7
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	785b      	ldrb	r3, [r3, #1]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d11f      	bne.n	8006c9e <USB_EPStartXfer+0x109e>
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c76:	4413      	add	r3, r2
 8006c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	011a      	lsls	r2, r3, #4
 8006c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c88:	4413      	add	r3, r2
 8006c8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c9c:	801a      	strh	r2, [r3, #0]
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ca6:	463b      	mov	r3, r7
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d16f      	bne.n	8006d90 <USB_EPStartXfer+0x1190>
 8006cb0:	1d3b      	adds	r3, r7, #4
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cb8:	1d3b      	adds	r3, r7, #4
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cc8:	4413      	add	r3, r2
 8006cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cce:	463b      	mov	r3, r7
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	011a      	lsls	r2, r3, #4
 8006cd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cda:	4413      	add	r3, r2
 8006cdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006ce4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d116      	bne.n	8006d1a <USB_EPStartXfer+0x111a>
 8006cec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cf0:	881b      	ldrh	r3, [r3, #0]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cfe:	801a      	strh	r2, [r3, #0]
 8006d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d16:	801a      	strh	r2, [r3, #0]
 8006d18:	e05e      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
 8006d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d20:	d818      	bhi.n	8006d54 <USB_EPStartXfer+0x1154>
 8006d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d26:	085b      	lsrs	r3, r3, #1
 8006d28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d004      	beq.n	8006d42 <USB_EPStartXfer+0x1142>
 8006d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d50:	801a      	strh	r2, [r3, #0]
 8006d52:	e041      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
 8006d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d58:	095b      	lsrs	r3, r3, #5
 8006d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <USB_EPStartXfer+0x1174>
 8006d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	029b      	lsls	r3, r3, #10
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006d8c:	801a      	strh	r2, [r3, #0]
 8006d8e:	e023      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
 8006d90:	463b      	mov	r3, r7
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d11e      	bne.n	8006dd8 <USB_EPStartXfer+0x11d8>
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006daa:	4413      	add	r3, r2
 8006dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006db0:	463b      	mov	r3, r7
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	011a      	lsls	r2, r3, #4
 8006db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dd0:	801a      	strh	r2, [r3, #0]
 8006dd2:	e001      	b.n	8006dd8 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e02e      	b.n	8006e36 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	463b      	mov	r3, r7
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	881b      	ldrh	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006df6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006dfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dfe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	463b      	mov	r3, r7
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d020      	beq.n	8006e94 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e68:	81bb      	strh	r3, [r7, #12]
 8006e6a:	89bb      	ldrh	r3, [r7, #12]
 8006e6c:	f083 0310 	eor.w	r3, r3, #16
 8006e70:	81bb      	strh	r3, [r7, #12]
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	441a      	add	r2, r3
 8006e7c:	89bb      	ldrh	r3, [r7, #12]
 8006e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	8013      	strh	r3, [r2, #0]
 8006e92:	e01f      	b.n	8006ed4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4413      	add	r3, r2
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eaa:	81fb      	strh	r3, [r7, #14]
 8006eac:	89fb      	ldrh	r3, [r7, #14]
 8006eae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eb2:	81fb      	strh	r3, [r7, #14]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	89fb      	ldrh	r3, [r7, #14]
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr

08006ee0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	7b1b      	ldrb	r3, [r3, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f040 809d 	bne.w	800702e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d04c      	beq.n	8006f96 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	823b      	strh	r3, [r7, #16]
 8006f0a:	8a3b      	ldrh	r3, [r7, #16]
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <USB_EPClearStall+0x6c>
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	81fb      	strh	r3, [r7, #14]
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	441a      	add	r2, r3
 8006f36:	89fb      	ldrh	r3, [r7, #14]
 8006f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	78db      	ldrb	r3, [r3, #3]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d06c      	beq.n	800702e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6a:	81bb      	strh	r3, [r7, #12]
 8006f6c:	89bb      	ldrh	r3, [r7, #12]
 8006f6e:	f083 0320 	eor.w	r3, r3, #32
 8006f72:	81bb      	strh	r3, [r7, #12]
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	441a      	add	r2, r3
 8006f7e:	89bb      	ldrh	r3, [r7, #12]
 8006f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
 8006f94:	e04b      	b.n	800702e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	82fb      	strh	r3, [r7, #22]
 8006fa4:	8afb      	ldrh	r3, [r7, #22]
 8006fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01b      	beq.n	8006fe6 <USB_EPClearStall+0x106>
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	82bb      	strh	r3, [r7, #20]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	8abb      	ldrh	r3, [r7, #20]
 8006fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	827b      	strh	r3, [r7, #18]
 8006ffe:	8a7b      	ldrh	r3, [r7, #18]
 8007000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007004:	827b      	strh	r3, [r7, #18]
 8007006:	8a7b      	ldrh	r3, [r7, #18]
 8007008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800700c:	827b      	strh	r3, [r7, #18]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	8a7b      	ldrh	r3, [r7, #18]
 800701a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	b29b      	uxth	r3, r3
 800702c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr

0800703a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007046:	78fb      	ldrb	r3, [r7, #3]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d103      	bne.n	8007054 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2280      	movs	r2, #128	; 0x80
 8007050:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr

08007060 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr

08007074 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007096:	b29b      	uxth	r3, r3
 8007098:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800709a:	68fb      	ldr	r3, [r7, #12]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bc80      	pop	{r7}
 80070a4:	4770      	bx	lr

080070a6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070bc:	b480      	push	{r7}
 80070be:	b08d      	sub	sp, #52	; 0x34
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4611      	mov	r1, r2
 80070c8:	461a      	mov	r2, r3
 80070ca:	460b      	mov	r3, r1
 80070cc:	80fb      	strh	r3, [r7, #6]
 80070ce:	4613      	mov	r3, r2
 80070d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070d2:	88bb      	ldrh	r3, [r7, #4]
 80070d4:	3301      	adds	r3, #1
 80070d6:	085b      	lsrs	r3, r3, #1
 80070d8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	005a      	lsls	r2, r3, #1
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f4:	e01e      	b.n	8007134 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	3301      	adds	r3, #1
 8007100:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	b29b      	uxth	r3, r3
 800710c:	461a      	mov	r2, r3
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	b29a      	uxth	r2, r3
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800711c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711e:	3302      	adds	r3, #2
 8007120:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007124:	3302      	adds	r3, #2
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	3301      	adds	r3, #1
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	3b01      	subs	r3, #1
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1dd      	bne.n	80070f6 <USB_WritePMA+0x3a>
  }
}
 800713a:	bf00      	nop
 800713c:	3734      	adds	r7, #52	; 0x34
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007144:	b480      	push	{r7}
 8007146:	b08b      	sub	sp, #44	; 0x2c
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4611      	mov	r1, r2
 8007150:	461a      	mov	r2, r3
 8007152:	460b      	mov	r3, r1
 8007154:	80fb      	strh	r3, [r7, #6]
 8007156:	4613      	mov	r3, r2
 8007158:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800715a:	88bb      	ldrh	r3, [r7, #4]
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	b29b      	uxth	r3, r3
 8007160:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	005a      	lsls	r2, r3, #1
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007176:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
 800717c:	e01b      	b.n	80071b6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	3302      	adds	r3, #2
 800718a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	b2da      	uxtb	r2, r3
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	3301      	adds	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	0a1b      	lsrs	r3, r3, #8
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	3301      	adds	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	3302      	adds	r3, #2
 80071ae:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	3b01      	subs	r3, #1
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e0      	bne.n	800717e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071bc:	88bb      	ldrh	r3, [r7, #4]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d007      	beq.n	80071d8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	881b      	ldrh	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	701a      	strb	r2, [r3, #0]
  }
}
 80071d8:	bf00      	nop
 80071da:	372c      	adds	r7, #44	; 0x2c
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
	...

080071e4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80071f0:	2308      	movs	r3, #8
 80071f2:	2203      	movs	r2, #3
 80071f4:	2181      	movs	r1, #129	; 0x81
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fc99 	bl	8008b2e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8007202:	2301      	movs	r3, #1
 8007204:	2203      	movs	r2, #3
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 fc90 	bl	8008b2e <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800720e:	2010      	movs	r0, #16
 8007210:	f001 fda2 	bl	8008d58 <USBD_static_malloc>
 8007214:	4602      	mov	r2, r0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 800721c:	2301      	movs	r3, #1
 800721e:	4a0b      	ldr	r2, [pc, #44]	; (800724c <USBD_HID_Init+0x68>)
 8007220:	2101      	movs	r1, #1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fd74 	bl	8008d10 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8007232:	2302      	movs	r3, #2
 8007234:	e005      	b.n	8007242 <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723c:	2200      	movs	r2, #0
 800723e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20001625 	.word	0x20001625

08007250 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007262:	2301      	movs	r3, #1
 8007264:	4a06      	ldr	r2, [pc, #24]	; (8007280 <USBD_HID_DataOut+0x30>)
 8007266:	2101      	movs	r1, #1
 8007268:	f7fb ffad 	bl	80031c6 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <USBD_HID_DataOut+0x30>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f7fa fe91 	bl	8001f98 <SET_LEDS_Callback>

	return USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20001625 	.word	0x20001625

08007284 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007290:	2181      	movs	r1, #129	; 0x81
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fc71 	bl	8008b7a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d009      	beq.n	80072bc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	4618      	mov	r0, r3
 80072b0:	f001 fd5e 	bl	8008d70 <USBD_static_free>
    pdev->pClassData = NULL;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d045      	beq.n	8007382 <USBD_HID_Setup+0xba>
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	f040 80d3 	bne.w	80074a2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	3b02      	subs	r3, #2
 8007302:	2b09      	cmp	r3, #9
 8007304:	d835      	bhi.n	8007372 <USBD_HID_Setup+0xaa>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <USBD_HID_Setup+0x44>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007363 	.word	0x08007363
 8007310:	08007343 	.word	0x08007343
 8007314:	08007373 	.word	0x08007373
 8007318:	08007373 	.word	0x08007373
 800731c:	08007373 	.word	0x08007373
 8007320:	08007373 	.word	0x08007373
 8007324:	08007373 	.word	0x08007373
 8007328:	08007373 	.word	0x08007373
 800732c:	08007351 	.word	0x08007351
 8007330:	08007335 	.word	0x08007335
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	601a      	str	r2, [r3, #0]
          break;
 8007340:	e01e      	b.n	8007380 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2201      	movs	r2, #1
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f937 	bl	80085bc <USBD_CtlSendData>
          break;
 800734e:	e017      	b.n	8007380 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	885b      	ldrh	r3, [r3, #2]
 8007354:	0a1b      	lsrs	r3, r3, #8
 8007356:	b29b      	uxth	r3, r3
 8007358:	b2db      	uxtb	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	605a      	str	r2, [r3, #4]
          break;
 8007360:	e00e      	b.n	8007380 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	3304      	adds	r3, #4
 8007366:	2201      	movs	r2, #1
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 f926 	bl	80085bc <USBD_CtlSendData>
          break;
 8007370:	e006      	b.n	8007380 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f8b7 	bl	80084e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800737a:	2302      	movs	r3, #2
 800737c:	75fb      	strb	r3, [r7, #23]
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e096      	b.n	80074b0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	2b0b      	cmp	r3, #11
 8007388:	f200 8083 	bhi.w	8007492 <USBD_HID_Setup+0x1ca>
 800738c:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <USBD_HID_Setup+0xcc>)
 800738e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007392:	bf00      	nop
 8007394:	080073c5 	.word	0x080073c5
 8007398:	08007493 	.word	0x08007493
 800739c:	08007493 	.word	0x08007493
 80073a0:	08007493 	.word	0x08007493
 80073a4:	08007493 	.word	0x08007493
 80073a8:	08007493 	.word	0x08007493
 80073ac:	080073ed 	.word	0x080073ed
 80073b0:	08007493 	.word	0x08007493
 80073b4:	08007493 	.word	0x08007493
 80073b8:	08007493 	.word	0x08007493
 80073bc:	08007445 	.word	0x08007445
 80073c0:	0800746d 	.word	0x0800746d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d107      	bne.n	80073de <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80073ce:	f107 030e 	add.w	r3, r7, #14
 80073d2:	2202      	movs	r2, #2
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 f8f0 	bl	80085bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073dc:	e060      	b.n	80074a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f881 	bl	80084e8 <USBD_CtlError>
            ret = USBD_FAIL;
 80073e6:	2302      	movs	r3, #2
 80073e8:	75fb      	strb	r3, [r7, #23]
          break;
 80073ea:	e059      	b.n	80074a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	0a1b      	lsrs	r3, r3, #8
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b22      	cmp	r3, #34	; 0x22
 80073f6:	d108      	bne.n	800740a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	2b73      	cmp	r3, #115	; 0x73
 80073fe:	bf28      	it	cs
 8007400:	2373      	movcs	r3, #115	; 0x73
 8007402:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8007404:	4b2d      	ldr	r3, [pc, #180]	; (80074bc <USBD_HID_Setup+0x1f4>)
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e015      	b.n	8007436 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	885b      	ldrh	r3, [r3, #2]
 800740e:	0a1b      	lsrs	r3, r3, #8
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b21      	cmp	r3, #33	; 0x21
 8007414:	d108      	bne.n	8007428 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007416:	4b2a      	ldr	r3, [pc, #168]	; (80074c0 <USBD_HID_Setup+0x1f8>)
 8007418:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	88db      	ldrh	r3, [r3, #6]
 800741e:	2b09      	cmp	r3, #9
 8007420:	bf28      	it	cs
 8007422:	2309      	movcs	r3, #9
 8007424:	83fb      	strh	r3, [r7, #30]
 8007426:	e006      	b.n	8007436 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007428:	6839      	ldr	r1, [r7, #0]
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f85c 	bl	80084e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007430:	2302      	movs	r3, #2
 8007432:	75fb      	strb	r3, [r7, #23]
            break;
 8007434:	e034      	b.n	80074a0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007436:	8bfb      	ldrh	r3, [r7, #30]
 8007438:	461a      	mov	r2, r3
 800743a:	69b9      	ldr	r1, [r7, #24]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 f8bd 	bl	80085bc <USBD_CtlSendData>
          break;
 8007442:	e02d      	b.n	80074a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744a:	2b03      	cmp	r3, #3
 800744c:	d107      	bne.n	800745e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	3308      	adds	r3, #8
 8007452:	2201      	movs	r2, #1
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f001 f8b0 	bl	80085bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800745c:	e020      	b.n	80074a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f001 f841 	bl	80084e8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007466:	2302      	movs	r3, #2
 8007468:	75fb      	strb	r3, [r7, #23]
          break;
 800746a:	e019      	b.n	80074a0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007472:	2b03      	cmp	r3, #3
 8007474:	d106      	bne.n	8007484 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	885b      	ldrh	r3, [r3, #2]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	461a      	mov	r2, r3
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007482:	e00d      	b.n	80074a0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 f82e 	bl	80084e8 <USBD_CtlError>
            ret = USBD_FAIL;
 800748c:	2302      	movs	r3, #2
 800748e:	75fb      	strb	r3, [r7, #23]
          break;
 8007490:	e006      	b.n	80074a0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f827 	bl	80084e8 <USBD_CtlError>
          ret = USBD_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	75fb      	strb	r3, [r7, #23]
          break;
 800749e:	bf00      	nop
      }
      break;
 80074a0:	e006      	b.n	80074b0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f81f 	bl	80084e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80074aa:	2302      	movs	r3, #2
 80074ac:	75fb      	strb	r3, [r7, #23]
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200000e4 	.word	0x200000e4
 80074c0:	200000cc 	.word	0x200000cc

080074c4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d10c      	bne.n	80074fe <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	7b1b      	ldrb	r3, [r3, #12]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d108      	bne.n	80074fe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2201      	movs	r2, #1
 80074f0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	2181      	movs	r1, #129	; 0x81
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f001 fbe6 	bl	8008cca <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2229      	movs	r2, #41	; 0x29
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000048 	.word	0x20000048

08007528 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2229      	movs	r2, #41	; 0x29
 8007534:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007536:	4b03      	ldr	r3, [pc, #12]	; (8007544 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007538:	4618      	mov	r0, r3
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	bc80      	pop	{r7}
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000074 	.word	0x20000074

08007548 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2229      	movs	r2, #41	; 0x29
 8007554:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007556:	4b03      	ldr	r3, [pc, #12]	; (8007564 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	200000a0 	.word	0x200000a0

08007568 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8007574:	f7fa fae4 	bl	8001b40 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	2200      	movs	r2, #0
 8007580:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	220a      	movs	r2, #10
 8007598:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800759a:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	200000d8 	.word	0x200000d8

080075ac <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	4613      	mov	r3, r2
 80075b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075c0:	2302      	movs	r3, #2
 80075c2:	e01a      	b.n	80075fa <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	79fa      	ldrb	r2, [r7, #7]
 80075f0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f001 fa38 	bl	8008a68 <USBD_LL_Init>

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007602:	b480      	push	{r7}
 8007604:	b085      	sub	sp, #20
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	73fb      	strb	r3, [r7, #15]
 8007622:	e001      	b.n	8007628 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007624:	2302      	movs	r3, #2
 8007626:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 fa5b 	bl	8008af8 <USBD_LL_Start>

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800766c:	2302      	movs	r3, #2
 800766e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00c      	beq.n	8007694 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	78fa      	ldrb	r2, [r7, #3]
 8007684:	4611      	mov	r1, r2
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	78fa      	ldrb	r2, [r7, #3]
 80076b4:	4611      	mov	r1, r2
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	4798      	blx	r3

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 feca 	bl	8008470 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d00c      	beq.n	800771a <USBD_LL_SetupStage+0x56>
 8007700:	2b01      	cmp	r3, #1
 8007702:	d302      	bcc.n	800770a <USBD_LL_SetupStage+0x46>
 8007704:	2b02      	cmp	r3, #2
 8007706:	d010      	beq.n	800772a <USBD_LL_SetupStage+0x66>
 8007708:	e017      	b.n	800773a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f9ca 	bl	8007aac <USBD_StdDevReq>
      break;
 8007718:	e01a      	b.n	8007750 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007720:	4619      	mov	r1, r3
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa2c 	bl	8007b80 <USBD_StdItfReq>
      break;
 8007728:	e012      	b.n	8007750 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa6a 	bl	8007c0c <USBD_StdEPReq>
      break;
 8007738:	e00a      	b.n	8007750 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007740:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007744:	b2db      	uxtb	r3, r3
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 fa35 	bl	8008bb8 <USBD_LL_StallEP>
      break;
 800774e:	bf00      	nop
  }

  return USBD_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	60f8      	str	r0, [r7, #12]
 8007762:	460b      	mov	r3, r1
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007768:	7afb      	ldrb	r3, [r7, #11]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d14b      	bne.n	8007806 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007774:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800777c:	2b03      	cmp	r3, #3
 800777e:	d134      	bne.n	80077ea <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	68da      	ldr	r2, [r3, #12]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	429a      	cmp	r2, r3
 800778a:	d919      	bls.n	80077c0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d203      	bcs.n	80077ae <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	e002      	b.n	80077b4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	461a      	mov	r2, r3
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 ff2d 	bl	8008618 <USBD_CtlContinueRx>
 80077be:	e038      	b.n	8007832 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d105      	bne.n	80077e2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 ff2a 	bl	800863c <USBD_CtlSendStatus>
 80077e8:	e023      	b.n	8007832 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077f0:	2b05      	cmp	r3, #5
 80077f2:	d11e      	bne.n	8007832 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f001 f9da 	bl	8008bb8 <USBD_LL_StallEP>
 8007804:	e015      	b.n	8007832 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00d      	beq.n	800782e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007818:	2b03      	cmp	r3, #3
 800781a:	d108      	bne.n	800782e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	7afa      	ldrb	r2, [r7, #11]
 8007826:	4611      	mov	r1, r2
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	4798      	blx	r3
 800782c:	e001      	b.n	8007832 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800782e:	2302      	movs	r3, #2
 8007830:	e000      	b.n	8007834 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	460b      	mov	r3, r1
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d17f      	bne.n	8007950 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3314      	adds	r3, #20
 8007854:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800785c:	2b02      	cmp	r3, #2
 800785e:	d15c      	bne.n	800791a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	68da      	ldr	r2, [r3, #12]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	429a      	cmp	r2, r3
 800786a:	d915      	bls.n	8007898 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	1ad2      	subs	r2, r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	b29b      	uxth	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 feb5 	bl	80085f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800788a:	2300      	movs	r3, #0
 800788c:	2200      	movs	r2, #0
 800788e:	2100      	movs	r1, #0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f001 fa3d 	bl	8008d10 <USBD_LL_PrepareReceive>
 8007896:	e04e      	b.n	8007936 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	6912      	ldr	r2, [r2, #16]
 80078a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80078a4:	fb02 f201 	mul.w	r2, r2, r1
 80078a8:	1a9b      	subs	r3, r3, r2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11c      	bne.n	80078e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d316      	bcc.n	80078e8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d20f      	bcs.n	80078e8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fe91 	bl	80085f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078da:	2300      	movs	r3, #0
 80078dc:	2200      	movs	r2, #0
 80078de:	2100      	movs	r1, #0
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f001 fa15 	bl	8008d10 <USBD_LL_PrepareReceive>
 80078e6:	e026      	b.n	8007936 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d105      	bne.n	800790a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f001 f953 	bl	8008bb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f000 fea5 	bl	8008662 <USBD_CtlReceiveStatus>
 8007918:	e00d      	b.n	8007936 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007920:	2b04      	cmp	r3, #4
 8007922:	d004      	beq.n	800792e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800792e:	2180      	movs	r1, #128	; 0x80
 8007930:	68f8      	ldr	r0, [r7, #12]
 8007932:	f001 f941 	bl	8008bb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d11d      	bne.n	800797c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f7ff fe83 	bl	800764c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800794e:	e015      	b.n	800797c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00d      	beq.n	8007978 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007962:	2b03      	cmp	r3, #3
 8007964:	d108      	bne.n	8007978 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	7afa      	ldrb	r2, [r7, #11]
 8007970:	4611      	mov	r1, r2
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	4798      	blx	r3
 8007976:	e001      	b.n	800797c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007978:	2302      	movs	r3, #2
 800797a:	e000      	b.n	800797e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800798e:	2340      	movs	r3, #64	; 0x40
 8007990:	2200      	movs	r2, #0
 8007992:	2100      	movs	r1, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f8ca 	bl	8008b2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2240      	movs	r2, #64	; 0x40
 80079a6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	2200      	movs	r2, #0
 80079ae:	2180      	movs	r1, #128	; 0x80
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f8bc 	bl	8008b2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2240      	movs	r2, #64	; 0x40
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6852      	ldr	r2, [r2, #4]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	4611      	mov	r1, r2
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
  }

  return USBD_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	78fa      	ldrb	r2, [r7, #3]
 8007a18:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr

08007a4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d105      	bne.n	8007a6c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d10b      	bne.n	8007aa2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d004      	beq.n	8007ad0 <USBD_StdDevReq+0x24>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d002      	beq.n	8007ad0 <USBD_StdDevReq+0x24>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d008      	beq.n	8007ae0 <USBD_StdDevReq+0x34>
 8007ace:	e04c      	b.n	8007b6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	4798      	blx	r3
      break;
 8007ade:	e049      	b.n	8007b74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b09      	cmp	r3, #9
 8007ae6:	d83a      	bhi.n	8007b5e <USBD_StdDevReq+0xb2>
 8007ae8:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <USBD_StdDevReq+0x44>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b41 	.word	0x08007b41
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b5f 	.word	0x08007b5f
 8007afc:	08007b4b 	.word	0x08007b4b
 8007b00:	08007b5f 	.word	0x08007b5f
 8007b04:	08007b23 	.word	0x08007b23
 8007b08:	08007b19 	.word	0x08007b19
 8007b0c:	08007b5f 	.word	0x08007b5f
 8007b10:	08007b37 	.word	0x08007b37
 8007b14:	08007b2d 	.word	0x08007b2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b18:	6839      	ldr	r1, [r7, #0]
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f9d4 	bl	8007ec8 <USBD_GetDescriptor>
          break;
 8007b20:	e022      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fb37 	bl	8008198 <USBD_SetAddress>
          break;
 8007b2a:	e01d      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb74 	bl	800821c <USBD_SetConfig>
          break;
 8007b34:	e018      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fbfd 	bl	8008338 <USBD_GetConfig>
          break;
 8007b3e:	e013      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fc2c 	bl	80083a0 <USBD_GetStatus>
          break;
 8007b48:	e00e      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fc5a 	bl	8008406 <USBD_SetFeature>
          break;
 8007b52:	e009      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fc69 	bl	800842e <USBD_ClrFeature>
          break;
 8007b5c:	e004      	b.n	8007b68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fcc1 	bl	80084e8 <USBD_CtlError>
          break;
 8007b66:	bf00      	nop
      }
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fcbb 	bl	80084e8 <USBD_CtlError>
      break;
 8007b72:	bf00      	nop
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop

08007b80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d003      	beq.n	8007ba2 <USBD_StdItfReq+0x22>
 8007b9a:	2b40      	cmp	r3, #64	; 0x40
 8007b9c:	d001      	beq.n	8007ba2 <USBD_StdItfReq+0x22>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d12a      	bne.n	8007bf8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d81d      	bhi.n	8007bea <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	889b      	ldrh	r3, [r3, #4]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d813      	bhi.n	8007be0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	88db      	ldrh	r3, [r3, #6]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d110      	bne.n	8007bf4 <USBD_StdItfReq+0x74>
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10d      	bne.n	8007bf4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fd2f 	bl	800863c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bde:	e009      	b.n	8007bf4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fc80 	bl	80084e8 <USBD_CtlError>
          break;
 8007be8:	e004      	b.n	8007bf4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc7b 	bl	80084e8 <USBD_CtlError>
          break;
 8007bf2:	e000      	b.n	8007bf6 <USBD_StdItfReq+0x76>
          break;
 8007bf4:	bf00      	nop
      }
      break;
 8007bf6:	e004      	b.n	8007c02 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fc74 	bl	80084e8 <USBD_CtlError>
      break;
 8007c00:	bf00      	nop
  }

  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	889b      	ldrh	r3, [r3, #4]
 8007c1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d004      	beq.n	8007c36 <USBD_StdEPReq+0x2a>
 8007c2c:	2b40      	cmp	r3, #64	; 0x40
 8007c2e:	d002      	beq.n	8007c36 <USBD_StdEPReq+0x2a>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d008      	beq.n	8007c46 <USBD_StdEPReq+0x3a>
 8007c34:	e13d      	b.n	8007eb2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	6839      	ldr	r1, [r7, #0]
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	4798      	blx	r3
      break;
 8007c44:	e13a      	b.n	8007ebc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d10a      	bne.n	8007c68 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	e12a      	b.n	8007ebe <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d03e      	beq.n	8007cee <USBD_StdEPReq+0xe2>
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d002      	beq.n	8007c7a <USBD_StdEPReq+0x6e>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d070      	beq.n	8007d5a <USBD_StdEPReq+0x14e>
 8007c78:	e115      	b.n	8007ea6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d002      	beq.n	8007c8a <USBD_StdEPReq+0x7e>
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d015      	beq.n	8007cb4 <USBD_StdEPReq+0xa8>
 8007c88:	e02b      	b.n	8007ce2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c8a:	7bbb      	ldrb	r3, [r7, #14]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00c      	beq.n	8007caa <USBD_StdEPReq+0x9e>
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b80      	cmp	r3, #128	; 0x80
 8007c94:	d009      	beq.n	8007caa <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 ff8c 	bl	8008bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ca0:	2180      	movs	r1, #128	; 0x80
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 ff88 	bl	8008bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ca8:	e020      	b.n	8007cec <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc1b 	bl	80084e8 <USBD_CtlError>
              break;
 8007cb2:	e01b      	b.n	8007cec <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d10e      	bne.n	8007cda <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <USBD_StdEPReq+0xce>
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d008      	beq.n	8007cda <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	88db      	ldrh	r3, [r3, #6]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 ff6f 	bl	8008bb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fcae 	bl	800863c <USBD_CtlSendStatus>

              break;
 8007ce0:	e004      	b.n	8007cec <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fbff 	bl	80084e8 <USBD_CtlError>
              break;
 8007cea:	bf00      	nop
          }
          break;
 8007cec:	e0e0      	b.n	8007eb0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d002      	beq.n	8007cfe <USBD_StdEPReq+0xf2>
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d015      	beq.n	8007d28 <USBD_StdEPReq+0x11c>
 8007cfc:	e026      	b.n	8007d4c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cfe:	7bbb      	ldrb	r3, [r7, #14]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00c      	beq.n	8007d1e <USBD_StdEPReq+0x112>
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b80      	cmp	r3, #128	; 0x80
 8007d08:	d009      	beq.n	8007d1e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 ff52 	bl	8008bb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 ff4e 	bl	8008bb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d1c:	e01c      	b.n	8007d58 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fbe1 	bl	80084e8 <USBD_CtlError>
              break;
 8007d26:	e017      	b.n	8007d58 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	885b      	ldrh	r3, [r3, #2]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d112      	bne.n	8007d56 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 ff59 	bl	8008bf6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fc79 	bl	800863c <USBD_CtlSendStatus>
              }
              break;
 8007d4a:	e004      	b.n	8007d56 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fbca 	bl	80084e8 <USBD_CtlError>
              break;
 8007d54:	e000      	b.n	8007d58 <USBD_StdEPReq+0x14c>
              break;
 8007d56:	bf00      	nop
          }
          break;
 8007d58:	e0aa      	b.n	8007eb0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d002      	beq.n	8007d6a <USBD_StdEPReq+0x15e>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d032      	beq.n	8007dce <USBD_StdEPReq+0x1c2>
 8007d68:	e097      	b.n	8007e9a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <USBD_StdEPReq+0x174>
 8007d70:	7bbb      	ldrb	r3, [r7, #14]
 8007d72:	2b80      	cmp	r3, #128	; 0x80
 8007d74:	d004      	beq.n	8007d80 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fbb5 	bl	80084e8 <USBD_CtlError>
                break;
 8007d7e:	e091      	b.n	8007ea4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	da0b      	bge.n	8007da0 <USBD_StdEPReq+0x194>
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d8e:	4613      	mov	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	4413      	add	r3, r2
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	3310      	adds	r3, #16
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	3304      	adds	r3, #4
 8007d9e:	e00b      	b.n	8007db8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007da6:	4613      	mov	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	3304      	adds	r3, #4
 8007db8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fbf8 	bl	80085bc <USBD_CtlSendData>
              break;
 8007dcc:	e06a      	b.n	8007ea4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007dce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da11      	bge.n	8007dfa <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	f003 020f 	and.w	r2, r3, #15
 8007ddc:	6879      	ldr	r1, [r7, #4]
 8007dde:	4613      	mov	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4413      	add	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	440b      	add	r3, r1
 8007de8:	3318      	adds	r3, #24
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d117      	bne.n	8007e20 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fb78 	bl	80084e8 <USBD_CtlError>
                  break;
 8007df8:	e054      	b.n	8007ea4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	f003 020f 	and.w	r2, r3, #15
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	440b      	add	r3, r1
 8007e0c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fb65 	bl	80084e8 <USBD_CtlError>
                  break;
 8007e1e:	e041      	b.n	8007ea4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da0b      	bge.n	8007e40 <USBD_StdEPReq+0x234>
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	3310      	adds	r3, #16
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	e00b      	b.n	8007e58 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	4413      	add	r3, r2
 8007e56:	3304      	adds	r3, #4
 8007e58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <USBD_StdEPReq+0x25a>
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	2b80      	cmp	r3, #128	; 0x80
 8007e64:	d103      	bne.n	8007e6e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e00e      	b.n	8007e8c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fede 	bl	8008c34 <USBD_LL_IsStallEP>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2201      	movs	r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e002      	b.n	8007e8c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fb92 	bl	80085bc <USBD_CtlSendData>
              break;
 8007e98:	e004      	b.n	8007ea4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fb23 	bl	80084e8 <USBD_CtlError>
              break;
 8007ea2:	bf00      	nop
          }
          break;
 8007ea4:	e004      	b.n	8007eb0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb1d 	bl	80084e8 <USBD_CtlError>
          break;
 8007eae:	bf00      	nop
      }
      break;
 8007eb0:	e004      	b.n	8007ebc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fb17 	bl	80084e8 <USBD_CtlError>
      break;
 8007eba:	bf00      	nop
  }

  return ret;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	885b      	ldrh	r3, [r3, #2]
 8007ee2:	0a1b      	lsrs	r3, r3, #8
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	f200 8128 	bhi.w	800813e <USBD_GetDescriptor+0x276>
 8007eee:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <USBD_GetDescriptor+0x2c>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f11 	.word	0x08007f11
 8007ef8:	08007f29 	.word	0x08007f29
 8007efc:	08007f69 	.word	0x08007f69
 8007f00:	0800813f 	.word	0x0800813f
 8007f04:	0800813f 	.word	0x0800813f
 8007f08:	080080df 	.word	0x080080df
 8007f0c:	0800810b 	.word	0x0800810b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	7c12      	ldrb	r2, [r2, #16]
 8007f1c:	f107 0108 	add.w	r1, r7, #8
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
 8007f24:	60f8      	str	r0, [r7, #12]
      break;
 8007f26:	e112      	b.n	800814e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	7c1b      	ldrb	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10d      	bne.n	8007f4c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	f107 0208 	add.w	r2, r7, #8
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	4798      	blx	r3
 8007f40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	2202      	movs	r2, #2
 8007f48:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f4a:	e100      	b.n	800814e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	f107 0208 	add.w	r2, r7, #8
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	3301      	adds	r3, #1
 8007f62:	2202      	movs	r2, #2
 8007f64:	701a      	strb	r2, [r3, #0]
      break;
 8007f66:	e0f2      	b.n	800814e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	885b      	ldrh	r3, [r3, #2]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	f200 80ac 	bhi.w	80080cc <USBD_GetDescriptor+0x204>
 8007f74:	a201      	add	r2, pc, #4	; (adr r2, 8007f7c <USBD_GetDescriptor+0xb4>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007f95 	.word	0x08007f95
 8007f80:	08007fc9 	.word	0x08007fc9
 8007f84:	08007ffd 	.word	0x08007ffd
 8007f88:	08008031 	.word	0x08008031
 8007f8c:	08008065 	.word	0x08008065
 8007f90:	08008099 	.word	0x08008099
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7c12      	ldrb	r2, [r2, #16]
 8007fac:	f107 0108 	add.w	r1, r7, #8
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb6:	e091      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa94 	bl	80084e8 <USBD_CtlError>
            err++;
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc6:	e089      	b.n	80080dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00b      	beq.n	8007fec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	7c12      	ldrb	r2, [r2, #16]
 8007fe0:	f107 0108 	add.w	r1, r7, #8
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4798      	blx	r3
 8007fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fea:	e077      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa7a 	bl	80084e8 <USBD_CtlError>
            err++;
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8007ffa:	e06f      	b.n	80080dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00b      	beq.n	8008020 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	7c12      	ldrb	r2, [r2, #16]
 8008014:	f107 0108 	add.w	r1, r7, #8
 8008018:	4610      	mov	r0, r2
 800801a:	4798      	blx	r3
 800801c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800801e:	e05d      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fa60 	bl	80084e8 <USBD_CtlError>
            err++;
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	3301      	adds	r3, #1
 800802c:	72fb      	strb	r3, [r7, #11]
          break;
 800802e:	e055      	b.n	80080dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00b      	beq.n	8008054 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	7c12      	ldrb	r2, [r2, #16]
 8008048:	f107 0108 	add.w	r1, r7, #8
 800804c:	4610      	mov	r0, r2
 800804e:	4798      	blx	r3
 8008050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008052:	e043      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fa46 	bl	80084e8 <USBD_CtlError>
            err++;
 800805c:	7afb      	ldrb	r3, [r7, #11]
 800805e:	3301      	adds	r3, #1
 8008060:	72fb      	strb	r3, [r7, #11]
          break;
 8008062:	e03b      	b.n	80080dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	7c12      	ldrb	r2, [r2, #16]
 800807c:	f107 0108 	add.w	r1, r7, #8
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008086:	e029      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa2c 	bl	80084e8 <USBD_CtlError>
            err++;
 8008090:	7afb      	ldrb	r3, [r7, #11]
 8008092:	3301      	adds	r3, #1
 8008094:	72fb      	strb	r3, [r7, #11]
          break;
 8008096:	e021      	b.n	80080dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00b      	beq.n	80080bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	7c12      	ldrb	r2, [r2, #16]
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ba:	e00f      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa12 	bl	80084e8 <USBD_CtlError>
            err++;
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	3301      	adds	r3, #1
 80080c8:	72fb      	strb	r3, [r7, #11]
          break;
 80080ca:	e007      	b.n	80080dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa0a 	bl	80084e8 <USBD_CtlError>
          err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80080da:	e038      	b.n	800814e <USBD_GetDescriptor+0x286>
 80080dc:	e037      	b.n	800814e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7c1b      	ldrb	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d109      	bne.n	80080fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	f107 0208 	add.w	r2, r7, #8
 80080f2:	4610      	mov	r0, r2
 80080f4:	4798      	blx	r3
 80080f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80080f8:	e029      	b.n	800814e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f9f3 	bl	80084e8 <USBD_CtlError>
        err++;
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	3301      	adds	r3, #1
 8008106:	72fb      	strb	r3, [r7, #11]
      break;
 8008108:	e021      	b.n	800814e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7c1b      	ldrb	r3, [r3, #16]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10d      	bne.n	800812e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	f107 0208 	add.w	r2, r7, #8
 800811e:	4610      	mov	r0, r2
 8008120:	4798      	blx	r3
 8008122:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	2207      	movs	r2, #7
 800812a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800812c:	e00f      	b.n	800814e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800812e:	6839      	ldr	r1, [r7, #0]
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9d9 	bl	80084e8 <USBD_CtlError>
        err++;
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	3301      	adds	r3, #1
 800813a:	72fb      	strb	r3, [r7, #11]
      break;
 800813c:	e007      	b.n	800814e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9d1 	bl	80084e8 <USBD_CtlError>
      err++;
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	3301      	adds	r3, #1
 800814a:	72fb      	strb	r3, [r7, #11]
      break;
 800814c:	bf00      	nop
  }

  if (err != 0U)
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d11c      	bne.n	800818e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d011      	beq.n	800817e <USBD_GetDescriptor+0x2b6>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	88db      	ldrh	r3, [r3, #6]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00d      	beq.n	800817e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	88da      	ldrh	r2, [r3, #6]
 8008166:	893b      	ldrh	r3, [r7, #8]
 8008168:	4293      	cmp	r3, r2
 800816a:	bf28      	it	cs
 800816c:	4613      	movcs	r3, r2
 800816e:	b29b      	uxth	r3, r3
 8008170:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008172:	893b      	ldrh	r3, [r7, #8]
 8008174:	461a      	mov	r2, r3
 8008176:	68f9      	ldr	r1, [r7, #12]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 fa1f 	bl	80085bc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d104      	bne.n	8008190 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa58 	bl	800863c <USBD_CtlSendStatus>
 800818c:	e000      	b.n	8008190 <USBD_GetDescriptor+0x2c8>
    return;
 800818e:	bf00      	nop
    }
  }
}
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop

08008198 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	889b      	ldrh	r3, [r3, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d130      	bne.n	800820c <USBD_SetAddress+0x74>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d12c      	bne.n	800820c <USBD_SetAddress+0x74>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	2b7f      	cmp	r3, #127	; 0x7f
 80081b8:	d828      	bhi.n	800820c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	885b      	ldrh	r3, [r3, #2]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d104      	bne.n	80081da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f988 	bl	80084e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081d8:	e01c      	b.n	8008214 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7bfa      	ldrb	r2, [r7, #15]
 80081de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fd50 	bl	8008c8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa25 	bl	800863c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d004      	beq.n	8008202 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008200:	e008      	b.n	8008214 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	e003      	b.n	8008214 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800820c:	6839      	ldr	r1, [r7, #0]
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f96a 	bl	80084e8 <USBD_CtlError>
  }
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b2da      	uxtb	r2, r3
 800822c:	4b41      	ldr	r3, [pc, #260]	; (8008334 <USBD_SetConfig+0x118>)
 800822e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008230:	4b40      	ldr	r3, [pc, #256]	; (8008334 <USBD_SetConfig+0x118>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d904      	bls.n	8008242 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f954 	bl	80084e8 <USBD_CtlError>
 8008240:	e075      	b.n	800832e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	2b02      	cmp	r3, #2
 800824a:	d002      	beq.n	8008252 <USBD_SetConfig+0x36>
 800824c:	2b03      	cmp	r3, #3
 800824e:	d023      	beq.n	8008298 <USBD_SetConfig+0x7c>
 8008250:	e062      	b.n	8008318 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008252:	4b38      	ldr	r3, [pc, #224]	; (8008334 <USBD_SetConfig+0x118>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01a      	beq.n	8008290 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800825a:	4b36      	ldr	r3, [pc, #216]	; (8008334 <USBD_SetConfig+0x118>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2203      	movs	r2, #3
 8008268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800826c:	4b31      	ldr	r3, [pc, #196]	; (8008334 <USBD_SetConfig+0x118>)
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff f9f4 	bl	8007660 <USBD_SetClassConfig>
 8008278:	4603      	mov	r3, r0
 800827a:	2b02      	cmp	r3, #2
 800827c:	d104      	bne.n	8008288 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f931 	bl	80084e8 <USBD_CtlError>
            return;
 8008286:	e052      	b.n	800832e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f9d7 	bl	800863c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800828e:	e04e      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9d3 	bl	800863c <USBD_CtlSendStatus>
        break;
 8008296:	e04a      	b.n	800832e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008298:	4b26      	ldr	r3, [pc, #152]	; (8008334 <USBD_SetConfig+0x118>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d112      	bne.n	80082c6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082a8:	4b22      	ldr	r3, [pc, #136]	; (8008334 <USBD_SetConfig+0x118>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082b2:	4b20      	ldr	r3, [pc, #128]	; (8008334 <USBD_SetConfig+0x118>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7ff f9f0 	bl	800769e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f9bc 	bl	800863c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082c4:	e033      	b.n	800832e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <USBD_SetConfig+0x118>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d01d      	beq.n	8008310 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff f9de 	bl	800769e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80082e2:	4b14      	ldr	r3, [pc, #80]	; (8008334 <USBD_SetConfig+0x118>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082ec:	4b11      	ldr	r3, [pc, #68]	; (8008334 <USBD_SetConfig+0x118>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff f9b4 	bl	8007660 <USBD_SetClassConfig>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d104      	bne.n	8008308 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8f1 	bl	80084e8 <USBD_CtlError>
            return;
 8008306:	e012      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f997 	bl	800863c <USBD_CtlSendStatus>
        break;
 800830e:	e00e      	b.n	800832e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f993 	bl	800863c <USBD_CtlSendStatus>
        break;
 8008316:	e00a      	b.n	800832e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008318:	6839      	ldr	r1, [r7, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8e4 	bl	80084e8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008320:	4b04      	ldr	r3, [pc, #16]	; (8008334 <USBD_SetConfig+0x118>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	4619      	mov	r1, r3
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f7ff f9b9 	bl	800769e <USBD_ClrClassConfig>
        break;
 800832c:	bf00      	nop
    }
  }
}
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	20001626 	.word	0x20001626

08008338 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	88db      	ldrh	r3, [r3, #6]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d004      	beq.n	8008354 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f8cb 	bl	80084e8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008352:	e021      	b.n	8008398 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800835a:	2b01      	cmp	r3, #1
 800835c:	db17      	blt.n	800838e <USBD_GetConfig+0x56>
 800835e:	2b02      	cmp	r3, #2
 8008360:	dd02      	ble.n	8008368 <USBD_GetConfig+0x30>
 8008362:	2b03      	cmp	r3, #3
 8008364:	d00b      	beq.n	800837e <USBD_GetConfig+0x46>
 8008366:	e012      	b.n	800838e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3308      	adds	r3, #8
 8008372:	2201      	movs	r2, #1
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f920 	bl	80085bc <USBD_CtlSendData>
        break;
 800837c:	e00c      	b.n	8008398 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	3304      	adds	r3, #4
 8008382:	2201      	movs	r2, #1
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f918 	bl	80085bc <USBD_CtlSendData>
        break;
 800838c:	e004      	b.n	8008398 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8a9 	bl	80084e8 <USBD_CtlError>
        break;
 8008396:	bf00      	nop
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b0:	3b01      	subs	r3, #1
 80083b2:	2b02      	cmp	r3, #2
 80083b4:	d81e      	bhi.n	80083f4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	88db      	ldrh	r3, [r3, #6]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d004      	beq.n	80083c8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80083be:	6839      	ldr	r1, [r7, #0]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f891 	bl	80084e8 <USBD_CtlError>
        break;
 80083c6:	e01a      	b.n	80083fe <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f043 0202 	orr.w	r2, r3, #2
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	330c      	adds	r3, #12
 80083e8:	2202      	movs	r2, #2
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f8e5 	bl	80085bc <USBD_CtlSendData>
      break;
 80083f2:	e004      	b.n	80083fe <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f876 	bl	80084e8 <USBD_CtlError>
      break;
 80083fc:	bf00      	nop
  }
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b082      	sub	sp, #8
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	885b      	ldrh	r3, [r3, #2]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d106      	bne.n	8008426 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f90b 	bl	800863c <USBD_CtlSendStatus>
  }
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843e:	3b01      	subs	r3, #1
 8008440:	2b02      	cmp	r3, #2
 8008442:	d80b      	bhi.n	800845c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	885b      	ldrh	r3, [r3, #2]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d10c      	bne.n	8008466 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f8f1 	bl	800863c <USBD_CtlSendStatus>
      }
      break;
 800845a:	e004      	b.n	8008466 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800845c:	6839      	ldr	r1, [r7, #0]
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f842 	bl	80084e8 <USBD_CtlError>
      break;
 8008464:	e000      	b.n	8008468 <USBD_ClrFeature+0x3a>
      break;
 8008466:	bf00      	nop
  }
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785a      	ldrb	r2, [r3, #1]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3302      	adds	r3, #2
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b29a      	uxth	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	3303      	adds	r3, #3
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	b29b      	uxth	r3, r3
 800849e:	4413      	add	r3, r2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	3304      	adds	r3, #4
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	3305      	adds	r3, #5
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	021b      	lsls	r3, r3, #8
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	4413      	add	r3, r2
 80084bc:	b29a      	uxth	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	3306      	adds	r3, #6
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	3307      	adds	r3, #7
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	b29a      	uxth	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	80da      	strh	r2, [r3, #6]

}
 80084de:	bf00      	nop
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80084f2:	2180      	movs	r1, #128	; 0x80
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fb5f 	bl	8008bb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80084fa:	2100      	movs	r1, #0
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fb5b 	bl	8008bb8 <USBD_LL_StallEP>
}
 8008502:	bf00      	nop
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d032      	beq.n	8008586 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f834 	bl	800858e <USBD_GetLen>
 8008526:	4603      	mov	r3, r0
 8008528:	3301      	adds	r3, #1
 800852a:	b29b      	uxth	r3, r3
 800852c:	005b      	lsls	r3, r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	75fa      	strb	r2, [r7, #23]
 800853a:	461a      	mov	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4413      	add	r3, r2
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	7812      	ldrb	r2, [r2, #0]
 8008544:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008546:	7dfb      	ldrb	r3, [r7, #23]
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	75fa      	strb	r2, [r7, #23]
 800854c:	461a      	mov	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	4413      	add	r3, r2
 8008552:	2203      	movs	r2, #3
 8008554:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008556:	e012      	b.n	800857e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	1c5a      	adds	r2, r3, #1
 800855c:	60fa      	str	r2, [r7, #12]
 800855e:	7dfa      	ldrb	r2, [r7, #23]
 8008560:	1c51      	adds	r1, r2, #1
 8008562:	75f9      	strb	r1, [r7, #23]
 8008564:	4611      	mov	r1, r2
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	440a      	add	r2, r1
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	75fa      	strb	r2, [r7, #23]
 8008574:	461a      	mov	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	4413      	add	r3, r2
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e8      	bne.n	8008558 <USBD_GetString+0x4e>
    }
  }
}
 8008586:	bf00      	nop
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800859a:	e005      	b.n	80085a8 <USBD_GetLen+0x1a>
  {
    len++;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
 800859e:	3301      	adds	r3, #1
 80085a0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	3301      	adds	r3, #1
 80085a6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1f5      	bne.n	800859c <USBD_GetLen+0xe>
  }

  return len;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bc80      	pop	{r7}
 80085ba:	4770      	bx	lr

080085bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2202      	movs	r2, #2
 80085ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80085d2:	88fa      	ldrh	r2, [r7, #6]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80085d8:	88fa      	ldrh	r2, [r7, #6]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	2100      	movs	r1, #0
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 fb70 	bl	8008cca <USBD_LL_Transmit>

  return USBD_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	2100      	movs	r1, #0
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 fb5e 	bl	8008cca <USBD_LL_Transmit>

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008626:	88fb      	ldrh	r3, [r7, #6]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	2100      	movs	r1, #0
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fb6f 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2204      	movs	r2, #4
 8008648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800864c:	2300      	movs	r3, #0
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fb39 	bl	8008cca <USBD_LL_Transmit>

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3708      	adds	r7, #8
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2205      	movs	r2, #5
 800866e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008672:	2300      	movs	r3, #0
 8008674:	2200      	movs	r2, #0
 8008676:	2100      	movs	r1, #0
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fb49 	bl	8008d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800868c:	2200      	movs	r2, #0
 800868e:	490e      	ldr	r1, [pc, #56]	; (80086c8 <MX_USB_DEVICE_Init+0x40>)
 8008690:	480e      	ldr	r0, [pc, #56]	; (80086cc <MX_USB_DEVICE_Init+0x44>)
 8008692:	f7fe ff8b 	bl	80075ac <USBD_Init>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d001      	beq.n	80086a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800869c:	f7f9 fb2d 	bl	8001cfa <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80086a0:	490b      	ldr	r1, [pc, #44]	; (80086d0 <MX_USB_DEVICE_Init+0x48>)
 80086a2:	480a      	ldr	r0, [pc, #40]	; (80086cc <MX_USB_DEVICE_Init+0x44>)
 80086a4:	f7fe ffad 	bl	8007602 <USBD_RegisterClass>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d001      	beq.n	80086b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80086ae:	f7f9 fb24 	bl	8001cfa <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086b2:	4806      	ldr	r0, [pc, #24]	; (80086cc <MX_USB_DEVICE_Init+0x44>)
 80086b4:	f7fe ffbe 	bl	8007634 <USBD_Start>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80086be:	f7f9 fb1c 	bl	8001cfa <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20000158 	.word	0x20000158
 80086cc:	200017e0 	.word	0x200017e0
 80086d0:	20000010 	.word	0x20000010

080086d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	2212      	movs	r2, #18
 80086e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086e6:	4b03      	ldr	r3, [pc, #12]	; (80086f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bc80      	pop	{r7}
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000174 	.word	0x20000174

080086f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	6039      	str	r1, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2204      	movs	r2, #4
 8008708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800870a:	4b03      	ldr	r3, [pc, #12]	; (8008718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	bc80      	pop	{r7}
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20000188 	.word	0x20000188

0800871c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	4603      	mov	r3, r0
 8008724:	6039      	str	r1, [r7, #0]
 8008726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	4907      	ldr	r1, [pc, #28]	; (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
 8008732:	4808      	ldr	r0, [pc, #32]	; (8008754 <USBD_FS_ProductStrDescriptor+0x38>)
 8008734:	f7ff fee9 	bl	800850a <USBD_GetString>
 8008738:	e004      	b.n	8008744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4904      	ldr	r1, [pc, #16]	; (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
 800873e:	4805      	ldr	r0, [pc, #20]	; (8008754 <USBD_FS_ProductStrDescriptor+0x38>)
 8008740:	f7ff fee3 	bl	800850a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20001aa4 	.word	0x20001aa4
 8008754:	08008eac 	.word	0x08008eac

08008758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	4904      	ldr	r1, [pc, #16]	; (8008778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008768:	4804      	ldr	r0, [pc, #16]	; (800877c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800876a:	f7ff fece 	bl	800850a <USBD_GetString>
  return USBD_StrDesc;
 800876e:	4b02      	ldr	r3, [pc, #8]	; (8008778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20001aa4 	.word	0x20001aa4
 800877c:	08008ec0 	.word	0x08008ec0

08008780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	6039      	str	r1, [r7, #0]
 800878a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	221a      	movs	r2, #26
 8008790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008792:	f000 f843 	bl	800881c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008796:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	2000018c 	.word	0x2000018c

080087a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	4907      	ldr	r1, [pc, #28]	; (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087ba:	4808      	ldr	r0, [pc, #32]	; (80087dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087bc:	f7ff fea5 	bl	800850a <USBD_GetString>
 80087c0:	e004      	b.n	80087cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	4904      	ldr	r1, [pc, #16]	; (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087c6:	4805      	ldr	r0, [pc, #20]	; (80087dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80087c8:	f7ff fe9f 	bl	800850a <USBD_GetString>
  }
  return USBD_StrDesc;
 80087cc:	4b02      	ldr	r3, [pc, #8]	; (80087d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20001aa4 	.word	0x20001aa4
 80087dc:	08008ed4 	.word	0x08008ed4

080087e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ec:	79fb      	ldrb	r3, [r7, #7]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d105      	bne.n	80087fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	4907      	ldr	r1, [pc, #28]	; (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80087f6:	4808      	ldr	r0, [pc, #32]	; (8008818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80087f8:	f7ff fe87 	bl	800850a <USBD_GetString>
 80087fc:	e004      	b.n	8008808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4904      	ldr	r1, [pc, #16]	; (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008802:	4805      	ldr	r0, [pc, #20]	; (8008818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008804:	f7ff fe81 	bl	800850a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008808:	4b02      	ldr	r3, [pc, #8]	; (8008814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20001aa4 	.word	0x20001aa4
 8008818:	08008ee0 	.word	0x08008ee0

0800881c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008822:	4b0f      	ldr	r3, [pc, #60]	; (8008860 <Get_SerialNum+0x44>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008828:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <Get_SerialNum+0x48>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800882e:	4b0e      	ldr	r3, [pc, #56]	; (8008868 <Get_SerialNum+0x4c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008842:	2208      	movs	r2, #8
 8008844:	4909      	ldr	r1, [pc, #36]	; (800886c <Get_SerialNum+0x50>)
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 f814 	bl	8008874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800884c:	2204      	movs	r2, #4
 800884e:	4908      	ldr	r1, [pc, #32]	; (8008870 <Get_SerialNum+0x54>)
 8008850:	68b8      	ldr	r0, [r7, #8]
 8008852:	f000 f80f 	bl	8008874 <IntToUnicode>
  }
}
 8008856:	bf00      	nop
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	1ffff7e8 	.word	0x1ffff7e8
 8008864:	1ffff7ec 	.word	0x1ffff7ec
 8008868:	1ffff7f0 	.word	0x1ffff7f0
 800886c:	2000018e 	.word	0x2000018e
 8008870:	2000019e 	.word	0x2000019e

08008874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4613      	mov	r3, r2
 8008880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008886:	2300      	movs	r3, #0
 8008888:	75fb      	strb	r3, [r7, #23]
 800888a:	e027      	b.n	80088dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	0f1b      	lsrs	r3, r3, #28
 8008890:	2b09      	cmp	r3, #9
 8008892:	d80b      	bhi.n	80088ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	0f1b      	lsrs	r3, r3, #28
 8008898:	b2da      	uxtb	r2, r3
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	4619      	mov	r1, r3
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	440b      	add	r3, r1
 80088a4:	3230      	adds	r2, #48	; 0x30
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e00a      	b.n	80088c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3237      	adds	r2, #55	; 0x37
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	3301      	adds	r3, #1
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
 80088dc:	7dfa      	ldrb	r2, [r7, #23]
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d3d3      	bcc.n	800888c <IntToUnicode+0x18>
  }
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bc80      	pop	{r7}
 80088ec:	4770      	bx	lr
	...

080088f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a0d      	ldr	r2, [pc, #52]	; (8008934 <HAL_PCD_MspInit+0x44>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d113      	bne.n	800892a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008902:	4b0d      	ldr	r3, [pc, #52]	; (8008938 <HAL_PCD_MspInit+0x48>)
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	4a0c      	ldr	r2, [pc, #48]	; (8008938 <HAL_PCD_MspInit+0x48>)
 8008908:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800890c:	61d3      	str	r3, [r2, #28]
 800890e:	4b0a      	ldr	r3, [pc, #40]	; (8008938 <HAL_PCD_MspInit+0x48>)
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008916:	60fb      	str	r3, [r7, #12]
 8008918:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800891a:	2200      	movs	r2, #0
 800891c:	2100      	movs	r1, #0
 800891e:	2014      	movs	r0, #20
 8008920:	f7f9 ff1f 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008924:	2014      	movs	r0, #20
 8008926:	f7f9 ff38 	bl	800279a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	40005c00 	.word	0x40005c00
 8008938:	40021000 	.word	0x40021000

0800893c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008950:	4619      	mov	r1, r3
 8008952:	4610      	mov	r0, r2
 8008954:	f7fe feb6 	bl	80076c4 <USBD_LL_SetupStage>
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008972:	78fa      	ldrb	r2, [r7, #3]
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	440b      	add	r3, r1
 8008980:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	4619      	mov	r1, r3
 800898a:	f7fe fee6 	bl	800775a <USBD_LL_DataOutStage>
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b082      	sub	sp, #8
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	00db      	lsls	r3, r3, #3
 80089b4:	440b      	add	r3, r1
 80089b6:	333c      	adds	r3, #60	; 0x3c
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	4619      	mov	r1, r3
 80089be:	f7fe ff3d 	bl	800783c <USBD_LL_DataInStage>
}
 80089c2:	bf00      	nop
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff f84d 	bl	8007a78 <USBD_LL_SOF>
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d001      	beq.n	80089fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089fa:	f7f9 f97e 	bl	8001cfa <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a04:	7bfa      	ldrb	r2, [r7, #15]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7fe fffd 	bl	8007a08 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7fe ffb6 	bl	8007986 <USBD_LL_Reset>
}
 8008a1a:	bf00      	nop
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fff8 	bl	8007a26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8008a36:	2001      	movs	r0, #1
 8008a38:	f7f9 fae0 	bl	8001ffc <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f7f9 fad5 	bl	8001ffc <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe fff8 	bl	8007a4e <USBD_LL_Resume>
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a70:	4a1f      	ldr	r2, [pc, #124]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008a80:	4b1b      	ldr	r3, [pc, #108]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a82:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <USBD_LL_Init+0x8c>)
 8008a84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008a86:	4b1a      	ldr	r3, [pc, #104]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a88:	2208      	movs	r2, #8
 8008a8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008a8c:	4b18      	ldr	r3, [pc, #96]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a8e:	2202      	movs	r2, #2
 8008a90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008a92:	4b17      	ldr	r3, [pc, #92]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008a98:	4b15      	ldr	r3, [pc, #84]	; (8008af0 <USBD_LL_Init+0x88>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008a9e:	4b14      	ldr	r3, [pc, #80]	; (8008af0 <USBD_LL_Init+0x88>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008aa4:	4812      	ldr	r0, [pc, #72]	; (8008af0 <USBD_LL_Init+0x88>)
 8008aa6:	f7fa f835 	bl	8002b14 <HAL_PCD_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ab0:	f7f9 f923 	bl	8001cfa <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aba:	2318      	movs	r3, #24
 8008abc:	2200      	movs	r2, #0
 8008abe:	2100      	movs	r1, #0
 8008ac0:	f7fb fb52 	bl	8004168 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008aca:	2358      	movs	r3, #88	; 0x58
 8008acc:	2200      	movs	r2, #0
 8008ace:	2180      	movs	r1, #128	; 0x80
 8008ad0:	f7fb fb4a 	bl	8004168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2181      	movs	r1, #129	; 0x81
 8008ae2:	f7fb fb41 	bl	8004168 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20001ca4 	.word	0x20001ca4
 8008af4:	40005c00 	.word	0x40005c00

08008af8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fa f90b 	bl	8002d2a <HAL_PCD_Start>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f93c 	bl	8008d98 <USBD_Get_USB_Status>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	4608      	mov	r0, r1
 8008b38:	4611      	mov	r1, r2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	70fb      	strb	r3, [r7, #3]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70bb      	strb	r3, [r7, #2]
 8008b44:	4613      	mov	r3, r2
 8008b46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b56:	78bb      	ldrb	r3, [r7, #2]
 8008b58:	883a      	ldrh	r2, [r7, #0]
 8008b5a:	78f9      	ldrb	r1, [r7, #3]
 8008b5c:	f7fa fa85 	bl	800306a <HAL_PCD_EP_Open>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f916 	bl	8008d98 <USBD_Get_USB_Status>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b94:	78fa      	ldrb	r2, [r7, #3]
 8008b96:	4611      	mov	r1, r2
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fa facc 	bl	8003136 <HAL_PCD_EP_Close>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 f8f7 	bl	8008d98 <USBD_Get_USB_Status>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bd2:	78fa      	ldrb	r2, [r7, #3]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fa fb75 	bl	80032c6 <HAL_PCD_EP_SetStall>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 f8d8 	bl	8008d98 <USBD_Get_USB_Status>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fa fbb6 	bl	8003386 <HAL_PCD_EP_ClrStall>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f000 f8b9 	bl	8008d98 <USBD_Get_USB_Status>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	da0c      	bge.n	8008c6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c56:	68f9      	ldr	r1, [r7, #12]
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	00db      	lsls	r3, r3, #3
 8008c62:	440b      	add	r3, r1
 8008c64:	3302      	adds	r3, #2
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	e00b      	b.n	8008c82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008c6a:	78fb      	ldrb	r3, [r7, #3]
 8008c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c70:	68f9      	ldr	r1, [r7, #12]
 8008c72:	4613      	mov	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4413      	add	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	440b      	add	r3, r1
 8008c7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008c80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ca6:	78fa      	ldrb	r2, [r7, #3]
 8008ca8:	4611      	mov	r1, r2
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fa f9b8 	bl	8003020 <HAL_PCD_SetAddress>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 f86e 	bl	8008d98 <USBD_Get_USB_Status>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	72fb      	strb	r3, [r7, #11]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cec:	893b      	ldrh	r3, [r7, #8]
 8008cee:	7af9      	ldrb	r1, [r7, #11]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	f7fa faa5 	bl	8003240 <HAL_PCD_EP_Transmit>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f84b 	bl	8008d98 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	72fb      	strb	r3, [r7, #11]
 8008d20:	4613      	mov	r3, r2
 8008d22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d32:	893b      	ldrh	r3, [r7, #8]
 8008d34:	7af9      	ldrb	r1, [r7, #11]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	f7fa fa45 	bl	80031c6 <HAL_PCD_EP_Receive>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f828 	bl	8008d98 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
	...

08008d58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008d60:	4b02      	ldr	r3, [pc, #8]	; (8008d6c <USBD_static_malloc+0x14>)
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc80      	pop	{r7}
 8008d6a:	4770      	bx	lr
 8008d6c:	20001628 	.word	0x20001628

08008d70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]

}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bc80      	pop	{r7}
 8008d80:	4770      	bx	lr

08008d82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d82:	b480      	push	{r7}
 8008d84:	b083      	sub	sp, #12
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d817      	bhi.n	8008ddc <USBD_Get_USB_Status+0x44>
 8008dac:	a201      	add	r2, pc, #4	; (adr r2, 8008db4 <USBD_Get_USB_Status+0x1c>)
 8008dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db2:	bf00      	nop
 8008db4:	08008dc5 	.word	0x08008dc5
 8008db8:	08008dcb 	.word	0x08008dcb
 8008dbc:	08008dd1 	.word	0x08008dd1
 8008dc0:	08008dd7 	.word	0x08008dd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	e00b      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dce:	e008      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	e005      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dda:	e002      	b.n	8008de2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ddc:	2302      	movs	r3, #2
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	bf00      	nop
  }
  return usb_status;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3714      	adds	r7, #20
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop

08008df0 <__libc_init_array>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	2500      	movs	r5, #0
 8008df4:	4e0c      	ldr	r6, [pc, #48]	; (8008e28 <__libc_init_array+0x38>)
 8008df6:	4c0d      	ldr	r4, [pc, #52]	; (8008e2c <__libc_init_array+0x3c>)
 8008df8:	1ba4      	subs	r4, r4, r6
 8008dfa:	10a4      	asrs	r4, r4, #2
 8008dfc:	42a5      	cmp	r5, r4
 8008dfe:	d109      	bne.n	8008e14 <__libc_init_array+0x24>
 8008e00:	f000 f82e 	bl	8008e60 <_init>
 8008e04:	2500      	movs	r5, #0
 8008e06:	4e0a      	ldr	r6, [pc, #40]	; (8008e30 <__libc_init_array+0x40>)
 8008e08:	4c0a      	ldr	r4, [pc, #40]	; (8008e34 <__libc_init_array+0x44>)
 8008e0a:	1ba4      	subs	r4, r4, r6
 8008e0c:	10a4      	asrs	r4, r4, #2
 8008e0e:	42a5      	cmp	r5, r4
 8008e10:	d105      	bne.n	8008e1e <__libc_init_array+0x2e>
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e18:	4798      	blx	r3
 8008e1a:	3501      	adds	r5, #1
 8008e1c:	e7ee      	b.n	8008dfc <__libc_init_array+0xc>
 8008e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e22:	4798      	blx	r3
 8008e24:	3501      	adds	r5, #1
 8008e26:	e7f2      	b.n	8008e0e <__libc_init_array+0x1e>
 8008e28:	08009010 	.word	0x08009010
 8008e2c:	08009010 	.word	0x08009010
 8008e30:	08009010 	.word	0x08009010
 8008e34:	08009014 	.word	0x08009014

08008e38 <memcpy>:
 8008e38:	b510      	push	{r4, lr}
 8008e3a:	1e43      	subs	r3, r0, #1
 8008e3c:	440a      	add	r2, r1
 8008e3e:	4291      	cmp	r1, r2
 8008e40:	d100      	bne.n	8008e44 <memcpy+0xc>
 8008e42:	bd10      	pop	{r4, pc}
 8008e44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e4c:	e7f7      	b.n	8008e3e <memcpy+0x6>

08008e4e <memset>:
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4402      	add	r2, r0
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d100      	bne.n	8008e58 <memset+0xa>
 8008e56:	4770      	bx	lr
 8008e58:	f803 1b01 	strb.w	r1, [r3], #1
 8008e5c:	e7f9      	b.n	8008e52 <memset+0x4>
	...

08008e60 <_init>:
 8008e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e62:	bf00      	nop
 8008e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e66:	bc08      	pop	{r3}
 8008e68:	469e      	mov	lr, r3
 8008e6a:	4770      	bx	lr

08008e6c <_fini>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr
