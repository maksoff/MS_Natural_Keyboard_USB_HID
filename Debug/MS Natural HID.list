
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007670  08007670  00020178  2**0
                  CONTENTS
  4 .ARM          00000000  08007670  08007670  00020178  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007670  08007670  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007674  08007674  00017674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  08007678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  20000178  080077f0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  080077f0  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e5f  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003377  00000000  00000000  00036000  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00039378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  0003a418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001abfb  00000000  00000000  0003b350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010e02  00000000  00000000  00055f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cded  00000000  00000000  00066d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3b3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004310  00000000  00000000  000f3bb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000178 	.word	0x20000178
 8000128:	00000000 	.word	0x00000000
 800012c:	080075f0 	.word	0x080075f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000017c 	.word	0x2000017c
 8000148:	080075f0 	.word	0x080075f0

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b50      	ldr	r3, [pc, #320]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4f      	ldr	r2, [pc, #316]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b4d      	ldr	r3, [pc, #308]	; (80002a4 <MX_GPIO_Init+0x158>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b4a      	ldr	r3, [pc, #296]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a49      	ldr	r2, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a43      	ldr	r2, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b41      	ldr	r3, [pc, #260]	; (80002a4 <MX_GPIO_Init+0x158>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001c8:	f001 f869 	bl	800129e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4836      	ldr	r0, [pc, #216]	; (80002ac <MX_GPIO_Init+0x160>)
 80001d4:	f001 f863 	bl	800129e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001f2:	f000 fee3 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <MX_GPIO_Init+0x15c>)
 8000208:	f000 fed8 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000210:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <MX_GPIO_Init+0x160>)
 800021e:	f000 fecd 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000222:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000234:	f000 fec2 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0x160>)
 8000252:	f000 feb3 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_GPIO_Init+0x168>)
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x164>)
 800026c:	f000 fea6 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000286:	f000 fe99 	bl	8000fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2017      	movs	r0, #23
 8000290:	f000 fe5d 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000294:	2017      	movs	r0, #23
 8000296:	f000 fe76 	bl	8000f86 <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	10210000 	.word	0x10210000

080002b8 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <data_low+0x44>)
 80002c6:	f000 ffea 	bl	800129e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80002d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <data_low+0x44>)
 80002ee:	f000 fe65 	bl	8000fbc <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clock_low>:

void clock_low(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <clock_low+0x44>)
 800030e:	f000 ffc6 	bl	800129e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <clock_low+0x44>)
 8000336:	f000 fe41 	bl	8000fbc <HAL_GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <data_release>:

void data_release(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <data_release+0x34>)
 800036e:	f000 fe25 	bl	8000fbc <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00

08000380 <clock_release>:

void clock_release(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000396:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <clock_release+0x34>)
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <clock_release+0x38>)
 80003a6:	f000 fe09 	bl	8000fbc <HAL_GPIO_Init>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	10210000 	.word	0x10210000
 80003b8:	40010c00 	.word	0x40010c00

080003bc <process_keyboard_USB>:
/*********************/

uint8_t ready_to_send = 1;

void process_keyboard_USB(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <USB_HID_buffer_sent_Callback+0x14>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	701a      	strb	r2, [r3, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	20000000 	.word	0x20000000

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fc58 	bl	8000c98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f828 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f7ff feae 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003f0:	f006 fd1e 	bl	8006e30 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80003f4:	f000 fbbc 	bl	8000b70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <main+0x50>)
 80003fa:	f002 ffdd 	bl	80033b8 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 80003fe:	20fa      	movs	r0, #250	; 0xfa
 8000400:	f000 fb76 	bl	8000af0 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8000404:	2201      	movs	r2, #1
 8000406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040a:	480a      	ldr	r0, [pc, #40]	; (8000434 <main+0x54>)
 800040c:	f000 ff47 	bl	800129e <HAL_GPIO_WritePin>
  reset_us_counter();
 8000410:	f000 fb8c 	bl	8000b2c <reset_us_counter>
  init_PS2();
 8000414:	f000 f972 	bl	80006fc <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041e:	4806      	ldr	r0, [pc, #24]	; (8000438 <main+0x58>)
 8000420:	f000 ff3d 	bl	800129e <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000424:	f000 fa5c 	bl	80008e0 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8000428:	f7ff ffc8 	bl	80003bc <process_keyboard_USB>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 800042c:	e7fa      	b.n	8000424 <main+0x44>
 800042e:	bf00      	nop
 8000430:	200001f8 	.word	0x200001f8
 8000434:	40010800 	.word	0x40010800
 8000438:	40011000 	.word	0x40011000

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b094      	sub	sp, #80	; 0x50
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f007 f8c8 	bl	80075e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 0314 	add.w	r3, r7, #20
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800046c:	2301      	movs	r3, #1
 800046e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	2301      	movs	r3, #1
 800047c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047e:	2302      	movs	r3, #2
 8000480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800048c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000492:	4618      	mov	r0, r3
 8000494:	f002 faa0 	bl	80029d8 <HAL_RCC_OscConfig>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800049e:	f000 f828 	bl	80004f2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	230f      	movs	r3, #15
 80004a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f002 fd0a 	bl	8002ed8 <HAL_RCC_ClockConfig>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004ca:	f000 f812 	bl	80004f2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ce:	2310      	movs	r3, #16
 80004d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fe66 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004e6:	f000 f804 	bl	80004f2 <Error_Handler>
  }
}
 80004ea:	bf00      	nop
 80004ec:	3750      	adds	r7, #80	; 0x50
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f6:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <Error_Handler+0x6>
	...

080004fc <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800050c:	f040 80e6 	bne.w	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8000510:	4b74      	ldr	r3, [pc, #464]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d060      	beq.n	80005da <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8000518:	4b72      	ldr	r3, [pc, #456]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d109      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8000520:	4b70      	ldr	r3, [pc, #448]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000522:	2202      	movs	r2, #2
 8000524:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000526:	4b70      	ldr	r3, [pc, #448]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
				parity = 0;
 800052c:	4b6f      	ldr	r3, [pc, #444]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
				return;
 8000532:	e0d3      	b.n	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8000534:	4b6c      	ldr	r3, [pc, #432]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000536:	f993 3000 	ldrsb.w	r3, [r3]
 800053a:	2b07      	cmp	r3, #7
 800053c:	dc1b      	bgt.n	8000576 <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 800053e:	4b6c      	ldr	r3, [pc, #432]	; (80006f0 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	461a      	mov	r2, r3
 8000544:	4b68      	ldr	r3, [pc, #416]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000546:	f993 3000 	ldrsb.w	r3, [r3]
 800054a:	fa42 f303 	asr.w	r3, r2, r3
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	2b00      	cmp	r3, #0
 8000554:	d00c      	beq.n	8000570 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8000556:	4b65      	ldr	r3, [pc, #404]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf0c      	ite	eq
 800055e:	2301      	moveq	r3, #1
 8000560:	2300      	movne	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	4b61      	ldr	r3, [pc, #388]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000568:	701a      	strb	r2, [r3, #0]
					data_release();
 800056a:	f7ff feed 	bl	8000348 <data_release>
 800056e:	e02a      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8000570:	f7ff fea2 	bl	80002b8 <data_low>
 8000574:	e027      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8000576:	4b5c      	ldr	r3, [pc, #368]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000578:	f993 3000 	ldrsb.w	r3, [r3]
 800057c:	2b08      	cmp	r3, #8
 800057e:	d109      	bne.n	8000594 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8000580:	4b5a      	ldr	r3, [pc, #360]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8000588:	f7ff fede 	bl	8000348 <data_release>
 800058c:	e01b      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 800058e:	f7ff fe93 	bl	80002b8 <data_low>
 8000592:	e018      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8000594:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000596:	f993 3000 	ldrsb.w	r3, [r3]
 800059a:	2b09      	cmp	r3, #9
 800059c:	d102      	bne.n	80005a4 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 800059e:	f7ff fed3 	bl	8000348 <data_release>
 80005a2:	e010      	b.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005a6:	f993 3000 	ldrsb.w	r3, [r3]
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d10b      	bne.n	80005c6 <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 80005ae:	f7ff fecb 	bl	8000348 <data_release>
				sendMode = 0;
 80005b2:	4b4c      	ldr	r3, [pc, #304]	; (80006e4 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 80005b8:	4b4c      	ldr	r3, [pc, #304]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 80005be:	4b4a      	ldr	r3, [pc, #296]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
				return;
 80005c4:	e08a      	b.n	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 80005c6:	4b48      	ldr	r3, [pc, #288]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005c8:	f993 3000 	ldrsb.w	r3, [r3]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b25a      	sxtb	r2, r3
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005d6:	701a      	strb	r2, [r3, #0]
			return;
 80005d8:	e080      	b.n	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 80005da:	20c8      	movs	r0, #200	; 0xc8
 80005dc:	f000 fab2 	bl	8000b44 <check_us_counter>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d102      	bne.n	80005ec <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 80005e6:	4b40      	ldr	r3, [pc, #256]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 80005ec:	f000 fa9e 	bl	8000b2c <reset_us_counter>
			if (bitNr == 0)
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80005f2:	f993 3000 	ldrsb.w	r3, [r3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d10e      	bne.n	8000618 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 80005fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fe:	483d      	ldr	r0, [pc, #244]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000600:	f000 fe36 	bl	8001270 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d167      	bne.n	80006da <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 800060a:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000610:	4b36      	ldr	r3, [pc, #216]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
 8000616:	e056      	b.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8000618:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800061a:	f993 3000 	ldrsb.w	r3, [r3]
 800061e:	2b08      	cmp	r3, #8
 8000620:	dc1f      	bgt.n	8000662 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	085b      	lsrs	r3, r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4b33      	ldr	r3, [pc, #204]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800062c:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	4830      	ldr	r0, [pc, #192]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000634:	f000 fe1c 	bl	8001270 <HAL_GPIO_ReadPin>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d043      	beq.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000646:	b2da      	uxtb	r2, r3
 8000648:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800064a:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 800065e:	701a      	strb	r2, [r3, #0]
 8000660:	e031      	b.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000664:	f993 3000 	ldrsb.w	r3, [r3]
 8000668:	2b09      	cmp	r3, #9
 800066a:	d112      	bne.n	8000692 <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 800066c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000672:	f000 fdfd 	bl	8001270 <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d024      	beq.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	461a      	mov	r2, r3
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e019      	b.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000694:	f993 3000 	ldrsb.w	r3, [r3]
 8000698:	2b0a      	cmp	r3, #10
 800069a:	d114      	bne.n	80006c6 <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80006a2:	f000 fde5 	bl	8001270 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d008      	beq.n	80006be <HAL_GPIO_EXTI_Callback+0x1c2>
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <HAL_GPIO_EXTI_Callback+0x1f0>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d004      	beq.n	80006be <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f93f 	bl	800093c <buf_push>
				bitNr = 0;
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
				return;
 80006c4:	e00a      	b.n	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80006c8:	f993 3000 	ldrsb.w	r3, [r3]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	b25a      	sxtb	r2, r3
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	e000      	b.n	80006dc <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 80006da:	bf00      	nop
	}
}
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000194 	.word	0x20000194
 80006e8:	20000196 	.word	0x20000196
 80006ec:	2000019a 	.word	0x2000019a
 80006f0:	20000195 	.word	0x20000195
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	2000019b 	.word	0x2000019b

080006fc <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	f000 f820 	bl	8000748 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 8000708:	f000 f8cc 	bl	80008a4 <wait_response_PS2>
 800070c:	4603      	mov	r3, r0
 800070e:	2bfa      	cmp	r3, #250	; 0xfa
 8000710:	d004      	beq.n	800071c <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8000712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000716:	f000 f9eb 	bl	8000af0 <_delay_ms>
		send_PS2(PS2_RESET);
 800071a:	e7f2      	b.n	8000702 <init_PS2+0x6>
			break;
 800071c:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 800071e:	2364      	movs	r3, #100	; 0x64
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	e007      	b.n	8000734 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8000724:	f000 f8be 	bl	80008a4 <wait_response_PS2>
 8000728:	4603      	mov	r3, r0
 800072a:	2baa      	cmp	r3, #170	; 0xaa
 800072c:	d006      	beq.n	800073c <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	3b01      	subs	r3, #1
 8000732:	71fb      	strb	r3, [r7, #7]
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d1f4      	bne.n	8000724 <init_PS2+0x28>
			break;
	}
}
 800073a:	e000      	b.n	800073e <init_PS2+0x42>
			break;
 800073c:	bf00      	nop
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <send_PS2+0x3c>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
	clock_low();
 8000758:	f7ff fdd2 	bl	8000300 <clock_low>
	bitNr = 0;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <send_PS2+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <send_PS2+0x44>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f000 f9cc 	bl	8000b06 <_delay_us>

	data_low();
 800076e:	f7ff fda3 	bl	80002b8 <data_low>
	_delay_us(10);
 8000772:	200a      	movs	r0, #10
 8000774:	f000 f9c7 	bl	8000b06 <_delay_us>
	clock_release();
 8000778:	f7ff fe02 	bl	8000380 <clock_release>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000194 	.word	0x20000194
 8000788:	20000196 	.word	0x20000196
 800078c:	20000195 	.word	0x20000195

08000790 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 0302 	and.w	r3, r3, #2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d003      	beq.n	80007b0 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d003      	beq.n	80007c2 <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 80007ba:	7bfb      	ldrb	r3, [r7, #15]
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <SET_LEDS_Callback+0x5c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <SET_LEDS_Callback+0x60>)
 80007dc:	7bfb      	ldrb	r3, [r7, #15]
 80007de:	7013      	strb	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200001b5 	.word	0x200001b5
 80007f0:	200001b4 	.word	0x200001b4

080007f4 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	3301      	adds	r3, #1
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <USBD_Sleep_Callback+0x20>)
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000197 	.word	0x20000197

08000818 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <leds_PS2+0x84>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d02f      	beq.n	800088a <leds_PS2+0x72>
		return;
	if (buf_has_data())
 800082a:	f000 f8db 	bl	80009e4 <buf_has_data>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12c      	bne.n	800088e <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <leds_PS2+0x84>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	4817      	ldr	r0, [pc, #92]	; (80008a0 <leds_PS2+0x88>)
 8000842:	f000 fd2c 	bl	800129e <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 8000846:	2305      	movs	r3, #5
 8000848:	73fb      	strb	r3, [r7, #15]
 800084a:	e01a      	b.n	8000882 <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 800084c:	20ed      	movs	r0, #237	; 0xed
 800084e:	f7ff ff7b 	bl	8000748 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 8000852:	f000 f827 	bl	80008a4 <wait_response_PS2>
 8000856:	4603      	mov	r3, r0
 8000858:	2bfa      	cmp	r3, #250	; 0xfa
 800085a:	d003      	beq.n	8000864 <leds_PS2+0x4c>
		{
			_delay_ms(20);
 800085c:	2014      	movs	r0, #20
 800085e:	f000 f947 	bl	8000af0 <_delay_ms>
			continue;
 8000862:	e00b      	b.n	800087c <leds_PS2+0x64>
		}
		send_PS2(led);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff6e 	bl	8000748 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 800086c:	f000 f81a 	bl	80008a4 <wait_response_PS2>
 8000870:	4603      	mov	r3, r0
 8000872:	2bfa      	cmp	r3, #250	; 0xfa
 8000874:	d00d      	beq.n	8000892 <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 8000876:	2014      	movs	r0, #20
 8000878:	f000 f93a 	bl	8000af0 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3b01      	subs	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1e1      	bne.n	800084c <leds_PS2+0x34>
 8000888:	e004      	b.n	8000894 <leds_PS2+0x7c>
		return;
 800088a:	bf00      	nop
 800088c:	e002      	b.n	8000894 <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 800088e:	bf00      	nop
 8000890:	e000      	b.n	8000894 <leds_PS2+0x7c>
			return;
 8000892:	bf00      	nop
	}
}
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001b5 	.word	0x200001b5
 80008a0:	40011000 	.word	0x40011000

080008a4 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 80008aa:	2319      	movs	r3, #25
 80008ac:	71fb      	strb	r3, [r7, #7]
 80008ae:	e00a      	b.n	80008c6 <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 80008b0:	f000 f898 	bl	80009e4 <buf_has_data>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d109      	bne.n	80008ce <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 f918 	bl	8000af0 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1f1      	bne.n	80008b0 <wait_response_PS2+0xc>
 80008cc:	e000      	b.n	80008d0 <wait_response_PS2+0x2c>
			break;
 80008ce:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80008d0:	f000 f85e 	bl	8000990 <buf_pop>
 80008d4:	4603      	mov	r3, r0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	if (sleep)
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <process_PS2+0x50>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d012      	beq.n	8000912 <process_PS2+0x32>
	{
		leds_updated = 1;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <process_PS2+0x54>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <process_PS2+0x50>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d103      	bne.n	8000902 <process_PS2+0x22>
		{
			leds_PS2(0);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ff8c 	bl	8000818 <leds_PS2>
 8000900:	e004      	b.n	800090c <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <process_PS2+0x58>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff86 	bl	8000818 <leds_PS2>
		}
		sleep = 0;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <process_PS2+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 8000912:	f000 f867 	bl	80009e4 <buf_has_data>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d002      	beq.n	8000922 <process_PS2+0x42>
		buf_pop(); // TODO s here should be data processed
 800091c:	f000 f838 	bl	8000990 <buf_pop>
	else
		leds_PS2(leds_data);
}
 8000920:	e004      	b.n	800092c <process_PS2+0x4c>
		leds_PS2(leds_data);
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <process_PS2+0x58>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff76 	bl	8000818 <leds_PS2>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000197 	.word	0x20000197
 8000934:	200001b5 	.word	0x200001b5
 8000938:	200001b4 	.word	0x200001b4

0800093c <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <buf_push+0x48>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	425a      	negs	r2, r3
 800094e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000952:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000956:	bf58      	it	pl
 8000958:	4253      	negpl	r3, r2
 800095a:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <buf_push+0x4c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	7bfa      	ldrb	r2, [r7, #15]
 8000962:	429a      	cmp	r2, r3
 8000964:	d008      	beq.n	8000978 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <buf_push+0x48>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <buf_push+0x50>)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <buf_push+0x48>)
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	7013      	strb	r3, [r2, #0]
    }
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000198 	.word	0x20000198
 8000988:	20000199 	.word	0x20000199
 800098c:	200001b8 	.word	0x200001b8

08000990 <buf_pop>:

uint8_t buf_pop(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <buf_pop+0x48>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <buf_pop+0x4c>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d012      	beq.n	80009cc <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <buf_pop+0x4c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <buf_pop+0x50>)
 80009ae:	5c9b      	ldrb	r3, [r3, r2]
 80009b0:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <buf_pop+0x4c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	425a      	negs	r2, r3
 80009ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009c2:	bf58      	it	pl
 80009c4:	4253      	negpl	r3, r2
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <buf_pop+0x4c>)
 80009ca:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	20000198 	.word	0x20000198
 80009dc:	20000199 	.word	0x20000199
 80009e0:	200001b8 	.word	0x200001b8

080009e4 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <buf_has_data+0x20>)
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <buf_has_data+0x24>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000198 	.word	0x20000198
 8000a08:	20000199 	.word	0x20000199

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6193      	str	r3, [r2, #24]
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	61d3      	str	r3, [r2, #28]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x5c>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_MspInit+0x60>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_MspInit+0x60>)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010000 	.word	0x40010000

08000a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <NMI_Handler+0x4>

08000a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <HardFault_Handler+0x4>

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f935 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ac6:	f000 fd4c 	bl	8001562 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000708 	.word	0x20000708

08000ad4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ad8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000adc:	f000 fbf8 	bl	80012d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f92f 	bl	8000d5c <HAL_Delay>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8000b10:	f000 f80c 	bl	8000b2c <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8000b14:	bf00      	nop
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f813 	bl	8000b44 <check_us_counter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f8      	bne.n	8000b16 <_delay_us+0x10>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <reset_us_counter>:

inline void reset_us_counter(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <reset_us_counter+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	200001f8 	.word	0x200001f8

08000b44 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <check_us_counter+0x28>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	bf8c      	ite	hi
 8000b5c:	2301      	movhi	r3, #1
 8000b5e:	2300      	movls	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	200001f8 	.word	0x200001f8

08000b70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_TIM1_Init+0x9c>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b94:	222f      	movs	r2, #47	; 0x2f
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bba:	f002 fbad 	bl	8003318 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f7ff fc95 	bl	80004f2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bd6:	f002 fc39 	bl	800344c <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000be0:	f7ff fc87 	bl	80004f2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bf2:	f002 fddb 	bl	80037ac <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bfc:	f7ff fc79 	bl	80004f2 <Error_Handler>
  }

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001f8 	.word	0x200001f8
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_TIM_Base_MspInit+0x34>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_TIM_Base_MspInit+0x38>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40012c00 	.word	0x40012c00
 8000c48:	40021000 	.word	0x40021000

08000c4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c4e:	e003      	b.n	8000c58 <LoopCopyDataInit>

08000c50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c56:	3104      	adds	r1, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c60:	d3f6      	bcc.n	8000c50 <CopyDataInit>
  ldr r2, =_sbss
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c64:	e002      	b.n	8000c6c <LoopFillZerobss>

08000c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c68:	f842 3b04 	str.w	r3, [r2], #4

08000c6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c70:	d3f9      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c72:	f7ff ff37 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f006 fc8f 	bl	8007598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7a:	f7ff fbb1 	bl	80003e0 <main>
  bx lr
 8000c7e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c80:	08007678 	.word	0x08007678
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c88:	20000178 	.word	0x20000178
  ldr r2, =_sbss
 8000c8c:	20000178 	.word	0x20000178
  ldr r3, = _ebss
 8000c90:	200009f4 	.word	0x200009f4

08000c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC1_2_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x28>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x28>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f945 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff feaa 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f95d 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f925 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x1c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_IncTick+0x20>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a03      	ldr	r2, [pc, #12]	; (8000d44 <HAL_IncTick+0x20>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	2000000c 	.word	0x2000000c
 8000d44:	20000240 	.word	0x20000240

08000d48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <HAL_GetTick+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	20000240 	.word	0x20000240

08000d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d64:	f7ff fff0 	bl	8000d48 <HAL_GetTick>
 8000d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d74:	d005      	beq.n	8000d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_Delay+0x40>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d82:	bf00      	nop
 8000d84:	f7ff ffe0 	bl	8000d48 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d8f7      	bhi.n	8000d84 <HAL_Delay+0x28>
  {
  }
}
 8000d94:	bf00      	nop
 8000d96:	3710      	adds	r7, #16
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff2d 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff42 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff35 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	; 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e127      	b.n	8001220 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8116 	bne.w	800121a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d034      	beq.n	8001060 <HAL_GPIO_Init+0xa4>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d80d      	bhi.n	8001016 <HAL_GPIO_Init+0x5a>
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d02b      	beq.n	8001056 <HAL_GPIO_Init+0x9a>
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d804      	bhi.n	800100c <HAL_GPIO_Init+0x50>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d031      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d01c      	beq.n	8001044 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100a:	e048      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100c:	2b03      	cmp	r3, #3
 800100e:	d043      	beq.n	8001098 <HAL_GPIO_Init+0xdc>
 8001010:	2b11      	cmp	r3, #17
 8001012:	d01b      	beq.n	800104c <HAL_GPIO_Init+0x90>
          break;
 8001014:	e043      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001016:	4a89      	ldr	r2, [pc, #548]	; (800123c <HAL_GPIO_Init+0x280>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d026      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800101c:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_GPIO_Init+0x280>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <HAL_GPIO_Init+0x74>
 8001022:	4a87      	ldr	r2, [pc, #540]	; (8001240 <HAL_GPIO_Init+0x284>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d020      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001028:	4a86      	ldr	r2, [pc, #536]	; (8001244 <HAL_GPIO_Init+0x288>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01d      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 800102e:	e036      	b.n	800109e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001030:	4a85      	ldr	r2, [pc, #532]	; (8001248 <HAL_GPIO_Init+0x28c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0xae>
 8001036:	4a85      	ldr	r2, [pc, #532]	; (800124c <HAL_GPIO_Init+0x290>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d016      	beq.n	800106a <HAL_GPIO_Init+0xae>
 800103c:	4a84      	ldr	r2, [pc, #528]	; (8001250 <HAL_GPIO_Init+0x294>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0xae>
          break;
 8001042:	e02c      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	623b      	str	r3, [r7, #32]
          break;
 800104a:	e028      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	3304      	adds	r3, #4
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e023      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	3308      	adds	r3, #8
 800105c:	623b      	str	r3, [r7, #32]
          break;
 800105e:	e01e      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	330c      	adds	r3, #12
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e019      	b.n	800109e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001072:	2304      	movs	r3, #4
 8001074:	623b      	str	r3, [r7, #32]
          break;
 8001076:	e012      	b.n	800109e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d105      	bne.n	800108c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001080:	2308      	movs	r3, #8
 8001082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	611a      	str	r2, [r3, #16]
          break;
 800108a:	e008      	b.n	800109e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800108c:	2308      	movs	r3, #8
 800108e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	615a      	str	r2, [r3, #20]
          break;
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	2bff      	cmp	r3, #255	; 0xff
 80010a2:	d801      	bhi.n	80010a8 <HAL_GPIO_Init+0xec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	e001      	b.n	80010ac <HAL_GPIO_Init+0xf0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3304      	adds	r3, #4
 80010ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	2bff      	cmp	r3, #255	; 0xff
 80010b2:	d802      	bhi.n	80010ba <HAL_GPIO_Init+0xfe>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_Init+0x104>
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	3b08      	subs	r3, #8
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	210f      	movs	r1, #15
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	6a39      	ldr	r1, [r7, #32]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	431a      	orrs	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 8096 	beq.w	800121a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ee:	4b59      	ldr	r3, [pc, #356]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	4a58      	ldr	r2, [pc, #352]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6193      	str	r3, [r2, #24]
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <HAL_GPIO_Init+0x298>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001106:	4a54      	ldr	r2, [pc, #336]	; (8001258 <HAL_GPIO_Init+0x29c>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x2a0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x19e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x2a4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x19a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x2a8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x196>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a48      	ldr	r2, [pc, #288]	; (8001268 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x192>
 800114a:	2303      	movs	r3, #3
 800114c:	e006      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 800114e:	2304      	movs	r3, #4
 8001150:	e004      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x1a0>
 800115a:	2300      	movs	r3, #0
 800115c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	4093      	lsls	r3, r2
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4313      	orrs	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800116c:	493a      	ldr	r1, [pc, #232]	; (8001258 <HAL_GPIO_Init+0x29c>)
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4938      	ldr	r1, [pc, #224]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	600b      	str	r3, [r1, #0]
 8001192:	e006      	b.n	80011a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001194:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	43db      	mvns	r3, r3
 800119c:	4933      	ldr	r1, [pc, #204]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800119e:	4013      	ands	r3, r2
 80011a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	492e      	ldr	r1, [pc, #184]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	604b      	str	r3, [r1, #4]
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	4929      	ldr	r1, [pc, #164]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	4924      	ldr	r1, [pc, #144]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	491f      	ldr	r1, [pc, #124]	; (800126c <HAL_GPIO_Init+0x2b0>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	491a      	ldr	r1, [pc, #104]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	60cb      	str	r3, [r1, #12]
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_GPIO_Init+0x2b0>)
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	43db      	mvns	r3, r3
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <HAL_GPIO_Init+0x2b0>)
 8001216:	4013      	ands	r3, r2
 8001218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121c:	3301      	adds	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	fa22 f303 	lsr.w	r3, r2, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	f47f aed0 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 8001230:	bf00      	nop
 8001232:	372c      	adds	r7, #44	; 0x2c
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	10210000 	.word	0x10210000
 8001240:	10110000 	.word	0x10110000
 8001244:	10120000 	.word	0x10120000
 8001248:	10310000 	.word	0x10310000
 800124c:	10320000 	.word	0x10320000
 8001250:	10220000 	.word	0x10220000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010000 	.word	0x40010000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
 8001264:	40011000 	.word	0x40011000
 8001268:	40011400 	.word	0x40011400
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d002      	beq.n	800128e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e001      	b.n	8001292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001292:	7bfb      	ldrb	r3, [r7, #15]
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
 80012aa:	4613      	mov	r3, r2
 80012ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ae:	787b      	ldrb	r3, [r7, #1]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b4:	887a      	ldrh	r2, [r7, #2]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012ba:	e003      	b.n	80012c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	041a      	lsls	r2, r3, #16
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	611a      	str	r2, [r3, #16]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	88fb      	ldrh	r3, [r7, #6]
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f904 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40010400 	.word	0x40010400

08001300 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b08b      	sub	sp, #44	; 0x2c
 8001304:	af06      	add	r7, sp, #24
 8001306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0fd      	b.n	800150e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f005 feb6 	bl	8007098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fabb 	bl	80038b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	687e      	ldr	r6, [r7, #4]
 8001346:	466d      	mov	r5, sp
 8001348:	f106 0410 	add.w	r4, r6, #16
 800134c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	1d33      	adds	r3, r6, #4
 8001356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001358:	6838      	ldr	r0, [r7, #0]
 800135a:	f002 fa85 	bl	8003868 <USB_CoreInit>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d005      	beq.n	8001370 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0ce      	b.n	800150e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fab6 	bl	80038e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e04c      	b.n	800141c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	3301      	adds	r3, #1
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	b298      	uxth	r0, r3
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3336      	adds	r3, #54	; 0x36
 80013c0:	4602      	mov	r2, r0
 80013c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	3303      	adds	r3, #3
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3338      	adds	r3, #56	; 0x38
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	440b      	add	r3, r1
 80013fc:	333c      	adds	r3, #60	; 0x3c
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	440b      	add	r3, r1
 8001410:	3340      	adds	r3, #64	; 0x40
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	3301      	adds	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	429a      	cmp	r2, r3
 8001424:	d3ad      	bcc.n	8001382 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e044      	b.n	80014b6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800146e:	7bfa      	ldrb	r2, [r7, #15]
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800149a:	7bfa      	ldrb	r2, [r7, #15]
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	440b      	add	r3, r1
 80014a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	3301      	adds	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	7bfa      	ldrb	r2, [r7, #15]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3b5      	bcc.n	800142c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	687e      	ldr	r6, [r7, #4]
 80014c8:	466d      	mov	r5, sp
 80014ca:	f106 0410 	add.w	r4, r6, #16
 80014ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	602b      	str	r3, [r5, #0]
 80014d6:	1d33      	adds	r3, r6, #4
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	6838      	ldr	r0, [r7, #0]
 80014dc:	f002 fa10 	bl	8003900 <USB_DevInit>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00d      	b.n	800150e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f004 f9aa 	bl	8005860 <USB_DevDisconnect>

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001516 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_PCD_Start+0x16>
 8001528:	2302      	movs	r3, #2
 800152a:	e016      	b.n	800155a <HAL_PCD_Start+0x44>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 f9a5 	bl	8003888 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800153e:	2101      	movs	r1, #1
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f005 fff2 	bl	800752a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f004 f97e 	bl	800584c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b088      	sub	sp, #32
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 f980 	bl	8005874 <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800157e:	d102      	bne.n	8001586 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 fb4a 	bl	8001c1a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f004 f972 	bl	8005874 <USB_ReadInterrupts>
 8001590:	4603      	mov	r3, r0
 8001592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159a:	d112      	bne.n	80015c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f005 fdea 	bl	800718e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015ba:	2100      	movs	r1, #0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f925 	bl	800180c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f004 f954 	bl	8005874 <USB_ReadInterrupts>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015d6:	d10b      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015ea:	b292      	uxth	r2, r2
 80015ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f004 f93d 	bl	8005874 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001604:	d10b      	bne.n	800161e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f004 f926 	bl	8005874 <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001632:	d126      	bne.n	8001682 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0204 	bic.w	r2, r2, #4
 8001646:	b292      	uxth	r2, r2
 8001648:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001654:	b29a      	uxth	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0208 	bic.w	r2, r2, #8
 800165e:	b292      	uxth	r2, r2
 8001660:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f005 fdc1 	bl	80071ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800167c:	b292      	uxth	r2, r2
 800167e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 f8f4 	bl	8005874 <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001696:	f040 8084 	bne.w	80017a2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	77fb      	strb	r3, [r7, #31]
 800169e:	e011      	b.n	80016c4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	7ffb      	ldrb	r3, [r7, #31]
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	441a      	add	r2, r3
 80016ac:	7ffb      	ldrb	r3, [r7, #31]
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	b292      	uxth	r2, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	f107 0120 	add.w	r1, r7, #32
 80016b8:	440b      	add	r3, r1
 80016ba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016be:	7ffb      	ldrb	r3, [r7, #31]
 80016c0:	3301      	adds	r3, #1
 80016c2:	77fb      	strb	r3, [r7, #31]
 80016c4:	7ffb      	ldrb	r3, [r7, #31]
 80016c6:	2b07      	cmp	r3, #7
 80016c8:	d9ea      	bls.n	80016a0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f042 0201 	orr.w	r2, r2, #1
 80016dc:	b292      	uxth	r2, r2
 80016de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	b292      	uxth	r2, r2
 80016f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016fa:	bf00      	nop
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001704:	b29b      	uxth	r3, r3
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f6      	beq.n	80016fc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001716:	b29a      	uxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001720:	b292      	uxth	r2, r2
 8001722:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	77fb      	strb	r3, [r7, #31]
 800172a:	e010      	b.n	800174e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800172c:	7ffb      	ldrb	r3, [r7, #31]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4611      	mov	r1, r2
 8001734:	7ffa      	ldrb	r2, [r7, #31]
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	440a      	add	r2, r1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	f107 0120 	add.w	r1, r7, #32
 8001740:	440b      	add	r3, r1
 8001742:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001746:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001748:	7ffb      	ldrb	r3, [r7, #31]
 800174a:	3301      	adds	r3, #1
 800174c:	77fb      	strb	r3, [r7, #31]
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	2b07      	cmp	r3, #7
 8001752:	d9eb      	bls.n	800172c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0208 	orr.w	r2, r2, #8
 8001766:	b292      	uxth	r2, r2
 8001768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800177e:	b292      	uxth	r2, r2
 8001780:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800178c:	b29a      	uxth	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0204 	orr.w	r2, r2, #4
 8001796:	b292      	uxth	r2, r2
 8001798:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f005 fd14 	bl	80071ca <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 f864 	bl	8005874 <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b6:	d10e      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017ca:	b292      	uxth	r2, r2
 80017cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f005 fcce 	bl	8007172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 f84a 	bl	8005874 <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017ea:	d10b      	bne.n	8001804 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017fe:	b292      	uxth	r2, r2
 8001800:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001804:	bf00      	nop
 8001806:	3720      	adds	r7, #32
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_PCD_SetAddress+0x1a>
 8001822:	2302      	movs	r3, #2
 8001824:	e013      	b.n	800184e <HAL_PCD_SetAddress+0x42>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	78fa      	ldrb	r2, [r7, #3]
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fff1 	bl	8005826 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	4608      	mov	r0, r1
 8001860:	4611      	mov	r1, r2
 8001862:	461a      	mov	r2, r3
 8001864:	4603      	mov	r3, r0
 8001866:	70fb      	strb	r3, [r7, #3]
 8001868:	460b      	mov	r3, r1
 800186a:	803b      	strh	r3, [r7, #0]
 800186c:	4613      	mov	r3, r2
 800186e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da0e      	bge.n	800189a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2201      	movs	r2, #1
 8001896:	705a      	strb	r2, [r3, #1]
 8001898:	e00e      	b.n	80018b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f003 0207 	and.w	r2, r3, #7
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018c4:	883a      	ldrh	r2, [r7, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	78ba      	ldrb	r2, [r7, #2]
 80018ce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018e2:	78bb      	ldrb	r3, [r7, #2]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d102      	bne.n	80018ee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_PCD_EP_Open+0xa6>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e00e      	b.n	800191a <HAL_PCD_EP_Open+0xc4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68f9      	ldr	r1, [r7, #12]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 f818 	bl	8003940 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001918:	7afb      	ldrb	r3, [r7, #11]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800192e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001932:	2b00      	cmp	r3, #0
 8001934:	da0e      	bge.n	8001954 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	705a      	strb	r2, [r3, #1]
 8001952:	e00e      	b.n	8001972 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 0207 	and.w	r2, r3, #7
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_PCD_EP_Close+0x6a>
 8001988:	2302      	movs	r3, #2
 800198a:	e00e      	b.n	80019aa <HAL_PCD_EP_Close+0x88>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fb3a 	bl	8004014 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	f003 0207 	and.w	r2, r3, #7
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	2200      	movs	r2, #0
 80019f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f2:	7afb      	ldrb	r3, [r7, #11]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d106      	bne.n	8001a16 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6979      	ldr	r1, [r7, #20]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fcec 	bl	80043ec <USB_EPStartXfer>
 8001a14:	e005      	b.n	8001a22 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6979      	ldr	r1, [r7, #20]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fce5 	bl	80043ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2201      	movs	r2, #1
 8001a76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a84:	7afb      	ldrb	r3, [r7, #11]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d106      	bne.n	8001a9c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 fca9 	bl	80043ec <USB_EPStartXfer>
 8001a9a:	e005      	b.n	8001aa8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f002 fca2 	bl	80043ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 0207 	and.w	r2, r3, #7
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d901      	bls.n	8001ad0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e04c      	b.n	8001b6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ad0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da0e      	bge.n	8001af6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	705a      	strb	r2, [r3, #1]
 8001af4:	e00c      	b.n	8001b10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_PCD_EP_SetStall+0x7e>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e01c      	b.n	8001b6a <HAL_PCD_EP_SetStall+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fd74 	bl	800562c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	f003 fe99 	bl	8005892 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 020f 	and.w	r2, r3, #15
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d901      	bls.n	8001b90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e040      	b.n	8001c12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da0e      	bge.n	8001bb6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	705a      	strb	r2, [r3, #1]
 8001bb4:	e00e      	b.n	8001bd4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0207 	and.w	r2, r3, #7
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d101      	bne.n	8001bf4 <HAL_PCD_EP_ClrStall+0x82>
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e00e      	b.n	8001c12 <HAL_PCD_EP_ClrStall+0xa0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fd62 	bl	80056cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b08e      	sub	sp, #56	; 0x38
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c22:	e2df      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c2c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8158 	bne.w	8001ef4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d152      	bne.n	8001cf4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	89fb      	ldrh	r3, [r7, #14]
 8001c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3328      	adds	r3, #40	; 0x28
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	441a      	add	r2, r3
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f005 fa42 	bl	800713e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 828e 	beq.w	80021e4 <PCD_EP_ISR_Handler+0x5ca>
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 8289 	bne.w	80021e4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b292      	uxth	r2, r2
 8001ce6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cf2:	e277      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d034      	beq.n	8001d78 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	3306      	adds	r3, #6
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f003 fdef 	bl	8005930 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d5e:	4013      	ands	r3, r2
 8001d60:	823b      	strh	r3, [r7, #16]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	8a3a      	ldrh	r2, [r7, #16]
 8001d68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f005 f9b7 	bl	80070e4 <HAL_PCD_SetupStageCallback>
 8001d76:	e235      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d78:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f280 8231 	bge.w	80021e4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d8e:	4013      	ands	r3, r2
 8001d90:	83bb      	strh	r3, [r7, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	8bba      	ldrh	r2, [r7, #28]
 8001d98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	3306      	adds	r3, #6
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d019      	beq.n	8001e08 <PCD_EP_ISR_Handler+0x1ee>
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d015      	beq.n	8001e08 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	6959      	ldr	r1, [r3, #20]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	f003 fd9f 	bl	8005930 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	441a      	add	r2, r3
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e00:	2100      	movs	r1, #0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f005 f980 	bl	8007108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	61bb      	str	r3, [r7, #24]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d112      	bne.n	8001e56 <PCD_EP_ISR_Handler+0x23c>
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	801a      	strh	r2, [r3, #0]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	801a      	strh	r2, [r3, #0]
 8001e54:	e02f      	b.n	8001eb6 <PCD_EP_ISR_Handler+0x29c>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001e5c:	d813      	bhi.n	8001e86 <PCD_EP_ISR_Handler+0x26c>
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	085b      	lsrs	r3, r3, #1
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <PCD_EP_ISR_Handler+0x25e>
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	3301      	adds	r3, #1
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
 8001e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	029b      	lsls	r3, r3, #10
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	801a      	strh	r2, [r3, #0]
 8001e84:	e017      	b.n	8001eb6 <PCD_EP_ISR_Handler+0x29c>
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <PCD_EP_ISR_Handler+0x286>
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	029b      	lsls	r3, r3, #10
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	827b      	strh	r3, [r7, #18]
 8001ec8:	8a7b      	ldrh	r3, [r7, #18]
 8001eca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ece:	827b      	strh	r3, [r7, #18]
 8001ed0:	8a7b      	ldrh	r3, [r7, #18]
 8001ed2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ed6:	827b      	strh	r3, [r7, #18]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	8a7b      	ldrh	r3, [r7, #18]
 8001ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	8013      	strh	r3, [r2, #0]
 8001ef2:	e177      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f06:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f280 80ea 	bge.w	80020e4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f26:	4013      	ands	r3, r2
 8001f28:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f3e:	b292      	uxth	r2, r2
 8001f40:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	7b1b      	ldrb	r3, [r3, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d122      	bne.n	8001fa6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	3306      	adds	r3, #6
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f88:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8087 	beq.w	80020a0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6818      	ldr	r0, [r3, #0]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	6959      	ldr	r1, [r3, #20]
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	88da      	ldrh	r2, [r3, #6]
 8001f9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001fa0:	f003 fcc6 	bl	8005930 <USB_ReadPMA>
 8001fa4:	e07c      	b.n	80020a0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	78db      	ldrb	r3, [r3, #3]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d108      	bne.n	8001fc0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f923 	bl	8002200 <HAL_PCD_EP_DB_Receive>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fbe:	e06f      	b.n	80020a0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fda:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d021      	beq.n	800205e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	3302      	adds	r3, #2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	4413      	add	r3, r2
 8002038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002042:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02a      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	6959      	ldr	r1, [r3, #20]
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	891a      	ldrh	r2, [r3, #8]
 8002056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002058:	f003 fc6a 	bl	8005930 <USB_ReadPMA>
 800205c:	e020      	b.n	80020a0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002066:	b29b      	uxth	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	3306      	adds	r3, #6
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	4413      	add	r3, r2
 800207c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002086:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800208a:	2b00      	cmp	r3, #0
 800208c:	d008      	beq.n	80020a0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	6959      	ldr	r1, [r3, #20]
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	895a      	ldrh	r2, [r3, #10]
 800209a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209c:	f003 fc48 	bl	8005930 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a6:	441a      	add	r2, r3
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020b2:	441a      	add	r2, r3
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <PCD_EP_ISR_Handler+0x4b0>
 80020c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d206      	bcs.n	80020d8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f005 f819 	bl	8007108 <HAL_PCD_DataOutStageCallback>
 80020d6:	e005      	b.n	80020e4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 f984 	bl	80043ec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d07a      	beq.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80020ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211c:	843b      	strh	r3, [r7, #32]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	441a      	add	r2, r3
 800212c:	8c3b      	ldrh	r3, [r7, #32]
 800212e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002136:	b29b      	uxth	r3, r3
 8002138:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	78db      	ldrb	r3, [r3, #3]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d108      	bne.n	8002154 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002146:	2b02      	cmp	r3, #2
 8002148:	d146      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800214a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d141      	bne.n	80021d8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	3302      	adds	r3, #2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	429a      	cmp	r2, r3
 8002186:	d906      	bls.n	8002196 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	8bfb      	ldrh	r3, [r7, #30]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	e002      	b.n	800219c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800219c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f004 ffc7 	bl	800713e <HAL_PCD_DataInStageCallback>
 80021b0:	e018      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	8bfb      	ldrh	r3, [r7, #30]
 80021b8:	441a      	add	r2, r3
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	8bfb      	ldrh	r3, [r7, #30]
 80021c4:	441a      	add	r2, r3
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 f90b 	bl	80043ec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021d6:	e005      	b.n	80021e4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021da:	461a      	mov	r2, r3
 80021dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f91b 	bl	800241a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b21b      	sxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f6ff ad17 	blt.w	8001c24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3738      	adds	r7, #56	; 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d07e      	beq.n	8002316 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002220:	b29b      	uxth	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	3302      	adds	r3, #2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	4413      	add	r3, r2
 8002236:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002240:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	8b7b      	ldrh	r3, [r7, #26]
 8002248:	429a      	cmp	r2, r3
 800224a:	d306      	bcc.n	800225a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	8b7b      	ldrh	r3, [r7, #26]
 8002252:	1ad2      	subs	r2, r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	619a      	str	r2, [r3, #24]
 8002258:	e002      	b.n	8002260 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d123      	bne.n	80022b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800227e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002282:	833b      	strh	r3, [r7, #24]
 8002284:	8b3b      	ldrh	r3, [r7, #24]
 8002286:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800228a:	833b      	strh	r3, [r7, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	441a      	add	r2, r3
 800229a:	8b3b      	ldrh	r3, [r7, #24]
 800229c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d01f      	beq.n	80022fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d4:	82fb      	strh	r3, [r7, #22]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022fa:	8b7b      	ldrh	r3, [r7, #26]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8087 	beq.w	8002410 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	6959      	ldr	r1, [r3, #20]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	891a      	ldrh	r2, [r3, #8]
 800230e:	8b7b      	ldrh	r3, [r7, #26]
 8002310:	f003 fb0e 	bl	8005930 <USB_ReadPMA>
 8002314:	e07c      	b.n	8002410 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	3306      	adds	r3, #6
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4413      	add	r3, r2
 8002334:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	8b7b      	ldrh	r3, [r7, #26]
 8002346:	429a      	cmp	r2, r3
 8002348:	d306      	bcc.n	8002358 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	8b7b      	ldrh	r3, [r7, #26]
 8002350:	1ad2      	subs	r2, r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	619a      	str	r2, [r3, #24]
 8002356:	e002      	b.n	800235e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2200      	movs	r2, #0
 800235c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d123      	bne.n	80023ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800237c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002380:	83fb      	strh	r3, [r7, #30]
 8002382:	8bfb      	ldrh	r3, [r7, #30]
 8002384:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002388:	83fb      	strh	r3, [r7, #30]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	441a      	add	r2, r3
 8002398:	8bfb      	ldrh	r3, [r7, #30]
 800239a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800239e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11f      	bne.n	80023f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	83bb      	strh	r3, [r7, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	8bbb      	ldrh	r3, [r7, #28]
 80023e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023f8:	8b7b      	ldrh	r3, [r7, #26]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d008      	beq.n	8002410 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	895a      	ldrh	r2, [r3, #10]
 800240a:	8b7b      	ldrh	r3, [r7, #26]
 800240c:	f003 fa90 	bl	8005930 <USB_ReadPMA>
    }
  }

  return count;
 8002410:	8b7b      	ldrh	r3, [r7, #26]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b092      	sub	sp, #72	; 0x48
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	4613      	mov	r3, r2
 8002426:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 8132 	beq.w	8002698 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243c:	b29b      	uxth	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4413      	add	r3, r2
 8002448:	3302      	adds	r3, #2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4413      	add	r3, r2
 8002452:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002464:	429a      	cmp	r2, r3
 8002466:	d906      	bls.n	8002476 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800246e:	1ad2      	subs	r2, r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	619a      	str	r2, [r3, #24]
 8002474:	e002      	b.n	800247c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d12c      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f004 fe57 	bl	800713e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 822f 	beq.w	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b6:	827b      	strh	r3, [r7, #18]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	8a7b      	ldrh	r3, [r7, #18]
 80024c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d8:	b29b      	uxth	r3, r3
 80024da:	8013      	strh	r3, [r2, #0]
 80024dc:	e20d      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01f      	beq.n	8002528 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 81e3 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800253a:	441a      	add	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002546:	441a      	add	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	6a1a      	ldr	r2, [r3, #32]
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d309      	bcc.n	800256c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002564:	1ad2      	subs	r2, r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	621a      	str	r2, [r3, #32]
 800256a:	e014      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d106      	bne.n	8002582 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002580:	e009      	b.n	8002596 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d155      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x230>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	4413      	add	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	011a      	lsls	r2, r3, #4
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	4413      	add	r3, r2
 80025c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d112      	bne.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	801a      	strh	r2, [r3, #0]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	801a      	strh	r2, [r3, #0]
 80025f0:	e047      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x268>
 80025f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f4:	2b3e      	cmp	r3, #62	; 0x3e
 80025f6:	d811      	bhi.n	800261c <HAL_PCD_EP_DB_Transmit+0x202>
 80025f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	3301      	adds	r3, #1
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	b29b      	uxth	r3, r3
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	b29a      	uxth	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	801a      	strh	r2, [r3, #0]
 800261a:	e032      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x268>
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_PCD_EP_DB_Transmit+0x218>
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	b29b      	uxth	r3, r3
 8002636:	029b      	lsls	r3, r3, #10
 8002638:	b29b      	uxth	r3, r3
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	b29a      	uxth	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	e01b      	b.n	8002682 <HAL_PCD_EP_DB_Transmit+0x268>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	785b      	ldrb	r3, [r3, #1]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d117      	bne.n	8002682 <HAL_PCD_EP_DB_Transmit+0x268>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	4413      	add	r3, r2
 8002668:	623b      	str	r3, [r7, #32]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	011a      	lsls	r2, r3, #4
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	4413      	add	r3, r2
 8002674:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	b29a      	uxth	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6959      	ldr	r1, [r3, #20]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	891a      	ldrh	r2, [r3, #8]
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	b29b      	uxth	r3, r3
 8002692:	f003 f909 	bl	80058a8 <USB_WritePMA>
 8002696:	e130      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	3306      	adds	r3, #6
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d306      	bcc.n	80026da <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80026d2:	1ad2      	subs	r2, r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	619a      	str	r2, [r3, #24]
 80026d8:	e002      	b.n	80026e0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12c      	bne.n	8002742 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f004 fd25 	bl	800713e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 80fd 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800272c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	b29b      	uxth	r3, r3
 800273e:	8013      	strh	r3, [r2, #0]
 8002740:	e0db      	b.n	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11f      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	b29b      	uxth	r3, r3
 800275e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	441a      	add	r2, r3
 8002776:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800277c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	b29b      	uxth	r3, r3
 800278a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80b1 	bne.w	80028fa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800279e:	441a      	add	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	69da      	ldr	r2, [r3, #28]
 80027a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027aa:	441a      	add	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6a1a      	ldr	r2, [r3, #32]
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d309      	bcc.n	80027d0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	6a1a      	ldr	r2, [r3, #32]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	1ad2      	subs	r2, r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	621a      	str	r2, [r3, #32]
 80027ce:	e014      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80027d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027e4:	e009      	b.n	80027fa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	785b      	ldrb	r3, [r3, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d155      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281c:	4413      	add	r3, r2
 800281e:	647b      	str	r3, [r7, #68]	; 0x44
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	011a      	lsls	r2, r3, #4
 8002826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002828:	4413      	add	r3, r2
 800282a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
 8002830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d112      	bne.n	800285c <HAL_PCD_EP_DB_Transmit+0x442>
 8002836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002840:	b29a      	uxth	r2, r3
 8002842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002854:	b29a      	uxth	r2, r3
 8002856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	e044      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285e:	2b3e      	cmp	r3, #62	; 0x3e
 8002860:	d811      	bhi.n	8002886 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002874:	3301      	adds	r3, #1
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	b29b      	uxth	r3, r3
 800287c:	029b      	lsls	r3, r3, #10
 800287e:	b29a      	uxth	r2, r3
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	801a      	strh	r2, [r3, #0]
 8002884:	e02f      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	095b      	lsrs	r3, r3, #5
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_PCD_EP_DB_Transmit+0x482>
 8002896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002898:	3b01      	subs	r3, #1
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289e:	b29b      	uxth	r3, r3
 80028a0:	029b      	lsls	r3, r3, #10
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	e018      	b.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d114      	bne.n	80028e6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	4413      	add	r3, r2
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	011a      	lsls	r2, r3, #4
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	4413      	add	r3, r2
 80028d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028dc:	633b      	str	r3, [r7, #48]	; 0x30
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6959      	ldr	r1, [r3, #20]
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	895a      	ldrh	r2, [r3, #10]
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f002 ffd7 	bl	80058a8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002914:	823b      	strh	r3, [r7, #16]
 8002916:	8a3b      	ldrh	r3, [r7, #16]
 8002918:	f083 0310 	eor.w	r3, r3, #16
 800291c:	823b      	strh	r3, [r7, #16]
 800291e:	8a3b      	ldrh	r3, [r7, #16]
 8002920:	f083 0320 	eor.w	r3, r3, #32
 8002924:	823b      	strh	r3, [r7, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	441a      	add	r2, r3
 8002934:	8a3b      	ldrh	r3, [r7, #16]
 8002936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800293a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002946:	b29b      	uxth	r3, r3
 8002948:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3748      	adds	r7, #72	; 0x48
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	817b      	strh	r3, [r7, #10]
 8002962:	4613      	mov	r3, r2
 8002964:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e009      	b.n	800299e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800298a:	897a      	ldrh	r2, [r7, #10]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4413      	add	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800299e:	893b      	ldrh	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d107      	bne.n	80029b4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	80da      	strh	r2, [r3, #6]
 80029b2:	e00b      	b.n	80029cc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2201      	movs	r2, #1
 80029b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e26c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8087 	beq.w	8002b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	4b92      	ldr	r3, [pc, #584]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
 8002a10:	4b8c      	ldr	r3, [pc, #560]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b89      	ldr	r3, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x12c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e246      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x76>
 8002a40:	4b80      	ldr	r3, [pc, #512]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7f      	ldr	r2, [pc, #508]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7b      	ldr	r3, [pc, #492]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbc>
 8002a7a:	4b72      	ldr	r3, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a94:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f948 	bl	8000d48 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe f944 	bl	8000d48 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1fa      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xe4>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7fe f934 	bl	8000d48 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe f930 	bl	8000d48 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1e6      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x10c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
 8002b2a:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1ba      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4939      	ldr	r1, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe f8e9 	bl	8000d48 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7fe f8e5 	bl	8000d48 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e19b      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4927      	ldr	r1, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe f8c8 	bl	8000d48 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7fe f8c4 	bl	8000d48 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e17a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7fe f8a8 	bl	8000d48 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7fe f8a4 	bl	8000d48 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e15a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 faa8 	bl	8003170 <RCC_Delay>
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7fe f88e 	bl	8000d48 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe f88a 	bl	8000d48 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e140      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	42420000 	.word	0x42420000
 8002c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b9e      	ldr	r3, [pc, #632]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a6 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b97      	ldr	r3, [pc, #604]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a93      	ldr	r2, [pc, #588]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b91      	ldr	r3, [pc, #580]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b8e      	ldr	r3, [pc, #568]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b8b      	ldr	r3, [pc, #556]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7fe f84b 	bl	8000d48 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7fe f847 	bl	8000d48 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e0fd      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <HAL_RCC_OscConfig+0x4f8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x334>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a72      	ldr	r2, [pc, #456]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x356>
 8002d14:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6c      	ldr	r2, [pc, #432]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a63      	ldr	r2, [pc, #396]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7fd fffb 	bl	8000d48 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fd fff7 	bl	8000d48 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ab      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b57      	ldr	r3, [pc, #348]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x37e>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fd ffe5 	bl	8000d48 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fd ffe1 	bl	8000d48 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e095      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a47      	ldr	r2, [pc, #284]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8081 	beq.w	8002ec2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b42      	ldr	r3, [pc, #264]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d061      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d146      	bne.n	8002e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fd ffb5 	bl	8000d48 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7fd ffb1 	bl	8000d48 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e067      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	4b35      	ldr	r3, [pc, #212]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	492d      	ldr	r1, [pc, #180]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a19      	ldr	r1, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fd ff85 	bl	8000d48 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7fd ff81 	bl	8000d48 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e037      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
 8002e60:	e02f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCC_OscConfig+0x4fc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fd ff6e 	bl	8000d48 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fd ff6a 	bl	8000d48 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e020      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x498>
 8002e8e:	e018      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e013      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_OscConfig+0x4f4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060

08002ed8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0d0      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d910      	bls.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 0207 	bic.w	r2, r3, #7
 8002f02:	4965      	ldr	r1, [pc, #404]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0a:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0b8      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f4c:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a52      	ldr	r2, [pc, #328]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b50      	ldr	r3, [pc, #320]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	494d      	ldr	r1, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d040      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d115      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e07f      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e073      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06b      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f023 0203 	bic.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4936      	ldr	r1, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc8:	f7fd febe 	bl	8000d48 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd0:	f7fd feba 	bl	8000d48 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e053      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 020c 	and.w	r2, r3, #12
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d1eb      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d210      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 0207 	bic.w	r2, r3, #7
 800300e:	4922      	ldr	r1, [pc, #136]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_ClockConfig+0x1c0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e032      	b.n	800308e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003066:	f000 f821 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800306a:	4601      	mov	r1, r0
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_ClockConfig+0x1c4>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	4a0a      	ldr	r2, [pc, #40]	; (80030a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	fa21 f303 	lsr.w	r3, r1, r3
 800307e:	4a09      	ldr	r2, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003082:	4b09      	ldr	r3, [pc, #36]	; (80030a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe1c 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40022000 	.word	0x40022000
 800309c:	40021000 	.word	0x40021000
 80030a0:	08007660 	.word	0x08007660
 80030a4:	20000004 	.word	0x20000004
 80030a8:	20000008 	.word	0x20000008

080030ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ac:	b490      	push	{r4, r7}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030b2:	4b2a      	ldr	r3, [pc, #168]	; (800315c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030b4:	1d3c      	adds	r4, r7, #4
 80030b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d002      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x40>
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d003      	beq.n	80030f2 <HAL_RCC_GetSysClockFreq+0x46>
 80030ea:	e02d      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030ee:	623b      	str	r3, [r7, #32]
      break;
 80030f0:	e02d      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	0c9b      	lsrs	r3, r3, #18
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003104:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003110:	4b14      	ldr	r3, [pc, #80]	; (8003164 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	0c5b      	lsrs	r3, r3, #17
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003124:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800312a:	fb02 f203 	mul.w	r2, r2, r3
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	fbb2 f3f3 	udiv	r3, r2, r3
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
 8003136:	e004      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <HAL_RCC_GetSysClockFreq+0xc0>)
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	623b      	str	r3, [r7, #32]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCC_GetSysClockFreq+0xbc>)
 800314a:	623b      	str	r3, [r7, #32]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6a3b      	ldr	r3, [r7, #32]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3728      	adds	r7, #40	; 0x28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc90      	pop	{r4, r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	08007608 	.word	0x08007608
 8003160:	08007618 	.word	0x08007618
 8003164:	40021000 	.word	0x40021000
 8003168:	007a1200 	.word	0x007a1200
 800316c:	003d0900 	.word	0x003d0900

08003170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <RCC_Delay+0x34>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <RCC_Delay+0x38>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a5b      	lsrs	r3, r3, #9
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800318c:	bf00      	nop
  }
  while (Delay --);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e5a      	subs	r2, r3, #1
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1f9      	bne.n	800318c <RCC_Delay+0x1c>
}
 8003198:	bf00      	nop
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000004 	.word	0x20000004
 80031a8:	10624dd3 	.word	0x10624dd3

080031ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d07d      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	61d3      	str	r3, [r2, #28]
 80031e4:	4b49      	ldr	r3, [pc, #292]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	4b46      	ldr	r3, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d118      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003200:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320c:	f7fd fd9c 	bl	8000d48 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fd fd98 	bl	8000d48 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e06d      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003232:	4b36      	ldr	r3, [pc, #216]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	429a      	cmp	r2, r3
 800324e:	d027      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003260:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003266:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fd fd67 	bl	8000d48 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd fd63 	bl	8000d48 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e036      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4917      	ldr	r1, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d105      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	490b      	ldr	r1, [pc, #44]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ee:	4b07      	ldr	r3, [pc, #28]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	40007000 	.word	0x40007000
 8003314:	42420440 	.word	0x42420440

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e041      	b.n	80033ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fc66 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 f930 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e032      	b.n	8003436 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <HAL_TIM_Base_Start+0x88>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00e      	beq.n	8003400 <HAL_TIM_Base_Start+0x48>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d009      	beq.n	8003400 <HAL_TIM_Base_Start+0x48>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a14      	ldr	r2, [pc, #80]	; (8003444 <HAL_TIM_Base_Start+0x8c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d004      	beq.n	8003400 <HAL_TIM_Base_Start+0x48>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a13      	ldr	r2, [pc, #76]	; (8003448 <HAL_TIM_Base_Start+0x90>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d111      	bne.n	8003424 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b06      	cmp	r3, #6
 8003410:	d010      	beq.n	8003434 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f042 0201 	orr.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003422:	e007      	b.n	8003434 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800

0800344c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_TIM_ConfigClockSource+0x18>
 8003460:	2302      	movs	r3, #2
 8003462:	e0a6      	b.n	80035b2 <HAL_TIM_ConfigClockSource+0x166>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800348a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d067      	beq.n	800356c <HAL_TIM_ConfigClockSource+0x120>
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d80b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x6c>
 80034a0:	2b10      	cmp	r3, #16
 80034a2:	d073      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x140>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d802      	bhi.n	80034ae <HAL_TIM_ConfigClockSource+0x62>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d06f      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034ac:	e078      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	d06c      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x140>
 80034b2:	2b30      	cmp	r3, #48	; 0x30
 80034b4:	d06a      	beq.n	800358c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80034b6:	e073      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034b8:	2b70      	cmp	r3, #112	; 0x70
 80034ba:	d00d      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x8c>
 80034bc:	2b70      	cmp	r3, #112	; 0x70
 80034be:	d804      	bhi.n	80034ca <HAL_TIM_ConfigClockSource+0x7e>
 80034c0:	2b50      	cmp	r3, #80	; 0x50
 80034c2:	d033      	beq.n	800352c <HAL_TIM_ConfigClockSource+0xe0>
 80034c4:	2b60      	cmp	r3, #96	; 0x60
 80034c6:	d041      	beq.n	800354c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80034c8:	e06a      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d066      	beq.n	800359e <HAL_TIM_ConfigClockSource+0x152>
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d017      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80034d6:	e063      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f000 f941 	bl	800376e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]
      break;
 8003504:	e04c      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f000 f92a 	bl	800376e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003528:	609a      	str	r2, [r3, #8]
      break;
 800352a:	e039      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	461a      	mov	r2, r3
 800353a:	f000 f8a1 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2150      	movs	r1, #80	; 0x50
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f8f8 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 800354a:	e029      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	461a      	mov	r2, r3
 800355a:	f000 f8bf 	bl	80036dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2160      	movs	r1, #96	; 0x60
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f8e8 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 800356a:	e019      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 f881 	bl	8003680 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	4618      	mov	r0, r3
 8003586:	f000 f8d8 	bl	800373a <TIM_ITRx_SetConfig>
      break;
 800358a:	e009      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f000 f8cf 	bl	800373a <TIM_ITRx_SetConfig>
        break;
 800359c:	e000      	b.n	80035a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800359e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a29      	ldr	r2, [pc, #164]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a26      	ldr	r2, [pc, #152]	; (8003678 <TIM_Base_SetConfig+0xbc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0x30>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <TIM_Base_SetConfig+0xc0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d108      	bne.n	80035fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1c      	ldr	r2, [pc, #112]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00b      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360c:	d007      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <TIM_Base_SetConfig+0xbc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d003      	beq.n	800361e <TIM_Base_SetConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a18      	ldr	r2, [pc, #96]	; (800367c <TIM_Base_SetConfig+0xc0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <TIM_Base_SetConfig+0xb8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d103      	bne.n	8003664 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	615a      	str	r2, [r3, #20]
}
 800366a:	bf00      	nop
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800

08003680 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f023 030a 	bic.w	r3, r3, #10
 80036bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0210 	bic.w	r2, r3, #16
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	031b      	lsls	r3, r3, #12
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	621a      	str	r2, [r3, #32]
}
 8003730:	bf00      	nop
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800373a:	b480      	push	{r7}
 800373c:	b085      	sub	sp, #20
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	f043 0307 	orr.w	r3, r3, #7
 800375c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	609a      	str	r2, [r3, #8]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr

0800376e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800376e:	b480      	push	{r7}
 8003770:	b087      	sub	sp, #28
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003788:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	021a      	lsls	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	431a      	orrs	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	609a      	str	r2, [r3, #8]
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e046      	b.n	8003852 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a16      	ldr	r2, [pc, #88]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003810:	d009      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d10c      	bne.n	8003840 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4313      	orrs	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800

08003868 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003868:	b084      	sub	sp, #16
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	f107 0014 	add.w	r0, r7, #20
 8003876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	b004      	add	sp, #16
 8003886:	4770      	bx	lr

08003888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003898:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800389c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003900:	b084      	sub	sp, #16
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	f107 0014 	add.w	r0, r7, #20
 800390e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	b004      	add	sp, #16
 800393e:	4770      	bx	lr

08003940 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003940:	b480      	push	{r7}
 8003942:	b09b      	sub	sp, #108	; 0x6c
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d81f      	bhi.n	80039b2 <USB_ActivateEndpoint+0x72>
 8003972:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <USB_ActivateEndpoint+0x38>)
 8003974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003978:	08003989 	.word	0x08003989
 800397c:	080039a5 	.word	0x080039a5
 8003980:	080039bb 	.word	0x080039bb
 8003984:	08003997 	.word	0x08003997
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003988:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800398c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003990:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003994:	e012      	b.n	80039bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003996:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800399a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800399e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039a2:	e00b      	b.n	80039bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80039a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80039b0:	e004      	b.n	80039bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80039b8:	e000      	b.n	80039bc <USB_ActivateEndpoint+0x7c>
      break;
 80039ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	441a      	add	r2, r3
 80039c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80039ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	7b1b      	ldrb	r3, [r3, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 8149 	bne.w	8003cc0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8084 	beq.w	8003b40 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	88db      	ldrh	r3, [r3, #6]
 8003a60:	085b      	lsrs	r3, r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	81fb      	strh	r3, [r7, #14]
 8003a7a:	89fb      	ldrh	r3, [r7, #14]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <USB_ActivateEndpoint+0x17c>
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	81bb      	strh	r3, [r7, #12]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	89bb      	ldrh	r3, [r7, #12]
 8003aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d020      	beq.n	8003b06 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ada:	813b      	strh	r3, [r7, #8]
 8003adc:	893b      	ldrh	r3, [r7, #8]
 8003ade:	f083 0320 	eor.w	r3, r3, #32
 8003ae2:	813b      	strh	r3, [r7, #8]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	893b      	ldrh	r3, [r7, #8]
 8003af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8013      	strh	r3, [r2, #0]
 8003b04:	e27f      	b.n	8004006 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	441a      	add	r2, r3
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
 8003b3e:	e262      	b.n	8004006 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b50:	4413      	add	r3, r2
 8003b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	011a      	lsls	r2, r3, #4
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	88db      	ldrh	r3, [r3, #6]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b72:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	4413      	add	r3, r2
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	011a      	lsls	r2, r3, #4
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	4413      	add	r3, r2
 8003b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d112      	bne.n	8003bc6 <USB_ActivateEndpoint+0x286>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	801a      	strh	r2, [r3, #0]
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	e02f      	b.n	8003c26 <USB_ActivateEndpoint+0x2e6>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b3e      	cmp	r3, #62	; 0x3e
 8003bcc:	d813      	bhi.n	8003bf6 <USB_ActivateEndpoint+0x2b6>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	085b      	lsrs	r3, r3, #1
 8003bd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d002      	beq.n	8003be8 <USB_ActivateEndpoint+0x2a8>
 8003be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003be4:	3301      	adds	r3, #1
 8003be6:	663b      	str	r3, [r7, #96]	; 0x60
 8003be8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	029b      	lsls	r3, r3, #10
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	801a      	strh	r2, [r3, #0]
 8003bf4:	e017      	b.n	8003c26 <USB_ActivateEndpoint+0x2e6>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 031f 	and.w	r3, r3, #31
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <USB_ActivateEndpoint+0x2d0>
 8003c0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	83fb      	strh	r3, [r7, #30]
 8003c34:	8bfb      	ldrh	r3, [r7, #30]
 8003c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d01b      	beq.n	8003c76 <USB_ActivateEndpoint+0x336>
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	83bb      	strh	r3, [r7, #28]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8bbb      	ldrh	r3, [r7, #28]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8c:	837b      	strh	r3, [r7, #26]
 8003c8e:	8b7b      	ldrh	r3, [r7, #26]
 8003c90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c94:	837b      	strh	r3, [r7, #26]
 8003c96:	8b7b      	ldrh	r3, [r7, #26]
 8003c98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c9c:	837b      	strh	r3, [r7, #26]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	8b7b      	ldrh	r3, [r7, #26]
 8003caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8013      	strh	r3, [r2, #0]
 8003cbe:	e1a2      	b.n	8004006 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	441a      	add	r2, r3
 8003ce4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0c:	4413      	add	r3, r2
 8003d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	011a      	lsls	r2, r3, #4
 8003d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	891b      	ldrh	r3, [r3, #8]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	653b      	str	r3, [r7, #80]	; 0x50
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d40:	4413      	add	r3, r2
 8003d42:	653b      	str	r3, [r7, #80]	; 0x50
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	011a      	lsls	r2, r3, #4
 8003d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	895b      	ldrh	r3, [r3, #10]
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	785b      	ldrb	r3, [r3, #1]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8091 	bne.w	8003e90 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d01b      	beq.n	8003dbe <USB_ActivateEndpoint+0x47e>
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	441a      	add	r2, r3
 8003da8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	873b      	strh	r3, [r7, #56]	; 0x38
 8003dcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01b      	beq.n	8003e0e <USB_ActivateEndpoint+0x4ce>
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dec:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e24:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	441a      	add	r2, r3
 8003e78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]
 8003e8e:	e0ba      	b.n	8004006 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01d      	beq.n	8003ee8 <USB_ActivateEndpoint+0x5a8>
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ef8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01d      	beq.n	8003f40 <USB_ActivateEndpoint+0x600>
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	78db      	ldrb	r3, [r3, #3]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d024      	beq.n	8003f92 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f66:	f083 0320 	eor.w	r3, r3, #32
 8003f6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]
 8003f90:	e01d      	b.n	8003fce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800400a:	4618      	mov	r0, r3
 800400c:	376c      	adds	r7, #108	; 0x6c
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004014:	b480      	push	{r7}
 8004016:	b08d      	sub	sp, #52	; 0x34
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	7b1b      	ldrb	r3, [r3, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 808e 	bne.w	8004144 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d044      	beq.n	80040ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	81bb      	strh	r3, [r7, #12]
 800403e:	89bb      	ldrh	r3, [r7, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <USB_DeactivateEndpoint+0x6c>
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	817b      	strh	r3, [r7, #10]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	897b      	ldrh	r3, [r7, #10]
 800406c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800407c:	b29b      	uxth	r3, r3
 800407e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	813b      	strh	r3, [r7, #8]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	893b      	ldrh	r3, [r7, #8]
 80040a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	8013      	strh	r3, [r2, #0]
 80040b8:	e192      	b.n	80043e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	827b      	strh	r3, [r7, #18]
 80040c8:	8a7b      	ldrh	r3, [r7, #18]
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01b      	beq.n	800410a <USB_DeactivateEndpoint+0xf6>
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	823b      	strh	r3, [r7, #16]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	8a3b      	ldrh	r3, [r7, #16]
 80040f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004106:	b29b      	uxth	r3, r3
 8004108:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004120:	81fb      	strh	r3, [r7, #14]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	441a      	add	r2, r3
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800413a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413e:	b29b      	uxth	r3, r3
 8004140:	8013      	strh	r3, [r2, #0]
 8004142:	e14d      	b.n	80043e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 80a5 	bne.w	8004298 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	881b      	ldrh	r3, [r3, #0]
 800415a:	843b      	strh	r3, [r7, #32]
 800415c:	8c3b      	ldrh	r3, [r7, #32]
 800415e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01b      	beq.n	800419e <USB_DeactivateEndpoint+0x18a>
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417c:	83fb      	strh	r3, [r7, #30]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	441a      	add	r2, r3
 8004188:	8bfb      	ldrh	r3, [r7, #30]
 800418a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	83bb      	strh	r3, [r7, #28]
 80041ac:	8bbb      	ldrh	r3, [r7, #28]
 80041ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01b      	beq.n	80041ee <USB_DeactivateEndpoint+0x1da>
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	837b      	strh	r3, [r7, #26]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	441a      	add	r2, r3
 80041d8:	8b7b      	ldrh	r3, [r7, #26]
 80041da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	833b      	strh	r3, [r7, #24]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	8b3b      	ldrh	r3, [r7, #24]
 8004212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004222:	b29b      	uxth	r3, r3
 8004224:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	82fb      	strh	r3, [r7, #22]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	441a      	add	r2, r3
 8004248:	8afb      	ldrh	r3, [r7, #22]
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	82bb      	strh	r3, [r7, #20]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	441a      	add	r2, r3
 8004280:	8abb      	ldrh	r3, [r7, #20]
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
 8004296:	e0a3      	b.n	80043e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80042a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01b      	beq.n	80042e8 <USB_DeactivateEndpoint+0x2d4>
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01b      	beq.n	8004338 <USB_DeactivateEndpoint+0x324>
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4413      	add	r3, r2
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	b29b      	uxth	r3, r3
 800430e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004316:	853b      	strh	r3, [r7, #40]	; 0x28
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800432c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004330:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004334:	b29b      	uxth	r3, r3
 8004336:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004386:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800439c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043be:	847b      	strh	r3, [r7, #34]	; 0x22
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3734      	adds	r7, #52	; 0x34
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b0c4      	sub	sp, #272	; 0x110
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	6018      	str	r0, [r3, #0]
 80043f6:	463b      	mov	r3, r7
 80043f8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043fa:	463b      	mov	r3, r7
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	785b      	ldrb	r3, [r3, #1]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 8557 	bne.w	8004eb4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004406:	463b      	mov	r3, r7
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699a      	ldr	r2, [r3, #24]
 800440c:	463b      	mov	r3, r7
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	429a      	cmp	r2, r3
 8004414:	d905      	bls.n	8004422 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004420:	e004      	b.n	800442c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004422:	463b      	mov	r3, r7
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	7b1b      	ldrb	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d12c      	bne.n	8004490 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6959      	ldr	r1, [r3, #20]
 800443c:	463b      	mov	r3, r7
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	88da      	ldrh	r2, [r3, #6]
 8004442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004446:	b29b      	uxth	r3, r3
 8004448:	1d38      	adds	r0, r7, #4
 800444a:	6800      	ldr	r0, [r0, #0]
 800444c:	f001 fa2c 	bl	80058a8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445e:	b29b      	uxth	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	4413      	add	r3, r2
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	463b      	mov	r3, r7
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	011a      	lsls	r2, r3, #4
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004478:	f107 0310 	add.w	r3, r7, #16
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004482:	b29a      	uxth	r2, r3
 8004484:	f107 0310 	add.w	r3, r7, #16
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	801a      	strh	r2, [r3, #0]
 800448c:	f000 bcdd 	b.w	8004e4a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	78db      	ldrb	r3, [r3, #3]
 8004496:	2b02      	cmp	r3, #2
 8004498:	f040 8347 	bne.w	8004b2a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800449c:	463b      	mov	r3, r7
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	463b      	mov	r3, r7
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	f240 82eb 	bls.w	8004a84 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80044ae:	1d3b      	adds	r3, r7, #4
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80044cc:	1d3b      	adds	r3, r7, #4
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	463b      	mov	r3, r7
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	441a      	add	r2, r3
 80044da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80044de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044f2:	463b      	mov	r3, r7
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	463b      	mov	r3, r7
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	463b      	mov	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	b29b      	uxth	r3, r3
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 8159 	beq.w	80047d2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004520:	1d3b      	adds	r3, r7, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d164      	bne.n	80045fa <USB_EPStartXfer+0x20e>
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453e:	b29b      	uxth	r3, r3
 8004540:	461a      	mov	r2, r3
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	4413      	add	r3, r2
 8004546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004548:	463b      	mov	r3, r7
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	011a      	lsls	r2, r3, #4
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	4413      	add	r3, r2
 8004554:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004558:	62bb      	str	r3, [r7, #40]	; 0x28
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d112      	bne.n	8004588 <USB_EPStartXfer+0x19c>
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800456c:	b29a      	uxth	r2, r3
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29b      	uxth	r3, r3
 8004578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800457c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004580:	b29a      	uxth	r2, r3
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	e054      	b.n	8004632 <USB_EPStartXfer+0x246>
 8004588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458c:	2b3e      	cmp	r3, #62	; 0x3e
 800458e:	d817      	bhi.n	80045c0 <USB_EPStartXfer+0x1d4>
 8004590:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800459a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d004      	beq.n	80045b0 <USB_EPStartXfer+0x1c4>
 80045a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045aa:	3301      	adds	r3, #1
 80045ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	029b      	lsls	r3, r3, #10
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	e038      	b.n	8004632 <USB_EPStartXfer+0x246>
 80045c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c4:	095b      	lsrs	r3, r3, #5
 80045c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <USB_EPStartXfer+0x1f4>
 80045d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045da:	3b01      	subs	r3, #1
 80045dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	029b      	lsls	r3, r3, #10
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	801a      	strh	r2, [r3, #0]
 80045f8:	e01b      	b.n	8004632 <USB_EPStartXfer+0x246>
 80045fa:	463b      	mov	r3, r7
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d116      	bne.n	8004632 <USB_EPStartXfer+0x246>
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800460c:	b29b      	uxth	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	4413      	add	r3, r2
 8004614:	637b      	str	r3, [r7, #52]	; 0x34
 8004616:	463b      	mov	r3, r7
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	011a      	lsls	r2, r3, #4
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	4413      	add	r3, r2
 8004622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004626:	633b      	str	r3, [r7, #48]	; 0x30
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	b29a      	uxth	r2, r3
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004632:	463b      	mov	r3, r7
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	895b      	ldrh	r3, [r3, #10]
 8004638:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800463c:	463b      	mov	r3, r7
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6959      	ldr	r1, [r3, #20]
 8004642:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004646:	b29b      	uxth	r3, r3
 8004648:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800464c:	1d38      	adds	r0, r7, #4
 800464e:	6800      	ldr	r0, [r0, #0]
 8004650:	f001 f92a 	bl	80058a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004654:	463b      	mov	r3, r7
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695a      	ldr	r2, [r3, #20]
 800465a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465e:	441a      	add	r2, r3
 8004660:	463b      	mov	r3, r7
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a1a      	ldr	r2, [r3, #32]
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d909      	bls.n	800468a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8004676:	463b      	mov	r3, r7
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004680:	1ad2      	subs	r2, r2, r3
 8004682:	463b      	mov	r3, r7
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	621a      	str	r2, [r3, #32]
 8004688:	e008      	b.n	800469c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800468a:	463b      	mov	r3, r7
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004694:	463b      	mov	r3, r7
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2200      	movs	r2, #0
 800469a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800469c:	463b      	mov	r3, r7
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	785b      	ldrb	r3, [r3, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d164      	bne.n	8004770 <USB_EPStartXfer+0x384>
 80046a6:	1d3b      	adds	r3, r7, #4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	1d3b      	adds	r3, r7, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	011a      	lsls	r2, r3, #4
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d112      	bne.n	80046fe <USB_EPStartXfer+0x312>
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	881b      	ldrh	r3, [r3, #0]
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	801a      	strh	r2, [r3, #0]
 80046fc:	e057      	b.n	80047ae <USB_EPStartXfer+0x3c2>
 80046fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004702:	2b3e      	cmp	r3, #62	; 0x3e
 8004704:	d817      	bhi.n	8004736 <USB_EPStartXfer+0x34a>
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <USB_EPStartXfer+0x33a>
 800471c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004720:	3301      	adds	r3, #1
 8004722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004726:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800472a:	b29b      	uxth	r3, r3
 800472c:	029b      	lsls	r3, r3, #10
 800472e:	b29a      	uxth	r2, r3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	e03b      	b.n	80047ae <USB_EPStartXfer+0x3c2>
 8004736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2b00      	cmp	r3, #0
 800474a:	d104      	bne.n	8004756 <USB_EPStartXfer+0x36a>
 800474c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004750:	3b01      	subs	r3, #1
 8004752:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800475a:	b29b      	uxth	r3, r3
 800475c:	029b      	lsls	r3, r3, #10
 800475e:	b29b      	uxth	r3, r3
 8004760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004768:	b29a      	uxth	r2, r3
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	e01e      	b.n	80047ae <USB_EPStartXfer+0x3c2>
 8004770:	463b      	mov	r3, r7
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d119      	bne.n	80047ae <USB_EPStartXfer+0x3c2>
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004788:	b29b      	uxth	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	4413      	add	r3, r2
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	463b      	mov	r3, r7
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	011a      	lsls	r2, r3, #4
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	4413      	add	r3, r2
 800479e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80047ae:	463b      	mov	r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	891b      	ldrh	r3, [r3, #8]
 80047b4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047b8:	463b      	mov	r3, r7
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6959      	ldr	r1, [r3, #20]
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047c8:	1d38      	adds	r0, r7, #4
 80047ca:	6800      	ldr	r0, [r0, #0]
 80047cc:	f001 f86c 	bl	80058a8 <USB_WritePMA>
 80047d0:	e33b      	b.n	8004e4a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047d2:	463b      	mov	r3, r7
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d164      	bne.n	80048a6 <USB_EPStartXfer+0x4ba>
 80047dc:	1d3b      	adds	r3, r7, #4
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e2:	1d3b      	adds	r3, r7, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	4413      	add	r3, r2
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	011a      	lsls	r2, r3, #4
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	4413      	add	r3, r2
 8004800:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004804:	64bb      	str	r3, [r7, #72]	; 0x48
 8004806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d112      	bne.n	8004834 <USB_EPStartXfer+0x448>
 800480e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004818:	b29a      	uxth	r2, r3
 800481a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	b29b      	uxth	r3, r3
 8004824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482c:	b29a      	uxth	r2, r3
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e057      	b.n	80048e4 <USB_EPStartXfer+0x4f8>
 8004834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004838:	2b3e      	cmp	r3, #62	; 0x3e
 800483a:	d817      	bhi.n	800486c <USB_EPStartXfer+0x480>
 800483c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <USB_EPStartXfer+0x470>
 8004852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004856:	3301      	adds	r3, #1
 8004858:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800485c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004860:	b29b      	uxth	r3, r3
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	b29a      	uxth	r2, r3
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e03b      	b.n	80048e4 <USB_EPStartXfer+0x4f8>
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	f003 031f 	and.w	r3, r3, #31
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <USB_EPStartXfer+0x4a0>
 8004882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004886:	3b01      	subs	r3, #1
 8004888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800488c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004890:	b29b      	uxth	r3, r3
 8004892:	029b      	lsls	r3, r3, #10
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e01e      	b.n	80048e4 <USB_EPStartXfer+0x4f8>
 80048a6:	463b      	mov	r3, r7
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d119      	bne.n	80048e4 <USB_EPStartXfer+0x4f8>
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	657b      	str	r3, [r7, #84]	; 0x54
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048c4:	4413      	add	r3, r2
 80048c6:	657b      	str	r3, [r7, #84]	; 0x54
 80048c8:	463b      	mov	r3, r7
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	011a      	lsls	r2, r3, #4
 80048d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d2:	4413      	add	r3, r2
 80048d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048d8:	653b      	str	r3, [r7, #80]	; 0x50
 80048da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048de:	b29a      	uxth	r2, r3
 80048e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048e4:	463b      	mov	r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	891b      	ldrh	r3, [r3, #8]
 80048ea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048ee:	463b      	mov	r3, r7
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6959      	ldr	r1, [r3, #20]
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80048fe:	1d38      	adds	r0, r7, #4
 8004900:	6800      	ldr	r0, [r0, #0]
 8004902:	f000 ffd1 	bl	80058a8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004906:	463b      	mov	r3, r7
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004910:	441a      	add	r2, r3
 8004912:	463b      	mov	r3, r7
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004918:	463b      	mov	r3, r7
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6a1a      	ldr	r2, [r3, #32]
 800491e:	463b      	mov	r3, r7
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	429a      	cmp	r2, r3
 8004926:	d909      	bls.n	800493c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004928:	463b      	mov	r3, r7
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6a1a      	ldr	r2, [r3, #32]
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	1ad2      	subs	r2, r2, r3
 8004934:	463b      	mov	r3, r7
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	621a      	str	r2, [r3, #32]
 800493a:	e008      	b.n	800494e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800493c:	463b      	mov	r3, r7
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
 8004954:	463b      	mov	r3, r7
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d164      	bne.n	8004a28 <USB_EPStartXfer+0x63c>
 800495e:	1d3b      	adds	r3, r7, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496c:	b29b      	uxth	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	4413      	add	r3, r2
 8004974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004976:	463b      	mov	r3, r7
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	011a      	lsls	r2, r3, #4
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	4413      	add	r3, r2
 8004982:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
 8004988:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d112      	bne.n	80049b6 <USB_EPStartXfer+0x5ca>
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800499a:	b29a      	uxth	r2, r3
 800499c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499e:	801a      	strh	r2, [r3, #0]
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e054      	b.n	8004a60 <USB_EPStartXfer+0x674>
 80049b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ba:	2b3e      	cmp	r3, #62	; 0x3e
 80049bc:	d817      	bhi.n	80049ee <USB_EPStartXfer+0x602>
 80049be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <USB_EPStartXfer+0x5f2>
 80049d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049d8:	3301      	adds	r3, #1
 80049da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	e038      	b.n	8004a60 <USB_EPStartXfer+0x674>
 80049ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <USB_EPStartXfer+0x622>
 8004a04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	029b      	lsls	r3, r3, #10
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e01b      	b.n	8004a60 <USB_EPStartXfer+0x674>
 8004a28:	463b      	mov	r3, r7
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d116      	bne.n	8004a60 <USB_EPStartXfer+0x674>
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	4413      	add	r3, r2
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
 8004a44:	463b      	mov	r3, r7
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	011a      	lsls	r2, r3, #4
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	4413      	add	r3, r2
 8004a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a54:	643b      	str	r3, [r7, #64]	; 0x40
 8004a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a60:	463b      	mov	r3, r7
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	895b      	ldrh	r3, [r3, #10]
 8004a66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6959      	ldr	r1, [r3, #20]
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a7a:	1d38      	adds	r0, r7, #4
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f000 ff13 	bl	80058a8 <USB_WritePMA>
 8004a82:	e1e2      	b.n	8004e4a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004a8e:	1d3b      	adds	r3, r7, #4
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	463b      	mov	r3, r7
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004aac:	1d3b      	adds	r3, r7, #4
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad8:	1d3b      	adds	r3, r7, #4
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ae6:	4413      	add	r3, r2
 8004ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aea:	463b      	mov	r3, r7
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	011a      	lsls	r2, r3, #4
 8004af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af4:	4413      	add	r3, r2
 8004af6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b06:	463b      	mov	r3, r7
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	891b      	ldrh	r3, [r3, #8]
 8004b0c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6959      	ldr	r1, [r3, #20]
 8004b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004b20:	1d38      	adds	r0, r7, #4
 8004b22:	6800      	ldr	r0, [r0, #0]
 8004b24:	f000 fec0 	bl	80058a8 <USB_WritePMA>
 8004b28:	e18f      	b.n	8004e4a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b2a:	1d3b      	adds	r3, r7, #4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	463b      	mov	r3, r7
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 808f 	beq.w	8004c64 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d164      	bne.n	8004c20 <USB_EPStartXfer+0x834>
 8004b56:	1d3b      	adds	r3, r7, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	461a      	mov	r2, r3
 8004b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b6a:	4413      	add	r3, r2
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8004b6e:	463b      	mov	r3, r7
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	011a      	lsls	r2, r3, #4
 8004b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b78:	4413      	add	r3, r2
 8004b7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d112      	bne.n	8004bae <USB_EPStartXfer+0x7c2>
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004baa:	801a      	strh	r2, [r3, #0]
 8004bac:	e054      	b.n	8004c58 <USB_EPStartXfer+0x86c>
 8004bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb4:	d817      	bhi.n	8004be6 <USB_EPStartXfer+0x7fa>
 8004bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <USB_EPStartXfer+0x7ea>
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	029b      	lsls	r3, r3, #10
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be2:	801a      	strh	r2, [r3, #0]
 8004be4:	e038      	b.n	8004c58 <USB_EPStartXfer+0x86c>
 8004be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <USB_EPStartXfer+0x81a>
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	3b01      	subs	r3, #1
 8004c02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1c:	801a      	strh	r2, [r3, #0]
 8004c1e:	e01b      	b.n	8004c58 <USB_EPStartXfer+0x86c>
 8004c20:	463b      	mov	r3, r7
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	785b      	ldrb	r3, [r3, #1]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d116      	bne.n	8004c58 <USB_EPStartXfer+0x86c>
 8004c2a:	1d3b      	adds	r3, r7, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c38:	4413      	add	r3, r2
 8004c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c3c:	463b      	mov	r3, r7
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	011a      	lsls	r2, r3, #4
 8004c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c46:	4413      	add	r3, r2
 8004c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c58:	463b      	mov	r3, r7
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	895b      	ldrh	r3, [r3, #10]
 8004c5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004c62:	e097      	b.n	8004d94 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c64:	463b      	mov	r3, r7
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	785b      	ldrb	r3, [r3, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d168      	bne.n	8004d40 <USB_EPStartXfer+0x954>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	461a      	mov	r2, r3
 8004c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c86:	4413      	add	r3, r2
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8c:	463b      	mov	r3, r7
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	011a      	lsls	r2, r3, #4
 8004c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c98:	4413      	add	r3, r2
 8004c9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d112      	bne.n	8004cce <USB_EPStartXfer+0x8e2>
 8004ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cca:	801a      	strh	r2, [r3, #0]
 8004ccc:	e05d      	b.n	8004d8a <USB_EPStartXfer+0x99e>
 8004cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd2:	2b3e      	cmp	r3, #62	; 0x3e
 8004cd4:	d817      	bhi.n	8004d06 <USB_EPStartXfer+0x91a>
 8004cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <USB_EPStartXfer+0x90a>
 8004cec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d02:	801a      	strh	r2, [r3, #0]
 8004d04:	e041      	b.n	8004d8a <USB_EPStartXfer+0x99e>
 8004d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0a:	095b      	lsrs	r3, r3, #5
 8004d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d14:	f003 031f 	and.w	r3, r3, #31
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d104      	bne.n	8004d26 <USB_EPStartXfer+0x93a>
 8004d1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d20:	3b01      	subs	r3, #1
 8004d22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004d26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	e024      	b.n	8004d8a <USB_EPStartXfer+0x99e>
 8004d40:	463b      	mov	r3, r7
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d11f      	bne.n	8004d8a <USB_EPStartXfer+0x99e>
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d62:	4413      	add	r3, r2
 8004d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d68:	463b      	mov	r3, r7
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	011a      	lsls	r2, r3, #4
 8004d70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d74:	4413      	add	r3, r2
 8004d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d8a:	463b      	mov	r3, r7
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	891b      	ldrh	r3, [r3, #8]
 8004d90:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d94:	463b      	mov	r3, r7
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6959      	ldr	r1, [r3, #20]
 8004d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004da4:	1d38      	adds	r0, r7, #4
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	f000 fd7e 	bl	80058a8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004dac:	463b      	mov	r3, r7
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d122      	bne.n	8004dfc <USB_EPStartXfer+0xa10>
 8004db6:	1d3b      	adds	r3, r7, #4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	463b      	mov	r3, r7
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004dd4:	1d3b      	adds	r3, r7, #4
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	463b      	mov	r3, r7
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	441a      	add	r2, r3
 8004de2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]
 8004dfa:	e026      	b.n	8004e4a <USB_EPStartXfer+0xa5e>
 8004dfc:	463b      	mov	r3, r7
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	785b      	ldrb	r3, [r3, #1]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d121      	bne.n	8004e4a <USB_EPStartXfer+0xa5e>
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	463b      	mov	r3, r7
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004e24:	1d3b      	adds	r3, r7, #4
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	463b      	mov	r3, r7
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004e36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004e4a:	1d3b      	adds	r3, r7, #4
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	463b      	mov	r3, r7
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	f107 020e 	add.w	r2, r7, #14
 8004e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e68:	8013      	strh	r3, [r2, #0]
 8004e6a:	f107 030e 	add.w	r3, r7, #14
 8004e6e:	f107 020e 	add.w	r2, r7, #14
 8004e72:	8812      	ldrh	r2, [r2, #0]
 8004e74:	f082 0210 	eor.w	r2, r2, #16
 8004e78:	801a      	strh	r2, [r3, #0]
 8004e7a:	f107 030e 	add.w	r3, r7, #14
 8004e7e:	f107 020e 	add.w	r2, r7, #14
 8004e82:	8812      	ldrh	r2, [r2, #0]
 8004e84:	f082 0220 	eor.w	r2, r2, #32
 8004e88:	801a      	strh	r2, [r3, #0]
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	463b      	mov	r3, r7
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	441a      	add	r2, r3
 8004e98:	f107 030e 	add.w	r3, r7, #14
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]
 8004eb2:	e3b5      	b.n	8005620 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004eb4:	463b      	mov	r3, r7
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	7b1b      	ldrb	r3, [r3, #12]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f040 8090 	bne.w	8004fe0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004ec0:	463b      	mov	r3, r7
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d90e      	bls.n	8004eee <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8004eda:	463b      	mov	r3, r7
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee4:	1ad2      	subs	r2, r2, r3
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	619a      	str	r2, [r3, #24]
 8004eec:	e008      	b.n	8004f00 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004eee:	463b      	mov	r3, r7
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004ef8:	463b      	mov	r3, r7
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2200      	movs	r2, #0
 8004efe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f08:	1d3b      	adds	r3, r7, #4
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f18:	4413      	add	r3, r2
 8004f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	011a      	lsls	r2, r3, #4
 8004f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d116      	bne.n	8004f6a <USB_EPStartXfer+0xb7e>
 8004f3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f4e:	801a      	strh	r2, [r3, #0]
 8004f50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004f66:	801a      	strh	r2, [r3, #0]
 8004f68:	e32c      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
 8004f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f70:	d818      	bhi.n	8004fa4 <USB_EPStartXfer+0xbb8>
 8004f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f76:	085b      	lsrs	r3, r3, #1
 8004f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <USB_EPStartXfer+0xba6>
 8004f88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004f92:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fa0:	801a      	strh	r2, [r3, #0]
 8004fa2:	e30f      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
 8004fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <USB_EPStartXfer+0xbd8>
 8004fba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	029b      	lsls	r3, r3, #10
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	e2f1      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004fe0:	463b      	mov	r3, r7
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	78db      	ldrb	r3, [r3, #3]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	f040 818f 	bne.w	800530a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004fec:	463b      	mov	r3, r7
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d175      	bne.n	80050e2 <USB_EPStartXfer+0xcf6>
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ffe:	1d3b      	adds	r3, r7, #4
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800500e:	4413      	add	r3, r2
 8005010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005014:	463b      	mov	r3, r7
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	011a      	lsls	r2, r3, #4
 800501c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005020:	4413      	add	r3, r2
 8005022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800502a:	463b      	mov	r3, r7
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d116      	bne.n	8005062 <USB_EPStartXfer+0xc76>
 8005034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005040:	b29a      	uxth	r2, r3
 8005042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005046:	801a      	strh	r2, [r3, #0]
 8005048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	b29b      	uxth	r3, r3
 8005050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005058:	b29a      	uxth	r2, r3
 800505a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e065      	b.n	800512e <USB_EPStartXfer+0xd42>
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	2b3e      	cmp	r3, #62	; 0x3e
 800506a:	d81a      	bhi.n	80050a2 <USB_EPStartXfer+0xcb6>
 800506c:	463b      	mov	r3, r7
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	085b      	lsrs	r3, r3, #1
 8005074:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005078:	463b      	mov	r3, r7
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <USB_EPStartXfer+0xca4>
 8005086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800508a:	3301      	adds	r3, #1
 800508c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005090:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005094:	b29b      	uxth	r3, r3
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	b29a      	uxth	r2, r3
 800509a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	e045      	b.n	800512e <USB_EPStartXfer+0xd42>
 80050a2:	463b      	mov	r3, r7
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	095b      	lsrs	r3, r3, #5
 80050aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050ae:	463b      	mov	r3, r7
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <USB_EPStartXfer+0xcda>
 80050bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050c0:	3b01      	subs	r3, #1
 80050c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	029b      	lsls	r3, r3, #10
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d8:	b29a      	uxth	r2, r3
 80050da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e025      	b.n	800512e <USB_EPStartXfer+0xd42>
 80050e2:	463b      	mov	r3, r7
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d120      	bne.n	800512e <USB_EPStartXfer+0xd42>
 80050ec:	1d3b      	adds	r3, r7, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005104:	4413      	add	r3, r2
 8005106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800510a:	463b      	mov	r3, r7
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	011a      	lsls	r2, r3, #4
 8005112:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005116:	4413      	add	r3, r2
 8005118:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800511c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005120:	463b      	mov	r3, r7
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	b29a      	uxth	r2, r3
 8005128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	1d3b      	adds	r3, r7, #4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005136:	463b      	mov	r3, r7
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d175      	bne.n	800522c <USB_EPStartXfer+0xe40>
 8005140:	1d3b      	adds	r3, r7, #4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005148:	1d3b      	adds	r3, r7, #4
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005158:	4413      	add	r3, r2
 800515a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800515e:	463b      	mov	r3, r7
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	011a      	lsls	r2, r3, #4
 8005166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800516a:	4413      	add	r3, r2
 800516c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d116      	bne.n	80051ac <USB_EPStartXfer+0xdc0>
 800517e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800518a:	b29a      	uxth	r2, r3
 800518c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005190:	801a      	strh	r2, [r3, #0]
 8005192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29a      	uxth	r2, r3
 80051a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051a8:	801a      	strh	r2, [r3, #0]
 80051aa:	e061      	b.n	8005270 <USB_EPStartXfer+0xe84>
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b3e      	cmp	r3, #62	; 0x3e
 80051b4:	d81a      	bhi.n	80051ec <USB_EPStartXfer+0xe00>
 80051b6:	463b      	mov	r3, r7
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	085b      	lsrs	r3, r3, #1
 80051be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051c2:	463b      	mov	r3, r7
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <USB_EPStartXfer+0xdee>
 80051d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051d4:	3301      	adds	r3, #1
 80051d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051de:	b29b      	uxth	r3, r3
 80051e0:	029b      	lsls	r3, r3, #10
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e8:	801a      	strh	r2, [r3, #0]
 80051ea:	e041      	b.n	8005270 <USB_EPStartXfer+0xe84>
 80051ec:	463b      	mov	r3, r7
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051f8:	463b      	mov	r3, r7
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <USB_EPStartXfer+0xe24>
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	3b01      	subs	r3, #1
 800520c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005214:	b29b      	uxth	r3, r3
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	b29b      	uxth	r3, r3
 800521a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800521e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005222:	b29a      	uxth	r2, r3
 8005224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005228:	801a      	strh	r2, [r3, #0]
 800522a:	e021      	b.n	8005270 <USB_EPStartXfer+0xe84>
 800522c:	463b      	mov	r3, r7
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d11c      	bne.n	8005270 <USB_EPStartXfer+0xe84>
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523e:	b29b      	uxth	r3, r3
 8005240:	461a      	mov	r2, r3
 8005242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005246:	4413      	add	r3, r2
 8005248:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800524c:	463b      	mov	r3, r7
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005258:	4413      	add	r3, r2
 800525a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800525e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	b29a      	uxth	r2, r3
 800526a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800526e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005270:	463b      	mov	r3, r7
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 81a4 	beq.w	80055c4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005290:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <USB_EPStartXfer+0xebc>
 800529c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10d      	bne.n	80052c4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 8187 	bne.w	80055c4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80052b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 8180 	bne.w	80055c4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80052c4:	1d3b      	adds	r3, r7, #4
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	463b      	mov	r3, r7
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80052e2:	1d3b      	adds	r3, r7, #4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80052f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005300:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005304:	b29b      	uxth	r3, r3
 8005306:	8013      	strh	r3, [r2, #0]
 8005308:	e15c      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800530a:	463b      	mov	r3, r7
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 8155 	bne.w	80055c0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005316:	463b      	mov	r3, r7
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699a      	ldr	r2, [r3, #24]
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	429a      	cmp	r2, r3
 8005324:	d90e      	bls.n	8005344 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005330:	463b      	mov	r3, r7
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800533a:	1ad2      	subs	r2, r2, r3
 800533c:	463b      	mov	r3, r7
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e008      	b.n	8005356 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005344:	463b      	mov	r3, r7
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800534e:	463b      	mov	r3, r7
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d16f      	bne.n	8005440 <USB_EPStartXfer+0x1054>
 8005360:	1d3b      	adds	r3, r7, #4
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005368:	1d3b      	adds	r3, r7, #4
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005378:	4413      	add	r3, r2
 800537a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800537e:	463b      	mov	r3, r7
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	011a      	lsls	r2, r3, #4
 8005386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800538a:	4413      	add	r3, r2
 800538c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005390:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d116      	bne.n	80053ca <USB_EPStartXfer+0xfde>
 800539c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80053c6:	801a      	strh	r2, [r3, #0]
 80053c8:	e05f      	b.n	800548a <USB_EPStartXfer+0x109e>
 80053ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ce:	2b3e      	cmp	r3, #62	; 0x3e
 80053d0:	d818      	bhi.n	8005404 <USB_EPStartXfer+0x1018>
 80053d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d004      	beq.n	80053f2 <USB_EPStartXfer+0x1006>
 80053e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ec:	3301      	adds	r3, #1
 80053ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	029b      	lsls	r3, r3, #10
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e042      	b.n	800548a <USB_EPStartXfer+0x109e>
 8005404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800540e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2b00      	cmp	r3, #0
 8005418:	d104      	bne.n	8005424 <USB_EPStartXfer+0x1038>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	3b01      	subs	r3, #1
 8005420:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005436:	b29a      	uxth	r2, r3
 8005438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e024      	b.n	800548a <USB_EPStartXfer+0x109e>
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d11f      	bne.n	800548a <USB_EPStartXfer+0x109e>
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800545a:	b29b      	uxth	r3, r3
 800545c:	461a      	mov	r2, r3
 800545e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005462:	4413      	add	r3, r2
 8005464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005468:	463b      	mov	r3, r7
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	011a      	lsls	r2, r3, #4
 8005470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005474:	4413      	add	r3, r2
 8005476:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800547a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800547e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005482:	b29a      	uxth	r2, r3
 8005484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005492:	463b      	mov	r3, r7
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d16f      	bne.n	800557c <USB_EPStartXfer+0x1190>
 800549c:	1d3b      	adds	r3, r7, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054a4:	1d3b      	adds	r3, r7, #4
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054b4:	4413      	add	r3, r2
 80054b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054ba:	463b      	mov	r3, r7
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	011a      	lsls	r2, r3, #4
 80054c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d116      	bne.n	8005506 <USB_EPStartXfer+0x111a>
 80054d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e05e      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
 8005506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800550a:	2b3e      	cmp	r3, #62	; 0x3e
 800550c:	d818      	bhi.n	8005540 <USB_EPStartXfer+0x1154>
 800550e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005512:	085b      	lsrs	r3, r3, #1
 8005514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005518:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <USB_EPStartXfer+0x1142>
 8005524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005528:	3301      	adds	r3, #1
 800552a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800552e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005532:	b29b      	uxth	r3, r3
 8005534:	029b      	lsls	r3, r3, #10
 8005536:	b29a      	uxth	r2, r3
 8005538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e041      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
 8005540:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2b00      	cmp	r3, #0
 8005554:	d104      	bne.n	8005560 <USB_EPStartXfer+0x1174>
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555a:	3b01      	subs	r3, #1
 800555c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005564:	b29b      	uxth	r3, r3
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	e023      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
 800557c:	463b      	mov	r3, r7
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	785b      	ldrb	r3, [r3, #1]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d11e      	bne.n	80055c4 <USB_EPStartXfer+0x11d8>
 8005586:	1d3b      	adds	r3, r7, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558e:	b29b      	uxth	r3, r3
 8005590:	461a      	mov	r2, r3
 8005592:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005596:	4413      	add	r3, r2
 8005598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	011a      	lsls	r2, r3, #4
 80055a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055a8:	4413      	add	r3, r2
 80055aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	e001      	b.n	80055c4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e02e      	b.n	8005622 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055c4:	1d3b      	adds	r3, r7, #4
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80055ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80055f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80055f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	463b      	mov	r3, r7
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	441a      	add	r2, r3
 8005608:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800560c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561c:	b29b      	uxth	r3, r3
 800561e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	785b      	ldrb	r3, [r3, #1]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	81bb      	strh	r3, [r7, #12]
 8005656:	89bb      	ldrh	r3, [r7, #12]
 8005658:	f083 0310 	eor.w	r3, r3, #16
 800565c:	81bb      	strh	r3, [r7, #12]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	89bb      	ldrh	r3, [r7, #12]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
 800567e:	e01f      	b.n	80056c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005696:	81fb      	strh	r3, [r7, #14]
 8005698:	89fb      	ldrh	r3, [r7, #14]
 800569a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800569e:	81fb      	strh	r3, [r7, #14]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	441a      	add	r2, r3
 80056aa:	89fb      	ldrh	r3, [r7, #14]
 80056ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr

080056cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	7b1b      	ldrb	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f040 809d 	bne.w	800581a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d04c      	beq.n	8005782 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	823b      	strh	r3, [r7, #16]
 80056f6:	8a3b      	ldrh	r3, [r7, #16]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <USB_EPClearStall+0x6c>
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b29b      	uxth	r3, r3
 800570e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	81fb      	strh	r3, [r7, #14]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	441a      	add	r2, r3
 8005722:	89fb      	ldrh	r3, [r7, #14]
 8005724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800572c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005730:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005734:	b29b      	uxth	r3, r3
 8005736:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d06c      	beq.n	800581a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	81bb      	strh	r3, [r7, #12]
 8005758:	89bb      	ldrh	r3, [r7, #12]
 800575a:	f083 0320 	eor.w	r3, r3, #32
 800575e:	81bb      	strh	r3, [r7, #12]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	441a      	add	r2, r3
 800576a:	89bb      	ldrh	r3, [r7, #12]
 800576c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800577c:	b29b      	uxth	r3, r3
 800577e:	8013      	strh	r3, [r2, #0]
 8005780:	e04b      	b.n	800581a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	82fb      	strh	r3, [r7, #22]
 8005790:	8afb      	ldrh	r3, [r7, #22]
 8005792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d01b      	beq.n	80057d2 <USB_EPClearStall+0x106>
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	82bb      	strh	r3, [r7, #20]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	441a      	add	r2, r3
 80057bc:	8abb      	ldrh	r3, [r7, #20]
 80057be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e8:	827b      	strh	r3, [r7, #18]
 80057ea:	8a7b      	ldrh	r3, [r7, #18]
 80057ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057f0:	827b      	strh	r3, [r7, #18]
 80057f2:	8a7b      	ldrh	r3, [r7, #18]
 80057f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057f8:	827b      	strh	r3, [r7, #18]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	441a      	add	r2, r3
 8005804:	8a7b      	ldrh	r3, [r7, #18]
 8005806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800580e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005816:	b29b      	uxth	r3, r3
 8005818:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	460b      	mov	r3, r1
 8005830:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	bc80      	pop	{r7}
 8005872:	4770      	bx	lr

08005874 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005882:	b29b      	uxth	r3, r3
 8005884:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005886:	68fb      	ldr	r3, [r7, #12]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bc80      	pop	{r7}
 80058a6:	4770      	bx	lr

080058a8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b08d      	sub	sp, #52	; 0x34
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	4611      	mov	r1, r2
 80058b4:	461a      	mov	r2, r3
 80058b6:	460b      	mov	r3, r1
 80058b8:	80fb      	strh	r3, [r7, #6]
 80058ba:	4613      	mov	r3, r2
 80058bc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80058be:	88bb      	ldrh	r3, [r7, #4]
 80058c0:	3301      	adds	r3, #1
 80058c2:	085b      	lsrs	r3, r3, #1
 80058c4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	005a      	lsls	r2, r3, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058da:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058e0:	e01e      	b.n	8005920 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	3301      	adds	r3, #1
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	b29a      	uxth	r2, r3
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	3302      	adds	r3, #2
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	3302      	adds	r3, #2
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	3301      	adds	r3, #1
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800591a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591c:	3b01      	subs	r3, #1
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1dd      	bne.n	80058e2 <USB_WritePMA+0x3a>
  }
}
 8005926:	bf00      	nop
 8005928:	3734      	adds	r7, #52	; 0x34
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005930:	b480      	push	{r7}
 8005932:	b08b      	sub	sp, #44	; 0x2c
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	460b      	mov	r3, r1
 8005940:	80fb      	strh	r3, [r7, #6]
 8005942:	4613      	mov	r3, r2
 8005944:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005946:	88bb      	ldrh	r3, [r7, #4]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	005a      	lsls	r2, r3, #1
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
 8005968:	e01b      	b.n	80059a2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	881b      	ldrh	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	3302      	adds	r3, #2
 8005976:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	3301      	adds	r3, #1
 8005984:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	b2da      	uxtb	r2, r3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	3301      	adds	r3, #1
 8005994:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	3302      	adds	r3, #2
 800599a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	3b01      	subs	r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e0      	bne.n	800596a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80059a8:	88bb      	ldrh	r3, [r7, #4]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	701a      	strb	r2, [r3, #0]
  }
}
 80059c4:	bf00      	nop
 80059c6:	372c      	adds	r7, #44	; 0x2c
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
	...

080059d0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80059dc:	2308      	movs	r3, #8
 80059de:	2203      	movs	r2, #3
 80059e0:	2181      	movs	r1, #129	; 0x81
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f001 fc77 	bl	80072d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80059ee:	2301      	movs	r3, #1
 80059f0:	2203      	movs	r2, #3
 80059f2:	2101      	movs	r1, #1
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fc6e 	bl	80072d6 <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80059fa:	2010      	movs	r0, #16
 80059fc:	f001 fd80 	bl	8007500 <USBD_static_malloc>
 8005a00:	4602      	mov	r2, r0
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4a0b      	ldr	r2, [pc, #44]	; (8005a38 <USBD_HID_Init+0x68>)
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 fd52 	bl	80074b8 <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8005a1e:	2302      	movs	r3, #2
 8005a20:	e005      	b.n	8005a2e <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a28:	2200      	movs	r2, #0
 8005a2a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	2000019c 	.word	0x2000019c

08005a3c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4a06      	ldr	r2, [pc, #24]	; (8005a6c <USBD_HID_DataOut+0x30>)
 8005a52:	2101      	movs	r1, #1
 8005a54:	f7fb ffad 	bl	80019b2 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <USBD_HID_DataOut+0x30>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fa fe97 	bl	8000790 <SET_LEDS_Callback>

	return USBD_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	2000019c 	.word	0x2000019c

08005a70 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005a7c:	2181      	movs	r1, #129	; 0x81
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f001 fc4f 	bl	8007322 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 fd3c 	bl	8007518 <USBD_static_free>
    pdev->pClassData = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d045      	beq.n	8005b6e <USBD_HID_Setup+0xba>
 8005ae2:	2b20      	cmp	r3, #32
 8005ae4:	f040 80d3 	bne.w	8005c8e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	785b      	ldrb	r3, [r3, #1]
 8005aec:	3b02      	subs	r3, #2
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d835      	bhi.n	8005b5e <USBD_HID_Setup+0xaa>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <USBD_HID_Setup+0x44>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b4f 	.word	0x08005b4f
 8005afc:	08005b2f 	.word	0x08005b2f
 8005b00:	08005b5f 	.word	0x08005b5f
 8005b04:	08005b5f 	.word	0x08005b5f
 8005b08:	08005b5f 	.word	0x08005b5f
 8005b0c:	08005b5f 	.word	0x08005b5f
 8005b10:	08005b5f 	.word	0x08005b5f
 8005b14:	08005b5f 	.word	0x08005b5f
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b21 	.word	0x08005b21
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	885b      	ldrh	r3, [r3, #2]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	601a      	str	r2, [r3, #0]
          break;
 8005b2c:	e01e      	b.n	8005b6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2201      	movs	r2, #1
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 f915 	bl	8006d64 <USBD_CtlSendData>
          break;
 8005b3a:	e017      	b.n	8005b6c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	885b      	ldrh	r3, [r3, #2]
 8005b40:	0a1b      	lsrs	r3, r3, #8
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	605a      	str	r2, [r3, #4]
          break;
 8005b4c:	e00e      	b.n	8005b6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2201      	movs	r2, #1
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f904 	bl	8006d64 <USBD_CtlSendData>
          break;
 8005b5c:	e006      	b.n	8005b6c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 f895 	bl	8006c90 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b66:	2302      	movs	r3, #2
 8005b68:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6a:	bf00      	nop
      }
      break;
 8005b6c:	e096      	b.n	8005c9c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b0b      	cmp	r3, #11
 8005b74:	f200 8083 	bhi.w	8005c7e <USBD_HID_Setup+0x1ca>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <USBD_HID_Setup+0xcc>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005bb1 	.word	0x08005bb1
 8005b84:	08005c7f 	.word	0x08005c7f
 8005b88:	08005c7f 	.word	0x08005c7f
 8005b8c:	08005c7f 	.word	0x08005c7f
 8005b90:	08005c7f 	.word	0x08005c7f
 8005b94:	08005c7f 	.word	0x08005c7f
 8005b98:	08005bd9 	.word	0x08005bd9
 8005b9c:	08005c7f 	.word	0x08005c7f
 8005ba0:	08005c7f 	.word	0x08005c7f
 8005ba4:	08005c7f 	.word	0x08005c7f
 8005ba8:	08005c31 	.word	0x08005c31
 8005bac:	08005c59 	.word	0x08005c59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d107      	bne.n	8005bca <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005bba:	f107 030e 	add.w	r3, r7, #14
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 f8ce 	bl	8006d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bc8:	e060      	b.n	8005c8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 f85f 	bl	8006c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd6:	e059      	b.n	8005c8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	885b      	ldrh	r3, [r3, #2]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b22      	cmp	r3, #34	; 0x22
 8005be2:	d108      	bne.n	8005bf6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	88db      	ldrh	r3, [r3, #6]
 8005be8:	2b41      	cmp	r3, #65	; 0x41
 8005bea:	bf28      	it	cs
 8005bec:	2341      	movcs	r3, #65	; 0x41
 8005bee:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <USBD_HID_Setup+0x1f4>)
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	e015      	b.n	8005c22 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	885b      	ldrh	r3, [r3, #2]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b21      	cmp	r3, #33	; 0x21
 8005c00:	d108      	bne.n	8005c14 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005c02:	4b2a      	ldr	r3, [pc, #168]	; (8005cac <USBD_HID_Setup+0x1f8>)
 8005c04:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	88db      	ldrh	r3, [r3, #6]
 8005c0a:	2b09      	cmp	r3, #9
 8005c0c:	bf28      	it	cs
 8005c0e:	2309      	movcs	r3, #9
 8005c10:	83fb      	strh	r3, [r7, #30]
 8005c12:	e006      	b.n	8005c22 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 f83a 	bl	8006c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005c20:	e034      	b.n	8005c8c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005c22:	8bfb      	ldrh	r3, [r7, #30]
 8005c24:	461a      	mov	r2, r3
 8005c26:	69b9      	ldr	r1, [r7, #24]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f89b 	bl	8006d64 <USBD_CtlSendData>
          break;
 8005c2e:	e02d      	b.n	8005c8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d107      	bne.n	8005c4a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4619      	mov	r1, r3
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f001 f88e 	bl	8006d64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c48:	e020      	b.n	8005c8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005c4a:	6839      	ldr	r1, [r7, #0]
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 f81f 	bl	8006c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c52:	2302      	movs	r3, #2
 8005c54:	75fb      	strb	r3, [r7, #23]
          break;
 8005c56:	e019      	b.n	8005c8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d106      	bne.n	8005c70 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c6e:	e00d      	b.n	8005c8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 f80c 	bl	8006c90 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c78:	2302      	movs	r3, #2
 8005c7a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c7c:	e006      	b.n	8005c8c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f805 	bl	8006c90 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c86:	2302      	movs	r3, #2
 8005c88:	75fb      	strb	r3, [r7, #23]
          break;
 8005c8a:	bf00      	nop
      }
      break;
 8005c8c:	e006      	b.n	8005c9c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fffd 	bl	8006c90 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c96:	2302      	movs	r3, #2
 8005c98:	75fb      	strb	r3, [r7, #23]
      break;
 8005c9a:	bf00      	nop
  }

  return ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	200000e4 	.word	0x200000e4
 8005cac:	200000cc 	.word	0x200000cc

08005cb0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2229      	movs	r2, #41	; 0x29
 8005cbc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000048 	.word	0x20000048

08005cd0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2229      	movs	r2, #41	; 0x29
 8005cdc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005cde:	4b03      	ldr	r3, [pc, #12]	; (8005cec <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000074 	.word	0x20000074

08005cf0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2229      	movs	r2, #41	; 0x29
 8005cfc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	200000a0 	.word	0x200000a0

08005d10 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8005d1c:	f7fa fb54 	bl	80003c8 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d26:	2200      	movs	r2, #0
 8005d28:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	220a      	movs	r2, #10
 8005d40:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005d42:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	200000d8 	.word	0x200000d8

08005d54 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e01a      	b.n	8005da2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	79fa      	ldrb	r2, [r7, #7]
 8005d98:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f001 fa38 	bl	8007210 <USBD_LL_Init>

  return USBD_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	73fb      	strb	r3, [r7, #15]
 8005dca:	e001      	b.n	8005dd0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr

08005ddc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 fa5b 	bl	80072a0 <USBD_LL_Start>

  return USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	460b      	mov	r3, r1
 8005e12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e14:	2302      	movs	r3, #2
 8005e16:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00c      	beq.n	8005e3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	4798      	blx	r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	4798      	blx	r3

  return USBD_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 feca 	bl	8006c18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d00c      	beq.n	8005ec2 <USBD_LL_SetupStage+0x56>
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d302      	bcc.n	8005eb2 <USBD_LL_SetupStage+0x46>
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d010      	beq.n	8005ed2 <USBD_LL_SetupStage+0x66>
 8005eb0:	e017      	b.n	8005ee2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f9ca 	bl	8006254 <USBD_StdDevReq>
      break;
 8005ec0:	e01a      	b.n	8005ef8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa2c 	bl	8006328 <USBD_StdItfReq>
      break;
 8005ed0:	e012      	b.n	8005ef8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa6a 	bl	80063b4 <USBD_StdEPReq>
      break;
 8005ee0:	e00a      	b.n	8005ef8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ee8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fa35 	bl	8007360 <USBD_LL_StallEP>
      break;
 8005ef6:	bf00      	nop
  }

  return USBD_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b086      	sub	sp, #24
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	60f8      	str	r0, [r7, #12]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	607a      	str	r2, [r7, #4]
 8005f0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d14b      	bne.n	8005fae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d134      	bne.n	8005f92 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d919      	bls.n	8005f68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	1ad2      	subs	r2, r2, r3
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d203      	bcs.n	8005f56 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	e002      	b.n	8005f5c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 ff2d 	bl	8006dc0 <USBD_CtlContinueRx>
 8005f66:	e038      	b.n	8005fda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d105      	bne.n	8005f8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 ff2a 	bl	8006de4 <USBD_CtlSendStatus>
 8005f90:	e023      	b.n	8005fda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f98:	2b05      	cmp	r3, #5
 8005f9a:	d11e      	bne.n	8005fda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f001 f9da 	bl	8007360 <USBD_LL_StallEP>
 8005fac:	e015      	b.n	8005fda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00d      	beq.n	8005fd6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d108      	bne.n	8005fd6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	7afa      	ldrb	r2, [r7, #11]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	4798      	blx	r3
 8005fd4:	e001      	b.n	8005fda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e000      	b.n	8005fdc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	460b      	mov	r3, r1
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d17f      	bne.n	80060f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006004:	2b02      	cmp	r3, #2
 8006006:	d15c      	bne.n	80060c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d915      	bls.n	8006040 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 feb5 	bl	8006d9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006032:	2300      	movs	r3, #0
 8006034:	2200      	movs	r2, #0
 8006036:	2100      	movs	r1, #0
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f001 fa3d 	bl	80074b8 <USBD_LL_PrepareReceive>
 800603e:	e04e      	b.n	80060de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	6912      	ldr	r2, [r2, #16]
 8006048:	fbb3 f1f2 	udiv	r1, r3, r2
 800604c:	fb02 f201 	mul.w	r2, r2, r1
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d11c      	bne.n	8006090 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800605e:	429a      	cmp	r2, r3
 8006060:	d316      	bcc.n	8006090 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800606c:	429a      	cmp	r2, r3
 800606e:	d20f      	bcs.n	8006090 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006070:	2200      	movs	r2, #0
 8006072:	2100      	movs	r1, #0
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 fe91 	bl	8006d9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006082:	2300      	movs	r3, #0
 8006084:	2200      	movs	r2, #0
 8006086:	2100      	movs	r1, #0
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 fa15 	bl	80074b8 <USBD_LL_PrepareReceive>
 800608e:	e026      	b.n	80060de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d105      	bne.n	80060b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f001 f953 	bl	8007360 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fea5 	bl	8006e0a <USBD_CtlReceiveStatus>
 80060c0:	e00d      	b.n	80060de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d004      	beq.n	80060d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80060d6:	2180      	movs	r1, #128	; 0x80
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f001 f941 	bl	8007360 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d11d      	bne.n	8006124 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fe83 	bl	8005df4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060f6:	e015      	b.n	8006124 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00d      	beq.n	8006120 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800610a:	2b03      	cmp	r3, #3
 800610c:	d108      	bne.n	8006120 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	7afa      	ldrb	r2, [r7, #11]
 8006118:	4611      	mov	r1, r2
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	4798      	blx	r3
 800611e:	e001      	b.n	8006124 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006120:	2302      	movs	r3, #2
 8006122:	e000      	b.n	8006126 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b082      	sub	sp, #8
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006136:	2340      	movs	r3, #64	; 0x40
 8006138:	2200      	movs	r2, #0
 800613a:	2100      	movs	r1, #0
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f8ca 	bl	80072d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2240      	movs	r2, #64	; 0x40
 800614e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	2200      	movs	r2, #0
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f8bc 	bl	80072d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	; 0x40
 8006168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6852      	ldr	r2, [r2, #4]
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	4611      	mov	r1, r2
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	4798      	blx	r3
  }

  return USBD_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	78fa      	ldrb	r2, [r7, #3]
 80061c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2204      	movs	r2, #4
 80061e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr

080061f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006204:	2b04      	cmp	r3, #4
 8006206:	d105      	bne.n	8006214 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800622e:	2b03      	cmp	r3, #3
 8006230:	d10b      	bne.n	800624a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626a:	2b20      	cmp	r3, #32
 800626c:	d004      	beq.n	8006278 <USBD_StdDevReq+0x24>
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d002      	beq.n	8006278 <USBD_StdDevReq+0x24>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d008      	beq.n	8006288 <USBD_StdDevReq+0x34>
 8006276:	e04c      	b.n	8006312 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	6839      	ldr	r1, [r7, #0]
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	4798      	blx	r3
      break;
 8006286:	e049      	b.n	800631c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	785b      	ldrb	r3, [r3, #1]
 800628c:	2b09      	cmp	r3, #9
 800628e:	d83a      	bhi.n	8006306 <USBD_StdDevReq+0xb2>
 8006290:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <USBD_StdDevReq+0x44>)
 8006292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006296:	bf00      	nop
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062fd 	.word	0x080062fd
 80062a0:	08006307 	.word	0x08006307
 80062a4:	080062f3 	.word	0x080062f3
 80062a8:	08006307 	.word	0x08006307
 80062ac:	080062cb 	.word	0x080062cb
 80062b0:	080062c1 	.word	0x080062c1
 80062b4:	08006307 	.word	0x08006307
 80062b8:	080062df 	.word	0x080062df
 80062bc:	080062d5 	.word	0x080062d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9d4 	bl	8006670 <USBD_GetDescriptor>
          break;
 80062c8:	e022      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fb37 	bl	8006940 <USBD_SetAddress>
          break;
 80062d2:	e01d      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb74 	bl	80069c4 <USBD_SetConfig>
          break;
 80062dc:	e018      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fbfd 	bl	8006ae0 <USBD_GetConfig>
          break;
 80062e6:	e013      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fc2c 	bl	8006b48 <USBD_GetStatus>
          break;
 80062f0:	e00e      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fc5a 	bl	8006bae <USBD_SetFeature>
          break;
 80062fa:	e009      	b.n	8006310 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc69 	bl	8006bd6 <USBD_ClrFeature>
          break;
 8006304:	e004      	b.n	8006310 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fcc1 	bl	8006c90 <USBD_CtlError>
          break;
 800630e:	bf00      	nop
      }
      break;
 8006310:	e004      	b.n	800631c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fcbb 	bl	8006c90 <USBD_CtlError>
      break;
 800631a:	bf00      	nop
  }

  return ret;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop

08006328 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800633e:	2b20      	cmp	r3, #32
 8006340:	d003      	beq.n	800634a <USBD_StdItfReq+0x22>
 8006342:	2b40      	cmp	r3, #64	; 0x40
 8006344:	d001      	beq.n	800634a <USBD_StdItfReq+0x22>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d12a      	bne.n	80063a0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006350:	3b01      	subs	r3, #1
 8006352:	2b02      	cmp	r3, #2
 8006354:	d81d      	bhi.n	8006392 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	889b      	ldrh	r3, [r3, #4]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d813      	bhi.n	8006388 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	6839      	ldr	r1, [r7, #0]
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	4798      	blx	r3
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	88db      	ldrh	r3, [r3, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d110      	bne.n	800639c <USBD_StdItfReq+0x74>
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fd2f 	bl	8006de4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006386:	e009      	b.n	800639c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fc80 	bl	8006c90 <USBD_CtlError>
          break;
 8006390:	e004      	b.n	800639c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fc7b 	bl	8006c90 <USBD_CtlError>
          break;
 800639a:	e000      	b.n	800639e <USBD_StdItfReq+0x76>
          break;
 800639c:	bf00      	nop
      }
      break;
 800639e:	e004      	b.n	80063aa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80063a0:	6839      	ldr	r1, [r7, #0]
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc74 	bl	8006c90 <USBD_CtlError>
      break;
 80063a8:	bf00      	nop
  }

  return USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	889b      	ldrh	r3, [r3, #4]
 80063c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d004      	beq.n	80063de <USBD_StdEPReq+0x2a>
 80063d4:	2b40      	cmp	r3, #64	; 0x40
 80063d6:	d002      	beq.n	80063de <USBD_StdEPReq+0x2a>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <USBD_StdEPReq+0x3a>
 80063dc:	e13d      	b.n	800665a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
      break;
 80063ec:	e13a      	b.n	8006664 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d10a      	bne.n	8006410 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	e12a      	b.n	8006666 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	2b01      	cmp	r3, #1
 8006416:	d03e      	beq.n	8006496 <USBD_StdEPReq+0xe2>
 8006418:	2b03      	cmp	r3, #3
 800641a:	d002      	beq.n	8006422 <USBD_StdEPReq+0x6e>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d070      	beq.n	8006502 <USBD_StdEPReq+0x14e>
 8006420:	e115      	b.n	800664e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006428:	2b02      	cmp	r3, #2
 800642a:	d002      	beq.n	8006432 <USBD_StdEPReq+0x7e>
 800642c:	2b03      	cmp	r3, #3
 800642e:	d015      	beq.n	800645c <USBD_StdEPReq+0xa8>
 8006430:	e02b      	b.n	800648a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <USBD_StdEPReq+0x9e>
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d009      	beq.n	8006452 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 ff8c 	bl	8007360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006448:	2180      	movs	r1, #128	; 0x80
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 ff88 	bl	8007360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006450:	e020      	b.n	8006494 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fc1b 	bl	8006c90 <USBD_CtlError>
              break;
 800645a:	e01b      	b.n	8006494 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	885b      	ldrh	r3, [r3, #2]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10e      	bne.n	8006482 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00b      	beq.n	8006482 <USBD_StdEPReq+0xce>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d008      	beq.n	8006482 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	88db      	ldrh	r3, [r3, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 ff6f 	bl	8007360 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fcae 	bl	8006de4 <USBD_CtlSendStatus>

              break;
 8006488:	e004      	b.n	8006494 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800648a:	6839      	ldr	r1, [r7, #0]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fbff 	bl	8006c90 <USBD_CtlError>
              break;
 8006492:	bf00      	nop
          }
          break;
 8006494:	e0e0      	b.n	8006658 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800649c:	2b02      	cmp	r3, #2
 800649e:	d002      	beq.n	80064a6 <USBD_StdEPReq+0xf2>
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d015      	beq.n	80064d0 <USBD_StdEPReq+0x11c>
 80064a4:	e026      	b.n	80064f4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00c      	beq.n	80064c6 <USBD_StdEPReq+0x112>
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d009      	beq.n	80064c6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 ff52 	bl	8007360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80064bc:	2180      	movs	r1, #128	; 0x80
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 ff4e 	bl	8007360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064c4:	e01c      	b.n	8006500 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fbe1 	bl	8006c90 <USBD_CtlError>
              break;
 80064ce:	e017      	b.n	8006500 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	885b      	ldrh	r3, [r3, #2]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d112      	bne.n	80064fe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	4619      	mov	r1, r3
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 ff59 	bl	800739e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc79 	bl	8006de4 <USBD_CtlSendStatus>
              }
              break;
 80064f2:	e004      	b.n	80064fe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fbca 	bl	8006c90 <USBD_CtlError>
              break;
 80064fc:	e000      	b.n	8006500 <USBD_StdEPReq+0x14c>
              break;
 80064fe:	bf00      	nop
          }
          break;
 8006500:	e0aa      	b.n	8006658 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	2b02      	cmp	r3, #2
 800650a:	d002      	beq.n	8006512 <USBD_StdEPReq+0x15e>
 800650c:	2b03      	cmp	r3, #3
 800650e:	d032      	beq.n	8006576 <USBD_StdEPReq+0x1c2>
 8006510:	e097      	b.n	8006642 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <USBD_StdEPReq+0x174>
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d004      	beq.n	8006528 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fbb5 	bl	8006c90 <USBD_CtlError>
                break;
 8006526:	e091      	b.n	800664c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800652c:	2b00      	cmp	r3, #0
 800652e:	da0b      	bge.n	8006548 <USBD_StdEPReq+0x194>
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	3310      	adds	r3, #16
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	4413      	add	r3, r2
 8006544:	3304      	adds	r3, #4
 8006546:	e00b      	b.n	8006560 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	3304      	adds	r3, #4
 8006560:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2202      	movs	r2, #2
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fbf8 	bl	8006d64 <USBD_CtlSendData>
              break;
 8006574:	e06a      	b.n	800664c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006576:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da11      	bge.n	80065a2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	f003 020f 	and.w	r2, r3, #15
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3318      	adds	r3, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d117      	bne.n	80065c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fb78 	bl	8006c90 <USBD_CtlError>
                  break;
 80065a0:	e054      	b.n	800664c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d104      	bne.n	80065c8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fb65 	bl	8006c90 <USBD_CtlError>
                  break;
 80065c6:	e041      	b.n	800664c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da0b      	bge.n	80065e8 <USBD_StdEPReq+0x234>
 80065d0:	7bbb      	ldrb	r3, [r7, #14]
 80065d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80065d6:	4613      	mov	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	3310      	adds	r3, #16
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	4413      	add	r3, r2
 80065e4:	3304      	adds	r3, #4
 80065e6:	e00b      	b.n	8006600 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80065e8:	7bbb      	ldrb	r3, [r7, #14]
 80065ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065ee:	4613      	mov	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	4413      	add	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	4413      	add	r3, r2
 80065fe:	3304      	adds	r3, #4
 8006600:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d002      	beq.n	800660e <USBD_StdEPReq+0x25a>
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d103      	bne.n	8006616 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	e00e      	b.n	8006634 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 fede 	bl	80073dc <USBD_LL_IsStallEP>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2201      	movs	r2, #1
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e002      	b.n	8006634 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2202      	movs	r2, #2
 8006638:	4619      	mov	r1, r3
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fb92 	bl	8006d64 <USBD_CtlSendData>
              break;
 8006640:	e004      	b.n	800664c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fb23 	bl	8006c90 <USBD_CtlError>
              break;
 800664a:	bf00      	nop
          }
          break;
 800664c:	e004      	b.n	8006658 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb1d 	bl	8006c90 <USBD_CtlError>
          break;
 8006656:	bf00      	nop
      }
      break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fb17 	bl	8006c90 <USBD_CtlError>
      break;
 8006662:	bf00      	nop
  }

  return ret;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	885b      	ldrh	r3, [r3, #2]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	2b06      	cmp	r3, #6
 8006692:	f200 8128 	bhi.w	80068e6 <USBD_GetDescriptor+0x276>
 8006696:	a201      	add	r2, pc, #4	; (adr r2, 800669c <USBD_GetDescriptor+0x2c>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	08006711 	.word	0x08006711
 80066a8:	080068e7 	.word	0x080068e7
 80066ac:	080068e7 	.word	0x080068e7
 80066b0:	08006887 	.word	0x08006887
 80066b4:	080068b3 	.word	0x080068b3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	7c12      	ldrb	r2, [r2, #16]
 80066c4:	f107 0108 	add.w	r1, r7, #8
 80066c8:	4610      	mov	r0, r2
 80066ca:	4798      	blx	r3
 80066cc:	60f8      	str	r0, [r7, #12]
      break;
 80066ce:	e112      	b.n	80068f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7c1b      	ldrb	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	f107 0208 	add.w	r2, r7, #8
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	2202      	movs	r2, #2
 80066f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80066f2:	e100      	b.n	80068f6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f107 0208 	add.w	r2, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	2202      	movs	r2, #2
 800670c:	701a      	strb	r2, [r3, #0]
      break;
 800670e:	e0f2      	b.n	80068f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b05      	cmp	r3, #5
 8006718:	f200 80ac 	bhi.w	8006874 <USBD_GetDescriptor+0x204>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <USBD_GetDescriptor+0xb4>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	0800673d 	.word	0x0800673d
 8006728:	08006771 	.word	0x08006771
 800672c:	080067a5 	.word	0x080067a5
 8006730:	080067d9 	.word	0x080067d9
 8006734:	0800680d 	.word	0x0800680d
 8006738:	08006841 	.word	0x08006841
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	7c12      	ldrb	r2, [r2, #16]
 8006754:	f107 0108 	add.w	r1, r7, #8
 8006758:	4610      	mov	r0, r2
 800675a:	4798      	blx	r3
 800675c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675e:	e091      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fa94 	bl	8006c90 <USBD_CtlError>
            err++;
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	3301      	adds	r3, #1
 800676c:	72fb      	strb	r3, [r7, #11]
          break;
 800676e:	e089      	b.n	8006884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00b      	beq.n	8006794 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	7c12      	ldrb	r2, [r2, #16]
 8006788:	f107 0108 	add.w	r1, r7, #8
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
 8006790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006792:	e077      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa7a 	bl	8006c90 <USBD_CtlError>
            err++;
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	3301      	adds	r3, #1
 80067a0:	72fb      	strb	r3, [r7, #11]
          break;
 80067a2:	e06f      	b.n	8006884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	7c12      	ldrb	r2, [r2, #16]
 80067bc:	f107 0108 	add.w	r1, r7, #8
 80067c0:	4610      	mov	r0, r2
 80067c2:	4798      	blx	r3
 80067c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067c6:	e05d      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa60 	bl	8006c90 <USBD_CtlError>
            err++;
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	3301      	adds	r3, #1
 80067d4:	72fb      	strb	r3, [r7, #11]
          break;
 80067d6:	e055      	b.n	8006884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	7c12      	ldrb	r2, [r2, #16]
 80067f0:	f107 0108 	add.w	r1, r7, #8
 80067f4:	4610      	mov	r0, r2
 80067f6:	4798      	blx	r3
 80067f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fa:	e043      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fa46 	bl	8006c90 <USBD_CtlError>
            err++;
 8006804:	7afb      	ldrb	r3, [r7, #11]
 8006806:	3301      	adds	r3, #1
 8006808:	72fb      	strb	r3, [r7, #11]
          break;
 800680a:	e03b      	b.n	8006884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	7c12      	ldrb	r2, [r2, #16]
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800682e:	e029      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa2c 	bl	8006c90 <USBD_CtlError>
            err++;
 8006838:	7afb      	ldrb	r3, [r7, #11]
 800683a:	3301      	adds	r3, #1
 800683c:	72fb      	strb	r3, [r7, #11]
          break;
 800683e:	e021      	b.n	8006884 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	7c12      	ldrb	r2, [r2, #16]
 8006858:	f107 0108 	add.w	r1, r7, #8
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006862:	e00f      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa12 	bl	8006c90 <USBD_CtlError>
            err++;
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	3301      	adds	r3, #1
 8006870:	72fb      	strb	r3, [r7, #11]
          break;
 8006872:	e007      	b.n	8006884 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa0a 	bl	8006c90 <USBD_CtlError>
          err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006882:	e038      	b.n	80068f6 <USBD_GetDescriptor+0x286>
 8006884:	e037      	b.n	80068f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7c1b      	ldrb	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	f107 0208 	add.w	r2, r7, #8
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
 800689e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068a0:	e029      	b.n	80068f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f9f3 	bl	8006c90 <USBD_CtlError>
        err++;
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	3301      	adds	r3, #1
 80068ae:	72fb      	strb	r3, [r7, #11]
      break;
 80068b0:	e021      	b.n	80068f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c1b      	ldrb	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10d      	bne.n	80068d6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f107 0208 	add.w	r2, r7, #8
 80068c6:	4610      	mov	r0, r2
 80068c8:	4798      	blx	r3
 80068ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	2207      	movs	r2, #7
 80068d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d4:	e00f      	b.n	80068f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f9d9 	bl	8006c90 <USBD_CtlError>
        err++;
 80068de:	7afb      	ldrb	r3, [r7, #11]
 80068e0:	3301      	adds	r3, #1
 80068e2:	72fb      	strb	r3, [r7, #11]
      break;
 80068e4:	e007      	b.n	80068f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9d1 	bl	8006c90 <USBD_CtlError>
      err++;
 80068ee:	7afb      	ldrb	r3, [r7, #11]
 80068f0:	3301      	adds	r3, #1
 80068f2:	72fb      	strb	r3, [r7, #11]
      break;
 80068f4:	bf00      	nop
  }

  if (err != 0U)
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d11c      	bne.n	8006936 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d011      	beq.n	8006926 <USBD_GetDescriptor+0x2b6>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	88da      	ldrh	r2, [r3, #6]
 800690e:	893b      	ldrh	r3, [r7, #8]
 8006910:	4293      	cmp	r3, r2
 8006912:	bf28      	it	cs
 8006914:	4613      	movcs	r3, r2
 8006916:	b29b      	uxth	r3, r3
 8006918:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800691a:	893b      	ldrh	r3, [r7, #8]
 800691c:	461a      	mov	r2, r3
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa1f 	bl	8006d64 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d104      	bne.n	8006938 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa58 	bl	8006de4 <USBD_CtlSendStatus>
 8006934:	e000      	b.n	8006938 <USBD_GetDescriptor+0x2c8>
    return;
 8006936:	bf00      	nop
    }
  }
}
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop

08006940 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	889b      	ldrh	r3, [r3, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d130      	bne.n	80069b4 <USBD_SetAddress+0x74>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	88db      	ldrh	r3, [r3, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d12c      	bne.n	80069b4 <USBD_SetAddress+0x74>
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	885b      	ldrh	r3, [r3, #2]
 800695e:	2b7f      	cmp	r3, #127	; 0x7f
 8006960:	d828      	bhi.n	80069b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	885b      	ldrh	r3, [r3, #2]
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800696c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006974:	2b03      	cmp	r3, #3
 8006976:	d104      	bne.n	8006982 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f988 	bl	8006c90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006980:	e01c      	b.n	80069bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	7bfa      	ldrb	r2, [r7, #15]
 8006986:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fd50 	bl	8007434 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa25 	bl	8006de4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d004      	beq.n	80069aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	e008      	b.n	80069bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b2:	e003      	b.n	80069bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f96a 	bl	8006c90 <USBD_CtlError>
  }
}
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	885b      	ldrh	r3, [r3, #2]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	4b41      	ldr	r3, [pc, #260]	; (8006adc <USBD_SetConfig+0x118>)
 80069d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80069d8:	4b40      	ldr	r3, [pc, #256]	; (8006adc <USBD_SetConfig+0x118>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d904      	bls.n	80069ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f954 	bl	8006c90 <USBD_CtlError>
 80069e8:	e075      	b.n	8006ad6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d002      	beq.n	80069fa <USBD_SetConfig+0x36>
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d023      	beq.n	8006a40 <USBD_SetConfig+0x7c>
 80069f8:	e062      	b.n	8006ac0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80069fa:	4b38      	ldr	r3, [pc, #224]	; (8006adc <USBD_SetConfig+0x118>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01a      	beq.n	8006a38 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006a02:	4b36      	ldr	r3, [pc, #216]	; (8006adc <USBD_SetConfig+0x118>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a14:	4b31      	ldr	r3, [pc, #196]	; (8006adc <USBD_SetConfig+0x118>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff f9f4 	bl	8005e08 <USBD_SetClassConfig>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d104      	bne.n	8006a30 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f931 	bl	8006c90 <USBD_CtlError>
            return;
 8006a2e:	e052      	b.n	8006ad6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f9d7 	bl	8006de4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a36:	e04e      	b.n	8006ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f9d3 	bl	8006de4 <USBD_CtlSendStatus>
        break;
 8006a3e:	e04a      	b.n	8006ad6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006a40:	4b26      	ldr	r3, [pc, #152]	; (8006adc <USBD_SetConfig+0x118>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d112      	bne.n	8006a6e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006a50:	4b22      	ldr	r3, [pc, #136]	; (8006adc <USBD_SetConfig+0x118>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a5a:	4b20      	ldr	r3, [pc, #128]	; (8006adc <USBD_SetConfig+0x118>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f7ff f9f0 	bl	8005e46 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f9bc 	bl	8006de4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006a6c:	e033      	b.n	8006ad6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006a6e:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <USBD_SetConfig+0x118>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d01d      	beq.n	8006ab8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff f9de 	bl	8005e46 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a8a:	4b14      	ldr	r3, [pc, #80]	; (8006adc <USBD_SetConfig+0x118>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a94:	4b11      	ldr	r3, [pc, #68]	; (8006adc <USBD_SetConfig+0x118>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff f9b4 	bl	8005e08 <USBD_SetClassConfig>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d104      	bne.n	8006ab0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006aa6:	6839      	ldr	r1, [r7, #0]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f8f1 	bl	8006c90 <USBD_CtlError>
            return;
 8006aae:	e012      	b.n	8006ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f997 	bl	8006de4 <USBD_CtlSendStatus>
        break;
 8006ab6:	e00e      	b.n	8006ad6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f993 	bl	8006de4 <USBD_CtlSendStatus>
        break;
 8006abe:	e00a      	b.n	8006ad6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8e4 	bl	8006c90 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006ac8:	4b04      	ldr	r3, [pc, #16]	; (8006adc <USBD_SetConfig+0x118>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff f9b9 	bl	8005e46 <USBD_ClrClassConfig>
        break;
 8006ad4:	bf00      	nop
    }
  }
}
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2000019d 	.word	0x2000019d

08006ae0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88db      	ldrh	r3, [r3, #6]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d004      	beq.n	8006afc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8cb 	bl	8006c90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006afa:	e021      	b.n	8006b40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	db17      	blt.n	8006b36 <USBD_GetConfig+0x56>
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	dd02      	ble.n	8006b10 <USBD_GetConfig+0x30>
 8006b0a:	2b03      	cmp	r3, #3
 8006b0c:	d00b      	beq.n	8006b26 <USBD_GetConfig+0x46>
 8006b0e:	e012      	b.n	8006b36 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f920 	bl	8006d64 <USBD_CtlSendData>
        break;
 8006b24:	e00c      	b.n	8006b40 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f918 	bl	8006d64 <USBD_CtlSendData>
        break;
 8006b34:	e004      	b.n	8006b40 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f8a9 	bl	8006c90 <USBD_CtlError>
        break;
 8006b3e:	bf00      	nop
}
 8006b40:	bf00      	nop
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d81e      	bhi.n	8006b9c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88db      	ldrh	r3, [r3, #6]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d004      	beq.n	8006b70 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f891 	bl	8006c90 <USBD_CtlError>
        break;
 8006b6e:	e01a      	b.n	8006ba6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f043 0202 	orr.w	r2, r3, #2
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	2202      	movs	r2, #2
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8e5 	bl	8006d64 <USBD_CtlSendData>
      break;
 8006b9a:	e004      	b.n	8006ba6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f876 	bl	8006c90 <USBD_CtlError>
      break;
 8006ba4:	bf00      	nop
  }
}
 8006ba6:	bf00      	nop
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	885b      	ldrh	r3, [r3, #2]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d106      	bne.n	8006bce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f90b 	bl	8006de4 <USBD_CtlSendStatus>
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b082      	sub	sp, #8
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be6:	3b01      	subs	r3, #1
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d80b      	bhi.n	8006c04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	885b      	ldrh	r3, [r3, #2]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10c      	bne.n	8006c0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8f1 	bl	8006de4 <USBD_CtlSendStatus>
      }
      break;
 8006c02:	e004      	b.n	8006c0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f842 	bl	8006c90 <USBD_CtlError>
      break;
 8006c0c:	e000      	b.n	8006c10 <USBD_ClrFeature+0x3a>
      break;
 8006c0e:	bf00      	nop
  }
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	781a      	ldrb	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	785a      	ldrb	r2, [r3, #1]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	3302      	adds	r3, #2
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	3303      	adds	r3, #3
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	021b      	lsls	r3, r3, #8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	4413      	add	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	3304      	adds	r3, #4
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	3305      	adds	r3, #5
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	3306      	adds	r3, #6
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	3307      	adds	r3, #7
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4413      	add	r3, r2
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	80da      	strh	r2, [r3, #6]

}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006c9a:	2180      	movs	r1, #128	; 0x80
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb5f 	bl	8007360 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fb5b 	bl	8007360 <USBD_LL_StallEP>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d032      	beq.n	8006d2e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f834 	bl	8006d36 <USBD_GetLen>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	75fa      	strb	r2, [r7, #23]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	75fa      	strb	r2, [r7, #23]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006cfe:	e012      	b.n	8006d26 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	60fa      	str	r2, [r7, #12]
 8006d06:	7dfa      	ldrb	r2, [r7, #23]
 8006d08:	1c51      	adds	r1, r2, #1
 8006d0a:	75f9      	strb	r1, [r7, #23]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	440a      	add	r2, r1
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	75fa      	strb	r2, [r7, #23]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	4413      	add	r3, r2
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e8      	bne.n	8006d00 <USBD_GetString+0x4e>
    }
  }
}
 8006d2e:	bf00      	nop
 8006d30:	3718      	adds	r7, #24
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006d42:	e005      	b.n	8006d50 <USBD_GetLen+0x1a>
  {
    len++;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	3301      	adds	r3, #1
 8006d48:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1f5      	bne.n	8006d44 <USBD_GetLen+0xe>
  }

  return len;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bc80      	pop	{r7}
 8006d62:	4770      	bx	lr

08006d64 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2202      	movs	r2, #2
 8006d76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006d80:	88fa      	ldrh	r2, [r7, #6]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 fb70 	bl	8007472 <USBD_LL_Transmit>

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006daa:	88fb      	ldrh	r3, [r7, #6]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	2100      	movs	r1, #0
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 fb5e 	bl	8007472 <USBD_LL_Transmit>

  return USBD_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006dce:	88fb      	ldrh	r3, [r7, #6]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fb6f 	bl	80074b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2204      	movs	r2, #4
 8006df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006df4:	2300      	movs	r3, #0
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fb39 	bl	8007472 <USBD_LL_Transmit>

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3708      	adds	r7, #8
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2205      	movs	r2, #5
 8006e16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fb49 	bl	80074b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e34:	2200      	movs	r2, #0
 8006e36:	490e      	ldr	r1, [pc, #56]	; (8006e70 <MX_USB_DEVICE_Init+0x40>)
 8006e38:	480e      	ldr	r0, [pc, #56]	; (8006e74 <MX_USB_DEVICE_Init+0x44>)
 8006e3a:	f7fe ff8b 	bl	8005d54 <USBD_Init>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e44:	f7f9 fb55 	bl	80004f2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006e48:	490b      	ldr	r1, [pc, #44]	; (8006e78 <MX_USB_DEVICE_Init+0x48>)
 8006e4a:	480a      	ldr	r0, [pc, #40]	; (8006e74 <MX_USB_DEVICE_Init+0x44>)
 8006e4c:	f7fe ffad 	bl	8005daa <USBD_RegisterClass>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e56:	f7f9 fb4c 	bl	80004f2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e5a:	4806      	ldr	r0, [pc, #24]	; (8006e74 <MX_USB_DEVICE_Init+0x44>)
 8006e5c:	f7fe ffbe 	bl	8005ddc <USBD_Start>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006e66:	f7f9 fb44 	bl	80004f2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000128 	.word	0x20000128
 8006e74:	20000244 	.word	0x20000244
 8006e78:	20000010 	.word	0x20000010

08006e7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	6039      	str	r1, [r7, #0]
 8006e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2212      	movs	r2, #18
 8006e8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000144 	.word	0x20000144

08006ea0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006eb2:	4b03      	ldr	r3, [pc, #12]	; (8006ec0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000158 	.word	0x20000158

08006ec4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d105      	bne.n	8006ee2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	4907      	ldr	r1, [pc, #28]	; (8006ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006eda:	4808      	ldr	r0, [pc, #32]	; (8006efc <USBD_FS_ProductStrDescriptor+0x38>)
 8006edc:	f7ff fee9 	bl	8006cb2 <USBD_GetString>
 8006ee0:	e004      	b.n	8006eec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	4904      	ldr	r1, [pc, #16]	; (8006ef8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ee6:	4805      	ldr	r0, [pc, #20]	; (8006efc <USBD_FS_ProductStrDescriptor+0x38>)
 8006ee8:	f7ff fee3 	bl	8006cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006eec:	4b02      	ldr	r3, [pc, #8]	; (8006ef8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000508 	.word	0x20000508
 8006efc:	0800761c 	.word	0x0800761c

08006f00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	4603      	mov	r3, r0
 8006f08:	6039      	str	r1, [r7, #0]
 8006f0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	4904      	ldr	r1, [pc, #16]	; (8006f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f10:	4804      	ldr	r0, [pc, #16]	; (8006f24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f12:	f7ff fece 	bl	8006cb2 <USBD_GetString>
  return USBD_StrDesc;
 8006f16:	4b02      	ldr	r3, [pc, #8]	; (8006f20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000508 	.word	0x20000508
 8006f24:	08007630 	.word	0x08007630

08006f28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	6039      	str	r1, [r7, #0]
 8006f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	221a      	movs	r2, #26
 8006f38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f3a:	f000 f843 	bl	8006fc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f3e:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	2000015c 	.word	0x2000015c

08006f4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	6039      	str	r1, [r7, #0]
 8006f56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f58:	79fb      	ldrb	r3, [r7, #7]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d105      	bne.n	8006f6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	4907      	ldr	r1, [pc, #28]	; (8006f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f62:	4808      	ldr	r0, [pc, #32]	; (8006f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f64:	f7ff fea5 	bl	8006cb2 <USBD_GetString>
 8006f68:	e004      	b.n	8006f74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4904      	ldr	r1, [pc, #16]	; (8006f80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f6e:	4805      	ldr	r0, [pc, #20]	; (8006f84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f70:	f7ff fe9f 	bl	8006cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000508 	.word	0x20000508
 8006f84:	08007644 	.word	0x08007644

08006f88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d105      	bne.n	8006fa6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4907      	ldr	r1, [pc, #28]	; (8006fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f9e:	4808      	ldr	r0, [pc, #32]	; (8006fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fa0:	f7ff fe87 	bl	8006cb2 <USBD_GetString>
 8006fa4:	e004      	b.n	8006fb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4904      	ldr	r1, [pc, #16]	; (8006fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006faa:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fac:	f7ff fe81 	bl	8006cb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000508 	.word	0x20000508
 8006fc0:	08007650 	.word	0x08007650

08006fc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fca:	4b0f      	ldr	r3, [pc, #60]	; (8007008 <Get_SerialNum+0x44>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fd0:	4b0e      	ldr	r3, [pc, #56]	; (800700c <Get_SerialNum+0x48>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <Get_SerialNum+0x4c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d009      	beq.n	8006ffe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fea:	2208      	movs	r2, #8
 8006fec:	4909      	ldr	r1, [pc, #36]	; (8007014 <Get_SerialNum+0x50>)
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 f814 	bl	800701c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006ff4:	2204      	movs	r2, #4
 8006ff6:	4908      	ldr	r1, [pc, #32]	; (8007018 <Get_SerialNum+0x54>)
 8006ff8:	68b8      	ldr	r0, [r7, #8]
 8006ffa:	f000 f80f 	bl	800701c <IntToUnicode>
  }
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	1ffff7e8 	.word	0x1ffff7e8
 800700c:	1ffff7ec 	.word	0x1ffff7ec
 8007010:	1ffff7f0 	.word	0x1ffff7f0
 8007014:	2000015e 	.word	0x2000015e
 8007018:	2000016e 	.word	0x2000016e

0800701c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	4613      	mov	r3, r2
 8007028:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800702e:	2300      	movs	r3, #0
 8007030:	75fb      	strb	r3, [r7, #23]
 8007032:	e027      	b.n	8007084 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	0f1b      	lsrs	r3, r3, #28
 8007038:	2b09      	cmp	r3, #9
 800703a:	d80b      	bhi.n	8007054 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	0f1b      	lsrs	r3, r3, #28
 8007040:	b2da      	uxtb	r2, r3
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	4619      	mov	r1, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	440b      	add	r3, r1
 800704c:	3230      	adds	r2, #48	; 0x30
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e00a      	b.n	800706a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	0f1b      	lsrs	r3, r3, #28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	4619      	mov	r1, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	440b      	add	r3, r1
 8007064:	3237      	adds	r2, #55	; 0x37
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007070:	7dfb      	ldrb	r3, [r7, #23]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	3301      	adds	r3, #1
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800707e:	7dfb      	ldrb	r3, [r7, #23]
 8007080:	3301      	adds	r3, #1
 8007082:	75fb      	strb	r3, [r7, #23]
 8007084:	7dfa      	ldrb	r2, [r7, #23]
 8007086:	79fb      	ldrb	r3, [r7, #7]
 8007088:	429a      	cmp	r2, r3
 800708a:	d3d3      	bcc.n	8007034 <IntToUnicode+0x18>
  }
}
 800708c:	bf00      	nop
 800708e:	371c      	adds	r7, #28
 8007090:	46bd      	mov	sp, r7
 8007092:	bc80      	pop	{r7}
 8007094:	4770      	bx	lr
	...

08007098 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <HAL_PCD_MspInit+0x44>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d113      	bne.n	80070d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80070aa:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <HAL_PCD_MspInit+0x48>)
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4a0c      	ldr	r2, [pc, #48]	; (80070e0 <HAL_PCD_MspInit+0x48>)
 80070b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070b4:	61d3      	str	r3, [r2, #28]
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <HAL_PCD_MspInit+0x48>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80070c2:	2200      	movs	r2, #0
 80070c4:	2100      	movs	r1, #0
 80070c6:	2014      	movs	r0, #20
 80070c8:	f7f9 ff41 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80070cc:	2014      	movs	r0, #20
 80070ce:	f7f9 ff5a 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40005c00 	.word	0x40005c00
 80070e0:	40021000 	.word	0x40021000

080070e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f7fe feb6 	bl	8005e6c <USBD_LL_SetupStage>
}
 8007100:	bf00      	nop
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800711a:	78fa      	ldrb	r2, [r7, #3]
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	4613      	mov	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4413      	add	r3, r2
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	440b      	add	r3, r1
 8007128:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	4619      	mov	r1, r3
 8007132:	f7fe fee6 	bl	8005f02 <USBD_LL_DataOutStage>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	460b      	mov	r3, r1
 8007148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007150:	78fa      	ldrb	r2, [r7, #3]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	440b      	add	r3, r1
 800715e:	333c      	adds	r3, #60	; 0x3c
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	4619      	mov	r1, r3
 8007166:	f7fe ff3d 	bl	8005fe4 <USBD_LL_DataInStage>
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff f84d 	bl	8006220 <USBD_LL_SOF>
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d001      	beq.n	80071a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80071a2:	f7f9 f9a6 	bl	80004f2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071ac:	7bfa      	ldrb	r2, [r7, #15]
 80071ae:	4611      	mov	r1, r2
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fe fffd 	bl	80061b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fe ffb6 	bl	800612e <USBD_LL_Reset>
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fe fff8 	bl	80061ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 80071de:	2001      	movs	r0, #1
 80071e0:	f7f9 fb08 	bl	80007f4 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 80071f4:	2000      	movs	r0, #0
 80071f6:	f7f9 fafd 	bl	80007f4 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe fff8 	bl	80061f6 <USBD_LL_Resume>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007218:	4a1f      	ldr	r2, [pc, #124]	; (8007298 <USBD_LL_Init+0x88>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <USBD_LL_Init+0x88>)
 8007224:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007228:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <USBD_LL_Init+0x88>)
 800722a:	4a1c      	ldr	r2, [pc, #112]	; (800729c <USBD_LL_Init+0x8c>)
 800722c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800722e:	4b1a      	ldr	r3, [pc, #104]	; (8007298 <USBD_LL_Init+0x88>)
 8007230:	2208      	movs	r2, #8
 8007232:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007234:	4b18      	ldr	r3, [pc, #96]	; (8007298 <USBD_LL_Init+0x88>)
 8007236:	2202      	movs	r2, #2
 8007238:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800723a:	4b17      	ldr	r3, [pc, #92]	; (8007298 <USBD_LL_Init+0x88>)
 800723c:	2200      	movs	r2, #0
 800723e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007240:	4b15      	ldr	r3, [pc, #84]	; (8007298 <USBD_LL_Init+0x88>)
 8007242:	2200      	movs	r2, #0
 8007244:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <USBD_LL_Init+0x88>)
 8007248:	2200      	movs	r2, #0
 800724a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800724c:	4812      	ldr	r0, [pc, #72]	; (8007298 <USBD_LL_Init+0x88>)
 800724e:	f7fa f857 	bl	8001300 <HAL_PCD_Init>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007258:	f7f9 f94b 	bl	80004f2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007262:	2318      	movs	r3, #24
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	f7fb fb74 	bl	8002954 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007272:	2358      	movs	r3, #88	; 0x58
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	f7fb fb6c 	bl	8002954 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007286:	2200      	movs	r2, #0
 8007288:	2181      	movs	r1, #129	; 0x81
 800728a:	f7fb fb63 	bl	8002954 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	20000708 	.word	0x20000708
 800729c:	40005c00 	.word	0x40005c00

080072a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fa f92d 	bl	8001516 <HAL_PCD_Start>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f93c 	bl	8007540 <USBD_Get_USB_Status>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	70fb      	strb	r3, [r7, #3]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70bb      	strb	r3, [r7, #2]
 80072ec:	4613      	mov	r3, r2
 80072ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80072fe:	78bb      	ldrb	r3, [r7, #2]
 8007300:	883a      	ldrh	r2, [r7, #0]
 8007302:	78f9      	ldrb	r1, [r7, #3]
 8007304:	f7fa faa7 	bl	8001856 <HAL_PCD_EP_Open>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f916 	bl	8007540 <USBD_Get_USB_Status>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007318:	7bbb      	ldrb	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fa faee 	bl	8001922 <HAL_PCD_EP_Close>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f8f7 	bl	8007540 <USBD_Get_USB_Status>
 8007352:	4603      	mov	r3, r0
 8007354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007356:	7bbb      	ldrb	r3, [r7, #14]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7fa fb97 	bl	8001ab2 <HAL_PCD_EP_SetStall>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f8d8 	bl	8007540 <USBD_Get_USB_Status>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007394:	7bbb      	ldrb	r3, [r7, #14]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fa fbd8 	bl	8001b72 <HAL_PCD_EP_ClrStall>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073c6:	7bfb      	ldrb	r3, [r7, #15]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f000 f8b9 	bl	8007540 <USBD_Get_USB_Status>
 80073ce:	4603      	mov	r3, r0
 80073d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da0c      	bge.n	8007412 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	4613      	mov	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	440b      	add	r3, r1
 800740c:	3302      	adds	r3, #2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	e00b      	b.n	800742a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007418:	68f9      	ldr	r1, [r7, #12]
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	440b      	add	r3, r1
 8007424:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007428:	781b      	ldrb	r3, [r3, #0]
  }
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	bc80      	pop	{r7}
 8007432:	4770      	bx	lr

08007434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007444:	2300      	movs	r3, #0
 8007446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4611      	mov	r1, r2
 8007452:	4618      	mov	r0, r3
 8007454:	f7fa f9da 	bl	800180c <HAL_PCD_SetAddress>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f86e 	bl	8007540 <USBD_Get_USB_Status>
 8007464:	4603      	mov	r3, r0
 8007466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007468:	7bbb      	ldrb	r3, [r7, #14]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	60f8      	str	r0, [r7, #12]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	461a      	mov	r2, r3
 800747e:	460b      	mov	r3, r1
 8007480:	72fb      	strb	r3, [r7, #11]
 8007482:	4613      	mov	r3, r2
 8007484:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007494:	893b      	ldrh	r3, [r7, #8]
 8007496:	7af9      	ldrb	r1, [r7, #11]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	f7fa fac7 	bl	8001a2c <HAL_PCD_EP_Transmit>
 800749e:	4603      	mov	r3, r0
 80074a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 f84b 	bl	8007540 <USBD_Get_USB_Status>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	461a      	mov	r2, r3
 80074c4:	460b      	mov	r3, r1
 80074c6:	72fb      	strb	r3, [r7, #11]
 80074c8:	4613      	mov	r3, r2
 80074ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	7af9      	ldrb	r1, [r7, #11]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	f7fa fa67 	bl	80019b2 <HAL_PCD_EP_Receive>
 80074e4:	4603      	mov	r3, r0
 80074e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 f828 	bl	8007540 <USBD_Get_USB_Status>
 80074f0:	4603      	mov	r3, r0
 80074f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007508:	4b02      	ldr	r3, [pc, #8]	; (8007514 <USBD_static_malloc+0x14>)
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr
 8007514:	200001a0 	.word	0x200001a0

08007518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]

}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	bc80      	pop	{r7}
 8007528:	4770      	bx	lr

0800752a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	460b      	mov	r3, r1
 8007534:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	bc80      	pop	{r7}
 800753e:	4770      	bx	lr

08007540 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d817      	bhi.n	8007584 <USBD_Get_USB_Status+0x44>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <USBD_Get_USB_Status+0x1c>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	0800756d 	.word	0x0800756d
 8007560:	08007573 	.word	0x08007573
 8007564:	08007579 	.word	0x08007579
 8007568:	0800757f 	.word	0x0800757f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	73fb      	strb	r3, [r7, #15]
    break;
 8007570:	e00b      	b.n	800758a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007572:	2302      	movs	r3, #2
 8007574:	73fb      	strb	r3, [r7, #15]
    break;
 8007576:	e008      	b.n	800758a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
    break;
 800757c:	e005      	b.n	800758a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800757e:	2302      	movs	r3, #2
 8007580:	73fb      	strb	r3, [r7, #15]
    break;
 8007582:	e002      	b.n	800758a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007584:	2302      	movs	r3, #2
 8007586:	73fb      	strb	r3, [r7, #15]
    break;
 8007588:	bf00      	nop
  }
  return usb_status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	bc80      	pop	{r7}
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop

08007598 <__libc_init_array>:
 8007598:	b570      	push	{r4, r5, r6, lr}
 800759a:	2500      	movs	r5, #0
 800759c:	4e0c      	ldr	r6, [pc, #48]	; (80075d0 <__libc_init_array+0x38>)
 800759e:	4c0d      	ldr	r4, [pc, #52]	; (80075d4 <__libc_init_array+0x3c>)
 80075a0:	1ba4      	subs	r4, r4, r6
 80075a2:	10a4      	asrs	r4, r4, #2
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d109      	bne.n	80075bc <__libc_init_array+0x24>
 80075a8:	f000 f822 	bl	80075f0 <_init>
 80075ac:	2500      	movs	r5, #0
 80075ae:	4e0a      	ldr	r6, [pc, #40]	; (80075d8 <__libc_init_array+0x40>)
 80075b0:	4c0a      	ldr	r4, [pc, #40]	; (80075dc <__libc_init_array+0x44>)
 80075b2:	1ba4      	subs	r4, r4, r6
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	42a5      	cmp	r5, r4
 80075b8:	d105      	bne.n	80075c6 <__libc_init_array+0x2e>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075c0:	4798      	blx	r3
 80075c2:	3501      	adds	r5, #1
 80075c4:	e7ee      	b.n	80075a4 <__libc_init_array+0xc>
 80075c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075ca:	4798      	blx	r3
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7f2      	b.n	80075b6 <__libc_init_array+0x1e>
 80075d0:	08007670 	.word	0x08007670
 80075d4:	08007670 	.word	0x08007670
 80075d8:	08007670 	.word	0x08007670
 80075dc:	08007674 	.word	0x08007674

080075e0 <memset>:
 80075e0:	4603      	mov	r3, r0
 80075e2:	4402      	add	r2, r0
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d100      	bne.n	80075ea <memset+0xa>
 80075e8:	4770      	bx	lr
 80075ea:	f803 1b01 	strb.w	r1, [r3], #1
 80075ee:	e7f9      	b.n	80075e4 <memset+0x4>

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
