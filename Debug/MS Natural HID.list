
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008194  08008194  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008194  08008194  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  0800819c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000940  200001a8  08008344  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  08008344  00020ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169ab  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f8  00000000  00000000  00036b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  0003a178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  0003b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b24a  00000000  00000000  0003c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011882  00000000  00000000  000574fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090020  00000000  00000000  00068d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f8d9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004600  00000000  00000000  000f8e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008014 	.word	0x08008014

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008014 	.word	0x08008014

0800014c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b50      	ldr	r3, [pc, #320]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a4f      	ldr	r2, [pc, #316]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b4d      	ldr	r3, [pc, #308]	; (80002a4 <MX_GPIO_Init+0x158>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b4a      	ldr	r3, [pc, #296]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a49      	ldr	r2, [pc, #292]	; (80002a4 <MX_GPIO_Init+0x158>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b47      	ldr	r3, [pc, #284]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b44      	ldr	r3, [pc, #272]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a43      	ldr	r2, [pc, #268]	; (80002a4 <MX_GPIO_Init+0x158>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b41      	ldr	r3, [pc, #260]	; (80002a4 <MX_GPIO_Init+0x158>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b3e      	ldr	r3, [pc, #248]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a3d      	ldr	r2, [pc, #244]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b3b      	ldr	r3, [pc, #236]	; (80002a4 <MX_GPIO_Init+0x158>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	4838      	ldr	r0, [pc, #224]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001c8:	f001 fd59 	bl	8001c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001d2:	4836      	ldr	r0, [pc, #216]	; (80002ac <MX_GPIO_Init+0x160>)
 80001d4:	f001 fd53 	bl	8001c7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001de:	2301      	movs	r3, #1
 80001e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e2:	2300      	movs	r3, #0
 80001e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001ea:	f107 0310 	add.w	r3, r7, #16
 80001ee:	4619      	mov	r1, r3
 80001f0:	482d      	ldr	r0, [pc, #180]	; (80002a8 <MX_GPIO_Init+0x15c>)
 80001f2:	f001 fbd3 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80001f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80001fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80001fc:	2303      	movs	r3, #3
 80001fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000200:	f107 0310 	add.w	r3, r7, #16
 8000204:	4619      	mov	r1, r3
 8000206:	4828      	ldr	r0, [pc, #160]	; (80002a8 <MX_GPIO_Init+0x15c>)
 8000208:	f001 fbc8 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800020c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000210:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000212:	2303      	movs	r3, #3
 8000214:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000216:	f107 0310 	add.w	r3, r7, #16
 800021a:	4619      	mov	r1, r3
 800021c:	4823      	ldr	r0, [pc, #140]	; (80002ac <MX_GPIO_Init+0x160>)
 800021e:	f001 fbbd 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000222:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000226:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000228:	2303      	movs	r3, #3
 800022a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	4619      	mov	r1, r3
 8000232:	481f      	ldr	r0, [pc, #124]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000234:	f001 fbb2 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000246:	2302      	movs	r3, #2
 8000248:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	4816      	ldr	r0, [pc, #88]	; (80002ac <MX_GPIO_Init+0x160>)
 8000252:	f001 fba3 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <MX_GPIO_Init+0x168>)
 800025e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000260:	2301      	movs	r3, #1
 8000262:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4811      	ldr	r0, [pc, #68]	; (80002b0 <MX_GPIO_Init+0x164>)
 800026c:	f001 fb96 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800027a:	2301      	movs	r3, #1
 800027c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	4619      	mov	r1, r3
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <MX_GPIO_Init+0x164>)
 8000286:	f001 fb89 	bl	800199c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	2017      	movs	r0, #23
 8000290:	f001 fb4d 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000294:	2017      	movs	r0, #23
 8000296:	f001 fb66 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40011000 	.word	0x40011000
 80002ac:	40010800 	.word	0x40010800
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	10210000 	.word	0x10210000

080002b8 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b084      	sub	sp, #16
 80002bc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80002be:	2200      	movs	r2, #0
 80002c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <data_low+0x44>)
 80002c6:	f001 fcda 	bl	8001c7e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80002d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002da:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <data_low+0x44>)
 80002ee:	f001 fb55 	bl	800199c <HAL_GPIO_Init>
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <clock_low>:

void clock_low(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <clock_low+0x44>)
 800030e:	f001 fcb6 	bl	8001c7e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	463b      	mov	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800031e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000322:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000324:	2301      	movs	r3, #1
 8000326:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032c:	2302      	movs	r3, #2
 800032e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000330:	463b      	mov	r3, r7
 8000332:	4619      	mov	r1, r3
 8000334:	4803      	ldr	r0, [pc, #12]	; (8000344 <clock_low+0x44>)
 8000336:	f001 fb31 	bl	800199c <HAL_GPIO_Init>
}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <data_release>:

void data_release(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034e:	463b      	mov	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
 8000358:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800035e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000368:	463b      	mov	r3, r7
 800036a:	4619      	mov	r1, r3
 800036c:	4803      	ldr	r0, [pc, #12]	; (800037c <data_release+0x34>)
 800036e:	f001 fb15 	bl	800199c <HAL_GPIO_Init>
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40010c00 	.word	0x40010c00

08000380 <clock_release>:

void clock_release(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	463b      	mov	r3, r7
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000396:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <clock_release+0x34>)
 800039a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800039c:	2301      	movs	r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 80003a0:	463b      	mov	r3, r7
 80003a2:	4619      	mov	r1, r3
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <clock_release+0x38>)
 80003a6:	f001 faf9 	bl	800199c <HAL_GPIO_Init>
}
 80003aa:	bf00      	nop
 80003ac:	3710      	adds	r7, #16
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	10210000 	.word	0x10210000
 80003b8:	40010c00 	.word	0x40010c00

080003bc <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80003c6:	4bb5      	ldr	r3, [pc, #724]	; (800069c <matrix_scan+0x2e0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80003cc:	2106      	movs	r1, #6
 80003ce:	201f      	movs	r0, #31
 80003d0:	f000 f98c 	bl	80006ec <matrix_is_on>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <matrix_scan+0x24>
        matrix_break(PAUSE);
 80003da:	20fe      	movs	r0, #254	; 0xfe
 80003dc:	f000 f9e8 	bl	80007b0 <matrix_break>
    }

	if (code == 0)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	f000 817c 	beq.w	80006e0 <matrix_scan+0x324>
		return;

	switch (state) {
 80003e8:	4bad      	ldr	r3, [pc, #692]	; (80006a0 <matrix_scan+0x2e4>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b0d      	cmp	r3, #13
 80003ee:	f200 8172 	bhi.w	80006d6 <matrix_scan+0x31a>
 80003f2:	a201      	add	r2, pc, #4	; (adr r2, 80003f8 <matrix_scan+0x3c>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	08000431 	.word	0x08000431
 80003fc:	0800052d 	.word	0x0800052d
 8000400:	080004b1 	.word	0x080004b1
 8000404:	0800057d 	.word	0x0800057d
 8000408:	080005e1 	.word	0x080005e1
 800040c:	080005f9 	.word	0x080005f9
 8000410:	08000611 	.word	0x08000611
 8000414:	08000629 	.word	0x08000629
 8000418:	08000641 	.word	0x08000641
 800041c:	08000659 	.word	0x08000659
 8000420:	08000671 	.word	0x08000671
 8000424:	0800068f 	.word	0x0800068f
 8000428:	080006ad 	.word	0x080006ad
 800042c:	080006c3 	.word	0x080006c3
		case INIT:
			switch (code) {
 8000430:	79fb      	ldrb	r3, [r7, #7]
 8000432:	2b84      	cmp	r3, #132	; 0x84
 8000434:	d01f      	beq.n	8000476 <matrix_scan+0xba>
 8000436:	2b84      	cmp	r3, #132	; 0x84
 8000438:	dc04      	bgt.n	8000444 <matrix_scan+0x88>
 800043a:	2b00      	cmp	r3, #0
 800043c:	d022      	beq.n	8000484 <matrix_scan+0xc8>
 800043e:	2b83      	cmp	r3, #131	; 0x83
 8000440:	d012      	beq.n	8000468 <matrix_scan+0xac>
 8000442:	e025      	b.n	8000490 <matrix_scan+0xd4>
 8000444:	2be1      	cmp	r3, #225	; 0xe1
 8000446:	d00b      	beq.n	8000460 <matrix_scan+0xa4>
 8000448:	2bf0      	cmp	r3, #240	; 0xf0
 800044a:	d005      	beq.n	8000458 <matrix_scan+0x9c>
 800044c:	2be0      	cmp	r3, #224	; 0xe0
 800044e:	d11f      	bne.n	8000490 <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 8000450:	4b93      	ldr	r3, [pc, #588]	; (80006a0 <matrix_scan+0x2e4>)
 8000452:	2202      	movs	r2, #2
 8000454:	701a      	strb	r2, [r3, #0]
					break;
 8000456:	e02a      	b.n	80004ae <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000458:	4b91      	ldr	r3, [pc, #580]	; (80006a0 <matrix_scan+0x2e4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
					break;
 800045e:	e026      	b.n	80004ae <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 8000460:	4b8f      	ldr	r3, [pc, #572]	; (80006a0 <matrix_scan+0x2e4>)
 8000462:	2204      	movs	r2, #4
 8000464:	701a      	strb	r2, [r3, #0]
					break;
 8000466:	e022      	b.n	80004ae <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000468:	2083      	movs	r0, #131	; 0x83
 800046a:	f000 f95b 	bl	8000724 <matrix_make>
					state = INIT;
 800046e:	4b8c      	ldr	r3, [pc, #560]	; (80006a0 <matrix_scan+0x2e4>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]
					break;
 8000474:	e01b      	b.n	80004ae <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000476:	20fc      	movs	r0, #252	; 0xfc
 8000478:	f000 f954 	bl	8000724 <matrix_make>
					state = INIT;
 800047c:	4b88      	ldr	r3, [pc, #544]	; (80006a0 <matrix_scan+0x2e4>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
					break;
 8000482:	e014      	b.n	80004ae <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000484:	f000 f9dc 	bl	8000840 <matrix_clear>
					state = INIT;
 8000488:	4b85      	ldr	r3, [pc, #532]	; (80006a0 <matrix_scan+0x2e4>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
					break;
 800048e:	e00e      	b.n	80004ae <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 8000490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db04      	blt.n	80004a2 <matrix_scan+0xe6>
						matrix_make(code);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	4618      	mov	r0, r3
 800049c:	f000 f942 	bl	8000724 <matrix_make>
 80004a0:	e001      	b.n	80004a6 <matrix_scan+0xea>
					} else {
						matrix_clear();
 80004a2:	f000 f9cd 	bl	8000840 <matrix_clear>
					}
					state = INIT;
 80004a6:	4b7e      	ldr	r3, [pc, #504]	; (80006a0 <matrix_scan+0x2e4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004ac:	e116      	b.n	80006dc <matrix_scan+0x320>
 80004ae:	e115      	b.n	80006dc <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b59      	cmp	r3, #89	; 0x59
 80004b4:	d00d      	beq.n	80004d2 <matrix_scan+0x116>
 80004b6:	2b59      	cmp	r3, #89	; 0x59
 80004b8:	dc04      	bgt.n	80004c4 <matrix_scan+0x108>
 80004ba:	2b03      	cmp	r3, #3
 80004bc:	d01c      	beq.n	80004f8 <matrix_scan+0x13c>
 80004be:	2b12      	cmp	r3, #18
 80004c0:	d007      	beq.n	80004d2 <matrix_scan+0x116>
 80004c2:	e020      	b.n	8000506 <matrix_scan+0x14a>
 80004c4:	2b83      	cmp	r3, #131	; 0x83
 80004c6:	d010      	beq.n	80004ea <matrix_scan+0x12e>
 80004c8:	2bf0      	cmp	r3, #240	; 0xf0
 80004ca:	d00a      	beq.n	80004e2 <matrix_scan+0x126>
 80004cc:	2b7e      	cmp	r3, #126	; 0x7e
 80004ce:	d004      	beq.n	80004da <matrix_scan+0x11e>
 80004d0:	e019      	b.n	8000506 <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80004d2:	4b73      	ldr	r3, [pc, #460]	; (80006a0 <matrix_scan+0x2e4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
					break;
 80004d8:	e027      	b.n	800052a <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80004da:	4b71      	ldr	r3, [pc, #452]	; (80006a0 <matrix_scan+0x2e4>)
 80004dc:	220b      	movs	r2, #11
 80004de:	701a      	strb	r2, [r3, #0]
					break;
 80004e0:	e023      	b.n	800052a <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 80004e2:	4b6f      	ldr	r3, [pc, #444]	; (80006a0 <matrix_scan+0x2e4>)
 80004e4:	2203      	movs	r2, #3
 80004e6:	701a      	strb	r2, [r3, #0]
					break;
 80004e8:	e01f      	b.n	800052a <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 80004ea:	2083      	movs	r0, #131	; 0x83
 80004ec:	f000 f91a 	bl	8000724 <matrix_make>
					state = INIT;
 80004f0:	4b6b      	ldr	r3, [pc, #428]	; (80006a0 <matrix_scan+0x2e4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
					break;
 80004f6:	e018      	b.n	800052a <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 80004f8:	2003      	movs	r0, #3
 80004fa:	f000 f913 	bl	8000724 <matrix_make>
					state = INIT;
 80004fe:	4b68      	ldr	r3, [pc, #416]	; (80006a0 <matrix_scan+0x2e4>)
 8000500:	2200      	movs	r2, #0
 8000502:	701a      	strb	r2, [r3, #0]
					break;
 8000504:	e011      	b.n	800052a <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 8000506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050a:	2b00      	cmp	r3, #0
 800050c:	db07      	blt.n	800051e <matrix_scan+0x162>
						matrix_make(code|0x80);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000514:	b2db      	uxtb	r3, r3
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f904 	bl	8000724 <matrix_make>
 800051c:	e001      	b.n	8000522 <matrix_scan+0x166>
					} else {
						matrix_clear();
 800051e:	f000 f98f 	bl	8000840 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000522:	4b5f      	ldr	r3, [pc, #380]	; (80006a0 <matrix_scan+0x2e4>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000528:	e0d8      	b.n	80006dc <matrix_scan+0x320>
 800052a:	e0d7      	b.n	80006dc <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	2b84      	cmp	r3, #132	; 0x84
 8000530:	d00a      	beq.n	8000548 <matrix_scan+0x18c>
 8000532:	2bf0      	cmp	r3, #240	; 0xf0
 8000534:	d00f      	beq.n	8000556 <matrix_scan+0x19a>
 8000536:	2b83      	cmp	r3, #131	; 0x83
 8000538:	d110      	bne.n	800055c <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 800053a:	2083      	movs	r0, #131	; 0x83
 800053c:	f000 f938 	bl	80007b0 <matrix_break>
					state = INIT;
 8000540:	4b57      	ldr	r3, [pc, #348]	; (80006a0 <matrix_scan+0x2e4>)
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
					break;
 8000546:	e018      	b.n	800057a <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000548:	20fc      	movs	r0, #252	; 0xfc
 800054a:	f000 f931 	bl	80007b0 <matrix_break>
					state = INIT;
 800054e:	4b54      	ldr	r3, [pc, #336]	; (80006a0 <matrix_scan+0x2e4>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]
					break;
 8000554:	e011      	b.n	800057a <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000556:	f000 f973 	bl	8000840 <matrix_clear>
					//clear_keyboard();
					break;
 800055a:	e00e      	b.n	800057a <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 800055c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	db04      	blt.n	800056e <matrix_scan+0x1b2>
					matrix_break(code);
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f922 	bl	80007b0 <matrix_break>
 800056c:	e001      	b.n	8000572 <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 800056e:	f000 f967 	bl	8000840 <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <matrix_scan+0x2e4>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000578:	e0b0      	b.n	80006dc <matrix_scan+0x320>
 800057a:	e0af      	b.n	80006dc <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	2b12      	cmp	r3, #18
 8000580:	d009      	beq.n	8000596 <matrix_scan+0x1da>
 8000582:	2b12      	cmp	r3, #18
 8000584:	dc02      	bgt.n	800058c <matrix_scan+0x1d0>
 8000586:	2b03      	cmp	r3, #3
 8000588:	d010      	beq.n	80005ac <matrix_scan+0x1f0>
 800058a:	e016      	b.n	80005ba <matrix_scan+0x1fe>
 800058c:	2b59      	cmp	r3, #89	; 0x59
 800058e:	d002      	beq.n	8000596 <matrix_scan+0x1da>
 8000590:	2b83      	cmp	r3, #131	; 0x83
 8000592:	d004      	beq.n	800059e <matrix_scan+0x1e2>
 8000594:	e011      	b.n	80005ba <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000596:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <matrix_scan+0x2e4>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
					break;
 800059c:	e01f      	b.n	80005de <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 800059e:	2083      	movs	r0, #131	; 0x83
 80005a0:	f000 f906 	bl	80007b0 <matrix_break>
					state = INIT;
 80005a4:	4b3e      	ldr	r3, [pc, #248]	; (80006a0 <matrix_scan+0x2e4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
					break;
 80005aa:	e018      	b.n	80005de <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f8ff 	bl	80007b0 <matrix_break>
					state = INIT;
 80005b2:	4b3b      	ldr	r3, [pc, #236]	; (80006a0 <matrix_scan+0x2e4>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
					break;
 80005b8:	e011      	b.n	80005de <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db07      	blt.n	80005d2 <matrix_scan+0x216>
						matrix_break(code|0x80);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f8f0 	bl	80007b0 <matrix_break>
 80005d0:	e001      	b.n	80005d6 <matrix_scan+0x21a>
					} else {
						matrix_clear();
 80005d2:	f000 f935 	bl	8000840 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <matrix_scan+0x2e4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005dc:	e07e      	b.n	80006dc <matrix_scan+0x320>
 80005de:	e07d      	b.n	80006dc <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b14      	cmp	r3, #20
 80005e4:	d104      	bne.n	80005f0 <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <matrix_scan+0x2e4>)
 80005e8:	2205      	movs	r2, #5
 80005ea:	701a      	strb	r2, [r3, #0]
					break;
 80005ec:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80005ee:	e075      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <matrix_scan+0x2e4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
			break;
 80005f6:	e071      	b.n	80006dc <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b77      	cmp	r3, #119	; 0x77
 80005fc:	d104      	bne.n	8000608 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 80005fe:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <matrix_scan+0x2e4>)
 8000600:	2206      	movs	r2, #6
 8000602:	701a      	strb	r2, [r3, #0]
					break;
 8000604:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000606:	e069      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <matrix_scan+0x2e4>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
			break;
 800060e:	e065      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2be1      	cmp	r3, #225	; 0xe1
 8000614:	d104      	bne.n	8000620 <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 8000616:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <matrix_scan+0x2e4>)
 8000618:	2207      	movs	r2, #7
 800061a:	701a      	strb	r2, [r3, #0]
					break;
 800061c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800061e:	e05d      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <matrix_scan+0x2e4>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
			break;
 8000626:	e059      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2bf0      	cmp	r3, #240	; 0xf0
 800062c:	d104      	bne.n	8000638 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <matrix_scan+0x2e4>)
 8000630:	2208      	movs	r2, #8
 8000632:	701a      	strb	r2, [r3, #0]
					break;
 8000634:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000636:	e051      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <matrix_scan+0x2e4>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e04d      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b14      	cmp	r3, #20
 8000644:	d104      	bne.n	8000650 <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <matrix_scan+0x2e4>)
 8000648:	2209      	movs	r2, #9
 800064a:	701a      	strb	r2, [r3, #0]
					break;
 800064c:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800064e:	e045      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <matrix_scan+0x2e4>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
			break;
 8000656:	e041      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2bf0      	cmp	r3, #240	; 0xf0
 800065c:	d104      	bne.n	8000668 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <matrix_scan+0x2e4>)
 8000660:	220a      	movs	r2, #10
 8000662:	701a      	strb	r2, [r3, #0]
					break;
 8000664:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000666:	e039      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <matrix_scan+0x2e4>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			break;
 800066e:	e035      	b.n	80006dc <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	2b77      	cmp	r3, #119	; 0x77
 8000674:	d107      	bne.n	8000686 <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 8000676:	20fe      	movs	r0, #254	; 0xfe
 8000678:	f000 f854 	bl	8000724 <matrix_make>
					state = INIT;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <matrix_scan+0x2e4>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
					break;
 8000682:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000684:	e02a      	b.n	80006dc <matrix_scan+0x320>
					state = INIT;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <matrix_scan+0x2e4>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			break;
 800068c:	e026      	b.n	80006dc <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	2be0      	cmp	r3, #224	; 0xe0
 8000692:	d107      	bne.n	80006a4 <matrix_scan+0x2e8>
				state = E0_7E_E0;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <matrix_scan+0x2e4>)
 8000696:	220c      	movs	r2, #12
 8000698:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 800069a:	e01f      	b.n	80006dc <matrix_scan+0x320>
 800069c:	200001e4 	.word	0x200001e4
 80006a0:	200001e5 	.word	0x200001e5
				state = INIT;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <matrix_scan+0x32c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e017      	b.n	80006dc <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2bf0      	cmp	r3, #240	; 0xf0
 80006b0:	d103      	bne.n	80006ba <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <matrix_scan+0x32c>)
 80006b4:	220d      	movs	r2, #13
 80006b6:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80006b8:	e010      	b.n	80006dc <matrix_scan+0x320>
				state = INIT;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <matrix_scan+0x32c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
			break;
 80006c0:	e00c      	b.n	80006dc <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b7e      	cmp	r3, #126	; 0x7e
 80006c6:	d102      	bne.n	80006ce <matrix_scan+0x312>
				matrix_make(PAUSE);
 80006c8:	20fe      	movs	r0, #254	; 0xfe
 80006ca:	f000 f82b 	bl	8000724 <matrix_make>
			state = INIT;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <matrix_scan+0x32c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
			break;
 80006d4:	e002      	b.n	80006dc <matrix_scan+0x320>
		default:
			state = INIT;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <matrix_scan+0x32c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80006dc:	bf00      	nop
 80006de:	e000      	b.n	80006e2 <matrix_scan+0x326>
		return;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200001e5 	.word	0x200001e5

080006ec <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <matrix_is_on+0x34>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	b25a      	sxtb	r2, r3
 8000704:	79bb      	ldrb	r3, [r7, #6]
 8000706:	2101      	movs	r1, #1
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4013      	ands	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2db      	uxtb	r3, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	200001c4 	.word	0x200001c4

08000724 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	08db      	lsrs	r3, r3, #3
 8000732:	b2da      	uxtb	r2, r3
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	4610      	mov	r0, r2
 8000740:	f7ff ffd4 	bl	80006ec <matrix_is_on>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d12a      	bne.n	80007a0 <matrix_make+0x7c>
	    matrix[ROW(code)] |= 1<<COL(code);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <matrix_make+0x84>)
 8000754:	5c9b      	ldrb	r3, [r3, r2]
 8000756:	b25a      	sxtb	r2, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	b25b      	sxtb	r3, r3
 8000766:	4313      	orrs	r3, r2
 8000768:	b259      	sxtb	r1, r3
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	08db      	lsrs	r3, r3, #3
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	b2c9      	uxtb	r1, r1
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <matrix_make+0x84>)
 8000776:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <matrix_make+0x88>)
 800077a:	2201      	movs	r2, #1
 800077c:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	08db      	lsrs	r3, r3, #3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f000 f94e 	bl	8000a30 <keymap_key_to_keycode>
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
		register_code(code);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f95e 	bl	8000a5c <register_code>
    }

}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200001c4 	.word	0x200001c4
 80007ac:	200001e4 	.word	0x200001e4

080007b0 <matrix_break>:

void matrix_break(uint8_t code)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	08db      	lsrs	r3, r3, #3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4619      	mov	r1, r3
 80007ca:	4610      	mov	r0, r2
 80007cc:	f7ff ff8e 	bl	80006ec <matrix_is_on>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d02c      	beq.n	8000830 <matrix_break+0x80>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	08db      	lsrs	r3, r3, #3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <matrix_break+0x88>)
 80007e0:	5c9b      	ldrb	r3, [r3, r2]
 80007e2:	b25a      	sxtb	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	43db      	mvns	r3, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	4013      	ands	r3, r2
 80007f8:	b259      	sxtb	r1, r3
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	461a      	mov	r2, r3
 8000802:	b2c9      	uxtb	r1, r1
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <matrix_break+0x88>)
 8000806:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <matrix_break+0x8c>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
		code = keymap_key_to_keycode(ROW(code),COL(code));
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	08db      	lsrs	r3, r3, #3
 8000812:	b2da      	uxtb	r2, r3
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	4610      	mov	r0, r2
 8000820:	f000 f906 	bl	8000a30 <keymap_key_to_keycode>
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
		unregister_code(code);
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f9de 	bl	8000bec <unregister_code>
    }
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001c4 	.word	0x200001c4
 800083c:	200001e4 	.word	0x200001e4

08000840 <matrix_clear>:

void matrix_clear(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	e006      	b.n	800085a <matrix_clear+0x1a>
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a07      	ldr	r2, [pc, #28]	; (800086c <matrix_clear+0x2c>)
 8000850:	2100      	movs	r1, #0
 8000852:	54d1      	strb	r1, [r2, r3]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3301      	adds	r3, #1
 8000858:	71fb      	strb	r3, [r7, #7]
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b1f      	cmp	r3, #31
 800085e:	d9f5      	bls.n	800084c <matrix_clear+0xc>
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200001c4 	.word	0x200001c4

08000870 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

static void send_system(uint16_t data)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <send_system+0x44>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	88fa      	ldrh	r2, [r7, #6]
 8000880:	429a      	cmp	r2, r3
 8000882:	d012      	beq.n	80008aa <send_system+0x3a>
	last_data = data;
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <send_system+0x44>)
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 800088a:	2302      	movs	r3, #2
 800088c:	733b      	strb	r3, [r7, #12]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	ready_to_send = 0;
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <send_system+0x48>)
 8000896:	2200      	movs	r2, #0
 8000898:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2203      	movs	r2, #3
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <send_system+0x4c>)
 80008a4:	f005 fef4 	bl	8006690 <USBD_HID_SendReport>
 80008a8:	e000      	b.n	80008ac <send_system+0x3c>
	if (data == last_data) return;
 80008aa:	bf00      	nop
//	if (usbInterruptIsReady3()) {
//		usbSetInterrupt3((void *)&report, sizeof(report));
	// TODO
//	}
}
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001ea 	.word	0x200001ea
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000338 	.word	0x20000338

080008c0 <send_consumer>:

static void send_consumer(uint16_t data)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <send_consumer+0x44>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	88fa      	ldrh	r2, [r7, #6]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d012      	beq.n	80008fa <send_consumer+0x3a>
	last_data = data;
 80008d4:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <send_consumer+0x44>)
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 80008da:	2303      	movs	r3, #3
 80008dc:	733b      	strb	r3, [r7, #12]
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	ready_to_send = 0;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <send_consumer+0x48>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2203      	movs	r2, #3
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <send_consumer+0x4c>)
 80008f4:	f005 fecc 	bl	8006690 <USBD_HID_SendReport>
 80008f8:	e000      	b.n	80008fc <send_consumer+0x3c>
	if (data == last_data) return;
 80008fa:	bf00      	nop
//	if (usbInterruptIsReady3()) {
//		usbSetInterrupt3((void *)&report, sizeof(report));
	// TODO
//	}
}
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200001ec 	.word	0x200001ec
 8000908:	20000000 	.word	0x20000000
 800090c:	20000338 	.word	0x20000338

08000910 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <add_mods+0x24>)
 800091c:	781a      	ldrb	r2, [r3, #0]
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4313      	orrs	r3, r2
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <add_mods+0x24>)
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200001e6 	.word	0x200001e6

08000938 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	43db      	mvns	r3, r3
 8000948:	b25a      	sxtb	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <del_mods+0x2c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b25b      	sxtb	r3, r3
 8000950:	4013      	ands	r3, r2
 8000952:	b25b      	sxtb	r3, r3
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <del_mods+0x2c>)
 8000958:	701a      	strb	r2, [r3, #0]
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200001e6 	.word	0x200001e6

08000968 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000976:	23ff      	movs	r3, #255	; 0xff
 8000978:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 800097a:	e01b      	b.n	80009b4 <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 800097c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000980:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <add_key_byte+0x80>)
 8000982:	4413      	add	r3, r2
 8000984:	78db      	ldrb	r3, [r3, #3]
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	429a      	cmp	r2, r3
 800098a:	d018      	beq.n	80009be <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 800098c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d108      	bne.n	80009a8 <add_key_byte+0x40>
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <add_key_byte+0x80>)
 800099c:	4413      	add	r3, r2
 800099e:	78db      	ldrb	r3, [r3, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d101      	bne.n	80009a8 <add_key_byte+0x40>
            empty = i;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 80009a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b8:	2b05      	cmp	r3, #5
 80009ba:	dddf      	ble.n	800097c <add_key_byte+0x14>
 80009bc:	e000      	b.n	80009c0 <add_key_byte+0x58>
            break;
 80009be:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 80009c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009c4:	2b06      	cmp	r3, #6
 80009c6:	d10a      	bne.n	80009de <add_key_byte+0x76>
        if (empty != -1) {
 80009c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 80009d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <add_key_byte+0x80>)
 80009d8:	4413      	add	r3, r2
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	70da      	strb	r2, [r3, #3]
        }
    }
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	2000020c 	.word	0x2000020c

080009ec <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e00e      	b.n	8000a1a <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <del_key_byte+0x40>)
 8000a00:	4413      	add	r3, r2
 8000a02:	78db      	ldrb	r3, [r3, #3]
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d104      	bne.n	8000a14 <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <del_key_byte+0x40>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	2200      	movs	r2, #0
 8000a12:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	3301      	adds	r3, #1
 8000a18:	73fb      	strb	r3, [r7, #15]
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	d9ed      	bls.n	80009fc <del_key_byte+0x10>
        }
    }
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000020c 	.word	0x2000020c

08000a30 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	460a      	mov	r2, r1
 8000a3a:	71fb      	strb	r3, [r7, #7]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	4904      	ldr	r1, [pc, #16]	; (8000a58 <keymap_key_to_keycode+0x28>)
 8000a46:	00d2      	lsls	r2, r2, #3
 8000a48:	440a      	add	r2, r1
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	08008084 	.word	0x08008084

08000a5c <register_code>:


void register_code(uint8_t code)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f000 80bb 	beq.w	8000be4 <register_code+0x188>
        return;
    }

    if (code == KC_LOGOFF)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2bf0      	cmp	r3, #240	; 0xf0
 8000a72:	d108      	bne.n	8000a86 <register_code+0x2a>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 8000a74:	2008      	movs	r0, #8
 8000a76:	f7ff ff4b 	bl	8000910 <add_mods>
    	add_key_byte(KC_L);
 8000a7a:	200f      	movs	r0, #15
 8000a7c:	f7ff ff74 	bl	8000968 <add_key_byte>
    	send_keyboard_report();
 8000a80:	f000 f986 	bl	8000d90 <send_keyboard_report>
 8000a84:	e0af      	b.n	8000be6 <register_code+0x18a>
    }

    else if IS_KEY(code) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d909      	bls.n	8000aa0 <register_code+0x44>
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2ba4      	cmp	r3, #164	; 0xa4
 8000a90:	d806      	bhi.n	8000aa0 <register_code+0x44>
	    add_key_byte(code);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ff67 	bl	8000968 <add_key_byte>
	    send_keyboard_report();
 8000a9a:	f000 f979 	bl	8000d90 <send_keyboard_report>
 8000a9e:	e0a2      	b.n	8000be6 <register_code+0x18a>
    }
    else if IS_MOD(code) {
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2bdf      	cmp	r3, #223	; 0xdf
 8000aa4:	d90f      	bls.n	8000ac6 <register_code+0x6a>
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2be7      	cmp	r3, #231	; 0xe7
 8000aaa:	d80c      	bhi.n	8000ac6 <register_code+0x6a>
        add_mods(MOD_BIT(code));
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ff28 	bl	8000910 <add_mods>
        send_keyboard_report();
 8000ac0:	f000 f966 	bl	8000d90 <send_keyboard_report>
 8000ac4:	e08f      	b.n	8000be6 <register_code+0x18a>
    }
    else if IS_SYSTEM(code) {
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2ba4      	cmp	r3, #164	; 0xa4
 8000aca:	d916      	bls.n	8000afa <register_code+0x9e>
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2ba7      	cmp	r3, #167	; 0xa7
 8000ad0:	d813      	bhi.n	8000afa <register_code+0x9e>
		send_system(KEYCODE2SYSTEM(code));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2ba5      	cmp	r3, #165	; 0xa5
 8000ad6:	d00b      	beq.n	8000af0 <register_code+0x94>
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2ba6      	cmp	r3, #166	; 0xa6
 8000adc:	d006      	beq.n	8000aec <register_code+0x90>
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2ba7      	cmp	r3, #167	; 0xa7
 8000ae2:	d101      	bne.n	8000ae8 <register_code+0x8c>
 8000ae4:	2383      	movs	r3, #131	; 0x83
 8000ae6:	e004      	b.n	8000af2 <register_code+0x96>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e002      	b.n	8000af2 <register_code+0x96>
 8000aec:	2382      	movs	r3, #130	; 0x82
 8000aee:	e000      	b.n	8000af2 <register_code+0x96>
 8000af0:	2381      	movs	r3, #129	; 0x81
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff febc 	bl	8000870 <send_system>
 8000af8:	e075      	b.n	8000be6 <register_code+0x18a>
	}
    else if IS_CONSUMER(code) {
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2ba7      	cmp	r3, #167	; 0xa7
 8000afe:	d972      	bls.n	8000be6 <register_code+0x18a>
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2bba      	cmp	r3, #186	; 0xba
 8000b04:	d86f      	bhi.n	8000be6 <register_code+0x18a>
        send_consumer(KEYCODE2CONSUMER(code)); //TODO: consumer keys to change volume etc.
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2ba8      	cmp	r3, #168	; 0xa8
 8000b0a:	d066      	beq.n	8000bda <register_code+0x17e>
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2ba9      	cmp	r3, #169	; 0xa9
 8000b10:	d061      	beq.n	8000bd6 <register_code+0x17a>
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2baa      	cmp	r3, #170	; 0xaa
 8000b16:	d05c      	beq.n	8000bd2 <register_code+0x176>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2bab      	cmp	r3, #171	; 0xab
 8000b1c:	d057      	beq.n	8000bce <register_code+0x172>
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2bac      	cmp	r3, #172	; 0xac
 8000b22:	d052      	beq.n	8000bca <register_code+0x16e>
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2bad      	cmp	r3, #173	; 0xad
 8000b28:	d04d      	beq.n	8000bc6 <register_code+0x16a>
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2bb0      	cmp	r3, #176	; 0xb0
 8000b2e:	d048      	beq.n	8000bc2 <register_code+0x166>
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2bae      	cmp	r3, #174	; 0xae
 8000b34:	d043      	beq.n	8000bbe <register_code+0x162>
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2baf      	cmp	r3, #175	; 0xaf
 8000b3a:	d03d      	beq.n	8000bb8 <register_code+0x15c>
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2bb1      	cmp	r3, #177	; 0xb1
 8000b40:	d037      	beq.n	8000bb2 <register_code+0x156>
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2bb2      	cmp	r3, #178	; 0xb2
 8000b46:	d031      	beq.n	8000bac <register_code+0x150>
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2bb3      	cmp	r3, #179	; 0xb3
 8000b4c:	d02b      	beq.n	8000ba6 <register_code+0x14a>
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2bb4      	cmp	r3, #180	; 0xb4
 8000b52:	d025      	beq.n	8000ba0 <register_code+0x144>
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2bb5      	cmp	r3, #181	; 0xb5
 8000b58:	d01f      	beq.n	8000b9a <register_code+0x13e>
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2bb6      	cmp	r3, #182	; 0xb6
 8000b5e:	d019      	beq.n	8000b94 <register_code+0x138>
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2bb7      	cmp	r3, #183	; 0xb7
 8000b64:	d013      	beq.n	8000b8e <register_code+0x132>
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2bb8      	cmp	r3, #184	; 0xb8
 8000b6a:	d00d      	beq.n	8000b88 <register_code+0x12c>
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2bb9      	cmp	r3, #185	; 0xb9
 8000b70:	d007      	beq.n	8000b82 <register_code+0x126>
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2bba      	cmp	r3, #186	; 0xba
 8000b76:	d102      	bne.n	8000b7e <register_code+0x122>
 8000b78:	f240 232a 	movw	r3, #554	; 0x22a
 8000b7c:	e02e      	b.n	8000bdc <register_code+0x180>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e02c      	b.n	8000bdc <register_code+0x180>
 8000b82:	f240 2327 	movw	r3, #551	; 0x227
 8000b86:	e029      	b.n	8000bdc <register_code+0x180>
 8000b88:	f240 2326 	movw	r3, #550	; 0x226
 8000b8c:	e026      	b.n	8000bdc <register_code+0x180>
 8000b8e:	f240 2325 	movw	r3, #549	; 0x225
 8000b92:	e023      	b.n	8000bdc <register_code+0x180>
 8000b94:	f44f 7309 	mov.w	r3, #548	; 0x224
 8000b98:	e020      	b.n	8000bdc <register_code+0x180>
 8000b9a:	f240 2323 	movw	r3, #547	; 0x223
 8000b9e:	e01d      	b.n	8000bdc <register_code+0x180>
 8000ba0:	f240 2321 	movw	r3, #545	; 0x221
 8000ba4:	e01a      	b.n	8000bdc <register_code+0x180>
 8000ba6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000baa:	e017      	b.n	8000bdc <register_code+0x180>
 8000bac:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8000bb0:	e014      	b.n	8000bdc <register_code+0x180>
 8000bb2:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8000bb6:	e011      	b.n	8000bdc <register_code+0x180>
 8000bb8:	f240 1383 	movw	r3, #387	; 0x183
 8000bbc:	e00e      	b.n	8000bdc <register_code+0x180>
 8000bbe:	23cd      	movs	r3, #205	; 0xcd
 8000bc0:	e00c      	b.n	8000bdc <register_code+0x180>
 8000bc2:	23cc      	movs	r3, #204	; 0xcc
 8000bc4:	e00a      	b.n	8000bdc <register_code+0x180>
 8000bc6:	23b7      	movs	r3, #183	; 0xb7
 8000bc8:	e008      	b.n	8000bdc <register_code+0x180>
 8000bca:	23b6      	movs	r3, #182	; 0xb6
 8000bcc:	e006      	b.n	8000bdc <register_code+0x180>
 8000bce:	23b5      	movs	r3, #181	; 0xb5
 8000bd0:	e004      	b.n	8000bdc <register_code+0x180>
 8000bd2:	23ea      	movs	r3, #234	; 0xea
 8000bd4:	e002      	b.n	8000bdc <register_code+0x180>
 8000bd6:	23e9      	movs	r3, #233	; 0xe9
 8000bd8:	e000      	b.n	8000bdc <register_code+0x180>
 8000bda:	23e2      	movs	r3, #226	; 0xe2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fe6f 	bl	80008c0 <send_consumer>
 8000be2:	e000      	b.n	8000be6 <register_code+0x18a>
        return;
 8000be4:	bf00      	nop
    }
}
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <unregister_code>:

void unregister_code(uint8_t code)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d03f      	beq.n	8000c7c <unregister_code+0x90>
        return;
    }

    if (code == KC_LOGOFF)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2bf0      	cmp	r3, #240	; 0xf0
 8000c00:	d108      	bne.n	8000c14 <unregister_code+0x28>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 8000c02:	2008      	movs	r0, #8
 8000c04:	f7ff fe98 	bl	8000938 <del_mods>
    	del_key_byte(KC_L);
 8000c08:	200f      	movs	r0, #15
 8000c0a:	f7ff feef 	bl	80009ec <del_key_byte>
    	send_keyboard_report();
 8000c0e:	f000 f8bf 	bl	8000d90 <send_keyboard_report>
 8000c12:	e034      	b.n	8000c7e <unregister_code+0x92>
    }
    else if IS_KEY(code) {
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d909      	bls.n	8000c2e <unregister_code+0x42>
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2ba4      	cmp	r3, #164	; 0xa4
 8000c1e:	d806      	bhi.n	8000c2e <unregister_code+0x42>
        del_key_byte(code);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fee2 	bl	80009ec <del_key_byte>
        send_keyboard_report();
 8000c28:	f000 f8b2 	bl	8000d90 <send_keyboard_report>
 8000c2c:	e027      	b.n	8000c7e <unregister_code+0x92>
    }
    else if IS_MOD(code) {
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2bdf      	cmp	r3, #223	; 0xdf
 8000c32:	d90f      	bls.n	8000c54 <unregister_code+0x68>
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2be7      	cmp	r3, #231	; 0xe7
 8000c38:	d80c      	bhi.n	8000c54 <unregister_code+0x68>
        del_mods(MOD_BIT(code));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	2201      	movs	r2, #1
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe75 	bl	8000938 <del_mods>
        send_keyboard_report();
 8000c4e:	f000 f89f 	bl	8000d90 <send_keyboard_report>
 8000c52:	e014      	b.n	8000c7e <unregister_code+0x92>
    }
    else if IS_SYSTEM(code) {
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2ba4      	cmp	r3, #164	; 0xa4
 8000c58:	d906      	bls.n	8000c68 <unregister_code+0x7c>
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2ba7      	cmp	r3, #167	; 0xa7
 8000c5e:	d803      	bhi.n	8000c68 <unregister_code+0x7c>
	    send_system(0);
 8000c60:	2000      	movs	r0, #0
 8000c62:	f7ff fe05 	bl	8000870 <send_system>
 8000c66:	e00a      	b.n	8000c7e <unregister_code+0x92>
    }
    else if IS_CONSUMER(code) {
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2ba7      	cmp	r3, #167	; 0xa7
 8000c6c:	d907      	bls.n	8000c7e <unregister_code+0x92>
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2bba      	cmp	r3, #186	; 0xba
 8000c72:	d804      	bhi.n	8000c7e <unregister_code+0x92>
    	send_consumer(0);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fe23 	bl	80008c0 <send_consumer>
 8000c7a:	e000      	b.n	8000c7e <unregister_code+0x92>
        return;
 8000c7c:	bf00      	nop
	}
}
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <process_keyboard_USB+0x78>)
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <process_keyboard_USB+0x7c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d031      	beq.n	8000cf8 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <process_keyboard_USB+0x80>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d020      	beq.n	8000cde <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <process_keyboard_USB+0x80>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <process_keyboard_USB+0x84>)
 8000ca4:	22fa      	movs	r2, #250	; 0xfa
 8000ca6:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <process_keyboard_USB+0x7c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4613      	mov	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <process_keyboard_USB+0x88>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2209      	movs	r2, #9
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <process_keyboard_USB+0x8c>)
 8000cbe:	f005 fce7 	bl	8006690 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <process_keyboard_USB+0x7c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	425a      	negs	r2, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	f002 020f 	and.w	r2, r2, #15
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <process_keyboard_USB+0x7c>)
 8000cda:	701a      	strb	r2, [r3, #0]
		}
		else if (--cnt == 0) // timeout, just push this data
			ready_to_send = 1;
	}
}
 8000cdc:	e00c      	b.n	8000cf8 <process_keyboard_USB+0x74>
		else if (--cnt == 0) // timeout, just push this data
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <process_keyboard_USB+0x84>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <process_keyboard_USB+0x84>)
 8000ce8:	801a      	strh	r2, [r3, #0]
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <process_keyboard_USB+0x84>)
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <process_keyboard_USB+0x80>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200001e7 	.word	0x200001e7
 8000d00:	200001e8 	.word	0x200001e8
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000002 	.word	0x20000002
 8000d0c:	20000218 	.word	0x20000218
 8000d10:	20000338 	.word	0x20000338

08000d14 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <USB_HID_buffer_sent_Callback+0x14>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000000 	.word	0x20000000

08000d2c <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <kbuf_push+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	425a      	negs	r2, r3
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	f002 020f 	and.w	r2, r2, #15
 8000d44:	bf58      	it	pl
 8000d46:	4253      	negpl	r3, r2
 8000d48:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <kbuf_push+0x5c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d011      	beq.n	8000d78 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <kbuf_push+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4a0c      	ldr	r2, [pc, #48]	; (8000d8c <kbuf_push+0x60>)
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	4413      	add	r3, r2
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6810      	ldr	r0, [r2, #0]
 8000d68:	6851      	ldr	r1, [r2, #4]
 8000d6a:	6018      	str	r0, [r3, #0]
 8000d6c:	6059      	str	r1, [r3, #4]
 8000d6e:	7a12      	ldrb	r2, [r2, #8]
 8000d70:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <kbuf_push+0x58>)
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	7013      	strb	r3, [r2, #0]
    }
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200001e7 	.word	0x200001e7
 8000d88:	200001e8 	.word	0x200001e8
 8000d8c:	20000218 	.word	0x20000218

08000d90 <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <send_keyboard_report+0x1c>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <send_keyboard_report+0x20>)
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	4b03      	ldr	r3, [pc, #12]	; (8000dac <send_keyboard_report+0x1c>)
 8000da0:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 8000da2:	4802      	ldr	r0, [pc, #8]	; (8000dac <send_keyboard_report+0x1c>)
 8000da4:	f7ff ffc2 	bl	8000d2c <kbuf_push>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000020c 	.word	0x2000020c
 8000db0:	200001e6 	.word	0x200001e6

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f000 fc5e 	bl	8001678 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f82a 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f7ff f9c4 	bl	800014c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000dc4:	f006 fd46 	bl	8007854 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000dc8:	f000 fbc2 	bl	8001550 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000dcc:	480e      	ldr	r0, [pc, #56]	; (8000e08 <main+0x54>)
 8000dce:	f002 ffe3 	bl	8003d98 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 8000dd2:	20fa      	movs	r0, #250	; 0xfa
 8000dd4:	f000 fb7c 	bl	80014d0 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <main+0x58>)
 8000de0:	f000 ff4d 	bl	8001c7e <HAL_GPIO_WritePin>
  reset_us_counter();
 8000de4:	f000 fb92 	bl	800150c <reset_us_counter>
  init_PS2();
 8000de8:	f000 f974 	bl	80010d4 <init_PS2>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <main+0x5c>)
 8000df4:	f000 ff43 	bl	8001c7e <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000df8:	f000 fa5e 	bl	80012b8 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 8000dfc:	f7ff ff42 	bl	8000c84 <process_keyboard_USB>
	  _delay_ms(1);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f000 fb65 	bl	80014d0 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8000e06:	e7f7      	b.n	8000df8 <main+0x44>
 8000e08:	200002ec 	.word	0x200002ec
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40011000 	.word	0x40011000

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	; 0x50
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f007 f8ee 	bl	8008004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e52:	2301      	movs	r3, #1
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 faa4 	bl	80033b8 <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e76:	f000 f828 	bl	8000eca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fd0e 	bl	80038b8 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ea2:	f000 f812 	bl	8000eca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ea6:	2310      	movs	r3, #16
 8000ea8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eae:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 fe6a 	bl	8003b8c <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ebe:	f000 f804 	bl	8000eca <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	; 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <Error_Handler+0x6>
	...

08000ed4 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ee4:	f040 80e6 	bne.w	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8000ee8:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d060      	beq.n	8000fb2 <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 8000ef0:	4b72      	ldr	r3, [pc, #456]	; (80010bc <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d109      	bne.n	8000f0c <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8000ef8:	4b70      	ldr	r3, [pc, #448]	; (80010bc <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000efe:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000f04:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
				return;
 8000f0a:	e0d3      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8000f0c:	4b6c      	ldr	r3, [pc, #432]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f12:	2b07      	cmp	r3, #7
 8000f14:	dc1b      	bgt.n	8000f4e <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8000f16:	4b6c      	ldr	r3, [pc, #432]	; (80010c8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b68      	ldr	r3, [pc, #416]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f22:	fa42 f303 	asr.w	r3, r2, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00c      	beq.n	8000f48 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8000f2e:	4b65      	ldr	r3, [pc, #404]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f40:	701a      	strb	r2, [r3, #0]
					data_release();
 8000f42:	f7ff fa01 	bl	8000348 <data_release>
 8000f46:	e02a      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8000f48:	f7ff f9b6 	bl	80002b8 <data_low>
 8000f4c:	e027      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8000f4e:	4b5c      	ldr	r3, [pc, #368]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f50:	f993 3000 	ldrsb.w	r3, [r3]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d109      	bne.n	8000f6c <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8000f58:	4b5a      	ldr	r3, [pc, #360]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8000f60:	f7ff f9f2 	bl	8000348 <data_release>
 8000f64:	e01b      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8000f66:	f7ff f9a7 	bl	80002b8 <data_low>
 8000f6a:	e018      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f72:	2b09      	cmp	r3, #9
 8000f74:	d102      	bne.n	8000f7c <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8000f76:	f7ff f9e7 	bl	8000348 <data_release>
 8000f7a:	e010      	b.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8000f7c:	4b50      	ldr	r3, [pc, #320]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d10b      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8000f86:	f7ff f9df 	bl	8000348 <data_release>
				sendMode = 0;
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
				return;
 8000f9c:	e08a      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8000f9e:	4b48      	ldr	r3, [pc, #288]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000fa0:	f993 3000 	ldrsb.w	r3, [r3]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b25a      	sxtb	r2, r3
 8000fac:	4b44      	ldr	r3, [pc, #272]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000fae:	701a      	strb	r2, [r3, #0]
			return;
 8000fb0:	e080      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8000fb2:	20c8      	movs	r0, #200	; 0xc8
 8000fb4:	f000 fab6 	bl	8001524 <check_us_counter>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8000fc4:	f000 faa2 	bl	800150c <reset_us_counter>
			if (bitNr == 0)
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000fca:	f993 3000 	ldrsb.w	r3, [r3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10e      	bne.n	8000ff0 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8000fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd6:	483d      	ldr	r0, [pc, #244]	; (80010cc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000fd8:	f000 fe3a 	bl	8001c50 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d167      	bne.n	80010b2 <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e056      	b.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 8000ff0:	4b33      	ldr	r3, [pc, #204]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	dc1f      	bgt.n	800103a <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8000ffa:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	085b      	lsrs	r3, r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b33      	ldr	r3, [pc, #204]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001004:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	4830      	ldr	r0, [pc, #192]	; (80010cc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800100c:	f000 fe20 	bl	8001c50 <HAL_GPIO_ReadPin>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d043      	beq.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8001016:	4b2e      	ldr	r3, [pc, #184]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001022:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf0c      	ite	eq
 800102c:	2301      	moveq	r3, #1
 800102e:	2300      	movne	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	e031      	b.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800103c:	f993 3000 	ldrsb.w	r3, [r3]
 8001040:	2b09      	cmp	r3, #9
 8001042:	d112      	bne.n	800106a <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800104a:	f000 fe01 	bl	8001c50 <HAL_GPIO_ReadPin>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d024      	beq.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf0c      	ite	eq
 800105c:	2301      	moveq	r3, #1
 800105e:	2300      	movne	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	461a      	mov	r2, r3
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e019      	b.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800106c:	f993 3000 	ldrsb.w	r3, [r3]
 8001070:	2b0a      	cmp	r3, #10
 8001072:	d114      	bne.n	800109e <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8001074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001078:	4814      	ldr	r0, [pc, #80]	; (80010cc <HAL_GPIO_EXTI_Callback+0x1f8>)
 800107a:	f000 fde9 	bl	8001c50 <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_GPIO_EXTI_Callback+0x1c2>
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f943 	bl	800131c <buf_push>
				bitNr = 0;
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
				return;
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010a0:	f993 3000 	ldrsb.w	r3, [r3]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b25a      	sxtb	r2, r3
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 80010b2:	bf00      	nop
	}
}
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200001ee 	.word	0x200001ee
 80010c0:	200001f0 	.word	0x200001f0
 80010c4:	200001f4 	.word	0x200001f4
 80010c8:	200001ef 	.word	0x200001ef
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	200001f5 	.word	0x200001f5

080010d4 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 80010da:	20ff      	movs	r0, #255	; 0xff
 80010dc:	f000 f820 	bl	8001120 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 80010e0:	f000 f8cc 	bl	800127c <wait_response_PS2>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2bfa      	cmp	r3, #250	; 0xfa
 80010e8:	d004      	beq.n	80010f4 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 80010ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ee:	f000 f9ef 	bl	80014d0 <_delay_ms>
		send_PS2(PS2_RESET);
 80010f2:	e7f2      	b.n	80010da <init_PS2+0x6>
			break;
 80010f4:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	71fb      	strb	r3, [r7, #7]
 80010fa:	e007      	b.n	800110c <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 80010fc:	f000 f8be 	bl	800127c <wait_response_PS2>
 8001100:	4603      	mov	r3, r0
 8001102:	2baa      	cmp	r3, #170	; 0xaa
 8001104:	d006      	beq.n	8001114 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	3b01      	subs	r3, #1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f4      	bne.n	80010fc <init_PS2+0x28>
			break;
	}
}
 8001112:	e000      	b.n	8001116 <init_PS2+0x42>
			break;
 8001114:	bf00      	nop
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <send_PS2+0x3c>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
	clock_low();
 8001130:	f7ff f8e6 	bl	8000300 <clock_low>
	bitNr = 0;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <send_PS2+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	outputData = data;
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <send_PS2+0x44>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 f9d0 	bl	80014e6 <_delay_us>

	data_low();
 8001146:	f7ff f8b7 	bl	80002b8 <data_low>
	_delay_us(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f000 f9cb 	bl	80014e6 <_delay_us>
	clock_release();
 8001150:	f7ff f916 	bl	8000380 <clock_release>
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200001ee 	.word	0x200001ee
 8001160:	200001f0 	.word	0x200001f0
 8001164:	200001ef 	.word	0x200001ef

08001168 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <SET_LEDS_Callback+0x5c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 80011b2:	4a05      	ldr	r2, [pc, #20]	; (80011c8 <SET_LEDS_Callback+0x60>)
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	7013      	strb	r3, [r2, #0]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200002a9 	.word	0x200002a9
 80011c8:	200002a8 	.word	0x200002a8

080011cc <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3301      	adds	r3, #1
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <USBD_Sleep_Callback+0x20>)
 80011de:	701a      	strb	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	200001f1 	.word	0x200001f1

080011f0 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <leds_PS2+0x84>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d02f      	beq.n	8001262 <leds_PS2+0x72>
		return;
	if (buf_has_data())
 8001202:	f000 f8df 	bl	80013c4 <buf_has_data>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d12c      	bne.n	8001266 <leds_PS2+0x76>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <leds_PS2+0x84>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <leds_PS2+0x88>)
 800121a:	f000 fd30 	bl	8001c7e <HAL_GPIO_WritePin>
	for (uint8_t i = 5; i > 0; i--){
 800121e:	2305      	movs	r3, #5
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e01a      	b.n	800125a <leds_PS2+0x6a>
		send_PS2(PS2_SET_LED);
 8001224:	20ed      	movs	r0, #237	; 0xed
 8001226:	f7ff ff7b 	bl	8001120 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 800122a:	f000 f827 	bl	800127c <wait_response_PS2>
 800122e:	4603      	mov	r3, r0
 8001230:	2bfa      	cmp	r3, #250	; 0xfa
 8001232:	d003      	beq.n	800123c <leds_PS2+0x4c>
		{
			_delay_ms(20);
 8001234:	2014      	movs	r0, #20
 8001236:	f000 f94b 	bl	80014d0 <_delay_ms>
			continue;
 800123a:	e00b      	b.n	8001254 <leds_PS2+0x64>
		}
		send_PS2(led);
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff6e 	bl	8001120 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8001244:	f000 f81a 	bl	800127c <wait_response_PS2>
 8001248:	4603      	mov	r3, r0
 800124a:	2bfa      	cmp	r3, #250	; 0xfa
 800124c:	d00d      	beq.n	800126a <leds_PS2+0x7a>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 800124e:	2014      	movs	r0, #20
 8001250:	f000 f93e 	bl	80014d0 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	3b01      	subs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e1      	bne.n	8001224 <leds_PS2+0x34>
 8001260:	e004      	b.n	800126c <leds_PS2+0x7c>
		return;
 8001262:	bf00      	nop
 8001264:	e002      	b.n	800126c <leds_PS2+0x7c>
		return; // do nothing if buffer is not clear - user input is more important!
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <leds_PS2+0x7c>
			return;
 800126a:	bf00      	nop
	}
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200002a9 	.word	0x200002a9
 8001278:	40011000 	.word	0x40011000

0800127c <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 8001282:	2319      	movs	r3, #25
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	e00a      	b.n	800129e <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 8001288:	f000 f89c 	bl	80013c4 <buf_has_data>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 f91c 	bl	80014d0 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	3b01      	subs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f1      	bne.n	8001288 <wait_response_PS2+0xc>
 80012a4:	e000      	b.n	80012a8 <wait_response_PS2+0x2c>
			break;
 80012a6:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80012a8:	f000 f862 	bl	8001370 <buf_pop>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	if (sleep)
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <process_PS2+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d012      	beq.n	80012ea <process_PS2+0x32>
	{
		leds_updated = 1;
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <process_PS2+0x5c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <process_PS2+0x58>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d103      	bne.n	80012da <process_PS2+0x22>
		{
			leds_PS2(0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff ff8c 	bl	80011f0 <leds_PS2>
 80012d8:	e004      	b.n	80012e4 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <process_PS2+0x60>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff86 	bl	80011f0 <leds_PS2>
		}
		sleep = 0;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <process_PS2+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 80012ea:	f000 f86b 	bl	80013c4 <buf_has_data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <process_PS2+0x4a>
		matrix_scan(buf_pop());
 80012f4:	f000 f83c 	bl	8001370 <buf_pop>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f85e 	bl	80003bc <matrix_scan>
	else
		leds_PS2(leds_data);
}
 8001300:	e004      	b.n	800130c <process_PS2+0x54>
		leds_PS2(leds_data);
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <process_PS2+0x60>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff72 	bl	80011f0 <leds_PS2>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200001f1 	.word	0x200001f1
 8001314:	200002a9 	.word	0x200002a9
 8001318:	200002a8 	.word	0x200002a8

0800131c <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <buf_push+0x48>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	425a      	negs	r2, r3
 800132e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001332:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001336:	bf58      	it	pl
 8001338:	4253      	negpl	r3, r2
 800133a:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <buf_push+0x4c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	429a      	cmp	r2, r3
 8001344:	d008      	beq.n	8001358 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <buf_push+0x48>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	4619      	mov	r1, r3
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <buf_push+0x50>)
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <buf_push+0x48>)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	7013      	strb	r3, [r2, #0]
    }
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200001f2 	.word	0x200001f2
 8001368:	200001f3 	.word	0x200001f3
 800136c:	200002ac 	.word	0x200002ac

08001370 <buf_pop>:

uint8_t buf_pop(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <buf_pop+0x48>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <buf_pop+0x4c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d012      	beq.n	80013ac <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <buf_pop+0x4c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <buf_pop+0x50>)
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <buf_pop+0x4c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	425a      	negs	r2, r3
 800139a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800139e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013a2:	bf58      	it	pl
 80013a4:	4253      	negpl	r3, r2
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <buf_pop+0x4c>)
 80013aa:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	200001f2 	.word	0x200001f2
 80013bc:	200001f3 	.word	0x200001f3
 80013c0:	200002ac 	.word	0x200002ac

080013c4 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <buf_has_data+0x20>)
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <buf_has_data+0x24>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200001f2 	.word	0x200001f2
 80013e8:	200001f3 	.word	0x200001f3

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_MspInit+0x5c>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_MspInit+0x5c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x5c>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x5c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_MspInit+0x5c>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x5c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_MspInit+0x60>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_MspInit+0x60>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <NMI_Handler+0x4>

08001456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <HardFault_Handler+0x4>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <MemManage_Handler+0x4>

08001462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <UsageFault_Handler+0x4>

0800146e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001496:	f000 f935 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014a6:	f000 fd4c 	bl	8001f42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200007fc 	.word	0x200007fc

080014b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80014b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014bc:	f000 fbf8 	bl	8001cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f92f 	bl	800173c <HAL_Delay>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 80014f0:	f000 f80c 	bl	800150c <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 80014f4:	bf00      	nop
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f000 f813 	bl	8001524 <check_us_counter>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f8      	bne.n	80014f6 <_delay_us+0x10>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <reset_us_counter>:

inline void reset_us_counter(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <reset_us_counter+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2200      	movs	r2, #0
 8001516:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	200002ec 	.word	0x200002ec

08001524 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <check_us_counter+0x28>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	b29b      	uxth	r3, r3
 8001536:	88fa      	ldrh	r2, [r7, #6]
 8001538:	429a      	cmp	r2, r3
 800153a:	bf8c      	ite	hi
 800153c:	2301      	movhi	r3, #1
 800153e:	2300      	movls	r3, #0
 8001540:	b2db      	uxtb	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	200002ec 	.word	0x200002ec

08001550 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_TIM1_Init+0x98>)
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <MX_TIM1_Init+0x9c>)
 8001570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_TIM1_Init+0x98>)
 8001574:	222f      	movs	r2, #47	; 0x2f
 8001576:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_TIM1_Init+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM1_Init+0x98>)
 8001580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001584:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_TIM1_Init+0x98>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_TIM1_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_TIM1_Init+0x98>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <MX_TIM1_Init+0x98>)
 800159a:	f002 fbad 	bl	8003cf8 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015a4:	f7ff fc91 	bl	8000eca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4619      	mov	r1, r3
 80015b4:	480c      	ldr	r0, [pc, #48]	; (80015e8 <MX_TIM1_Init+0x98>)
 80015b6:	f002 fc39 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015c0:	f7ff fc83 	bl	8000eca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_TIM1_Init+0x98>)
 80015d2:	f002 fddb 	bl	800418c <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015dc:	f7ff fc75 	bl	8000eca <Error_Handler>
  }

}
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002ec 	.word	0x200002ec
 80015ec:	40012c00 	.word	0x40012c00

080015f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a09      	ldr	r2, [pc, #36]	; (8001624 <HAL_TIM_Base_MspInit+0x34>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10b      	bne.n	800161a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_TIM_Base_MspInit+0x38>)
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_TIM_Base_MspInit+0x38>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6193      	str	r3, [r2, #24]
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_TIM_Base_MspInit+0x38>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40012c00 	.word	0x40012c00
 8001628:	40021000 	.word	0x40021000

0800162c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800162c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800162e:	e003      	b.n	8001638 <LoopCopyDataInit>

08001630 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001632:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001634:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001636:	3104      	adds	r1, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800163c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800163e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001640:	d3f6      	bcc.n	8001630 <CopyDataInit>
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001644:	e002      	b.n	800164c <LoopFillZerobss>

08001646 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001648:	f842 3b04 	str.w	r3, [r2], #4

0800164c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800164e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001650:	d3f9      	bcc.n	8001646 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001652:	f7ff ff37 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001656:	f006 fcb1 	bl	8007fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165a:	f7ff fbab 	bl	8000db4 <main>
  bx lr
 800165e:	4770      	bx	lr
  ldr r3, =_sidata
 8001660:	0800819c 	.word	0x0800819c
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001668:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 800166c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001670:	20000ae8 	.word	0x20000ae8

08001674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC1_2_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_Init+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <HAL_Init+0x28>)
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f945 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168e:	2000      	movs	r0, #0
 8001690:	f000 f808 	bl	80016a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001694:	f7ff feaa 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40022000 	.word	0x40022000

080016a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <HAL_InitTick+0x54>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_InitTick+0x58>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f95d 	bl	8001982 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e00e      	b.n	80016f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d80a      	bhi.n	80016ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f04f 30ff 	mov.w	r0, #4294967295
 80016e0:	f000 f925 	bl	800192e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e4:	4a06      	ldr	r2, [pc, #24]	; (8001700 <HAL_InitTick+0x5c>)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000004 	.word	0x20000004
 80016fc:	2000000c 	.word	0x2000000c
 8001700:	20000008 	.word	0x20000008

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_IncTick+0x20>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	2000000c 	.word	0x2000000c
 8001724:	20000334 	.word	0x20000334

08001728 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b02      	ldr	r3, [pc, #8]	; (8001738 <HAL_GetTick+0x10>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000334 	.word	0x20000334

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff fff0 	bl	8001728 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_Delay+0x40>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffe0 	bl	8001728 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000000c 	.word	0x2000000c

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4906      	ldr	r1, [pc, #24]	; (8001818 <__NVIC_EnableIRQ+0x34>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff90 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff2d 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff42 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff90 	bl	8001870 <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5f 	bl	800181c <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff35 	bl	80017e4 <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b08b      	sub	sp, #44	; 0x2c
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ae:	e127      	b.n	8001c00 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019b0:	2201      	movs	r2, #1
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	f040 8116 	bne.w	8001bfa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b12      	cmp	r3, #18
 80019d4:	d034      	beq.n	8001a40 <HAL_GPIO_Init+0xa4>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d80d      	bhi.n	80019f6 <HAL_GPIO_Init+0x5a>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x9a>
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d804      	bhi.n	80019ec <HAL_GPIO_Init+0x50>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d031      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d01c      	beq.n	8001a24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019ea:	e048      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d043      	beq.n	8001a78 <HAL_GPIO_Init+0xdc>
 80019f0:	2b11      	cmp	r3, #17
 80019f2:	d01b      	beq.n	8001a2c <HAL_GPIO_Init+0x90>
          break;
 80019f4:	e043      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f6:	4a89      	ldr	r2, [pc, #548]	; (8001c1c <HAL_GPIO_Init+0x280>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d026      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 80019fc:	4a87      	ldr	r2, [pc, #540]	; (8001c1c <HAL_GPIO_Init+0x280>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d806      	bhi.n	8001a10 <HAL_GPIO_Init+0x74>
 8001a02:	4a87      	ldr	r2, [pc, #540]	; (8001c20 <HAL_GPIO_Init+0x284>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d020      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a08:	4a86      	ldr	r2, [pc, #536]	; (8001c24 <HAL_GPIO_Init+0x288>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01d      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
          break;
 8001a0e:	e036      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a10:	4a85      	ldr	r2, [pc, #532]	; (8001c28 <HAL_GPIO_Init+0x28c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a16:	4a85      	ldr	r2, [pc, #532]	; (8001c2c <HAL_GPIO_Init+0x290>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d016      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
 8001a1c:	4a84      	ldr	r2, [pc, #528]	; (8001c30 <HAL_GPIO_Init+0x294>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0xae>
          break;
 8001a22:	e02c      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e028      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e023      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e01e      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	330c      	adds	r3, #12
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e019      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a52:	2304      	movs	r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e012      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	611a      	str	r2, [r3, #16]
          break;
 8001a6a:	e008      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	615a      	str	r2, [r3, #20]
          break;
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2bff      	cmp	r3, #255	; 0xff
 8001a82:	d801      	bhi.n	8001a88 <HAL_GPIO_Init+0xec>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	e001      	b.n	8001a8c <HAL_GPIO_Init+0xf0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d802      	bhi.n	8001a9a <HAL_GPIO_Init+0xfe>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	e002      	b.n	8001aa0 <HAL_GPIO_Init+0x104>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	3b08      	subs	r3, #8
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	6a39      	ldr	r1, [r7, #32]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8096 	beq.w	8001bfa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a58      	ldr	r2, [pc, #352]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x298>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_GPIO_Init+0x29c>)
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	089b      	lsrs	r3, r3, #2
 8001aec:	3302      	adds	r3, #2
 8001aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	220f      	movs	r2, #15
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_GPIO_Init+0x2a0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x19e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4a      	ldr	r2, [pc, #296]	; (8001c40 <HAL_GPIO_Init+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x19a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a49      	ldr	r2, [pc, #292]	; (8001c44 <HAL_GPIO_Init+0x2a8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x196>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a48      	ldr	r2, [pc, #288]	; (8001c48 <HAL_GPIO_Init+0x2ac>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x192>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x1a0>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4c:	493a      	ldr	r1, [pc, #232]	; (8001c38 <HAL_GPIO_Init+0x29c>)
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4938      	ldr	r1, [pc, #224]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b74:	4b35      	ldr	r3, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	4933      	ldr	r1, [pc, #204]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	492e      	ldr	r1, [pc, #184]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
 8001b9a:	e006      	b.n	8001baa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	4929      	ldr	r1, [pc, #164]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4924      	ldr	r1, [pc, #144]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
 8001bc2:	e006      	b.n	8001bd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	491f      	ldr	r1, [pc, #124]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bce:	4013      	ands	r3, r2
 8001bd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	491a      	ldr	r1, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60cb      	str	r3, [r1, #12]
 8001bea:	e006      	b.n	8001bfa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4915      	ldr	r1, [pc, #84]	; (8001c4c <HAL_GPIO_Init+0x2b0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	fa22 f303 	lsr.w	r3, r2, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f47f aed0 	bne.w	80019b0 <HAL_GPIO_Init+0x14>
  }
}
 8001c10:	bf00      	nop
 8001c12:	372c      	adds	r7, #44	; 0x2c
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10110000 	.word	0x10110000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10320000 	.word	0x10320000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	40011000 	.word	0x40011000
 8001c48:	40011400 	.word	0x40011400
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	887b      	ldrh	r3, [r7, #2]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d002      	beq.n	8001c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	807b      	strh	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8e:	787b      	ldrb	r3, [r7, #1]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f900 	bl	8000ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40010400 	.word	0x40010400

08001ce0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b08b      	sub	sp, #44	; 0x2c
 8001ce4:	af06      	add	r7, sp, #24
 8001ce6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0fd      	b.n	8001eee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f005 fed8 	bl	8007abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fabb 	bl	8004294 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	687e      	ldr	r6, [r7, #4]
 8001d26:	466d      	mov	r5, sp
 8001d28:	f106 0410 	add.w	r4, r6, #16
 8001d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	602b      	str	r3, [r5, #0]
 8001d34:	1d33      	adds	r3, r6, #4
 8001d36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f002 fa85 	bl	8004248 <USB_CoreInit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0ce      	b.n	8001eee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fab6 	bl	80042c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
 8001d60:	e04c      	b.n	8001dfc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	440b      	add	r3, r1
 8001d72:	3301      	adds	r3, #1
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	4613      	mov	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	440b      	add	r3, r1
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	b298      	uxth	r0, r3
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4413      	add	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3336      	adds	r3, #54	; 0x36
 8001da0:	4602      	mov	r2, r0
 8001da2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	440b      	add	r3, r1
 8001db4:	3303      	adds	r3, #3
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3338      	adds	r3, #56	; 0x38
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	333c      	adds	r3, #60	; 0x3c
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3340      	adds	r3, #64	; 0x40
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3ad      	bcc.n	8001d62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e044      	b.n	8001e96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	7bfa      	ldrb	r2, [r7, #15]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3b5      	bcc.n	8001e0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	687e      	ldr	r6, [r7, #4]
 8001ea8:	466d      	mov	r5, sp
 8001eaa:	f106 0410 	add.w	r4, r6, #16
 8001eae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	602b      	str	r3, [r5, #0]
 8001eb6:	1d33      	adds	r3, r6, #4
 8001eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f002 fa10 	bl	80042e0 <USB_DevInit>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2202      	movs	r2, #2
 8001eca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00d      	b.n	8001eee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 f9aa 	bl	8006240 <USB_DevDisconnect>

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_PCD_Start+0x16>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e016      	b.n	8001f3a <HAL_PCD_Start+0x44>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 f9a5 	bl	8004268 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f1e:	2101      	movs	r1, #1
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f006 f814 	bl	8007f4e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 f97e 	bl	800622c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b088      	sub	sp, #32
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f980 	bl	8006254 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5e:	d102      	bne.n	8001f66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fb4a 	bl	80025fa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 f972 	bl	8006254 <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7a:	d112      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f005 fe0c 	bl	8007bb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f925 	bl	80021ec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 f954 	bl	8006254 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fca:	b292      	uxth	r2, r2
 8001fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f004 f93d 	bl	8006254 <USB_ReadInterrupts>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe4:	d10b      	bne.n	8001ffe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff8:	b292      	uxth	r2, r2
 8001ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 f926 	bl	8006254 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	d126      	bne.n	8002062 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201c:	b29a      	uxth	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0204 	bic.w	r2, r2, #4
 8002026:	b292      	uxth	r2, r2
 8002028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0208 	bic.w	r2, r2, #8
 800203e:	b292      	uxth	r2, r2
 8002040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f005 fde3 	bl	8007c10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800205c:	b292      	uxth	r2, r2
 800205e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f004 f8f4 	bl	8006254 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	f040 8084 	bne.w	8002182 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800207a:	2300      	movs	r3, #0
 800207c:	77fb      	strb	r3, [r7, #31]
 800207e:	e011      	b.n	80020a4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	461a      	mov	r2, r3
 8002086:	7ffb      	ldrb	r3, [r7, #31]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	441a      	add	r2, r3
 800208c:	7ffb      	ldrb	r3, [r7, #31]
 800208e:	8812      	ldrh	r2, [r2, #0]
 8002090:	b292      	uxth	r2, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	f107 0120 	add.w	r1, r7, #32
 8002098:	440b      	add	r3, r1
 800209a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	3301      	adds	r3, #1
 80020a2:	77fb      	strb	r3, [r7, #31]
 80020a4:	7ffb      	ldrb	r3, [r7, #31]
 80020a6:	2b07      	cmp	r3, #7
 80020a8:	d9ea      	bls.n	8002080 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	b292      	uxth	r2, r2
 80020be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	b292      	uxth	r2, r2
 80020d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020da:	bf00      	nop
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f6      	beq.n	80020dc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002100:	b292      	uxth	r2, r2
 8002102:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	77fb      	strb	r3, [r7, #31]
 800210a:	e010      	b.n	800212e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800210c:	7ffb      	ldrb	r3, [r7, #31]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4611      	mov	r1, r2
 8002114:	7ffa      	ldrb	r2, [r7, #31]
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	440a      	add	r2, r1
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	f107 0120 	add.w	r1, r7, #32
 8002120:	440b      	add	r3, r1
 8002122:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002126:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	3301      	adds	r3, #1
 800212c:	77fb      	strb	r3, [r7, #31]
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	2b07      	cmp	r3, #7
 8002132:	d9eb      	bls.n	800210c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800213c:	b29a      	uxth	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	b292      	uxth	r2, r2
 8002148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002154:	b29a      	uxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215e:	b292      	uxth	r2, r2
 8002160:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800216c:	b29a      	uxth	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0204 	orr.w	r2, r2, #4
 8002176:	b292      	uxth	r2, r2
 8002178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f005 fd36 	bl	8007bee <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 f864 	bl	8006254 <USB_ReadInterrupts>
 800218c:	4603      	mov	r3, r0
 800218e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002196:	d10e      	bne.n	80021b6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021aa:	b292      	uxth	r2, r2
 80021ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f005 fcf0 	bl	8007b96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 f84a 	bl	8006254 <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ca:	d10b      	bne.n	80021e4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021de:	b292      	uxth	r2, r2
 80021e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021e4:	bf00      	nop
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_PCD_SetAddress+0x1a>
 8002202:	2302      	movs	r3, #2
 8002204:	e013      	b.n	800222e <HAL_PCD_SetAddress+0x42>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fff1 	bl	8006206 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	4608      	mov	r0, r1
 8002240:	4611      	mov	r1, r2
 8002242:	461a      	mov	r2, r3
 8002244:	4603      	mov	r3, r0
 8002246:	70fb      	strb	r3, [r7, #3]
 8002248:	460b      	mov	r3, r1
 800224a:	803b      	strh	r3, [r7, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002258:	2b00      	cmp	r3, #0
 800225a:	da0e      	bge.n	800227a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	705a      	strb	r2, [r3, #1]
 8002278:	e00e      	b.n	8002298 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 0207 	and.w	r2, r3, #7
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022a4:	883a      	ldrh	r2, [r7, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	78ba      	ldrb	r2, [r7, #2]
 80022ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022c2:	78bb      	ldrb	r3, [r7, #2]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d102      	bne.n	80022ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_PCD_EP_Open+0xa6>
 80022d8:	2302      	movs	r3, #2
 80022da:	e00e      	b.n	80022fa <HAL_PCD_EP_Open+0xc4>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 f818 	bl	8004320 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80022f8:	7afb      	ldrb	r3, [r7, #11]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800230e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002312:	2b00      	cmp	r3, #0
 8002314:	da0e      	bge.n	8002334 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002316:	78fb      	ldrb	r3, [r7, #3]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2201      	movs	r2, #1
 8002330:	705a      	strb	r2, [r3, #1]
 8002332:	e00e      	b.n	8002352 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	f003 0207 	and.w	r2, r3, #7
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_EP_Close+0x6a>
 8002368:	2302      	movs	r3, #2
 800236a:	e00e      	b.n	800238a <HAL_PCD_EP_Close+0x88>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fb3a 	bl	80049f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	460b      	mov	r3, r1
 80023a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	f003 0207 	and.w	r2, r3, #7
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6979      	ldr	r1, [r7, #20]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f002 fcec 	bl	8004dcc <USB_EPStartXfer>
 80023f4:	e005      	b.n	8002402 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6979      	ldr	r1, [r7, #20]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fce5 	bl	8004dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2200      	movs	r2, #0
 8002450:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002458:	7afb      	ldrb	r3, [r7, #11]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	b2da      	uxtb	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002464:	7afb      	ldrb	r3, [r7, #11]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fca9 	bl	8004dcc <USB_EPStartXfer>
 800247a:	e005      	b.n	8002488 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fca2 	bl	8004dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	f003 0207 	and.w	r2, r3, #7
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d901      	bls.n	80024b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e04c      	b.n	800254a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da0e      	bge.n	80024d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	4413      	add	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	705a      	strb	r2, [r3, #1]
 80024d4:	e00c      	b.n	80024f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_PCD_EP_SetStall+0x7e>
 800250c:	2302      	movs	r3, #2
 800250e:	e01c      	b.n	800254a <HAL_PCD_EP_SetStall+0xb8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68f9      	ldr	r1, [r7, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fd74 	bl	800600c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	2b00      	cmp	r3, #0
 800252c:	d108      	bne.n	8002540 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f003 fe99 	bl	8006272 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b084      	sub	sp, #16
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 020f 	and.w	r2, r3, #15
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	d901      	bls.n	8002570 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e040      	b.n	80025f2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	da0e      	bge.n	8002596 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	705a      	strb	r2, [r3, #1]
 8002594:	e00e      	b.n	80025b4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 0207 	and.w	r2, r3, #7
 800259c:	4613      	mov	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_PCD_EP_ClrStall+0x82>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e00e      	b.n	80025f2 <HAL_PCD_EP_ClrStall+0xa0>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68f9      	ldr	r1, [r7, #12]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fd62 	bl	80060ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08e      	sub	sp, #56	; 0x38
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002602:	e2df      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800260c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800260e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800261a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 8158 	bne.w	80028d4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002624:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d152      	bne.n	80026d4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	b29b      	uxth	r3, r3
 8002636:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	81fb      	strh	r3, [r7, #14]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800264a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800264e:	b29b      	uxth	r3, r3
 8002650:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3328      	adds	r3, #40	; 0x28
 8002656:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	3302      	adds	r3, #2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	441a      	add	r2, r3
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f005 fa64 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 828e 	beq.w	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f040 8289 	bne.w	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b292      	uxth	r2, r2
 80026c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026d2:	e277      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80026e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d034      	beq.n	8002758 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	3306      	adds	r3, #6
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800272c:	b29b      	uxth	r3, r3
 800272e:	f003 fdef 	bl	8006310 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29a      	uxth	r2, r3
 800273a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800273e:	4013      	ands	r3, r2
 8002740:	823b      	strh	r3, [r7, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	8a3a      	ldrh	r2, [r7, #16]
 8002748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274c:	b292      	uxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f005 f9d9 	bl	8007b08 <HAL_PCD_SetupStageCallback>
 8002756:	e235      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002758:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800275c:	2b00      	cmp	r3, #0
 800275e:	f280 8231 	bge.w	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29a      	uxth	r2, r3
 800276a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800276e:	4013      	ands	r3, r2
 8002770:	83bb      	strh	r3, [r7, #28]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	8bba      	ldrh	r2, [r7, #28]
 8002778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800277c:	b292      	uxth	r2, r2
 800277e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	3306      	adds	r3, #6
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d019      	beq.n	80027e8 <PCD_EP_ISR_Handler+0x1ee>
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	6959      	ldr	r1, [r3, #20]
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f003 fd9f 	bl	8006310 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	441a      	add	r2, r3
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027e0:	2100      	movs	r1, #0
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f005 f9a2 	bl	8007b2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d112      	bne.n	8002836 <PCD_EP_ISR_Handler+0x23c>
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800281a:	b29a      	uxth	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800282a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282e:	b29a      	uxth	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	e02f      	b.n	8002896 <PCD_EP_ISR_Handler+0x29c>
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b3e      	cmp	r3, #62	; 0x3e
 800283c:	d813      	bhi.n	8002866 <PCD_EP_ISR_Handler+0x26c>
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	085b      	lsrs	r3, r3, #1
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <PCD_EP_ISR_Handler+0x25e>
 8002852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002854:	3301      	adds	r3, #1
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	b29b      	uxth	r3, r3
 800285c:	029b      	lsls	r3, r3, #10
 800285e:	b29a      	uxth	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	801a      	strh	r2, [r3, #0]
 8002864:	e017      	b.n	8002896 <PCD_EP_ISR_Handler+0x29c>
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <PCD_EP_ISR_Handler+0x286>
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	3b01      	subs	r3, #1
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	b29b      	uxth	r3, r3
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	b29b      	uxth	r3, r3
 8002888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800288c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002890:	b29a      	uxth	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	827b      	strh	r3, [r7, #18]
 80028a8:	8a7b      	ldrh	r3, [r7, #18]
 80028aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80028ae:	827b      	strh	r3, [r7, #18]
 80028b0:	8a7b      	ldrh	r3, [r7, #18]
 80028b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028b6:	827b      	strh	r3, [r7, #18]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	8a7b      	ldrh	r3, [r7, #18]
 80028be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8013      	strh	r3, [r2, #0]
 80028d2:	e177      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f280 80ea 	bge.w	8002ac4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29a      	uxth	r2, r3
 8002902:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002906:	4013      	ands	r3, r2
 8002908:	853b      	strh	r3, [r7, #40]	; 0x28
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800291a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800291e:	b292      	uxth	r2, r2
 8002920:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002922:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	7b1b      	ldrb	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d122      	bne.n	8002986 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002948:	b29b      	uxth	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	3306      	adds	r3, #6
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6812      	ldr	r2, [r2, #0]
 800295c:	4413      	add	r3, r2
 800295e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800296a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8087 	beq.w	8002a80 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	6959      	ldr	r1, [r3, #20]
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	88da      	ldrh	r2, [r3, #6]
 800297e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002980:	f003 fcc6 	bl	8006310 <USB_ReadPMA>
 8002984:	e07c      	b.n	8002a80 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	78db      	ldrb	r3, [r3, #3]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d108      	bne.n	80029a0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800298e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002990:	461a      	mov	r2, r3
 8002992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f923 	bl	8002be0 <HAL_PCD_EP_DB_Receive>
 800299a:	4603      	mov	r3, r0
 800299c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800299e:	e06f      	b.n	8002a80 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d021      	beq.n	8002a3e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a22:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d02a      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	6959      	ldr	r1, [r3, #20]
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	891a      	ldrh	r2, [r3, #8]
 8002a36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a38:	f003 fc6a 	bl	8006310 <USB_ReadPMA>
 8002a3c:	e020      	b.n	8002a80 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	3306      	adds	r3, #6
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6812      	ldr	r2, [r2, #0]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a66:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d008      	beq.n	8002a80 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	6959      	ldr	r1, [r3, #20]
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	895a      	ldrh	r2, [r3, #10]
 8002a7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a7c:	f003 fc48 	bl	8006310 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a86:	441a      	add	r2, r3
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a92:	441a      	add	r2, r3
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d004      	beq.n	8002aaa <PCD_EP_ISR_Handler+0x4b0>
 8002aa0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d206      	bcs.n	8002ab8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f005 f83b 	bl	8007b2c <HAL_PCD_DataOutStageCallback>
 8002ab6:	e005      	b.n	8002ac4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f002 f984 	bl	8004dcc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002ac4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d07a      	beq.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ace:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002afc:	843b      	strh	r3, [r7, #32]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	8c3b      	ldrh	r3, [r7, #32]
 8002b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	78db      	ldrb	r3, [r3, #3]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d108      	bne.n	8002b34 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d146      	bne.n	8002bb8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d141      	bne.n	8002bb8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	8bfb      	ldrh	r3, [r7, #30]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d906      	bls.n	8002b76 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	8bfb      	ldrh	r3, [r7, #30]
 8002b6e:	1ad2      	subs	r2, r2, r3
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	619a      	str	r2, [r3, #24]
 8002b74:	e002      	b.n	8002b7c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	2200      	movs	r2, #0
 8002b7a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f004 ffe9 	bl	8007b62 <HAL_PCD_DataInStageCallback>
 8002b90:	e018      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	8bfb      	ldrh	r3, [r7, #30]
 8002b98:	441a      	add	r2, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	8bfb      	ldrh	r3, [r7, #30]
 8002ba4:	441a      	add	r2, r3
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 f90b 	bl	8004dcc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002bb6:	e005      	b.n	8002bc4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bba:	461a      	mov	r2, r3
 8002bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f91b 	bl	8002dfa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f6ff ad17 	blt.w	8002604 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3738      	adds	r7, #56	; 0x38
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d07e      	beq.n	8002cf6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d306      	bcc.n	8002c3a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	8b7b      	ldrh	r3, [r7, #26]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e002      	b.n	8002c40 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d123      	bne.n	8002c90 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	833b      	strh	r3, [r7, #24]
 8002c64:	8b3b      	ldrh	r3, [r7, #24]
 8002c66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c6a:	833b      	strh	r3, [r7, #24]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	8b3b      	ldrh	r3, [r7, #24]
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01f      	beq.n	8002cda <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	82fb      	strh	r3, [r7, #22]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	8afb      	ldrh	r3, [r7, #22]
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cda:	8b7b      	ldrh	r3, [r7, #26]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8087 	beq.w	8002df0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6959      	ldr	r1, [r3, #20]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	891a      	ldrh	r2, [r3, #8]
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
 8002cf0:	f003 fb0e 	bl	8006310 <USB_ReadPMA>
 8002cf4:	e07c      	b.n	8002df0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3306      	adds	r3, #6
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	8b7b      	ldrh	r3, [r7, #26]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d306      	bcc.n	8002d38 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	8b7b      	ldrh	r3, [r7, #26]
 8002d30:	1ad2      	subs	r2, r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	619a      	str	r2, [r3, #24]
 8002d36:	e002      	b.n	8002d3e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d123      	bne.n	8002d8e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	83fb      	strh	r3, [r7, #30]
 8002d62:	8bfb      	ldrh	r3, [r7, #30]
 8002d64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d68:	83fb      	strh	r3, [r7, #30]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	441a      	add	r2, r3
 8002d78:	8bfb      	ldrh	r3, [r7, #30]
 8002d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d11f      	bne.n	8002dd8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	83bb      	strh	r3, [r7, #28]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	8bbb      	ldrh	r3, [r7, #28]
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dd8:	8b7b      	ldrh	r3, [r7, #26]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	6959      	ldr	r1, [r3, #20]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	895a      	ldrh	r2, [r3, #10]
 8002dea:	8b7b      	ldrh	r3, [r7, #26]
 8002dec:	f003 fa90 	bl	8006310 <USB_ReadPMA>
    }
  }

  return count;
 8002df0:	8b7b      	ldrh	r3, [r7, #26]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b092      	sub	sp, #72	; 0x48
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8132 	beq.w	8003078 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e3c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d906      	bls.n	8002e56 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e4e:	1ad2      	subs	r2, r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	619a      	str	r2, [r3, #24]
 8002e54:	e002      	b.n	8002e5c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d12c      	bne.n	8002ebe <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f004 fe79 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 822f 	beq.w	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	827b      	strh	r3, [r7, #18]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	8a7b      	ldrh	r3, [r7, #18]
 8002ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	e20d      	b.n	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01f      	beq.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	441a      	add	r2, r3
 8002ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 81e3 	bne.w	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f1a:	441a      	add	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f26:	441a      	add	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d309      	bcc.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	621a      	str	r2, [r3, #32]
 8002f4a:	e014      	b.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d106      	bne.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8002f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f60:	e009      	b.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	785b      	ldrb	r3, [r3, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d155      	bne.n	800302a <HAL_PCD_EP_DB_Transmit+0x230>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4413      	add	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	011a      	lsls	r2, r3, #4
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d112      	bne.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	801a      	strh	r2, [r3, #0]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	e047      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x268>
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	2b3e      	cmp	r3, #62	; 0x3e
 8002fd6:	d811      	bhi.n	8002ffc <HAL_PCD_EP_DB_Transmit+0x202>
 8002fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_PCD_EP_DB_Transmit+0x1f4>
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	3301      	adds	r3, #1
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	e032      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x268>
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_PCD_EP_DB_Transmit+0x218>
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	b29b      	uxth	r3, r3
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	b29b      	uxth	r3, r3
 800301a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800301e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003022:	b29a      	uxth	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	801a      	strh	r2, [r3, #0]
 8003028:	e01b      	b.n	8003062 <HAL_PCD_EP_DB_Transmit+0x268>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d117      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x268>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	623b      	str	r3, [r7, #32]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	4413      	add	r3, r2
 8003048:	623b      	str	r3, [r7, #32]
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	4413      	add	r3, r2
 8003054:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	b29a      	uxth	r2, r3
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	6959      	ldr	r1, [r3, #20]
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	891a      	ldrh	r2, [r3, #8]
 800306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003070:	b29b      	uxth	r3, r3
 8003072:	f003 f909 	bl	8006288 <USB_WritePMA>
 8003076:	e130      	b.n	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	3306      	adds	r3, #6
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d306      	bcc.n	80030ba <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	699a      	ldr	r2, [r3, #24]
 80030b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030b2:	1ad2      	subs	r2, r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	619a      	str	r2, [r3, #24]
 80030b8:	e002      	b.n	80030c0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d12c      	bne.n	8003122 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f004 fd47 	bl	8007b62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80fd 	bne.w	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	441a      	add	r2, r3
 800310a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800310c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003114:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	b29b      	uxth	r3, r3
 800311e:	8013      	strh	r3, [r2, #0]
 8003120:	e0db      	b.n	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11f      	bne.n	800316c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003146:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	441a      	add	r2, r3
 8003156:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003168:	b29b      	uxth	r3, r3
 800316a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003172:	2b01      	cmp	r3, #1
 8003174:	f040 80b1 	bne.w	80032da <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800317e:	441a      	add	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800318a:	441a      	add	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d309      	bcc.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	1ad2      	subs	r2, r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	621a      	str	r2, [r3, #32]
 80031ae:	e014      	b.n	80031da <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d106      	bne.n	80031c6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80031b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031ba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031c4:	e009      	b.n	80031da <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	785b      	ldrb	r3, [r3, #1]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d155      	bne.n	8003294 <HAL_PCD_EP_DB_Transmit+0x49a>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	647b      	str	r3, [r7, #68]	; 0x44
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fc:	4413      	add	r3, r2
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	011a      	lsls	r2, r3, #4
 8003206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003208:	4413      	add	r3, r2
 800320a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	2b00      	cmp	r3, #0
 8003214:	d112      	bne.n	800323c <HAL_PCD_EP_DB_Transmit+0x442>
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003220:	b29a      	uxth	r2, r3
 8003222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	b29b      	uxth	r3, r3
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29a      	uxth	r2, r3
 8003236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003238:	801a      	strh	r2, [r3, #0]
 800323a:	e044      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	2b3e      	cmp	r3, #62	; 0x3e
 8003240:	d811      	bhi.n	8003266 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003254:	3301      	adds	r3, #1
 8003256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	b29b      	uxth	r3, r3
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b29a      	uxth	r2, r3
 8003260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003262:	801a      	strh	r2, [r3, #0]
 8003264:	e02f      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <HAL_PCD_EP_DB_Transmit+0x482>
 8003276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003278:	3b01      	subs	r3, #1
 800327a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800327c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327e:	b29b      	uxth	r3, r3
 8003280:	029b      	lsls	r3, r3, #10
 8003282:	b29b      	uxth	r3, r3
 8003284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328c:	b29a      	uxth	r2, r3
 800328e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	e018      	b.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	785b      	ldrb	r3, [r3, #1]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d114      	bne.n	80032c6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	4413      	add	r3, r2
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	011a      	lsls	r2, r3, #4
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	4413      	add	r3, r2
 80032b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6959      	ldr	r1, [r3, #20]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	895a      	ldrh	r2, [r3, #10]
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	f002 ffd7 	bl	8006288 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f4:	823b      	strh	r3, [r7, #16]
 80032f6:	8a3b      	ldrh	r3, [r7, #16]
 80032f8:	f083 0310 	eor.w	r3, r3, #16
 80032fc:	823b      	strh	r3, [r7, #16]
 80032fe:	8a3b      	ldrh	r3, [r7, #16]
 8003300:	f083 0320 	eor.w	r3, r3, #32
 8003304:	823b      	strh	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	441a      	add	r2, r3
 8003314:	8a3b      	ldrh	r3, [r7, #16]
 8003316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003326:	b29b      	uxth	r3, r3
 8003328:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3748      	adds	r7, #72	; 0x48
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	460b      	mov	r3, r1
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	4613      	mov	r3, r2
 8003344:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00b      	beq.n	800336a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4413      	add	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e009      	b.n	800337e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800336a:	897a      	ldrh	r2, [r7, #10]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d107      	bne.n	8003394 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	b29a      	uxth	r2, r3
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	80da      	strh	r2, [r3, #6]
 8003392:	e00b      	b.n	80033ac <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2201      	movs	r2, #1
 8003398:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	b29a      	uxth	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	371c      	adds	r7, #28
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e26c      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033e4:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fe:	4b89      	ldr	r3, [pc, #548]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x12c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e246      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x76>
 8003420:	4b80      	ldr	r3, [pc, #512]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7f      	ldr	r2, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b78      	ldr	r3, [pc, #480]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a77      	ldr	r2, [pc, #476]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xbc>
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a71      	ldr	r2, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6e      	ldr	r2, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003474:	4b6b      	ldr	r3, [pc, #428]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6a      	ldr	r2, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a67      	ldr	r2, [pc, #412]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe f948 	bl	8001728 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe f944 	bl	8001728 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1fa      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe4>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe f934 	bl	8001728 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe f930 	bl	8001728 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1e6      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x10c>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1ba      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4939      	ldr	r1, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e03a      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b36      	ldr	r3, [pc, #216]	; (8003628 <HAL_RCC_OscConfig+0x270>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe f8e9 	bl	8001728 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355a:	f7fe f8e5 	bl	8001728 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e19b      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4927      	ldr	r1, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_RCC_OscConfig+0x270>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe f8c8 	bl	8001728 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe f8c4 	bl	8001728 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e17a      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03a      	beq.n	800363c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <HAL_RCC_OscConfig+0x274>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d4:	f7fe f8a8 	bl	8001728 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fe f8a4 	bl	8001728 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e15a      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035fa:	2001      	movs	r0, #1
 80035fc:	f000 faa8 	bl	8003b50 <RCC_Delay>
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_OscConfig+0x274>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003608:	f7fe f88e 	bl	8001728 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7fe f88a 	bl	8001728 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d908      	bls.n	8003630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e140      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000
 8003628:	42420000 	.word	0x42420000
 800362c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b9e      	ldr	r3, [pc, #632]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e9      	bne.n	8003610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a6 	beq.w	8003796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b97      	ldr	r3, [pc, #604]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b94      	ldr	r3, [pc, #592]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a93      	ldr	r2, [pc, #588]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	61d3      	str	r3, [r2, #28]
 8003666:	4b91      	ldr	r3, [pc, #580]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b8e      	ldr	r3, [pc, #568]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003682:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a8a      	ldr	r2, [pc, #552]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368e:	f7fe f84b 	bl	8001728 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe f847 	bl	8001728 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	; 0x64
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0fd      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b81      	ldr	r3, [pc, #516]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x312>
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a7a      	ldr	r2, [pc, #488]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e02d      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x334>
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a72      	ldr	r2, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6213      	str	r3, [r2, #32]
 80036ea:	e01c      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d10c      	bne.n	800370e <HAL_RCC_OscConfig+0x356>
 80036f4:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a6c      	ldr	r2, [pc, #432]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4a69      	ldr	r2, [pc, #420]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6213      	str	r3, [r2, #32]
 800370c:	e00b      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6213      	str	r3, [r2, #32]
 800371a:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4a63      	ldr	r2, [pc, #396]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d015      	beq.n	800375a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fd fffb 	bl	8001728 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fd fff7 	bl	8001728 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0ab      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ee      	beq.n	8003736 <HAL_RCC_OscConfig+0x37e>
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fd ffe5 	bl	8001728 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fd ffe1 	bl	8001728 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e095      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4b48      	ldr	r3, [pc, #288]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a47      	ldr	r2, [pc, #284]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8081 	beq.w	80038a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a0:	4b42      	ldr	r3, [pc, #264]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d061      	beq.n	8003870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d146      	bne.n	8003842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fd ffb5 	bl	8001728 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fd ffb1 	bl	8001728 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e067      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d108      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	492d      	ldr	r1, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a19      	ldr	r1, [r3, #32]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	430b      	orrs	r3, r1
 800380e:	4927      	ldr	r1, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fd ff85 	bl	8001728 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fd ff81 	bl	8001728 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e037      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x46a>
 8003840:	e02f      	b.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd ff6e 	bl	8001728 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fd ff6a 	bl	8001728 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e020      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x498>
 800386e:	e018      	b.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	42420060 	.word	0x42420060

080038b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d0      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4965      	ldr	r1, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800391e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d040      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e073      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06b      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4936      	ldr	r1, [pc, #216]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fd febe 	bl	8001728 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fd feba 	bl	8001728 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e053      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d210      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4922      	ldr	r1, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1cc>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fe1c 	bl	80016a4 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08008184 	.word	0x08008184
 8003a84:	20000004 	.word	0x20000004
 8003a88:	20000008 	.word	0x20000008

08003a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	b490      	push	{r4, r7}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a94:	1d3c      	adds	r4, r7, #4
 8003a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a9c:	4b28      	ldr	r3, [pc, #160]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ab6:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d002      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x46>
 8003aca:	e02d      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003acc:	4b1e      	ldr	r3, [pc, #120]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ace:	623b      	str	r3, [r7, #32]
      break;
 8003ad0:	e02d      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	0c9b      	lsrs	r3, r3, #18
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ade:	4413      	add	r3, r2
 8003ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ae4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af0:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c5b      	lsrs	r3, r3, #17
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003afe:	4413      	add	r3, r2
 8003b00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a0f      	ldr	r2, [pc, #60]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b0a:	fb02 f203 	mul.w	r2, r2, r3
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	e004      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	623b      	str	r3, [r7, #32]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b2a:	623b      	str	r3, [r7, #32]
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc90      	pop	{r4, r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	0800802c 	.word	0x0800802c
 8003b40:	0800803c 	.word	0x0800803c
 8003b44:	40021000 	.word	0x40021000
 8003b48:	007a1200 	.word	0x007a1200
 8003b4c:	003d0900 	.word	0x003d0900

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000004 	.word	0x20000004
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d07d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a4b      	ldr	r2, [pc, #300]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b49      	ldr	r3, [pc, #292]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b46      	ldr	r3, [pc, #280]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d118      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bec:	f7fd fd9c 	bl	8001728 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf4:	f7fd fd98 	bl	8001728 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e06d      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02e      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d027      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c30:	4b2e      	ldr	r3, [pc, #184]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c56:	f7fd fd67 	bl	8001728 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fd fd63 	bl	8001728 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e036      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0ee      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4917      	ldr	r1, [pc, #92]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b14      	ldr	r3, [pc, #80]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a13      	ldr	r2, [pc, #76]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	490b      	ldr	r1, [pc, #44]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	42420440 	.word	0x42420440

08003cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e041      	b.n	8003d8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fc66 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 f930 	bl	8003f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d001      	beq.n	8003db0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e032      	b.n	8003e16 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_TIM_Base_Start+0x88>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start+0x48>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start+0x48>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a14      	ldr	r2, [pc, #80]	; (8003e24 <HAL_TIM_Base_Start+0x8c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start+0x48>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_TIM_Base_Start+0x90>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d010      	beq.n	8003e14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	e007      	b.n	8003e14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0a6      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x166>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d067      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x120>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d80b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x6c>
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d073      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d802      	bhi.n	8003e8e <HAL_TIM_ConfigClockSource+0x62>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d06f      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e8c:	e078      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d06c      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d06a      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e96:	e073      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d804      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0x7e>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d033      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xe0>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d041      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ea8:	e06a      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d066      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x152>
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d017      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eb6:	e063      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 f941 	bl	800414e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e04c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 f92a 	bl	800414e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e039      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f8a1 	bl	8004060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2150      	movs	r1, #80	; 0x50
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 f8f8 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e029      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f8bf 	bl	80040bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2160      	movs	r1, #96	; 0x60
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 f8e8 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e019      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f000 f881 	bl	8004060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f8d8 	bl	800411a <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 f8cf 	bl	800411a <TIM_ITRx_SetConfig>
        break;
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a29      	ldr	r2, [pc, #164]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00b      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d007      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a26      	ldr	r2, [pc, #152]	; (8004058 <TIM_Base_SetConfig+0xbc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d003      	beq.n	8003fcc <TIM_Base_SetConfig+0x30>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a25      	ldr	r2, [pc, #148]	; (800405c <TIM_Base_SetConfig+0xc0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00b      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d007      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <TIM_Base_SetConfig+0xbc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_Base_SetConfig+0x62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	; (800405c <TIM_Base_SetConfig+0xc0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d108      	bne.n	8004010 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4313      	orrs	r3, r2
 800400e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <TIM_Base_SetConfig+0xb8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d103      	bne.n	8004044 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	615a      	str	r2, [r3, #20]
}
 800404a:	bf00      	nop
 800404c:	3714      	adds	r7, #20
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800

08004060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0201 	bic.w	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800408a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f023 030a 	bic.w	r3, r3, #10
 800409c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b087      	sub	sp, #28
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	031b      	lsls	r3, r3, #12
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	621a      	str	r2, [r3, #32]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr

0800411a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	f043 0307 	orr.w	r3, r3, #7
 800413c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800414e:	b480      	push	{r7}
 8004150:	b087      	sub	sp, #28
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004168:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	431a      	orrs	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	4313      	orrs	r3, r2
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4313      	orrs	r3, r2
 800417a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	609a      	str	r2, [r3, #8]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e046      	b.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a16      	ldr	r2, [pc, #88]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d009      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10c      	bne.n	8004220 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800420c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	4313      	orrs	r3, r2
 8004216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40000400 	.word	0x40000400
 8004244:	40000800 	.word	0x40000800

08004248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004248:	b084      	sub	sp, #16
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	f107 0014 	add.w	r0, r7, #20
 8004256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	b004      	add	sp, #16
 8004266:	4770      	bx	lr

08004268 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004278:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800427c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	b29a      	uxth	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800429c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	43db      	mvns	r3, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042e0:	b084      	sub	sp, #16
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	f107 0014 	add.w	r0, r7, #20
 80042ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	bc80      	pop	{r7}
 800431c:	b004      	add	sp, #16
 800431e:	4770      	bx	lr

08004320 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004320:	b480      	push	{r7}
 8004322:	b09b      	sub	sp, #108	; 0x6c
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	78db      	ldrb	r3, [r3, #3]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d81f      	bhi.n	8004392 <USB_ActivateEndpoint+0x72>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <USB_ActivateEndpoint+0x38>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	08004385 	.word	0x08004385
 8004360:	0800439b 	.word	0x0800439b
 8004364:	08004377 	.word	0x08004377
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004368:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800436c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004370:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004374:	e012      	b.n	800439c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004376:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800437a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800437e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004382:	e00b      	b.n	800439c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004384:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004388:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800438c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004390:	e004      	b.n	800439c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004398:	e000      	b.n	800439c <USB_ActivateEndpoint+0x7c>
      break;
 800439a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	441a      	add	r2, r3
 80043ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	b29b      	uxth	r3, r3
 8004402:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7b1b      	ldrb	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f040 8149 	bne.w	80046a0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 8084 	beq.w	8004520 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004422:	b29b      	uxth	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4413      	add	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	011a      	lsls	r2, r3, #4
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	88db      	ldrh	r3, [r3, #6]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	b29b      	uxth	r3, r3
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	81fb      	strh	r3, [r7, #14]
 800445a:	89fb      	ldrh	r3, [r7, #14]
 800445c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <USB_ActivateEndpoint+0x17c>
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b29b      	uxth	r3, r3
 8004472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	81bb      	strh	r3, [r7, #12]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	89bb      	ldrh	r3, [r7, #12]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	78db      	ldrb	r3, [r3, #3]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d020      	beq.n	80044e6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044ba:	813b      	strh	r3, [r7, #8]
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	f083 0320 	eor.w	r3, r3, #32
 80044c2:	813b      	strh	r3, [r7, #8]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	893b      	ldrh	r3, [r7, #8]
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]
 80044e4:	e27f      	b.n	80049e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fc:	817b      	strh	r3, [r7, #10]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	897b      	ldrh	r3, [r7, #10]
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]
 800451e:	e262      	b.n	80049e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800452a:	b29b      	uxth	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	4413      	add	r3, r2
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	011a      	lsls	r2, r3, #4
 800453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453c:	4413      	add	r3, r2
 800453e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	88db      	ldrh	r3, [r3, #6]
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	b29b      	uxth	r3, r3
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	b29a      	uxth	r2, r3
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800455e:	b29b      	uxth	r3, r3
 8004560:	461a      	mov	r2, r3
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	4413      	add	r3, r2
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	011a      	lsls	r2, r3, #4
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	4413      	add	r3, r2
 8004572:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004576:	623b      	str	r3, [r7, #32]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d112      	bne.n	80045a6 <USB_ActivateEndpoint+0x286>
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800458a:	b29a      	uxth	r2, r3
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	801a      	strh	r2, [r3, #0]
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800459a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800459e:	b29a      	uxth	r2, r3
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	801a      	strh	r2, [r3, #0]
 80045a4:	e02f      	b.n	8004606 <USB_ActivateEndpoint+0x2e6>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b3e      	cmp	r3, #62	; 0x3e
 80045ac:	d813      	bhi.n	80045d6 <USB_ActivateEndpoint+0x2b6>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	663b      	str	r3, [r7, #96]	; 0x60
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <USB_ActivateEndpoint+0x2a8>
 80045c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c4:	3301      	adds	r3, #1
 80045c6:	663b      	str	r3, [r7, #96]	; 0x60
 80045c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e017      	b.n	8004606 <USB_ActivateEndpoint+0x2e6>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	663b      	str	r3, [r7, #96]	; 0x60
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <USB_ActivateEndpoint+0x2d0>
 80045ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ec:	3b01      	subs	r3, #1
 80045ee:	663b      	str	r3, [r7, #96]	; 0x60
 80045f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	029b      	lsls	r3, r3, #10
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004600:	b29a      	uxth	r2, r3
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	83fb      	strh	r3, [r7, #30]
 8004614:	8bfb      	ldrh	r3, [r7, #30]
 8004616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01b      	beq.n	8004656 <USB_ActivateEndpoint+0x336>
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	83bb      	strh	r3, [r7, #28]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	8bbb      	ldrh	r3, [r7, #28]
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	837b      	strh	r3, [r7, #26]
 800466e:	8b7b      	ldrh	r3, [r7, #26]
 8004670:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004674:	837b      	strh	r3, [r7, #26]
 8004676:	8b7b      	ldrh	r3, [r7, #26]
 8004678:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800467c:	837b      	strh	r3, [r7, #26]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	8b7b      	ldrh	r3, [r7, #26]
 800468a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800468e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469a:	b29b      	uxth	r3, r3
 800469c:	8013      	strh	r3, [r2, #0]
 800469e:	e1a2      	b.n	80049e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80046c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	b29b      	uxth	r3, r3
 80046da:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65bb      	str	r3, [r7, #88]	; 0x58
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ec:	4413      	add	r3, r2
 80046ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	891b      	ldrh	r3, [r3, #8]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	b29a      	uxth	r2, r3
 800470c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470e:	801a      	strh	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	653b      	str	r3, [r7, #80]	; 0x50
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800471a:	b29b      	uxth	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004720:	4413      	add	r3, r2
 8004722:	653b      	str	r3, [r7, #80]	; 0x50
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	011a      	lsls	r2, r3, #4
 800472a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472c:	4413      	add	r3, r2
 800472e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	895b      	ldrh	r3, [r3, #10]
 8004738:	085b      	lsrs	r3, r3, #1
 800473a:	b29b      	uxth	r3, r3
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004742:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f040 8091 	bne.w	8004870 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800475c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800475e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d01b      	beq.n	800479e <USB_ActivateEndpoint+0x47e>
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	441a      	add	r2, r3
 8004788:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800478a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800478e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	b29b      	uxth	r3, r3
 800479c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80047ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01b      	beq.n	80047ee <USB_ActivateEndpoint+0x4ce>
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047cc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004804:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004806:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004808:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800480c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800480e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004810:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004814:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	867b      	strh	r3, [r7, #50]	; 0x32
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800485a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800485e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	b29b      	uxth	r3, r3
 800486c:	8013      	strh	r3, [r2, #0]
 800486e:	e0ba      	b.n	80049e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01d      	beq.n	80048c8 <USB_ActivateEndpoint+0x5a8>
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80048b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80048d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01d      	beq.n	8004920 <USB_ActivateEndpoint+0x600>
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800490c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004918:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800491c:	b29b      	uxth	r3, r3
 800491e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d024      	beq.n	8004972 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004942:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004946:	f083 0320 	eor.w	r3, r3, #32
 800494a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	441a      	add	r2, r3
 8004958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800495c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496c:	b29b      	uxth	r3, r3
 800496e:	8013      	strh	r3, [r2, #0]
 8004970:	e01d      	b.n	80049ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	441a      	add	r2, r3
 80049d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80049e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	376c      	adds	r7, #108	; 0x6c
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b08d      	sub	sp, #52	; 0x34
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7b1b      	ldrb	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f040 808e 	bne.w	8004b24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	785b      	ldrb	r3, [r3, #1]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d044      	beq.n	8004a9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	81bb      	strh	r3, [r7, #12]
 8004a1e:	89bb      	ldrh	r3, [r7, #12]
 8004a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <USB_DeactivateEndpoint+0x6c>
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3e:	817b      	strh	r3, [r7, #10]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	441a      	add	r2, r3
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a76:	813b      	strh	r3, [r7, #8]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	441a      	add	r2, r3
 8004a82:	893b      	ldrh	r3, [r7, #8]
 8004a84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	8013      	strh	r3, [r2, #0]
 8004a98:	e192      	b.n	8004dc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	827b      	strh	r3, [r7, #18]
 8004aa8:	8a7b      	ldrh	r3, [r7, #18]
 8004aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01b      	beq.n	8004aea <USB_DeactivateEndpoint+0xf6>
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac8:	823b      	strh	r3, [r7, #16]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	441a      	add	r2, r3
 8004ad4:	8a3b      	ldrh	r3, [r7, #16]
 8004ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ade:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b00:	81fb      	strh	r3, [r7, #14]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	441a      	add	r2, r3
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	8013      	strh	r3, [r2, #0]
 8004b22:	e14d      	b.n	8004dc0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 80a5 	bne.w	8004c78 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	843b      	strh	r3, [r7, #32]
 8004b3c:	8c3b      	ldrh	r3, [r7, #32]
 8004b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01b      	beq.n	8004b7e <USB_DeactivateEndpoint+0x18a>
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	83fb      	strh	r3, [r7, #30]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	441a      	add	r2, r3
 8004b68:	8bfb      	ldrh	r3, [r7, #30]
 8004b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	83bb      	strh	r3, [r7, #28]
 8004b8c:	8bbb      	ldrh	r3, [r7, #28]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <USB_DeactivateEndpoint+0x1da>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	837b      	strh	r3, [r7, #26]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8b7b      	ldrh	r3, [r7, #26]
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	833b      	strh	r3, [r7, #24]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	8b3b      	ldrh	r3, [r7, #24]
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	82fb      	strh	r3, [r7, #22]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	8afb      	ldrh	r3, [r7, #22]
 8004c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c54:	82bb      	strh	r3, [r7, #20]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8abb      	ldrh	r3, [r7, #20]
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
 8004c76:	e0a3      	b.n	8004dc0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d01b      	beq.n	8004cc8 <USB_DeactivateEndpoint+0x2d4>
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01b      	beq.n	8004d18 <USB_DeactivateEndpoint+0x324>
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	441a      	add	r2, r3
 8004d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	441a      	add	r2, r3
 8004daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3734      	adds	r7, #52	; 0x34
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b0c4      	sub	sp, #272	; 0x110
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	6018      	str	r0, [r3, #0]
 8004dd6:	463b      	mov	r3, r7
 8004dd8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dda:	463b      	mov	r3, r7
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	785b      	ldrb	r3, [r3, #1]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 8557 	bne.w	8005894 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004de6:	463b      	mov	r3, r7
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d905      	bls.n	8004e02 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004df6:	463b      	mov	r3, r7
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004e00:	e004      	b.n	8004e0c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004e02:	463b      	mov	r3, r7
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e0c:	463b      	mov	r3, r7
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	7b1b      	ldrb	r3, [r3, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d12c      	bne.n	8004e70 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e16:	463b      	mov	r3, r7
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6959      	ldr	r1, [r3, #20]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	88da      	ldrh	r2, [r3, #6]
 8004e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	1d38      	adds	r0, r7, #4
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	f001 fa2c 	bl	8006288 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e30:	1d3b      	adds	r3, r7, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	4413      	add	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	463b      	mov	r3, r7
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	011a      	lsls	r2, r3, #4
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
 8004e54:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e58:	f107 0310 	add.w	r3, r7, #16
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	801a      	strh	r2, [r3, #0]
 8004e6c:	f000 bcdd 	b.w	800582a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e70:	463b      	mov	r3, r7
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	78db      	ldrb	r3, [r3, #3]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	f040 8347 	bne.w	800550a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e7c:	463b      	mov	r3, r7
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	463b      	mov	r3, r7
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	f240 82eb 	bls.w	8005464 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004e8e:	1d3b      	adds	r3, r7, #4
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	463b      	mov	r3, r7
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004eac:	1d3b      	adds	r3, r7, #4
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	463b      	mov	r3, r7
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	441a      	add	r2, r3
 8004eba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ec6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ed2:	463b      	mov	r3, r7
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004edc:	1ad2      	subs	r2, r2, r3
 8004ede:	463b      	mov	r3, r7
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	463b      	mov	r3, r7
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8159 	beq.w	80051b2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
 8004f06:	463b      	mov	r3, r7
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d164      	bne.n	8004fda <USB_EPStartXfer+0x20e>
 8004f10:	1d3b      	adds	r3, r7, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	461a      	mov	r2, r3
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	4413      	add	r3, r2
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f28:	463b      	mov	r3, r7
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	011a      	lsls	r2, r3, #4
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	4413      	add	r3, r2
 8004f34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d112      	bne.n	8004f68 <USB_EPStartXfer+0x19c>
 8004f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e054      	b.n	8005012 <USB_EPStartXfer+0x246>
 8004f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f6c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f6e:	d817      	bhi.n	8004fa0 <USB_EPStartXfer+0x1d4>
 8004f70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f74:	085b      	lsrs	r3, r3, #1
 8004f76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d004      	beq.n	8004f90 <USB_EPStartXfer+0x1c4>
 8004f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	029b      	lsls	r3, r3, #10
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	801a      	strh	r2, [r3, #0]
 8004f9e:	e038      	b.n	8005012 <USB_EPStartXfer+0x246>
 8004fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <USB_EPStartXfer+0x1f4>
 8004fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	801a      	strh	r2, [r3, #0]
 8004fd8:	e01b      	b.n	8005012 <USB_EPStartXfer+0x246>
 8004fda:	463b      	mov	r3, r7
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d116      	bne.n	8005012 <USB_EPStartXfer+0x246>
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff2:	4413      	add	r3, r2
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff6:	463b      	mov	r3, r7
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011a      	lsls	r2, r3, #4
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005000:	4413      	add	r3, r2
 8005002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005006:	633b      	str	r3, [r7, #48]	; 0x30
 8005008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800500c:	b29a      	uxth	r2, r3
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005012:	463b      	mov	r3, r7
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	895b      	ldrh	r3, [r3, #10]
 8005018:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6959      	ldr	r1, [r3, #20]
 8005022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005026:	b29b      	uxth	r3, r3
 8005028:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800502c:	1d38      	adds	r0, r7, #4
 800502e:	6800      	ldr	r0, [r0, #0]
 8005030:	f001 f92a 	bl	8006288 <USB_WritePMA>
            ep->xfer_buff += len;
 8005034:	463b      	mov	r3, r7
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800503e:	441a      	add	r2, r3
 8005040:	463b      	mov	r3, r7
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005046:	463b      	mov	r3, r7
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	463b      	mov	r3, r7
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	d909      	bls.n	800506a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005056:	463b      	mov	r3, r7
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	621a      	str	r2, [r3, #32]
 8005068:	e008      	b.n	800507c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800506a:	463b      	mov	r3, r7
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005074:	463b      	mov	r3, r7
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800507c:	463b      	mov	r3, r7
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d164      	bne.n	8005150 <USB_EPStartXfer+0x384>
 8005086:	1d3b      	adds	r3, r7, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	1d3b      	adds	r3, r7, #4
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005094:	b29b      	uxth	r3, r3
 8005096:	461a      	mov	r2, r3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	61fb      	str	r3, [r7, #28]
 800509e:	463b      	mov	r3, r7
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	011a      	lsls	r2, r3, #4
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050ae:	61bb      	str	r3, [r7, #24]
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d112      	bne.n	80050de <USB_EPStartXfer+0x312>
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29b      	uxth	r3, r3
 80050be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	801a      	strh	r2, [r3, #0]
 80050dc:	e057      	b.n	800518e <USB_EPStartXfer+0x3c2>
 80050de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050e2:	2b3e      	cmp	r3, #62	; 0x3e
 80050e4:	d817      	bhi.n	8005116 <USB_EPStartXfer+0x34a>
 80050e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <USB_EPStartXfer+0x33a>
 80050fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005100:	3301      	adds	r3, #1
 8005102:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005106:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800510a:	b29b      	uxth	r3, r3
 800510c:	029b      	lsls	r3, r3, #10
 800510e:	b29a      	uxth	r2, r3
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	801a      	strh	r2, [r3, #0]
 8005114:	e03b      	b.n	800518e <USB_EPStartXfer+0x3c2>
 8005116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005124:	f003 031f 	and.w	r3, r3, #31
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <USB_EPStartXfer+0x36a>
 800512c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005130:	3b01      	subs	r3, #1
 8005132:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005136:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800513a:	b29b      	uxth	r3, r3
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29a      	uxth	r2, r3
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e01e      	b.n	800518e <USB_EPStartXfer+0x3c2>
 8005150:	463b      	mov	r3, r7
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	785b      	ldrb	r3, [r3, #1]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d119      	bne.n	800518e <USB_EPStartXfer+0x3c2>
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005168:	b29b      	uxth	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	4413      	add	r3, r2
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
 8005172:	463b      	mov	r3, r7
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	011a      	lsls	r2, r3, #4
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	4413      	add	r3, r2
 800517e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005188:	b29a      	uxth	r2, r3
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800518e:	463b      	mov	r3, r7
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	891b      	ldrh	r3, [r3, #8]
 8005194:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005198:	463b      	mov	r3, r7
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6959      	ldr	r1, [r3, #20]
 800519e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80051a8:	1d38      	adds	r0, r7, #4
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	f001 f86c 	bl	8006288 <USB_WritePMA>
 80051b0:	e33b      	b.n	800582a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d164      	bne.n	8005286 <USB_EPStartXfer+0x4ba>
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	4413      	add	r3, r2
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	011a      	lsls	r2, r3, #4
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	4413      	add	r3, r2
 80051e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d112      	bne.n	8005214 <USB_EPStartXfer+0x448>
 80051ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fc:	801a      	strh	r2, [r3, #0]
 80051fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e057      	b.n	80052c4 <USB_EPStartXfer+0x4f8>
 8005214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005218:	2b3e      	cmp	r3, #62	; 0x3e
 800521a:	d817      	bhi.n	800524c <USB_EPStartXfer+0x480>
 800521c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <USB_EPStartXfer+0x470>
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	3301      	adds	r3, #1
 8005238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005240:	b29b      	uxth	r3, r3
 8005242:	029b      	lsls	r3, r3, #10
 8005244:	b29a      	uxth	r2, r3
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005248:	801a      	strh	r2, [r3, #0]
 800524a:	e03b      	b.n	80052c4 <USB_EPStartXfer+0x4f8>
 800524c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005256:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b00      	cmp	r3, #0
 8005260:	d104      	bne.n	800526c <USB_EPStartXfer+0x4a0>
 8005262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005266:	3b01      	subs	r3, #1
 8005268:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005270:	b29b      	uxth	r3, r3
 8005272:	029b      	lsls	r3, r3, #10
 8005274:	b29b      	uxth	r3, r3
 8005276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527e:	b29a      	uxth	r2, r3
 8005280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e01e      	b.n	80052c4 <USB_EPStartXfer+0x4f8>
 8005286:	463b      	mov	r3, r7
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d119      	bne.n	80052c4 <USB_EPStartXfer+0x4f8>
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	657b      	str	r3, [r7, #84]	; 0x54
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a4:	4413      	add	r3, r2
 80052a6:	657b      	str	r3, [r7, #84]	; 0x54
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011a      	lsls	r2, r3, #4
 80052b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b2:	4413      	add	r3, r2
 80052b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b8:	653b      	str	r3, [r7, #80]	; 0x50
 80052ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052c4:	463b      	mov	r3, r7
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	891b      	ldrh	r3, [r3, #8]
 80052ca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ce:	463b      	mov	r3, r7
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6959      	ldr	r1, [r3, #20]
 80052d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80052de:	1d38      	adds	r0, r7, #4
 80052e0:	6800      	ldr	r0, [r0, #0]
 80052e2:	f000 ffd1 	bl	8006288 <USB_WritePMA>
            ep->xfer_buff += len;
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052f0:	441a      	add	r2, r3
 80052f2:	463b      	mov	r3, r7
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052f8:	463b      	mov	r3, r7
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	463b      	mov	r3, r7
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d909      	bls.n	800531c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	463b      	mov	r3, r7
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	621a      	str	r2, [r3, #32]
 800531a:	e008      	b.n	800532e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 800531c:	463b      	mov	r3, r7
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005326:	463b      	mov	r3, r7
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
 8005334:	463b      	mov	r3, r7
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	785b      	ldrb	r3, [r3, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d164      	bne.n	8005408 <USB_EPStartXfer+0x63c>
 800533e:	1d3b      	adds	r3, r7, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534c:	b29b      	uxth	r3, r3
 800534e:	461a      	mov	r2, r3
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	4413      	add	r3, r2
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005356:	463b      	mov	r3, r7
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	011a      	lsls	r2, r3, #4
 800535e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005360:	4413      	add	r3, r2
 8005362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
 8005368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800536c:	2b00      	cmp	r3, #0
 800536e:	d112      	bne.n	8005396 <USB_EPStartXfer+0x5ca>
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800537a:	b29a      	uxth	r2, r3
 800537c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800538a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800538e:	b29a      	uxth	r2, r3
 8005390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e054      	b.n	8005440 <USB_EPStartXfer+0x674>
 8005396:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800539a:	2b3e      	cmp	r3, #62	; 0x3e
 800539c:	d817      	bhi.n	80053ce <USB_EPStartXfer+0x602>
 800539e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053a2:	085b      	lsrs	r3, r3, #1
 80053a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d004      	beq.n	80053be <USB_EPStartXfer+0x5f2>
 80053b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053b8:	3301      	adds	r3, #1
 80053ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	029b      	lsls	r3, r3, #10
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	801a      	strh	r2, [r3, #0]
 80053cc:	e038      	b.n	8005440 <USB_EPStartXfer+0x674>
 80053ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80053dc:	f003 031f 	and.w	r3, r3, #31
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <USB_EPStartXfer+0x622>
 80053e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e8:	3b01      	subs	r3, #1
 80053ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80053ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	029b      	lsls	r3, r3, #10
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005400:	b29a      	uxth	r2, r3
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	e01b      	b.n	8005440 <USB_EPStartXfer+0x674>
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d116      	bne.n	8005440 <USB_EPStartXfer+0x674>
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541a:	b29b      	uxth	r3, r3
 800541c:	461a      	mov	r2, r3
 800541e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005420:	4413      	add	r3, r2
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	011a      	lsls	r2, r3, #4
 800542c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800542e:	4413      	add	r3, r2
 8005430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005434:	643b      	str	r3, [r7, #64]	; 0x40
 8005436:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800543a:	b29a      	uxth	r2, r3
 800543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800543e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005440:	463b      	mov	r3, r7
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	895b      	ldrh	r3, [r3, #10]
 8005446:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800544a:	463b      	mov	r3, r7
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6959      	ldr	r1, [r3, #20]
 8005450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005454:	b29b      	uxth	r3, r3
 8005456:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800545a:	1d38      	adds	r0, r7, #4
 800545c:	6800      	ldr	r0, [r0, #0]
 800545e:	f000 ff13 	bl	8006288 <USB_WritePMA>
 8005462:	e1e2      	b.n	800582a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005464:	463b      	mov	r3, r7
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	b29b      	uxth	r3, r3
 8005480:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005488:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800548c:	1d3b      	adds	r3, r7, #4
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	463b      	mov	r3, r7
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	441a      	add	r2, r3
 800549a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	663b      	str	r3, [r7, #96]	; 0x60
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054c6:	4413      	add	r3, r2
 80054c8:	663b      	str	r3, [r7, #96]	; 0x60
 80054ca:	463b      	mov	r3, r7
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054e6:	463b      	mov	r3, r7
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	891b      	ldrh	r3, [r3, #8]
 80054ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f0:	463b      	mov	r3, r7
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6959      	ldr	r1, [r3, #20]
 80054f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005500:	1d38      	adds	r0, r7, #4
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	f000 fec0 	bl	8006288 <USB_WritePMA>
 8005508:	e18f      	b.n	800582a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	463b      	mov	r3, r7
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 808f 	beq.w	8005644 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005526:	1d3b      	adds	r3, r7, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	67bb      	str	r3, [r7, #120]	; 0x78
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d164      	bne.n	8005600 <USB_EPStartXfer+0x834>
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	673b      	str	r3, [r7, #112]	; 0x70
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800554a:	4413      	add	r3, r2
 800554c:	673b      	str	r3, [r7, #112]	; 0x70
 800554e:	463b      	mov	r3, r7
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005558:	4413      	add	r3, r2
 800555a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800555e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005564:	2b00      	cmp	r3, #0
 8005566:	d112      	bne.n	800558e <USB_EPStartXfer+0x7c2>
 8005568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005572:	b29a      	uxth	r2, r3
 8005574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005586:	b29a      	uxth	r2, r3
 8005588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558a:	801a      	strh	r2, [r3, #0]
 800558c:	e054      	b.n	8005638 <USB_EPStartXfer+0x86c>
 800558e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005592:	2b3e      	cmp	r3, #62	; 0x3e
 8005594:	d817      	bhi.n	80055c6 <USB_EPStartXfer+0x7fa>
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	085b      	lsrs	r3, r3, #1
 800559c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <USB_EPStartXfer+0x7ea>
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	3301      	adds	r3, #1
 80055b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	029b      	lsls	r3, r3, #10
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	e038      	b.n	8005638 <USB_EPStartXfer+0x86c>
 80055c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055ca:	095b      	lsrs	r3, r3, #5
 80055cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <USB_EPStartXfer+0x81a>
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	3b01      	subs	r3, #1
 80055e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	029b      	lsls	r3, r3, #10
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	801a      	strh	r2, [r3, #0]
 80055fe:	e01b      	b.n	8005638 <USB_EPStartXfer+0x86c>
 8005600:	463b      	mov	r3, r7
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d116      	bne.n	8005638 <USB_EPStartXfer+0x86c>
 800560a:	1d3b      	adds	r3, r7, #4
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005612:	b29b      	uxth	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005618:	4413      	add	r3, r2
 800561a:	67bb      	str	r3, [r7, #120]	; 0x78
 800561c:	463b      	mov	r3, r7
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	011a      	lsls	r2, r3, #4
 8005624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005626:	4413      	add	r3, r2
 8005628:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800562c:	677b      	str	r3, [r7, #116]	; 0x74
 800562e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005632:	b29a      	uxth	r2, r3
 8005634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005636:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005638:	463b      	mov	r3, r7
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	895b      	ldrh	r3, [r3, #10]
 800563e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005642:	e097      	b.n	8005774 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005644:	463b      	mov	r3, r7
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d168      	bne.n	8005720 <USB_EPStartXfer+0x954>
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005656:	1d3b      	adds	r3, r7, #4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005666:	4413      	add	r3, r2
 8005668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566c:	463b      	mov	r3, r7
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005678:	4413      	add	r3, r2
 800567a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d112      	bne.n	80056ae <USB_EPStartXfer+0x8e2>
 8005688:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	b29b      	uxth	r3, r3
 800568e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005692:	b29a      	uxth	r2, r3
 8005694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e05d      	b.n	800576a <USB_EPStartXfer+0x99e>
 80056ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056b2:	2b3e      	cmp	r3, #62	; 0x3e
 80056b4:	d817      	bhi.n	80056e6 <USB_EPStartXfer+0x91a>
 80056b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <USB_EPStartXfer+0x90a>
 80056cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056d0:	3301      	adds	r3, #1
 80056d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80056da:	b29b      	uxth	r3, r3
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	b29a      	uxth	r2, r3
 80056e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e2:	801a      	strh	r2, [r3, #0]
 80056e4:	e041      	b.n	800576a <USB_EPStartXfer+0x99e>
 80056e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80056f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d104      	bne.n	8005706 <USB_EPStartXfer+0x93a>
 80056fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005700:	3b01      	subs	r3, #1
 8005702:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005706:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800570a:	b29b      	uxth	r3, r3
 800570c:	029b      	lsls	r3, r3, #10
 800570e:	b29b      	uxth	r3, r3
 8005710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005718:	b29a      	uxth	r2, r3
 800571a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	e024      	b.n	800576a <USB_EPStartXfer+0x99e>
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d11f      	bne.n	800576a <USB_EPStartXfer+0x99e>
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005742:	4413      	add	r3, r2
 8005744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	011a      	lsls	r2, r3, #4
 8005750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005754:	4413      	add	r3, r2
 8005756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800575a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800575e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005762:	b29a      	uxth	r2, r3
 8005764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005768:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	891b      	ldrh	r3, [r3, #8]
 8005770:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005774:	463b      	mov	r3, r7
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6959      	ldr	r1, [r3, #20]
 800577a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800577e:	b29b      	uxth	r3, r3
 8005780:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005784:	1d38      	adds	r0, r7, #4
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	f000 fd7e 	bl	8006288 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800578c:	463b      	mov	r3, r7
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d122      	bne.n	80057dc <USB_EPStartXfer+0xa10>
 8005796:	1d3b      	adds	r3, r7, #4
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	463b      	mov	r3, r7
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	441a      	add	r2, r3
 80057c2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80057c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]
 80057da:	e026      	b.n	800582a <USB_EPStartXfer+0xa5e>
 80057dc:	463b      	mov	r3, r7
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d121      	bne.n	800582a <USB_EPStartXfer+0xa5e>
 80057e6:	1d3b      	adds	r3, r7, #4
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	463b      	mov	r3, r7
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005800:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	441a      	add	r2, r3
 8005812:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800581e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005826:	b29b      	uxth	r3, r3
 8005828:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	463b      	mov	r3, r7
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f107 020e 	add.w	r2, r7, #14
 8005840:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	8013      	strh	r3, [r2, #0]
 800584a:	f107 030e 	add.w	r3, r7, #14
 800584e:	f107 020e 	add.w	r2, r7, #14
 8005852:	8812      	ldrh	r2, [r2, #0]
 8005854:	f082 0210 	eor.w	r2, r2, #16
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	f107 030e 	add.w	r3, r7, #14
 800585e:	f107 020e 	add.w	r2, r7, #14
 8005862:	8812      	ldrh	r2, [r2, #0]
 8005864:	f082 0220 	eor.w	r2, r2, #32
 8005868:	801a      	strh	r2, [r3, #0]
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	463b      	mov	r3, r7
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	441a      	add	r2, r3
 8005878:	f107 030e 	add.w	r3, r7, #14
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588e:	b29b      	uxth	r3, r3
 8005890:	8013      	strh	r3, [r2, #0]
 8005892:	e3b5      	b.n	8006000 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005894:	463b      	mov	r3, r7
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	7b1b      	ldrb	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 8090 	bne.w	80059c0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80058a0:	463b      	mov	r3, r7
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	699a      	ldr	r2, [r3, #24]
 80058a6:	463b      	mov	r3, r7
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d90e      	bls.n	80058ce <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80058b0:	463b      	mov	r3, r7
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80058ba:	463b      	mov	r3, r7
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	1ad2      	subs	r2, r2, r3
 80058c6:	463b      	mov	r3, r7
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	619a      	str	r2, [r3, #24]
 80058cc:	e008      	b.n	80058e0 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80058ce:	463b      	mov	r3, r7
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2200      	movs	r2, #0
 80058de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80058e0:	1d3b      	adds	r3, r7, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058f8:	4413      	add	r3, r2
 80058fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	011a      	lsls	r2, r3, #4
 8005906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800590a:	4413      	add	r3, r2
 800590c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d116      	bne.n	800594a <USB_EPStartXfer+0xb7e>
 800591c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005928:	b29a      	uxth	r2, r3
 800592a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800592e:	801a      	strh	r2, [r3, #0]
 8005930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800593c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005940:	b29a      	uxth	r2, r3
 8005942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e32c      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
 800594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800594e:	2b3e      	cmp	r3, #62	; 0x3e
 8005950:	d818      	bhi.n	8005984 <USB_EPStartXfer+0xbb8>
 8005952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800595c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d004      	beq.n	8005972 <USB_EPStartXfer+0xba6>
 8005968:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800596c:	3301      	adds	r3, #1
 800596e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005972:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	e30f      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
 8005984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800598e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005992:	f003 031f 	and.w	r3, r3, #31
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <USB_EPStartXfer+0xbd8>
 800599a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800599e:	3b01      	subs	r3, #1
 80059a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80059a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	029b      	lsls	r3, r3, #10
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e2f1      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80059c0:	463b      	mov	r3, r7
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	f040 818f 	bne.w	8005cea <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80059cc:	463b      	mov	r3, r7
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d175      	bne.n	8005ac2 <USB_EPStartXfer+0xcf6>
 80059d6:	1d3b      	adds	r3, r7, #4
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059ee:	4413      	add	r3, r2
 80059f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f4:	463b      	mov	r3, r7
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	011a      	lsls	r2, r3, #4
 80059fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d116      	bne.n	8005a42 <USB_EPStartXfer+0xc76>
 8005a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a3e:	801a      	strh	r2, [r3, #0]
 8005a40:	e065      	b.n	8005b0e <USB_EPStartXfer+0xd42>
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	2b3e      	cmp	r3, #62	; 0x3e
 8005a4a:	d81a      	bhi.n	8005a82 <USB_EPStartXfer+0xcb6>
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <USB_EPStartXfer+0xca4>
 8005a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	029b      	lsls	r3, r3, #10
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	e045      	b.n	8005b0e <USB_EPStartXfer+0xd42>
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	095b      	lsrs	r3, r3, #5
 8005a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <USB_EPStartXfer+0xcda>
 8005a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	029b      	lsls	r3, r3, #10
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e025      	b.n	8005b0e <USB_EPStartXfer+0xd42>
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d120      	bne.n	8005b0e <USB_EPStartXfer+0xd42>
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005af6:	4413      	add	r3, r2
 8005af8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b00:	463b      	mov	r3, r7
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b0c:	801a      	strh	r2, [r3, #0]
 8005b0e:	1d3b      	adds	r3, r7, #4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b16:	463b      	mov	r3, r7
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d175      	bne.n	8005c0c <USB_EPStartXfer+0xe40>
 8005b20:	1d3b      	adds	r3, r7, #4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b38:	4413      	add	r3, r2
 8005b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	011a      	lsls	r2, r3, #4
 8005b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b54:	463b      	mov	r3, r7
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d116      	bne.n	8005b8c <USB_EPStartXfer+0xdc0>
 8005b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b62:	881b      	ldrh	r3, [r3, #0]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e061      	b.n	8005c50 <USB_EPStartXfer+0xe84>
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b3e      	cmp	r3, #62	; 0x3e
 8005b94:	d81a      	bhi.n	8005bcc <USB_EPStartXfer+0xe00>
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <USB_EPStartXfer+0xdee>
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bc8:	801a      	strh	r2, [r3, #0]
 8005bca:	e041      	b.n	8005c50 <USB_EPStartXfer+0xe84>
 8005bcc:	463b      	mov	r3, r7
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <USB_EPStartXfer+0xe24>
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e021      	b.n	8005c50 <USB_EPStartXfer+0xe84>
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d11c      	bne.n	8005c50 <USB_EPStartXfer+0xe84>
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c26:	4413      	add	r3, r2
 8005c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	011a      	lsls	r2, r3, #4
 8005c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005c38:	4413      	add	r3, r2
 8005c3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c42:	463b      	mov	r3, r7
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c4e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c50:	463b      	mov	r3, r7
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 81a4 	beq.w	8005fa4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c5c:	1d3b      	adds	r3, r7, #4
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	463b      	mov	r3, r7
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <USB_EPStartXfer+0xebc>
 8005c7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10d      	bne.n	8005ca4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c88:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f040 8187 	bne.w	8005fa4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c96:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 8180 	bne.w	8005fa4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005ca4:	1d3b      	adds	r3, r7, #4
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	463b      	mov	r3, r7
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cbe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	463b      	mov	r3, r7
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	8013      	strh	r3, [r2, #0]
 8005ce8:	e15c      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005cea:	463b      	mov	r3, r7
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f040 8155 	bne.w	8005fa0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699a      	ldr	r2, [r3, #24]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d90e      	bls.n	8005d24 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8005d10:	463b      	mov	r3, r7
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	699a      	ldr	r2, [r3, #24]
 8005d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	619a      	str	r2, [r3, #24]
 8005d22:	e008      	b.n	8005d36 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8005d24:	463b      	mov	r3, r7
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8005d2e:	463b      	mov	r3, r7
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2200      	movs	r2, #0
 8005d34:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d36:	463b      	mov	r3, r7
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d16f      	bne.n	8005e20 <USB_EPStartXfer+0x1054>
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d58:	4413      	add	r3, r2
 8005d5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d5e:	463b      	mov	r3, r7
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	011a      	lsls	r2, r3, #4
 8005d66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d116      	bne.n	8005daa <USB_EPStartXfer+0xfde>
 8005d7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	e05f      	b.n	8005e6a <USB_EPStartXfer+0x109e>
 8005daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dae:	2b3e      	cmp	r3, #62	; 0x3e
 8005db0:	d818      	bhi.n	8005de4 <USB_EPStartXfer+0x1018>
 8005db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <USB_EPStartXfer+0x1006>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	3301      	adds	r3, #1
 8005dce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005de0:	801a      	strh	r2, [r3, #0]
 8005de2:	e042      	b.n	8005e6a <USB_EPStartXfer+0x109e>
 8005de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <USB_EPStartXfer+0x1038>
 8005dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	029b      	lsls	r3, r3, #10
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e024      	b.n	8005e6a <USB_EPStartXfer+0x109e>
 8005e20:	463b      	mov	r3, r7
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d11f      	bne.n	8005e6a <USB_EPStartXfer+0x109e>
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	4413      	add	r3, r2
 8005e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e48:	463b      	mov	r3, r7
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	011a      	lsls	r2, r3, #4
 8005e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e72:	463b      	mov	r3, r7
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d16f      	bne.n	8005f5c <USB_EPStartXfer+0x1190>
 8005e7c:	1d3b      	adds	r3, r7, #4
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e94:	4413      	add	r3, r2
 8005e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	011a      	lsls	r2, r3, #4
 8005ea2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d116      	bne.n	8005ee6 <USB_EPStartXfer+0x111a>
 8005eb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e05e      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eea:	2b3e      	cmp	r3, #62	; 0x3e
 8005eec:	d818      	bhi.n	8005f20 <USB_EPStartXfer+0x1154>
 8005eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef2:	085b      	lsrs	r3, r3, #1
 8005ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <USB_EPStartXfer+0x1142>
 8005f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	029b      	lsls	r3, r3, #10
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e041      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
 8005f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <USB_EPStartXfer+0x1174>
 8005f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f58:	801a      	strh	r2, [r3, #0]
 8005f5a:	e023      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	785b      	ldrb	r3, [r3, #1]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d11e      	bne.n	8005fa4 <USB_EPStartXfer+0x11d8>
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f76:	4413      	add	r3, r2
 8005f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f7c:	463b      	mov	r3, r7
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	011a      	lsls	r2, r3, #4
 8005f84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f88:	4413      	add	r3, r2
 8005f8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f9c:	801a      	strh	r2, [r3, #0]
 8005f9e:	e001      	b.n	8005fa4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e02e      	b.n	8006002 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fa4:	1d3b      	adds	r3, r7, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	463b      	mov	r3, r7
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fc2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fc6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fca:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fd2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fd6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	441a      	add	r2, r3
 8005fe8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d020      	beq.n	8006060 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006034:	81bb      	strh	r3, [r7, #12]
 8006036:	89bb      	ldrh	r3, [r7, #12]
 8006038:	f083 0310 	eor.w	r3, r3, #16
 800603c:	81bb      	strh	r3, [r7, #12]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]
 800605e:	e01f      	b.n	80060a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	81fb      	strh	r3, [r7, #14]
 8006078:	89fb      	ldrh	r3, [r7, #14]
 800607a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800607e:	81fb      	strh	r3, [r7, #14]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	89fb      	ldrh	r3, [r7, #14]
 800608c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609c:	b29b      	uxth	r3, r3
 800609e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr

080060ac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	7b1b      	ldrb	r3, [r3, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f040 809d 	bne.w	80061fa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d04c      	beq.n	8006162 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	823b      	strh	r3, [r7, #16]
 80060d6:	8a3b      	ldrh	r3, [r7, #16]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <USB_EPClearStall+0x6c>
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	81fb      	strh	r3, [r7, #14]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	441a      	add	r2, r3
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	78db      	ldrb	r3, [r3, #3]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d06c      	beq.n	80061fa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	b29b      	uxth	r3, r3
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	81bb      	strh	r3, [r7, #12]
 8006138:	89bb      	ldrh	r3, [r7, #12]
 800613a:	f083 0320 	eor.w	r3, r3, #32
 800613e:	81bb      	strh	r3, [r7, #12]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	89bb      	ldrh	r3, [r7, #12]
 800614c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615c:	b29b      	uxth	r3, r3
 800615e:	8013      	strh	r3, [r2, #0]
 8006160:	e04b      	b.n	80061fa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	82fb      	strh	r3, [r7, #22]
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d01b      	beq.n	80061b2 <USB_EPClearStall+0x106>
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006190:	82bb      	strh	r3, [r7, #20]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	8abb      	ldrh	r3, [r7, #20]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c8:	827b      	strh	r3, [r7, #18]
 80061ca:	8a7b      	ldrh	r3, [r7, #18]
 80061cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061d0:	827b      	strh	r3, [r7, #18]
 80061d2:	8a7b      	ldrh	r3, [r7, #18]
 80061d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d8:	827b      	strh	r3, [r7, #18]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	8a7b      	ldrh	r3, [r7, #18]
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	bc80      	pop	{r7}
 8006204:	4770      	bx	lr

08006206 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006206:	b480      	push	{r7}
 8006208:	b083      	sub	sp, #12
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2280      	movs	r2, #128	; 0x80
 800621c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr

0800622c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	bc80      	pop	{r7}
 8006252:	4770      	bx	lr

08006254 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006262:	b29b      	uxth	r3, r3
 8006264:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006266:	68fb      	ldr	r3, [r7, #12]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	bc80      	pop	{r7}
 8006286:	4770      	bx	lr

08006288 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006288:	b480      	push	{r7}
 800628a:	b08d      	sub	sp, #52	; 0x34
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	460b      	mov	r3, r1
 8006298:	80fb      	strh	r3, [r7, #6]
 800629a:	4613      	mov	r3, r2
 800629c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800629e:	88bb      	ldrh	r3, [r7, #4]
 80062a0:	3301      	adds	r3, #1
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	005a      	lsls	r2, r3, #1
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c0:	e01e      	b.n	8006300 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	3301      	adds	r3, #1
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	021b      	lsls	r3, r3, #8
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	3302      	adds	r3, #2
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	3302      	adds	r3, #2
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	3301      	adds	r3, #1
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80062fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fc:	3b01      	subs	r3, #1
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1dd      	bne.n	80062c2 <USB_WritePMA+0x3a>
  }
}
 8006306:	bf00      	nop
 8006308:	3734      	adds	r7, #52	; 0x34
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006310:	b480      	push	{r7}
 8006312:	b08b      	sub	sp, #44	; 0x2c
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	460b      	mov	r3, r1
 8006320:	80fb      	strh	r3, [r7, #6]
 8006322:	4613      	mov	r3, r2
 8006324:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006326:	88bb      	ldrh	r3, [r7, #4]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	005a      	lsls	r2, r3, #1
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006342:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	e01b      	b.n	8006382 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	3302      	adds	r3, #2
 8006356:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	b2da      	uxtb	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3301      	adds	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	3302      	adds	r3, #2
 800637a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	3b01      	subs	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e0      	bne.n	800634a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006388:	88bb      	ldrh	r3, [r7, #4]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	701a      	strb	r2, [r3, #0]
  }
}
 80063a4:	bf00      	nop
 80063a6:	372c      	adds	r7, #44	; 0x2c
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
	...

080063b0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80063bc:	2308      	movs	r3, #8
 80063be:	2203      	movs	r2, #3
 80063c0:	2181      	movs	r1, #129	; 0x81
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 fc99 	bl	8007cfa <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 80063ce:	2301      	movs	r3, #1
 80063d0:	2203      	movs	r2, #3
 80063d2:	2101      	movs	r1, #1
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fc90 	bl	8007cfa <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80063da:	2010      	movs	r0, #16
 80063dc:	f001 fda2 	bl	8007f24 <USBD_static_malloc>
 80063e0:	4602      	mov	r2, r0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 80063e8:	2301      	movs	r3, #1
 80063ea:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <USBD_HID_Init+0x68>)
 80063ec:	2101      	movs	r1, #1
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fd74 	bl	8007edc <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 80063fe:	2302      	movs	r3, #2
 8006400:	e005      	b.n	800640e <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006408:	2200      	movs	r2, #0
 800640a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200001f6 	.word	0x200001f6

0800641c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800642e:	2301      	movs	r3, #1
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <USBD_HID_DataOut+0x30>)
 8006432:	2101      	movs	r1, #1
 8006434:	f7fb ffad 	bl	8002392 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8006438:	4b04      	ldr	r3, [pc, #16]	; (800644c <USBD_HID_DataOut+0x30>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	4618      	mov	r0, r3
 800643e:	f7fa fe93 	bl	8001168 <SET_LEDS_Callback>

	return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	200001f6 	.word	0x200001f6

08006450 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800645c:	2181      	movs	r1, #129	; 0x81
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f001 fc71 	bl	8007d46 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006470:	2b00      	cmp	r3, #0
 8006472:	d009      	beq.n	8006488 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fd5e 	bl	8007f3c <USBD_static_free>
    pdev->pClassData = NULL;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d045      	beq.n	800654e <USBD_HID_Setup+0xba>
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	f040 80d3 	bne.w	800666e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	3b02      	subs	r3, #2
 80064ce:	2b09      	cmp	r3, #9
 80064d0:	d835      	bhi.n	800653e <USBD_HID_Setup+0xaa>
 80064d2:	a201      	add	r2, pc, #4	; (adr r2, 80064d8 <USBD_HID_Setup+0x44>)
 80064d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d8:	0800652f 	.word	0x0800652f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800653f 	.word	0x0800653f
 80064e4:	0800653f 	.word	0x0800653f
 80064e8:	0800653f 	.word	0x0800653f
 80064ec:	0800653f 	.word	0x0800653f
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	0800653f 	.word	0x0800653f
 80064f8:	0800651d 	.word	0x0800651d
 80064fc:	08006501 	.word	0x08006501
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	885b      	ldrh	r3, [r3, #2]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	461a      	mov	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	601a      	str	r2, [r3, #0]
          break;
 800650c:	e01e      	b.n	800654c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2201      	movs	r2, #1
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 f937 	bl	8007788 <USBD_CtlSendData>
          break;
 800651a:	e017      	b.n	800654c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	885b      	ldrh	r3, [r3, #2]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	b29b      	uxth	r3, r3
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]
          break;
 800652c:	e00e      	b.n	800654c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3304      	adds	r3, #4
 8006532:	2201      	movs	r2, #1
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 f926 	bl	8007788 <USBD_CtlSendData>
          break;
 800653c:	e006      	b.n	800654c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f8b7 	bl	80076b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006546:	2302      	movs	r3, #2
 8006548:	75fb      	strb	r3, [r7, #23]
          break;
 800654a:	bf00      	nop
      }
      break;
 800654c:	e096      	b.n	800667c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b0b      	cmp	r3, #11
 8006554:	f200 8083 	bhi.w	800665e <USBD_HID_Setup+0x1ca>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <USBD_HID_Setup+0xcc>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006591 	.word	0x08006591
 8006564:	0800665f 	.word	0x0800665f
 8006568:	0800665f 	.word	0x0800665f
 800656c:	0800665f 	.word	0x0800665f
 8006570:	0800665f 	.word	0x0800665f
 8006574:	0800665f 	.word	0x0800665f
 8006578:	080065b9 	.word	0x080065b9
 800657c:	0800665f 	.word	0x0800665f
 8006580:	0800665f 	.word	0x0800665f
 8006584:	0800665f 	.word	0x0800665f
 8006588:	08006611 	.word	0x08006611
 800658c:	08006639 	.word	0x08006639
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006596:	2b03      	cmp	r3, #3
 8006598:	d107      	bne.n	80065aa <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800659a:	f107 030e 	add.w	r3, r7, #14
 800659e:	2202      	movs	r2, #2
 80065a0:	4619      	mov	r1, r3
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f8f0 	bl	8007788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065a8:	e060      	b.n	800666c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065aa:	6839      	ldr	r1, [r7, #0]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 f881 	bl	80076b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80065b2:	2302      	movs	r3, #2
 80065b4:	75fb      	strb	r3, [r7, #23]
          break;
 80065b6:	e059      	b.n	800666c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	0a1b      	lsrs	r3, r3, #8
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b22      	cmp	r3, #34	; 0x22
 80065c2:	d108      	bne.n	80065d6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	88db      	ldrh	r3, [r3, #6]
 80065c8:	2b73      	cmp	r3, #115	; 0x73
 80065ca:	bf28      	it	cs
 80065cc:	2373      	movcs	r3, #115	; 0x73
 80065ce:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 80065d0:	4b2d      	ldr	r3, [pc, #180]	; (8006688 <USBD_HID_Setup+0x1f4>)
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	e015      	b.n	8006602 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	885b      	ldrh	r3, [r3, #2]
 80065da:	0a1b      	lsrs	r3, r3, #8
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b21      	cmp	r3, #33	; 0x21
 80065e0:	d108      	bne.n	80065f4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80065e2:	4b2a      	ldr	r3, [pc, #168]	; (800668c <USBD_HID_Setup+0x1f8>)
 80065e4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	88db      	ldrh	r3, [r3, #6]
 80065ea:	2b09      	cmp	r3, #9
 80065ec:	bf28      	it	cs
 80065ee:	2309      	movcs	r3, #9
 80065f0:	83fb      	strh	r3, [r7, #30]
 80065f2:	e006      	b.n	8006602 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 f85c 	bl	80076b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80065fc:	2302      	movs	r3, #2
 80065fe:	75fb      	strb	r3, [r7, #23]
            break;
 8006600:	e034      	b.n	800666c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006602:	8bfb      	ldrh	r3, [r7, #30]
 8006604:	461a      	mov	r2, r3
 8006606:	69b9      	ldr	r1, [r7, #24]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 f8bd 	bl	8007788 <USBD_CtlSendData>
          break;
 800660e:	e02d      	b.n	800666c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006616:	2b03      	cmp	r3, #3
 8006618:	d107      	bne.n	800662a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3308      	adds	r3, #8
 800661e:	2201      	movs	r2, #1
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 f8b0 	bl	8007788 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006628:	e020      	b.n	800666c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f001 f841 	bl	80076b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006632:	2302      	movs	r3, #2
 8006634:	75fb      	strb	r3, [r7, #23]
          break;
 8006636:	e019      	b.n	800666c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663e:	2b03      	cmp	r3, #3
 8006640:	d106      	bne.n	8006650 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	885b      	ldrh	r3, [r3, #2]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800664e:	e00d      	b.n	800666c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f82e 	bl	80076b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	75fb      	strb	r3, [r7, #23]
          break;
 800665c:	e006      	b.n	800666c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f827 	bl	80076b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006666:	2302      	movs	r3, #2
 8006668:	75fb      	strb	r3, [r7, #23]
          break;
 800666a:	bf00      	nop
      }
      break;
 800666c:	e006      	b.n	800667c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 f81f 	bl	80076b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006676:	2302      	movs	r3, #2
 8006678:	75fb      	strb	r3, [r7, #23]
      break;
 800667a:	bf00      	nop
  }

  return ret;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200000e4 	.word	0x200000e4
 800668c:	200000cc 	.word	0x200000cc

08006690 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	4613      	mov	r3, r2
 800669c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d10c      	bne.n	80066ca <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	7b1b      	ldrb	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d108      	bne.n	80066ca <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2201      	movs	r2, #1
 80066bc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	2181      	movs	r1, #129	; 0x81
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f001 fbe6 	bl	8007e96 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2229      	movs	r2, #41	; 0x29
 80066e0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80066e2:	4b03      	ldr	r3, [pc, #12]	; (80066f0 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	20000048 	.word	0x20000048

080066f4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2229      	movs	r2, #41	; 0x29
 8006700:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006702:	4b03      	ldr	r3, [pc, #12]	; (8006710 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	bc80      	pop	{r7}
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	20000074 	.word	0x20000074

08006714 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2229      	movs	r2, #41	; 0x29
 8006720:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006722:	4b03      	ldr	r3, [pc, #12]	; (8006730 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	200000a0 	.word	0x200000a0

08006734 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8006740:	f7fa fae8 	bl	8000d14 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674a:	2200      	movs	r2, #0
 800674c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	220a      	movs	r2, #10
 8006764:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006766:	4b03      	ldr	r3, [pc, #12]	; (8006774 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006768:	4618      	mov	r0, r3
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	200000d8 	.word	0x200000d8

08006778 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	e01a      	b.n	80067c6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	79fa      	ldrb	r2, [r7, #7]
 80067bc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 fa38 	bl	8007c34 <USBD_LL_Init>

  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b085      	sub	sp, #20
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d006      	beq.n	80067f0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	e001      	b.n	80067f4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 fa5b 	bl	8007cc4 <USBD_LL_Start>

  return USBD_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3708      	adds	r7, #8
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006838:	2302      	movs	r3, #2
 800683a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00c      	beq.n	8006860 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	4611      	mov	r1, r2
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b082      	sub	sp, #8
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	78fa      	ldrb	r2, [r7, #3]
 8006880:	4611      	mov	r1, r2
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 feca 	bl	800763c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d00c      	beq.n	80068e6 <USBD_LL_SetupStage+0x56>
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d302      	bcc.n	80068d6 <USBD_LL_SetupStage+0x46>
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d010      	beq.n	80068f6 <USBD_LL_SetupStage+0x66>
 80068d4:	e017      	b.n	8006906 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f9ca 	bl	8006c78 <USBD_StdDevReq>
      break;
 80068e4:	e01a      	b.n	800691c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa2c 	bl	8006d4c <USBD_StdItfReq>
      break;
 80068f4:	e012      	b.n	800691c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068fc:	4619      	mov	r1, r3
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa6a 	bl	8006dd8 <USBD_StdEPReq>
      break;
 8006904:	e00a      	b.n	800691c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800690c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006910:	b2db      	uxtb	r3, r3
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fa35 	bl	8007d84 <USBD_LL_StallEP>
      break;
 800691a:	bf00      	nop
  }

  return USBD_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b086      	sub	sp, #24
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	460b      	mov	r3, r1
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d14b      	bne.n	80069d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006940:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006948:	2b03      	cmp	r3, #3
 800694a:	d134      	bne.n	80069b6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	429a      	cmp	r2, r3
 8006956:	d919      	bls.n	800698c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	1ad2      	subs	r2, r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800696e:	429a      	cmp	r2, r3
 8006970:	d203      	bcs.n	800697a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006976:	b29b      	uxth	r3, r3
 8006978:	e002      	b.n	8006980 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 ff2d 	bl	80077e4 <USBD_CtlContinueRx>
 800698a:	e038      	b.n	80069fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800699e:	2b03      	cmp	r3, #3
 80069a0:	d105      	bne.n	80069ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 ff2a 	bl	8007808 <USBD_CtlSendStatus>
 80069b4:	e023      	b.n	80069fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069bc:	2b05      	cmp	r3, #5
 80069be:	d11e      	bne.n	80069fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80069c8:	2100      	movs	r1, #0
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f001 f9da 	bl	8007d84 <USBD_LL_StallEP>
 80069d0:	e015      	b.n	80069fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	d108      	bne.n	80069fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	7afa      	ldrb	r2, [r7, #11]
 80069f2:	4611      	mov	r1, r2
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	4798      	blx	r3
 80069f8:	e001      	b.n	80069fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069fa:	2302      	movs	r3, #2
 80069fc:	e000      	b.n	8006a00 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	460b      	mov	r3, r1
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d17f      	bne.n	8006b1c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d15c      	bne.n	8006ae6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d915      	bls.n	8006a64 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	1ad2      	subs	r2, r2, r3
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f000 feb5 	bl	80077c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a56:	2300      	movs	r3, #0
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 fa3d 	bl	8007edc <USBD_LL_PrepareReceive>
 8006a62:	e04e      	b.n	8006b02 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	6912      	ldr	r2, [r2, #16]
 8006a6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a70:	fb02 f201 	mul.w	r2, r2, r1
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d11c      	bne.n	8006ab4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d316      	bcc.n	8006ab4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d20f      	bcs.n	8006ab4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 fe91 	bl	80077c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2100      	movs	r1, #0
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 fa15 	bl	8007edc <USBD_LL_PrepareReceive>
 8006ab2:	e026      	b.n	8006b02 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d00a      	beq.n	8006ad6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d105      	bne.n	8006ad6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 f953 	bl	8007d84 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fea5 	bl	800782e <USBD_CtlReceiveStatus>
 8006ae4:	e00d      	b.n	8006b02 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aec:	2b04      	cmp	r3, #4
 8006aee:	d004      	beq.n	8006afa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 f941 	bl	8007d84 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d11d      	bne.n	8006b48 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fe83 	bl	8006818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b1a:	e015      	b.n	8006b48 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d108      	bne.n	8006b44 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	7afa      	ldrb	r2, [r7, #11]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	4798      	blx	r3
 8006b42:	e001      	b.n	8006b48 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	e000      	b.n	8006b4a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3718      	adds	r7, #24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b5a:	2340      	movs	r3, #64	; 0x40
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2100      	movs	r1, #0
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f8ca 	bl	8007cfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2240      	movs	r2, #64	; 0x40
 8006b72:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b76:	2340      	movs	r3, #64	; 0x40
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	; 0x80
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f8bc 	bl	8007cfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2240      	movs	r2, #64	; 0x40
 8006b8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d009      	beq.n	8006bca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6852      	ldr	r2, [r2, #4]
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
  }

  return USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	78fa      	ldrb	r2, [r7, #3]
 8006be4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2204      	movs	r2, #4
 8006c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bc80      	pop	{r7}
 8006c18:	4770      	bx	lr

08006c1a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c28:	2b04      	cmp	r3, #4
 8006c2a:	d105      	bne.n	8006c38 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bc80      	pop	{r7}
 8006c42:	4770      	bx	lr

08006c44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d10b      	bne.n	8006c6e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d004      	beq.n	8006c9c <USBD_StdDevReq+0x24>
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d002      	beq.n	8006c9c <USBD_StdDevReq+0x24>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <USBD_StdDevReq+0x34>
 8006c9a:	e04c      	b.n	8006d36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	6839      	ldr	r1, [r7, #0]
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
      break;
 8006caa:	e049      	b.n	8006d40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	785b      	ldrb	r3, [r3, #1]
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d83a      	bhi.n	8006d2a <USBD_StdDevReq+0xb2>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USBD_StdDevReq+0x44>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d0d 	.word	0x08006d0d
 8006cc0:	08006d21 	.word	0x08006d21
 8006cc4:	08006d2b 	.word	0x08006d2b
 8006cc8:	08006d17 	.word	0x08006d17
 8006ccc:	08006d2b 	.word	0x08006d2b
 8006cd0:	08006cef 	.word	0x08006cef
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006d2b 	.word	0x08006d2b
 8006cdc:	08006d03 	.word	0x08006d03
 8006ce0:	08006cf9 	.word	0x08006cf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9d4 	bl	8007094 <USBD_GetDescriptor>
          break;
 8006cec:	e022      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb37 	bl	8007364 <USBD_SetAddress>
          break;
 8006cf6:	e01d      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fb74 	bl	80073e8 <USBD_SetConfig>
          break;
 8006d00:	e018      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fbfd 	bl	8007504 <USBD_GetConfig>
          break;
 8006d0a:	e013      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fc2c 	bl	800756c <USBD_GetStatus>
          break;
 8006d14:	e00e      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fc5a 	bl	80075d2 <USBD_SetFeature>
          break;
 8006d1e:	e009      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fc69 	bl	80075fa <USBD_ClrFeature>
          break;
 8006d28:	e004      	b.n	8006d34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006d2a:	6839      	ldr	r1, [r7, #0]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fcc1 	bl	80076b4 <USBD_CtlError>
          break;
 8006d32:	bf00      	nop
      }
      break;
 8006d34:	e004      	b.n	8006d40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fcbb 	bl	80076b4 <USBD_CtlError>
      break;
 8006d3e:	bf00      	nop
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop

08006d4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d003      	beq.n	8006d6e <USBD_StdItfReq+0x22>
 8006d66:	2b40      	cmp	r3, #64	; 0x40
 8006d68:	d001      	beq.n	8006d6e <USBD_StdItfReq+0x22>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d12a      	bne.n	8006dc4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d74:	3b01      	subs	r3, #1
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d81d      	bhi.n	8006db6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	889b      	ldrh	r3, [r3, #4]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d813      	bhi.n	8006dac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	88db      	ldrh	r3, [r3, #6]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d110      	bne.n	8006dc0 <USBD_StdItfReq+0x74>
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10d      	bne.n	8006dc0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fd2f 	bl	8007808 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006daa:	e009      	b.n	8006dc0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006dac:	6839      	ldr	r1, [r7, #0]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fc80 	bl	80076b4 <USBD_CtlError>
          break;
 8006db4:	e004      	b.n	8006dc0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fc7b 	bl	80076b4 <USBD_CtlError>
          break;
 8006dbe:	e000      	b.n	8006dc2 <USBD_StdItfReq+0x76>
          break;
 8006dc0:	bf00      	nop
      }
      break;
 8006dc2:	e004      	b.n	8006dce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fc74 	bl	80076b4 <USBD_CtlError>
      break;
 8006dcc:	bf00      	nop
  }

  return USBD_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	889b      	ldrh	r3, [r3, #4]
 8006dea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006df4:	2b20      	cmp	r3, #32
 8006df6:	d004      	beq.n	8006e02 <USBD_StdEPReq+0x2a>
 8006df8:	2b40      	cmp	r3, #64	; 0x40
 8006dfa:	d002      	beq.n	8006e02 <USBD_StdEPReq+0x2a>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d008      	beq.n	8006e12 <USBD_StdEPReq+0x3a>
 8006e00:	e13d      	b.n	800707e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
      break;
 8006e10:	e13a      	b.n	8007088 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d10a      	bne.n	8006e34 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	e12a      	b.n	800708a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d03e      	beq.n	8006eba <USBD_StdEPReq+0xe2>
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d002      	beq.n	8006e46 <USBD_StdEPReq+0x6e>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d070      	beq.n	8006f26 <USBD_StdEPReq+0x14e>
 8006e44:	e115      	b.n	8007072 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d002      	beq.n	8006e56 <USBD_StdEPReq+0x7e>
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d015      	beq.n	8006e80 <USBD_StdEPReq+0xa8>
 8006e54:	e02b      	b.n	8006eae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00c      	beq.n	8006e76 <USBD_StdEPReq+0x9e>
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b80      	cmp	r3, #128	; 0x80
 8006e60:	d009      	beq.n	8006e76 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 ff8c 	bl	8007d84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e6c:	2180      	movs	r1, #128	; 0x80
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 ff88 	bl	8007d84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e74:	e020      	b.n	8006eb8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fc1b 	bl	80076b4 <USBD_CtlError>
              break;
 8006e7e:	e01b      	b.n	8006eb8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	885b      	ldrh	r3, [r3, #2]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10e      	bne.n	8006ea6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <USBD_StdEPReq+0xce>
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d008      	beq.n	8006ea6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e9c:	7bbb      	ldrb	r3, [r7, #14]
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 ff6f 	bl	8007d84 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fcae 	bl	8007808 <USBD_CtlSendStatus>

              break;
 8006eac:	e004      	b.n	8006eb8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fbff 	bl	80076b4 <USBD_CtlError>
              break;
 8006eb6:	bf00      	nop
          }
          break;
 8006eb8:	e0e0      	b.n	800707c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d002      	beq.n	8006eca <USBD_StdEPReq+0xf2>
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d015      	beq.n	8006ef4 <USBD_StdEPReq+0x11c>
 8006ec8:	e026      	b.n	8006f18 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00c      	beq.n	8006eea <USBD_StdEPReq+0x112>
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	2b80      	cmp	r3, #128	; 0x80
 8006ed4:	d009      	beq.n	8006eea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 ff52 	bl	8007d84 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 ff4e 	bl	8007d84 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ee8:	e01c      	b.n	8006f24 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 fbe1 	bl	80076b4 <USBD_CtlError>
              break;
 8006ef2:	e017      	b.n	8006f24 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	885b      	ldrh	r3, [r3, #2]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d112      	bne.n	8006f22 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 ff59 	bl	8007dc2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fc79 	bl	8007808 <USBD_CtlSendStatus>
              }
              break;
 8006f16:	e004      	b.n	8006f22 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fbca 	bl	80076b4 <USBD_CtlError>
              break;
 8006f20:	e000      	b.n	8006f24 <USBD_StdEPReq+0x14c>
              break;
 8006f22:	bf00      	nop
          }
          break;
 8006f24:	e0aa      	b.n	800707c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d002      	beq.n	8006f36 <USBD_StdEPReq+0x15e>
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d032      	beq.n	8006f9a <USBD_StdEPReq+0x1c2>
 8006f34:	e097      	b.n	8007066 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <USBD_StdEPReq+0x174>
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	2b80      	cmp	r3, #128	; 0x80
 8006f40:	d004      	beq.n	8006f4c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006f42:	6839      	ldr	r1, [r7, #0]
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fbb5 	bl	80076b4 <USBD_CtlError>
                break;
 8006f4a:	e091      	b.n	8007070 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da0b      	bge.n	8006f6c <USBD_StdEPReq+0x194>
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	3310      	adds	r3, #16
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	3304      	adds	r3, #4
 8006f6a:	e00b      	b.n	8006f84 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	3304      	adds	r3, #4
 8006f84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	4619      	mov	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fbf8 	bl	8007788 <USBD_CtlSendData>
              break;
 8006f98:	e06a      	b.n	8007070 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	da11      	bge.n	8006fc6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	f003 020f 	and.w	r2, r3, #15
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	440b      	add	r3, r1
 8006fb4:	3318      	adds	r3, #24
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d117      	bne.n	8006fec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fb78 	bl	80076b4 <USBD_CtlError>
                  break;
 8006fc4:	e054      	b.n	8007070 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	f003 020f 	and.w	r2, r3, #15
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d104      	bne.n	8006fec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fb65 	bl	80076b4 <USBD_CtlError>
                  break;
 8006fea:	e041      	b.n	8007070 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da0b      	bge.n	800700c <USBD_StdEPReq+0x234>
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	3310      	adds	r3, #16
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	3304      	adds	r3, #4
 800700a:	e00b      	b.n	8007024 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	4413      	add	r3, r2
 8007022:	3304      	adds	r3, #4
 8007024:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <USBD_StdEPReq+0x25a>
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b80      	cmp	r3, #128	; 0x80
 8007030:	d103      	bne.n	800703a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e00e      	b.n	8007058 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fede 	bl	8007e00 <USBD_LL_IsStallEP>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2201      	movs	r2, #1
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	e002      	b.n	8007058 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2202      	movs	r2, #2
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fb92 	bl	8007788 <USBD_CtlSendData>
              break;
 8007064:	e004      	b.n	8007070 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fb23 	bl	80076b4 <USBD_CtlError>
              break;
 800706e:	bf00      	nop
          }
          break;
 8007070:	e004      	b.n	800707c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fb1d 	bl	80076b4 <USBD_CtlError>
          break;
 800707a:	bf00      	nop
      }
      break;
 800707c:	e004      	b.n	8007088 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb17 	bl	80076b4 <USBD_CtlError>
      break;
 8007086:	bf00      	nop
  }

  return ret;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	885b      	ldrh	r3, [r3, #2]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	2b06      	cmp	r3, #6
 80070b6:	f200 8128 	bhi.w	800730a <USBD_GetDescriptor+0x276>
 80070ba:	a201      	add	r2, pc, #4	; (adr r2, 80070c0 <USBD_GetDescriptor+0x2c>)
 80070bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	08007135 	.word	0x08007135
 80070cc:	0800730b 	.word	0x0800730b
 80070d0:	0800730b 	.word	0x0800730b
 80070d4:	080072ab 	.word	0x080072ab
 80070d8:	080072d7 	.word	0x080072d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
      break;
 80070f2:	e112      	b.n	800731a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7c1b      	ldrb	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10d      	bne.n	8007118 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f107 0208 	add.w	r2, r7, #8
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	2202      	movs	r2, #2
 8007114:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007116:	e100      	b.n	800731a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f107 0208 	add.w	r2, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	2202      	movs	r2, #2
 8007130:	701a      	strb	r2, [r3, #0]
      break;
 8007132:	e0f2      	b.n	800731a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	885b      	ldrh	r3, [r3, #2]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b05      	cmp	r3, #5
 800713c:	f200 80ac 	bhi.w	8007298 <USBD_GetDescriptor+0x204>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <USBD_GetDescriptor+0xb4>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007161 	.word	0x08007161
 800714c:	08007195 	.word	0x08007195
 8007150:	080071c9 	.word	0x080071c9
 8007154:	080071fd 	.word	0x080071fd
 8007158:	08007231 	.word	0x08007231
 800715c:	08007265 	.word	0x08007265
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007182:	e091      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa94 	bl	80076b4 <USBD_CtlError>
            err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
          break;
 8007192:	e089      	b.n	80072a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	7c12      	ldrb	r2, [r2, #16]
 80071ac:	f107 0108 	add.w	r1, r7, #8
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071b6:	e077      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa7a 	bl	80076b4 <USBD_CtlError>
            err++;
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	3301      	adds	r3, #1
 80071c4:	72fb      	strb	r3, [r7, #11]
          break;
 80071c6:	e06f      	b.n	80072a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	f107 0108 	add.w	r1, r7, #8
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ea:	e05d      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa60 	bl	80076b4 <USBD_CtlError>
            err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
          break;
 80071fa:	e055      	b.n	80072a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7c12      	ldrb	r2, [r2, #16]
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800721e:	e043      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa46 	bl	80076b4 <USBD_CtlError>
            err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
          break;
 800722e:	e03b      	b.n	80072a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7c12      	ldrb	r2, [r2, #16]
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007252:	e029      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa2c 	bl	80076b4 <USBD_CtlError>
            err++;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	3301      	adds	r3, #1
 8007260:	72fb      	strb	r3, [r7, #11]
          break;
 8007262:	e021      	b.n	80072a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007286:	e00f      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa12 	bl	80076b4 <USBD_CtlError>
            err++;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	3301      	adds	r3, #1
 8007294:	72fb      	strb	r3, [r7, #11]
          break;
 8007296:	e007      	b.n	80072a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa0a 	bl	80076b4 <USBD_CtlError>
          err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80072a6:	e038      	b.n	800731a <USBD_GetDescriptor+0x286>
 80072a8:	e037      	b.n	800731a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	7c1b      	ldrb	r3, [r3, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	f107 0208 	add.w	r2, r7, #8
 80072be:	4610      	mov	r0, r2
 80072c0:	4798      	blx	r3
 80072c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072c4:	e029      	b.n	800731a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9f3 	bl	80076b4 <USBD_CtlError>
        err++;
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	3301      	adds	r3, #1
 80072d2:	72fb      	strb	r3, [r7, #11]
      break;
 80072d4:	e021      	b.n	800731a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7c1b      	ldrb	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	f107 0208 	add.w	r2, r7, #8
 80072ea:	4610      	mov	r0, r2
 80072ec:	4798      	blx	r3
 80072ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	2207      	movs	r2, #7
 80072f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072f8:	e00f      	b.n	800731a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9d9 	bl	80076b4 <USBD_CtlError>
        err++;
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	3301      	adds	r3, #1
 8007306:	72fb      	strb	r3, [r7, #11]
      break;
 8007308:	e007      	b.n	800731a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f9d1 	bl	80076b4 <USBD_CtlError>
      err++;
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	3301      	adds	r3, #1
 8007316:	72fb      	strb	r3, [r7, #11]
      break;
 8007318:	bf00      	nop
  }

  if (err != 0U)
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11c      	bne.n	800735a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007320:	893b      	ldrh	r3, [r7, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d011      	beq.n	800734a <USBD_GetDescriptor+0x2b6>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	88db      	ldrh	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00d      	beq.n	800734a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88da      	ldrh	r2, [r3, #6]
 8007332:	893b      	ldrh	r3, [r7, #8]
 8007334:	4293      	cmp	r3, r2
 8007336:	bf28      	it	cs
 8007338:	4613      	movcs	r3, r2
 800733a:	b29b      	uxth	r3, r3
 800733c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800733e:	893b      	ldrh	r3, [r7, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa1f 	bl	8007788 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	88db      	ldrh	r3, [r3, #6]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fa58 	bl	8007808 <USBD_CtlSendStatus>
 8007358:	e000      	b.n	800735c <USBD_GetDescriptor+0x2c8>
    return;
 800735a:	bf00      	nop
    }
  }
}
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop

08007364 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	889b      	ldrh	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d130      	bne.n	80073d8 <USBD_SetAddress+0x74>
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	88db      	ldrh	r3, [r3, #6]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d12c      	bne.n	80073d8 <USBD_SetAddress+0x74>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	2b7f      	cmp	r3, #127	; 0x7f
 8007384:	d828      	bhi.n	80073d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	885b      	ldrh	r3, [r3, #2]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007390:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007398:	2b03      	cmp	r3, #3
 800739a:	d104      	bne.n	80073a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f988 	bl	80076b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	e01c      	b.n	80073e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fd50 	bl	8007e58 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa25 	bl	8007808 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073cc:	e008      	b.n	80073e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d6:	e003      	b.n	80073e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f96a 	bl	80076b4 <USBD_CtlError>
  }
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	885b      	ldrh	r3, [r3, #2]
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	4b41      	ldr	r3, [pc, #260]	; (8007500 <USBD_SetConfig+0x118>)
 80073fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073fc:	4b40      	ldr	r3, [pc, #256]	; (8007500 <USBD_SetConfig+0x118>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d904      	bls.n	800740e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f954 	bl	80076b4 <USBD_CtlError>
 800740c:	e075      	b.n	80074fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	2b02      	cmp	r3, #2
 8007416:	d002      	beq.n	800741e <USBD_SetConfig+0x36>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d023      	beq.n	8007464 <USBD_SetConfig+0x7c>
 800741c:	e062      	b.n	80074e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <USBD_SetConfig+0x118>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01a      	beq.n	800745c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007426:	4b36      	ldr	r3, [pc, #216]	; (8007500 <USBD_SetConfig+0x118>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2203      	movs	r2, #3
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007438:	4b31      	ldr	r3, [pc, #196]	; (8007500 <USBD_SetConfig+0x118>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	4619      	mov	r1, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff f9f4 	bl	800682c <USBD_SetClassConfig>
 8007444:	4603      	mov	r3, r0
 8007446:	2b02      	cmp	r3, #2
 8007448:	d104      	bne.n	8007454 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f931 	bl	80076b4 <USBD_CtlError>
            return;
 8007452:	e052      	b.n	80074fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f9d7 	bl	8007808 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800745a:	e04e      	b.n	80074fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9d3 	bl	8007808 <USBD_CtlSendStatus>
        break;
 8007462:	e04a      	b.n	80074fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007464:	4b26      	ldr	r3, [pc, #152]	; (8007500 <USBD_SetConfig+0x118>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d112      	bne.n	8007492 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007474:	4b22      	ldr	r3, [pc, #136]	; (8007500 <USBD_SetConfig+0x118>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800747e:	4b20      	ldr	r3, [pc, #128]	; (8007500 <USBD_SetConfig+0x118>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f7ff f9f0 	bl	800686a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9bc 	bl	8007808 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007490:	e033      	b.n	80074fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <USBD_SetConfig+0x118>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	d01d      	beq.n	80074dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff f9de 	bl	800686a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80074ae:	4b14      	ldr	r3, [pc, #80]	; (8007500 <USBD_SetConfig+0x118>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <USBD_SetConfig+0x118>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7ff f9b4 	bl	800682c <USBD_SetClassConfig>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d104      	bne.n	80074d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 f8f1 	bl	80076b4 <USBD_CtlError>
            return;
 80074d2:	e012      	b.n	80074fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f997 	bl	8007808 <USBD_CtlSendStatus>
        break;
 80074da:	e00e      	b.n	80074fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f993 	bl	8007808 <USBD_CtlSendStatus>
        break;
 80074e2:	e00a      	b.n	80074fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8e4 	bl	80076b4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80074ec:	4b04      	ldr	r3, [pc, #16]	; (8007500 <USBD_SetConfig+0x118>)
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	4619      	mov	r1, r3
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7ff f9b9 	bl	800686a <USBD_ClrClassConfig>
        break;
 80074f8:	bf00      	nop
    }
  }
}
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	200001f7 	.word	0x200001f7

08007504 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	88db      	ldrh	r3, [r3, #6]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d004      	beq.n	8007520 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8cb 	bl	80076b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800751e:	e021      	b.n	8007564 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007526:	2b01      	cmp	r3, #1
 8007528:	db17      	blt.n	800755a <USBD_GetConfig+0x56>
 800752a:	2b02      	cmp	r3, #2
 800752c:	dd02      	ble.n	8007534 <USBD_GetConfig+0x30>
 800752e:	2b03      	cmp	r3, #3
 8007530:	d00b      	beq.n	800754a <USBD_GetConfig+0x46>
 8007532:	e012      	b.n	800755a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3308      	adds	r3, #8
 800753e:	2201      	movs	r2, #1
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f920 	bl	8007788 <USBD_CtlSendData>
        break;
 8007548:	e00c      	b.n	8007564 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	2201      	movs	r2, #1
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f918 	bl	8007788 <USBD_CtlSendData>
        break;
 8007558:	e004      	b.n	8007564 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f8a9 	bl	80076b4 <USBD_CtlError>
        break;
 8007562:	bf00      	nop
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757c:	3b01      	subs	r3, #1
 800757e:	2b02      	cmp	r3, #2
 8007580:	d81e      	bhi.n	80075c0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	88db      	ldrh	r3, [r3, #6]
 8007586:	2b02      	cmp	r3, #2
 8007588:	d004      	beq.n	8007594 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f891 	bl	80076b4 <USBD_CtlError>
        break;
 8007592:	e01a      	b.n	80075ca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f043 0202 	orr.w	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	330c      	adds	r3, #12
 80075b4:	2202      	movs	r2, #2
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f8e5 	bl	8007788 <USBD_CtlSendData>
      break;
 80075be:	e004      	b.n	80075ca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f876 	bl	80076b4 <USBD_CtlError>
      break;
 80075c8:	bf00      	nop
  }
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	885b      	ldrh	r3, [r3, #2]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d106      	bne.n	80075f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f90b 	bl	8007808 <USBD_CtlSendStatus>
  }
}
 80075f2:	bf00      	nop
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760a:	3b01      	subs	r3, #1
 800760c:	2b02      	cmp	r3, #2
 800760e:	d80b      	bhi.n	8007628 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	885b      	ldrh	r3, [r3, #2]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d10c      	bne.n	8007632 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f8f1 	bl	8007808 <USBD_CtlSendStatus>
      }
      break;
 8007626:	e004      	b.n	8007632 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f842 	bl	80076b4 <USBD_CtlError>
      break;
 8007630:	e000      	b.n	8007634 <USBD_ClrFeature+0x3a>
      break;
 8007632:	bf00      	nop
  }
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	785a      	ldrb	r2, [r3, #1]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	3302      	adds	r3, #2
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	b29a      	uxth	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	3303      	adds	r3, #3
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29b      	uxth	r3, r3
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b29b      	uxth	r3, r3
 800766a:	4413      	add	r3, r2
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	3304      	adds	r3, #4
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b29a      	uxth	r2, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3305      	adds	r3, #5
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	4413      	add	r3, r2
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	3306      	adds	r3, #6
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	b29a      	uxth	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	3307      	adds	r3, #7
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	b29b      	uxth	r3, r3
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	80da      	strh	r2, [r3, #6]

}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb5f 	bl	8007d84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fb5b 	bl	8007d84 <USBD_LL_StallEP>
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	60f8      	str	r0, [r7, #12]
 80076de:	60b9      	str	r1, [r7, #8]
 80076e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d032      	beq.n	8007752 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f834 	bl	800775a <USBD_GetLen>
 80076f2:	4603      	mov	r3, r0
 80076f4:	3301      	adds	r3, #1
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	005b      	lsls	r3, r3, #1
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	75fa      	strb	r2, [r7, #23]
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7812      	ldrb	r2, [r2, #0]
 8007710:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	75fa      	strb	r2, [r7, #23]
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	2203      	movs	r2, #3
 8007720:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007722:	e012      	b.n	800774a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	60fa      	str	r2, [r7, #12]
 800772a:	7dfa      	ldrb	r2, [r7, #23]
 800772c:	1c51      	adds	r1, r2, #1
 800772e:	75f9      	strb	r1, [r7, #23]
 8007730:	4611      	mov	r1, r2
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	440a      	add	r2, r1
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	75fa      	strb	r2, [r7, #23]
 8007740:	461a      	mov	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	4413      	add	r3, r2
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e8      	bne.n	8007724 <USBD_GetString+0x4e>
    }
  }
}
 8007752:	bf00      	nop
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007766:	e005      	b.n	8007774 <USBD_GetLen+0x1a>
  {
    len++;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	3301      	adds	r3, #1
 800776c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3301      	adds	r3, #1
 8007772:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f5      	bne.n	8007768 <USBD_GetLen+0xe>
  }

  return len;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr

08007788 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2202      	movs	r2, #2
 800779a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800779e:	88fa      	ldrh	r2, [r7, #6]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80077a4:	88fa      	ldrh	r2, [r7, #6]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fb70 	bl	8007e96 <USBD_LL_Transmit>

  return USBD_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	4613      	mov	r3, r2
 80077cc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fb5e 	bl	8007e96 <USBD_LL_Transmit>

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	2100      	movs	r1, #0
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fb6f 	bl	8007edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2204      	movs	r2, #4
 8007814:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007818:	2300      	movs	r3, #0
 800781a:	2200      	movs	r2, #0
 800781c:	2100      	movs	r1, #0
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb39 	bl	8007e96 <USBD_LL_Transmit>

  return USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2205      	movs	r2, #5
 800783a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800783e:	2300      	movs	r3, #0
 8007840:	2200      	movs	r2, #0
 8007842:	2100      	movs	r1, #0
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fb49 	bl	8007edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007858:	2200      	movs	r2, #0
 800785a:	490e      	ldr	r1, [pc, #56]	; (8007894 <MX_USB_DEVICE_Init+0x40>)
 800785c:	480e      	ldr	r0, [pc, #56]	; (8007898 <MX_USB_DEVICE_Init+0x44>)
 800785e:	f7fe ff8b 	bl	8006778 <USBD_Init>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007868:	f7f9 fb2f 	bl	8000eca <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800786c:	490b      	ldr	r1, [pc, #44]	; (800789c <MX_USB_DEVICE_Init+0x48>)
 800786e:	480a      	ldr	r0, [pc, #40]	; (8007898 <MX_USB_DEVICE_Init+0x44>)
 8007870:	f7fe ffad 	bl	80067ce <USBD_RegisterClass>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800787a:	f7f9 fb26 	bl	8000eca <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800787e:	4806      	ldr	r0, [pc, #24]	; (8007898 <MX_USB_DEVICE_Init+0x44>)
 8007880:	f7fe ffbe 	bl	8006800 <USBD_Start>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800788a:	f7f9 fb1e 	bl	8000eca <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800788e:	bf00      	nop
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000158 	.word	0x20000158
 8007898:	20000338 	.word	0x20000338
 800789c:	20000010 	.word	0x20000010

080078a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2212      	movs	r2, #18
 80078b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bc80      	pop	{r7}
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	20000174 	.word	0x20000174

080078c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2204      	movs	r2, #4
 80078d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000188 	.word	0x20000188

080078e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4907      	ldr	r1, [pc, #28]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
 80078fe:	4808      	ldr	r0, [pc, #32]	; (8007920 <USBD_FS_ProductStrDescriptor+0x38>)
 8007900:	f7ff fee9 	bl	80076d6 <USBD_GetString>
 8007904:	e004      	b.n	8007910 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	4904      	ldr	r1, [pc, #16]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
 800790a:	4805      	ldr	r0, [pc, #20]	; (8007920 <USBD_FS_ProductStrDescriptor+0x38>)
 800790c:	f7ff fee3 	bl	80076d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007912:	4618      	mov	r0, r3
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	200005fc 	.word	0x200005fc
 8007920:	08008040 	.word	0x08008040

08007924 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	6039      	str	r1, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	4904      	ldr	r1, [pc, #16]	; (8007944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007934:	4804      	ldr	r0, [pc, #16]	; (8007948 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007936:	f7ff fece 	bl	80076d6 <USBD_GetString>
  return USBD_StrDesc;
 800793a:	4b02      	ldr	r3, [pc, #8]	; (8007944 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800793c:	4618      	mov	r0, r3
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200005fc 	.word	0x200005fc
 8007948:	08008054 	.word	0x08008054

0800794c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	6039      	str	r1, [r7, #0]
 8007956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	221a      	movs	r2, #26
 800795c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800795e:	f000 f843 	bl	80079e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007962:	4b02      	ldr	r3, [pc, #8]	; (800796c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	2000018c 	.word	0x2000018c

08007970 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800797c:	79fb      	ldrb	r3, [r7, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d105      	bne.n	800798e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	4907      	ldr	r1, [pc, #28]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007986:	4808      	ldr	r0, [pc, #32]	; (80079a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007988:	f7ff fea5 	bl	80076d6 <USBD_GetString>
 800798c:	e004      	b.n	8007998 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	4904      	ldr	r1, [pc, #16]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007992:	4805      	ldr	r0, [pc, #20]	; (80079a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007994:	f7ff fe9f 	bl	80076d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007998:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	200005fc 	.word	0x200005fc
 80079a8:	08008068 	.word	0x08008068

080079ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b8:	79fb      	ldrb	r3, [r7, #7]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d105      	bne.n	80079ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	4907      	ldr	r1, [pc, #28]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079c2:	4808      	ldr	r0, [pc, #32]	; (80079e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c4:	f7ff fe87 	bl	80076d6 <USBD_GetString>
 80079c8:	e004      	b.n	80079d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	4904      	ldr	r1, [pc, #16]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ce:	4805      	ldr	r0, [pc, #20]	; (80079e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079d0:	f7ff fe81 	bl	80076d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079d4:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3708      	adds	r7, #8
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	200005fc 	.word	0x200005fc
 80079e4:	08008074 	.word	0x08008074

080079e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <Get_SerialNum+0x44>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <Get_SerialNum+0x48>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <Get_SerialNum+0x4c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a0e:	2208      	movs	r2, #8
 8007a10:	4909      	ldr	r1, [pc, #36]	; (8007a38 <Get_SerialNum+0x50>)
 8007a12:	68f8      	ldr	r0, [r7, #12]
 8007a14:	f000 f814 	bl	8007a40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a18:	2204      	movs	r2, #4
 8007a1a:	4908      	ldr	r1, [pc, #32]	; (8007a3c <Get_SerialNum+0x54>)
 8007a1c:	68b8      	ldr	r0, [r7, #8]
 8007a1e:	f000 f80f 	bl	8007a40 <IntToUnicode>
  }
}
 8007a22:	bf00      	nop
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	1ffff7e8 	.word	0x1ffff7e8
 8007a30:	1ffff7ec 	.word	0x1ffff7ec
 8007a34:	1ffff7f0 	.word	0x1ffff7f0
 8007a38:	2000018e 	.word	0x2000018e
 8007a3c:	2000019e 	.word	0x2000019e

08007a40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]
 8007a56:	e027      	b.n	8007aa8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	0f1b      	lsrs	r3, r3, #28
 8007a5c:	2b09      	cmp	r3, #9
 8007a5e:	d80b      	bhi.n	8007a78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	0f1b      	lsrs	r3, r3, #28
 8007a64:	b2da      	uxtb	r2, r3
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	440b      	add	r3, r1
 8007a70:	3230      	adds	r2, #48	; 0x30
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	e00a      	b.n	8007a8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0f1b      	lsrs	r3, r3, #28
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	4619      	mov	r1, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	440b      	add	r3, r1
 8007a88:	3237      	adds	r2, #55	; 0x37
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	011b      	lsls	r3, r3, #4
 8007a92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	005b      	lsls	r3, r3, #1
 8007a98:	3301      	adds	r3, #1
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	75fb      	strb	r3, [r7, #23]
 8007aa8:	7dfa      	ldrb	r2, [r7, #23]
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d3d3      	bcc.n	8007a58 <IntToUnicode+0x18>
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	; (8007b00 <HAL_PCD_MspInit+0x44>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d113      	bne.n	8007af6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007ace:	4b0d      	ldr	r3, [pc, #52]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	4a0c      	ldr	r2, [pc, #48]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007ad4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ad8:	61d3      	str	r3, [r2, #28]
 8007ada:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <HAL_PCD_MspInit+0x48>)
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ae2:	60fb      	str	r3, [r7, #12]
 8007ae4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2100      	movs	r1, #0
 8007aea:	2014      	movs	r0, #20
 8007aec:	f7f9 ff1f 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007af0:	2014      	movs	r0, #20
 8007af2:	f7f9 ff38 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007af6:	bf00      	nop
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	40005c00 	.word	0x40005c00
 8007b04:	40021000 	.word	0x40021000

08007b08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f7fe feb6 	bl	8006890 <USBD_LL_SetupStage>
}
 8007b24:	bf00      	nop
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	6879      	ldr	r1, [r7, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	4619      	mov	r1, r3
 8007b56:	f7fe fee6 	bl	8006926 <USBD_LL_DataOutStage>
}
 8007b5a:	bf00      	nop
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b082      	sub	sp, #8
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007b74:	78fa      	ldrb	r2, [r7, #3]
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	440b      	add	r3, r1
 8007b82:	333c      	adds	r3, #60	; 0x3c
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	78fb      	ldrb	r3, [r7, #3]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f7fe ff3d 	bl	8006a08 <USBD_LL_DataInStage>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff f84d 	bl	8006c44 <USBD_LL_SOF>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d001      	beq.n	8007bca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bc6:	f7f9 f980 	bl	8000eca <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bd0:	7bfa      	ldrb	r2, [r7, #15]
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fffd 	bl	8006bd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe ffb6 	bl	8006b52 <USBD_LL_Reset>
}
 8007be6:	bf00      	nop
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe fff8 	bl	8006bf2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7f9 fae2 	bl	80011cc <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8007c08:	bf00      	nop
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8007c18:	2000      	movs	r0, #0
 8007c1a:	f7f9 fad7 	bl	80011cc <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fff8 	bl	8006c1a <USBD_LL_Resume>
}
 8007c2a:	bf00      	nop
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a1d      	ldr	r2, [pc, #116]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c48:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c4e:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <USBD_LL_Init+0x8c>)
 8007c50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c52:	4b1a      	ldr	r3, [pc, #104]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c54:	2208      	movs	r2, #8
 8007c56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c58:	4b18      	ldr	r3, [pc, #96]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c5e:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c70:	4812      	ldr	r0, [pc, #72]	; (8007cbc <USBD_LL_Init+0x88>)
 8007c72:	f7fa f835 	bl	8001ce0 <HAL_PCD_Init>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c7c:	f7f9 f925 	bl	8000eca <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c86:	2318      	movs	r3, #24
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	f7fb fb52 	bl	8003334 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c96:	2358      	movs	r3, #88	; 0x58
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2180      	movs	r1, #128	; 0x80
 8007c9c:	f7fb fb4a 	bl	8003334 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007caa:	2200      	movs	r2, #0
 8007cac:	2181      	movs	r1, #129	; 0x81
 8007cae:	f7fb fb41 	bl	8003334 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	200007fc 	.word	0x200007fc
 8007cc0:	40005c00 	.word	0x40005c00

08007cc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fa f90b 	bl	8001ef6 <HAL_PCD_Start>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 f93c 	bl	8007f64 <USBD_Get_USB_Status>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	4608      	mov	r0, r1
 8007d04:	4611      	mov	r1, r2
 8007d06:	461a      	mov	r2, r3
 8007d08:	4603      	mov	r3, r0
 8007d0a:	70fb      	strb	r3, [r7, #3]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70bb      	strb	r3, [r7, #2]
 8007d10:	4613      	mov	r3, r2
 8007d12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d22:	78bb      	ldrb	r3, [r7, #2]
 8007d24:	883a      	ldrh	r2, [r7, #0]
 8007d26:	78f9      	ldrb	r1, [r7, #3]
 8007d28:	f7fa fa85 	bl	8002236 <HAL_PCD_EP_Open>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 f916 	bl	8007f64 <USBD_Get_USB_Status>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	460b      	mov	r3, r1
 8007d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d60:	78fa      	ldrb	r2, [r7, #3]
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fa facc 	bl	8002302 <HAL_PCD_EP_Close>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f8f7 	bl	8007f64 <USBD_Get_USB_Status>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	4611      	mov	r1, r2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fa fb75 	bl	8002492 <HAL_PCD_EP_SetStall>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 f8d8 	bl	8007f64 <USBD_Get_USB_Status>
 8007db4:	4603      	mov	r3, r0
 8007db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ddc:	78fa      	ldrb	r2, [r7, #3]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fa fbb6 	bl	8002552 <HAL_PCD_EP_ClrStall>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f8b9 	bl	8007f64 <USBD_Get_USB_Status>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da0c      	bge.n	8007e36 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	440b      	add	r3, r1
 8007e30:	3302      	adds	r3, #2
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	e00b      	b.n	8007e4e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e3c:	68f9      	ldr	r1, [r7, #12]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	440b      	add	r3, r1
 8007e48:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e4c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	4611      	mov	r1, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fa f9b8 	bl	80021ec <HAL_PCD_SetAddress>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f86e 	bl	8007f64 <USBD_Get_USB_Status>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b086      	sub	sp, #24
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	60f8      	str	r0, [r7, #12]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	72fb      	strb	r3, [r7, #11]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	7af9      	ldrb	r1, [r7, #11]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	f7fa faa5 	bl	800240c <HAL_PCD_EP_Transmit>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f000 f84b 	bl	8007f64 <USBD_Get_USB_Status>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ed2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	460b      	mov	r3, r1
 8007eea:	72fb      	strb	r3, [r7, #11]
 8007eec:	4613      	mov	r3, r2
 8007eee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efe:	893b      	ldrh	r3, [r7, #8]
 8007f00:	7af9      	ldrb	r1, [r7, #11]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	f7fa fa45 	bl	8002392 <HAL_PCD_EP_Receive>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0c:	7dfb      	ldrb	r3, [r7, #23]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f828 	bl	8007f64 <USBD_Get_USB_Status>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f18:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
	...

08007f24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <USBD_static_malloc+0x14>)
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr
 8007f38:	200001f8 	.word	0x200001f8

08007f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bc80      	pop	{r7}
 8007f4c:	4770      	bx	lr

08007f4e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bc80      	pop	{r7}
 8007f62:	4770      	bx	lr

08007f64 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b03      	cmp	r3, #3
 8007f76:	d817      	bhi.n	8007fa8 <USBD_Get_USB_Status+0x44>
 8007f78:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USBD_Get_USB_Status+0x1c>)
 8007f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7e:	bf00      	nop
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007f97 	.word	0x08007f97
 8007f88:	08007f9d 	.word	0x08007f9d
 8007f8c:	08007fa3 	.word	0x08007fa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
    break;
 8007f94:	e00b      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f96:	2302      	movs	r3, #2
 8007f98:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9a:	e008      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa0:	e005      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa6:	e002      	b.n	8007fae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	bf00      	nop
  }
  return usb_status;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bc80      	pop	{r7}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop

08007fbc <__libc_init_array>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	2500      	movs	r5, #0
 8007fc0:	4e0c      	ldr	r6, [pc, #48]	; (8007ff4 <__libc_init_array+0x38>)
 8007fc2:	4c0d      	ldr	r4, [pc, #52]	; (8007ff8 <__libc_init_array+0x3c>)
 8007fc4:	1ba4      	subs	r4, r4, r6
 8007fc6:	10a4      	asrs	r4, r4, #2
 8007fc8:	42a5      	cmp	r5, r4
 8007fca:	d109      	bne.n	8007fe0 <__libc_init_array+0x24>
 8007fcc:	f000 f822 	bl	8008014 <_init>
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	4e0a      	ldr	r6, [pc, #40]	; (8007ffc <__libc_init_array+0x40>)
 8007fd4:	4c0a      	ldr	r4, [pc, #40]	; (8008000 <__libc_init_array+0x44>)
 8007fd6:	1ba4      	subs	r4, r4, r6
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	42a5      	cmp	r5, r4
 8007fdc:	d105      	bne.n	8007fea <__libc_init_array+0x2e>
 8007fde:	bd70      	pop	{r4, r5, r6, pc}
 8007fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fe4:	4798      	blx	r3
 8007fe6:	3501      	adds	r5, #1
 8007fe8:	e7ee      	b.n	8007fc8 <__libc_init_array+0xc>
 8007fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fee:	4798      	blx	r3
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	e7f2      	b.n	8007fda <__libc_init_array+0x1e>
 8007ff4:	08008194 	.word	0x08008194
 8007ff8:	08008194 	.word	0x08008194
 8007ffc:	08008194 	.word	0x08008194
 8008000:	08008198 	.word	0x08008198

08008004 <memset>:
 8008004:	4603      	mov	r3, r0
 8008006:	4402      	add	r2, r0
 8008008:	4293      	cmp	r3, r2
 800800a:	d100      	bne.n	800800e <memset+0xa>
 800800c:	4770      	bx	lr
 800800e:	f803 1b01 	strb.w	r1, [r3], #1
 8008012:	e7f9      	b.n	8008008 <memset+0x4>

08008014 <_init>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr

08008020 <_fini>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr
