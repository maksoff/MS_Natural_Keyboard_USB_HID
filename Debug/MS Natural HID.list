
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d10  08008d10  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008d10  08008d10  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d10  08008d10  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d10  08008d10  00018d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d14  08008d14  00018d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  200001a8  08008ec0  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08008ec0  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cce  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ac  00000000  00000000  00039e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  0003e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb29  00000000  00000000  000405c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c71  00000000  00000000  0005c0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090a57  00000000  00000000  00073d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001047b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c60  00000000  00000000  0010480c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008b94 	.word	0x08008b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008b94 	.word	0x08008b94

0800014c <EEE_erase>:
#include "main.h"
#include "gpio.h"
#include "eee.h"

void EEE_erase(uint8_t page)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000156:	2200      	movs	r2, #0
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	4811      	ldr	r0, [pc, #68]	; (80001a4 <EEE_erase+0x58>)
 800015e:	f002 fb28 	bl	80027b2 <HAL_GPIO_WritePin>

	HAL_FLASH_Unlock();
 8000162:	f001 fffb 	bl	800215c <HAL_FLASH_Unlock>
   /* Fill EraseInit structure*/
   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <EEE_erase+0x5c>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
   EraseInitStruct.PageAddress = PAGE_START(page);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000172:	331c      	adds	r3, #28
 8000174:	02db      	lsls	r3, r3, #11
 8000176:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <EEE_erase+0x5c>)
 8000178:	6093      	str	r3, [r2, #8]
   EraseInitStruct.NbPages     = PAGES_PRO_PROGRAM;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <EEE_erase+0x5c>)
 800017c:	2202      	movs	r2, #2
 800017e:	60da      	str	r2, [r3, #12]

   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000180:	f107 030c 	add.w	r3, r7, #12
 8000184:	4619      	mov	r1, r3
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <EEE_erase+0x5c>)
 8000188:	f002 f8d0 	bl	800232c <HAL_FLASHEx_Erase>
   {
	 /*Error occurred while page erase.*/
	  // TODO process error //return HAL_FLASH_GetError ();
   }
	HAL_FLASH_Lock();
 800018c:	f002 f80c 	bl	80021a8 <HAL_FLASH_Lock>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	4803      	ldr	r0, [pc, #12]	; (80001a4 <EEE_erase+0x58>)
 8000198:	f002 fb0b 	bl	80027b2 <HAL_GPIO_WritePin>
}
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40011000 	.word	0x40011000
 80001a8:	200001c4 	.word	0x200001c4

080001ac <EEE_write>:

void EEE_write(uint8_t page, uint16_t pos, uint32_t data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	603a      	str	r2, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	460b      	mov	r3, r1
 80001ba:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <EEE_write+0x58>)
 80001c4:	f002 faf5 	bl	80027b2 <HAL_GPIO_WritePin>
	HAL_FLASH_Unlock();
 80001c8:	f001 ffc8 	bl	800215c <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE_START(page) + (uint32_t)pos*sizeof(data), data) != HAL_OK)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80001d2:	331c      	adds	r3, #28
 80001d4:	025a      	lsls	r2, r3, #9
 80001d6:	88bb      	ldrh	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	0099      	lsls	r1, r3, #2
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	461a      	mov	r2, r3
 80001e0:	f04f 0300 	mov.w	r3, #0
 80001e4:	2002      	movs	r0, #2
 80001e6:	f001 ff49 	bl	800207c <HAL_FLASH_Program>
	{
	/* Error occurred while writing data in Flash memory*/
	 // TODO check error. and lock flash return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
 80001ea:	f001 ffdd 	bl	80021a8 <HAL_FLASH_Lock>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001ee:	2201      	movs	r2, #1
 80001f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <EEE_write+0x58>)
 80001f6:	f002 fadc 	bl	80027b2 <HAL_GPIO_WritePin>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40011000 	.word	0x40011000

08000208 <EEE_read>:

uint32_t EEE_read(uint8_t page, uint16_t pos)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	4613      	mov	r3, r2
 8000216:	80bb      	strh	r3, [r7, #4]
	uint32_t data;
	data = *(__IO uint32_t *)(PAGE_START(page) + (uint32_t)pos*sizeof(data));
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800021e:	331c      	adds	r3, #28
 8000220:	025a      	lsls	r2, r3, #9
 8000222:	88bb      	ldrh	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]
	return data;
 800022c:	68fb      	ldr	r3, [r7, #12]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024c:	4b50      	ldr	r3, [pc, #320]	; (8000390 <MX_GPIO_Init+0x158>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a4f      	ldr	r2, [pc, #316]	; (8000390 <MX_GPIO_Init+0x158>)
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x158>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b4a      	ldr	r3, [pc, #296]	; (8000390 <MX_GPIO_Init+0x158>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a49      	ldr	r2, [pc, #292]	; (8000390 <MX_GPIO_Init+0x158>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b47      	ldr	r3, [pc, #284]	; (8000390 <MX_GPIO_Init+0x158>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b44      	ldr	r3, [pc, #272]	; (8000390 <MX_GPIO_Init+0x158>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a43      	ldr	r2, [pc, #268]	; (8000390 <MX_GPIO_Init+0x158>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b41      	ldr	r3, [pc, #260]	; (8000390 <MX_GPIO_Init+0x158>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x158>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3d      	ldr	r2, [pc, #244]	; (8000390 <MX_GPIO_Init+0x158>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x158>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b2:	4838      	ldr	r0, [pc, #224]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002b4:	f002 fa7d 	bl	80027b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4836      	ldr	r0, [pc, #216]	; (8000398 <MX_GPIO_Init+0x160>)
 80002c0:	f002 fa77 	bl	80027b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4619      	mov	r1, r3
 80002dc:	482d      	ldr	r0, [pc, #180]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002de:	f002 f8cd 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80002e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002f4:	f002 f8c2 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80002fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fe:	2303      	movs	r3, #3
 8000300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4823      	ldr	r0, [pc, #140]	; (8000398 <MX_GPIO_Init+0x160>)
 800030a:	f002 f8b7 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800030e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000312:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000314:	2303      	movs	r3, #3
 8000316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	481f      	ldr	r0, [pc, #124]	; (800039c <MX_GPIO_Init+0x164>)
 8000320:	f002 f8ac 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x160>)
 800033e:	f002 f89d 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x168>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_GPIO_Init+0x164>)
 8000358:	f002 f890 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_GPIO_Init+0x164>)
 8000372:	f002 f883 	bl	800247c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	2017      	movs	r0, #23
 800037c:	f001 fe47 	bl	800200e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000380:	2017      	movs	r0, #23
 8000382:	f001 fe60 	bl	8002046 <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	10210000 	.word	0x10210000

080003a4 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <data_low+0x44>)
 80003b2:	f002 f9fe 	bl	80027b2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80003c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80003d4:	463b      	mov	r3, r7
 80003d6:	4619      	mov	r1, r3
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <data_low+0x44>)
 80003da:	f002 f84f 	bl	800247c <HAL_GPIO_Init>
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010c00 	.word	0x40010c00

080003ec <clock_low>:

void clock_low(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <clock_low+0x44>)
 80003fa:	f002 f9da 	bl	80027b2 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800040a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800040e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000414:	2301      	movs	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <clock_low+0x44>)
 8000422:	f002 f82b 	bl	800247c <HAL_GPIO_Init>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010c00 	.word	0x40010c00

08000434 <data_release>:

void data_release(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	463b      	mov	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800044a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000454:	463b      	mov	r3, r7
 8000456:	4619      	mov	r1, r3
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <data_release+0x34>)
 800045a:	f002 f80f 	bl	800247c <HAL_GPIO_Init>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <clock_release>:

void clock_release(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800047e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000482:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <clock_release+0x34>)
 8000486:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <clock_release+0x38>)
 8000492:	f001 fff3 	bl	800247c <HAL_GPIO_Init>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	10210000 	.word	0x10210000
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80004b2:	4bb6      	ldr	r3, [pc, #728]	; (800078c <matrix_scan+0x2e4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80004b8:	2106      	movs	r1, #6
 80004ba:	201f      	movs	r0, #31
 80004bc:	f000 f99a 	bl	80007f4 <matrix_is_on>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <matrix_scan+0x24>
        matrix_break(PAUSE);
 80004c6:	20fe      	movs	r0, #254	; 0xfe
 80004c8:	f000 fa02 	bl	80008d0 <matrix_break>
    }

	if (code == 0)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 8189 	beq.w	80007e6 <matrix_scan+0x33e>
		return;

	switch (state) {
 80004d4:	4bae      	ldr	r3, [pc, #696]	; (8000790 <matrix_scan+0x2e8>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	f200 817f 	bhi.w	80007dc <matrix_scan+0x334>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <matrix_scan+0x3c>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	0800051d 	.word	0x0800051d
 80004e8:	0800062d 	.word	0x0800062d
 80004ec:	080005a9 	.word	0x080005a9
 80004f0:	08000683 	.word	0x08000683
 80004f4:	080006e7 	.word	0x080006e7
 80004f8:	080006ff 	.word	0x080006ff
 80004fc:	08000717 	.word	0x08000717
 8000500:	0800072f 	.word	0x0800072f
 8000504:	08000747 	.word	0x08000747
 8000508:	0800075f 	.word	0x0800075f
 800050c:	08000777 	.word	0x08000777
 8000510:	0800079d 	.word	0x0800079d
 8000514:	080007b3 	.word	0x080007b3
 8000518:	080007c9 	.word	0x080007c9
		case INIT:
			switch (code) {
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2bf0      	cmp	r3, #240	; 0xf0
 8000520:	d016      	beq.n	8000550 <matrix_scan+0xa8>
 8000522:	2bf0      	cmp	r3, #240	; 0xf0
 8000524:	dc30      	bgt.n	8000588 <matrix_scan+0xe0>
 8000526:	2be1      	cmp	r3, #225	; 0xe1
 8000528:	d016      	beq.n	8000558 <matrix_scan+0xb0>
 800052a:	2be1      	cmp	r3, #225	; 0xe1
 800052c:	dc2c      	bgt.n	8000588 <matrix_scan+0xe0>
 800052e:	2be0      	cmp	r3, #224	; 0xe0
 8000530:	d00a      	beq.n	8000548 <matrix_scan+0xa0>
 8000532:	2be0      	cmp	r3, #224	; 0xe0
 8000534:	dc28      	bgt.n	8000588 <matrix_scan+0xe0>
 8000536:	2b84      	cmp	r3, #132	; 0x84
 8000538:	d019      	beq.n	800056e <matrix_scan+0xc6>
 800053a:	2b84      	cmp	r3, #132	; 0x84
 800053c:	dc24      	bgt.n	8000588 <matrix_scan+0xe0>
 800053e:	2b00      	cmp	r3, #0
 8000540:	d01c      	beq.n	800057c <matrix_scan+0xd4>
 8000542:	2b83      	cmp	r3, #131	; 0x83
 8000544:	d00c      	beq.n	8000560 <matrix_scan+0xb8>
 8000546:	e01f      	b.n	8000588 <matrix_scan+0xe0>
				case 0xE0:
					state = E0;
 8000548:	4b91      	ldr	r3, [pc, #580]	; (8000790 <matrix_scan+0x2e8>)
 800054a:	2202      	movs	r2, #2
 800054c:	701a      	strb	r2, [r3, #0]
					break;
 800054e:	e02a      	b.n	80005a6 <matrix_scan+0xfe>
				case 0xF0:
					state = F0;
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <matrix_scan+0x2e8>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
					break;
 8000556:	e026      	b.n	80005a6 <matrix_scan+0xfe>
				case 0xE1:
					state = E1;
 8000558:	4b8d      	ldr	r3, [pc, #564]	; (8000790 <matrix_scan+0x2e8>)
 800055a:	2204      	movs	r2, #4
 800055c:	701a      	strb	r2, [r3, #0]
					break;
 800055e:	e022      	b.n	80005a6 <matrix_scan+0xfe>
				case 0x83:  // F7
					matrix_make(F7);
 8000560:	2083      	movs	r0, #131	; 0x83
 8000562:	f000 f963 	bl	800082c <matrix_make>
					state = INIT;
 8000566:	4b8a      	ldr	r3, [pc, #552]	; (8000790 <matrix_scan+0x2e8>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
					break;
 800056c:	e01b      	b.n	80005a6 <matrix_scan+0xfe>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 800056e:	20fc      	movs	r0, #252	; 0xfc
 8000570:	f000 f95c 	bl	800082c <matrix_make>
					state = INIT;
 8000574:	4b86      	ldr	r3, [pc, #536]	; (8000790 <matrix_scan+0x2e8>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
					break;
 800057a:	e014      	b.n	80005a6 <matrix_scan+0xfe>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 800057c:	f000 f9fc 	bl	8000978 <matrix_clear>
					state = INIT;
 8000580:	4b83      	ldr	r3, [pc, #524]	; (8000790 <matrix_scan+0x2e8>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
					break;
 8000586:	e00e      	b.n	80005a6 <matrix_scan+0xfe>
				default:    // normal key make
					if (code < 0x80) {
 8000588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058c:	2b00      	cmp	r3, #0
 800058e:	db04      	blt.n	800059a <matrix_scan+0xf2>
						matrix_make(code);
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f94a 	bl	800082c <matrix_make>
 8000598:	e001      	b.n	800059e <matrix_scan+0xf6>
					} else {
						matrix_clear();
 800059a:	f000 f9ed 	bl	8000978 <matrix_clear>
					}
					state = INIT;
 800059e:	4b7c      	ldr	r3, [pc, #496]	; (8000790 <matrix_scan+0x2e8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005a4:	e11e      	b.n	80007e4 <matrix_scan+0x33c>
 80005a6:	e11d      	b.n	80007e4 <matrix_scan+0x33c>
		case E0:    // E0-Prefixed
			switch (code) {
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	2bf0      	cmp	r3, #240	; 0xf0
 80005ac:	d019      	beq.n	80005e2 <matrix_scan+0x13a>
 80005ae:	2bf0      	cmp	r3, #240	; 0xf0
 80005b0:	dc29      	bgt.n	8000606 <matrix_scan+0x15e>
 80005b2:	2b83      	cmp	r3, #131	; 0x83
 80005b4:	d019      	beq.n	80005ea <matrix_scan+0x142>
 80005b6:	2b83      	cmp	r3, #131	; 0x83
 80005b8:	dc25      	bgt.n	8000606 <matrix_scan+0x15e>
 80005ba:	2b7e      	cmp	r3, #126	; 0x7e
 80005bc:	d00d      	beq.n	80005da <matrix_scan+0x132>
 80005be:	2b7e      	cmp	r3, #126	; 0x7e
 80005c0:	dc21      	bgt.n	8000606 <matrix_scan+0x15e>
 80005c2:	2b59      	cmp	r3, #89	; 0x59
 80005c4:	d005      	beq.n	80005d2 <matrix_scan+0x12a>
 80005c6:	2b59      	cmp	r3, #89	; 0x59
 80005c8:	dc1d      	bgt.n	8000606 <matrix_scan+0x15e>
 80005ca:	2b03      	cmp	r3, #3
 80005cc:	d014      	beq.n	80005f8 <matrix_scan+0x150>
 80005ce:	2b12      	cmp	r3, #18
 80005d0:	d119      	bne.n	8000606 <matrix_scan+0x15e>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80005d2:	4b6f      	ldr	r3, [pc, #444]	; (8000790 <matrix_scan+0x2e8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
					break;
 80005d8:	e027      	b.n	800062a <matrix_scan+0x182>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80005da:	4b6d      	ldr	r3, [pc, #436]	; (8000790 <matrix_scan+0x2e8>)
 80005dc:	220b      	movs	r2, #11
 80005de:	701a      	strb	r2, [r3, #0]
					break;
 80005e0:	e023      	b.n	800062a <matrix_scan+0x182>
				case 0xF0:
					state = E0_F0;
 80005e2:	4b6b      	ldr	r3, [pc, #428]	; (8000790 <matrix_scan+0x2e8>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	701a      	strb	r2, [r3, #0]
					break;
 80005e8:	e01f      	b.n	800062a <matrix_scan+0x182>
				case 0x83:
					matrix_make(F7);
 80005ea:	2083      	movs	r0, #131	; 0x83
 80005ec:	f000 f91e 	bl	800082c <matrix_make>
					state = INIT;
 80005f0:	4b67      	ldr	r3, [pc, #412]	; (8000790 <matrix_scan+0x2e8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
					break;
 80005f6:	e018      	b.n	800062a <matrix_scan+0x182>
				case 0x03:
					matrix_make(F5);
 80005f8:	2003      	movs	r0, #3
 80005fa:	f000 f917 	bl	800082c <matrix_make>
					state = INIT;
 80005fe:	4b64      	ldr	r3, [pc, #400]	; (8000790 <matrix_scan+0x2e8>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
					break;
 8000604:	e011      	b.n	800062a <matrix_scan+0x182>
				default:
					if (code < 0x80) {
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db07      	blt.n	800061e <matrix_scan+0x176>
						matrix_make(code|0x80);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f908 	bl	800082c <matrix_make>
 800061c:	e001      	b.n	8000622 <matrix_scan+0x17a>
					} else {
						matrix_clear();
 800061e:	f000 f9ab 	bl	8000978 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 8000622:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <matrix_scan+0x2e8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000628:	e0dc      	b.n	80007e4 <matrix_scan+0x33c>
 800062a:	e0db      	b.n	80007e4 <matrix_scan+0x33c>
		case F0:    // Break code
			switch (code) {
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	2bf0      	cmp	r3, #240	; 0xf0
 8000630:	d014      	beq.n	800065c <matrix_scan+0x1b4>
 8000632:	2bf0      	cmp	r3, #240	; 0xf0
 8000634:	dc15      	bgt.n	8000662 <matrix_scan+0x1ba>
 8000636:	2b83      	cmp	r3, #131	; 0x83
 8000638:	d002      	beq.n	8000640 <matrix_scan+0x198>
 800063a:	2b84      	cmp	r3, #132	; 0x84
 800063c:	d007      	beq.n	800064e <matrix_scan+0x1a6>
 800063e:	e010      	b.n	8000662 <matrix_scan+0x1ba>
				case 0x83:  // F7
					matrix_break(F7);
 8000640:	2083      	movs	r0, #131	; 0x83
 8000642:	f000 f945 	bl	80008d0 <matrix_break>
					state = INIT;
 8000646:	4b52      	ldr	r3, [pc, #328]	; (8000790 <matrix_scan+0x2e8>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
					break;
 800064c:	e018      	b.n	8000680 <matrix_scan+0x1d8>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 800064e:	20fc      	movs	r0, #252	; 0xfc
 8000650:	f000 f93e 	bl	80008d0 <matrix_break>
					state = INIT;
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <matrix_scan+0x2e8>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
					break;
 800065a:	e011      	b.n	8000680 <matrix_scan+0x1d8>
				case 0xF0:
					matrix_clear();
 800065c:	f000 f98c 	bl	8000978 <matrix_clear>
					//clear_keyboard();
					break;
 8000660:	e00e      	b.n	8000680 <matrix_scan+0x1d8>
				default:
				if (code < 0x80) {
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db04      	blt.n	8000674 <matrix_scan+0x1cc>
					matrix_break(code);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f92f 	bl	80008d0 <matrix_break>
 8000672:	e001      	b.n	8000678 <matrix_scan+0x1d0>
				} else {
					matrix_clear();
 8000674:	f000 f980 	bl	8000978 <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 8000678:	4b45      	ldr	r3, [pc, #276]	; (8000790 <matrix_scan+0x2e8>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800067e:	e0b1      	b.n	80007e4 <matrix_scan+0x33c>
 8000680:	e0b0      	b.n	80007e4 <matrix_scan+0x33c>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b83      	cmp	r3, #131	; 0x83
 8000686:	d00d      	beq.n	80006a4 <matrix_scan+0x1fc>
 8000688:	2b83      	cmp	r3, #131	; 0x83
 800068a:	dc19      	bgt.n	80006c0 <matrix_scan+0x218>
 800068c:	2b59      	cmp	r3, #89	; 0x59
 800068e:	d005      	beq.n	800069c <matrix_scan+0x1f4>
 8000690:	2b59      	cmp	r3, #89	; 0x59
 8000692:	dc15      	bgt.n	80006c0 <matrix_scan+0x218>
 8000694:	2b03      	cmp	r3, #3
 8000696:	d00c      	beq.n	80006b2 <matrix_scan+0x20a>
 8000698:	2b12      	cmp	r3, #18
 800069a:	d111      	bne.n	80006c0 <matrix_scan+0x218>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 800069c:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <matrix_scan+0x2e8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
					break;
 80006a2:	e01f      	b.n	80006e4 <matrix_scan+0x23c>
				case 0x83:  // F7
					matrix_break(F7);
 80006a4:	2083      	movs	r0, #131	; 0x83
 80006a6:	f000 f913 	bl	80008d0 <matrix_break>
					state = INIT;
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <matrix_scan+0x2e8>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
					break;
 80006b0:	e018      	b.n	80006e4 <matrix_scan+0x23c>
				case 0x03:  // F5
					matrix_break(F5);
 80006b2:	2003      	movs	r0, #3
 80006b4:	f000 f90c 	bl	80008d0 <matrix_break>
					state = INIT;
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <matrix_scan+0x2e8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
					break;
 80006be:	e011      	b.n	80006e4 <matrix_scan+0x23c>
				default:
					if (code < 0x80) {
 80006c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db07      	blt.n	80006d8 <matrix_scan+0x230>
						matrix_break(code|0x80);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 f8fd 	bl	80008d0 <matrix_break>
 80006d6:	e001      	b.n	80006dc <matrix_scan+0x234>
					} else {
						matrix_clear();
 80006d8:	f000 f94e 	bl	8000978 <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80006dc:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <matrix_scan+0x2e8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006e2:	e07f      	b.n	80007e4 <matrix_scan+0x33c>
 80006e4:	e07e      	b.n	80007e4 <matrix_scan+0x33c>
		// following are states of Pause
		case E1:
			switch (code) {
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b14      	cmp	r3, #20
 80006ea:	d104      	bne.n	80006f6 <matrix_scan+0x24e>
				case 0x14:
					state = E1_14;
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <matrix_scan+0x2e8>)
 80006ee:	2205      	movs	r2, #5
 80006f0:	701a      	strb	r2, [r3, #0]
					break;
 80006f2:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80006f4:	e076      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <matrix_scan+0x2e8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
			break;
 80006fc:	e072      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14:
			switch (code) {
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b77      	cmp	r3, #119	; 0x77
 8000702:	d104      	bne.n	800070e <matrix_scan+0x266>
				case 0x77:
					state = E1_14_77;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <matrix_scan+0x2e8>)
 8000706:	2206      	movs	r2, #6
 8000708:	701a      	strb	r2, [r3, #0]
					break;
 800070a:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800070c:	e06a      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <matrix_scan+0x2e8>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
			break;
 8000714:	e066      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14_77:
			switch (code) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2be1      	cmp	r3, #225	; 0xe1
 800071a:	d104      	bne.n	8000726 <matrix_scan+0x27e>
				case 0xE1:
					state = E1_14_77_E1;
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <matrix_scan+0x2e8>)
 800071e:	2207      	movs	r2, #7
 8000720:	701a      	strb	r2, [r3, #0]
					break;
 8000722:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000724:	e05e      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <matrix_scan+0x2e8>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
			break;
 800072c:	e05a      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14_77_E1:
			switch (code) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2bf0      	cmp	r3, #240	; 0xf0
 8000732:	d104      	bne.n	800073e <matrix_scan+0x296>
				case 0xF0:
					state = E1_14_77_E1_F0;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <matrix_scan+0x2e8>)
 8000736:	2208      	movs	r2, #8
 8000738:	701a      	strb	r2, [r3, #0]
					break;
 800073a:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800073c:	e052      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <matrix_scan+0x2e8>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			break;
 8000744:	e04e      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14_77_E1_F0:
			switch (code) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b14      	cmp	r3, #20
 800074a:	d104      	bne.n	8000756 <matrix_scan+0x2ae>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <matrix_scan+0x2e8>)
 800074e:	2209      	movs	r2, #9
 8000750:	701a      	strb	r2, [r3, #0]
					break;
 8000752:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000754:	e046      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <matrix_scan+0x2e8>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			break;
 800075c:	e042      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14_77_E1_F0_14:
			switch (code) {
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2bf0      	cmp	r3, #240	; 0xf0
 8000762:	d104      	bne.n	800076e <matrix_scan+0x2c6>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <matrix_scan+0x2e8>)
 8000766:	220a      	movs	r2, #10
 8000768:	701a      	strb	r2, [r3, #0]
					break;
 800076a:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800076c:	e03a      	b.n	80007e4 <matrix_scan+0x33c>
					state = INIT;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <matrix_scan+0x2e8>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
			break;
 8000774:	e036      	b.n	80007e4 <matrix_scan+0x33c>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b77      	cmp	r3, #119	; 0x77
 800077a:	d10b      	bne.n	8000794 <matrix_scan+0x2ec>
				case 0x77:
					matrix_make(PAUSE);
 800077c:	20fe      	movs	r0, #254	; 0xfe
 800077e:	f000 f855 	bl	800082c <matrix_make>
					state = INIT;
 8000782:	4b03      	ldr	r3, [pc, #12]	; (8000790 <matrix_scan+0x2e8>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
					break;
 8000788:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800078a:	e02b      	b.n	80007e4 <matrix_scan+0x33c>
 800078c:	200001f4 	.word	0x200001f4
 8000790:	200001f5 	.word	0x200001f5
					state = INIT;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <matrix_scan+0x348>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
			break;
 800079a:	e023      	b.n	80007e4 <matrix_scan+0x33c>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2be0      	cmp	r3, #224	; 0xe0
 80007a0:	d103      	bne.n	80007aa <matrix_scan+0x302>
				state = E0_7E_E0;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <matrix_scan+0x348>)
 80007a4:	220c      	movs	r2, #12
 80007a6:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80007a8:	e01c      	b.n	80007e4 <matrix_scan+0x33c>
				state = INIT;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <matrix_scan+0x348>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
			break;
 80007b0:	e018      	b.n	80007e4 <matrix_scan+0x33c>
		case E0_7E_E0:
			if (code == 0xF0)
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2bf0      	cmp	r3, #240	; 0xf0
 80007b6:	d103      	bne.n	80007c0 <matrix_scan+0x318>
				state = E0_7E_E0_F0;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <matrix_scan+0x348>)
 80007ba:	220d      	movs	r2, #13
 80007bc:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80007be:	e011      	b.n	80007e4 <matrix_scan+0x33c>
				state = INIT;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <matrix_scan+0x348>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	701a      	strb	r2, [r3, #0]
			break;
 80007c6:	e00d      	b.n	80007e4 <matrix_scan+0x33c>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b7e      	cmp	r3, #126	; 0x7e
 80007cc:	d102      	bne.n	80007d4 <matrix_scan+0x32c>
				matrix_make(PAUSE);
 80007ce:	20fe      	movs	r0, #254	; 0xfe
 80007d0:	f000 f82c 	bl	800082c <matrix_make>
			state = INIT;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <matrix_scan+0x348>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
			break;
 80007da:	e003      	b.n	80007e4 <matrix_scan+0x33c>
		default:
			state = INIT;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <matrix_scan+0x348>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80007e2:	e001      	b.n	80007e8 <matrix_scan+0x340>
 80007e4:	e000      	b.n	80007e8 <matrix_scan+0x340>
		return;
 80007e6:	bf00      	nop
}
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200001f5 	.word	0x200001f5

080007f4 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <matrix_is_on+0x34>)
 8000808:	5cd3      	ldrb	r3, [r2, r3]
 800080a:	b25a      	sxtb	r2, r3
 800080c:	79bb      	ldrb	r3, [r7, #6]
 800080e:	2101      	movs	r1, #1
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	b25b      	sxtb	r3, r3
 8000816:	4013      	ands	r3, r2
 8000818:	b25b      	sxtb	r3, r3
 800081a:	b2db      	uxtb	r3, r3
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200001d4 	.word	0x200001d4

0800082c <matrix_make>:
}



void matrix_make(uint8_t code)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	4610      	mov	r0, r2
 8000848:	f7ff ffd4 	bl	80007f4 <matrix_is_on>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d135      	bne.n	80008be <matrix_make+0x92>
	    matrix[ROW(code)] |= 1<<COL(code);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <matrix_make+0x9c>)
 800085c:	5c9b      	ldrb	r3, [r3, r2]
 800085e:	b25a      	sxtb	r2, r3
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	b25b      	sxtb	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	b259      	sxtb	r1, r3
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	b2c9      	uxtb	r1, r1
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <matrix_make+0x9c>)
 800087e:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <matrix_make+0xa0>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	08db      	lsrs	r3, r3, #3
 800088a:	b2da      	uxtb	r2, r3
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	f003 0307 	and.w	r3, r3, #7
 8000892:	b2db      	uxtb	r3, r3
 8000894:	4619      	mov	r1, r3
 8000896:	4610      	mov	r0, r2
 8000898:	f000 fbc2 	bl	8001020 <keymap_key_to_keycode>
 800089c:	4603      	mov	r3, r0
 800089e:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	2bf0      	cmp	r3, #240	; 0xf0
 80008a4:	d902      	bls.n	80008ac <matrix_make+0x80>
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2bf4      	cmp	r3, #244	; 0xf4
 80008aa:	d904      	bls.n	80008b6 <matrix_make+0x8a>
	    	prog_push_code(code, 1);
 80008ac:	79fb      	ldrb	r3, [r7, #7]
 80008ae:	2101      	movs	r1, #1
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8a7 	bl	8000a04 <prog_push_code>
		register_code(keycode);
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fbc7 	bl	800104c <register_code>
    }

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001d4 	.word	0x200001d4
 80008cc:	200001f4 	.word	0x200001f4

080008d0 <matrix_break>:

void matrix_break(uint8_t code)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	4610      	mov	r0, r2
 80008ec:	f7ff ff82 	bl	80007f4 <matrix_is_on>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d037      	beq.n	8000966 <matrix_break+0x96>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <matrix_break+0xa0>)
 8000900:	5c9b      	ldrb	r3, [r3, r2]
 8000902:	b25a      	sxtb	r2, r3
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	b25b      	sxtb	r3, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	b25b      	sxtb	r3, r3
 8000916:	4013      	ands	r3, r2
 8000918:	b259      	sxtb	r1, r3
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	08db      	lsrs	r3, r3, #3
 800091e:	b2db      	uxtb	r3, r3
 8000920:	461a      	mov	r2, r3
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <matrix_break+0xa0>)
 8000926:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <matrix_break+0xa4>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	b2da      	uxtb	r2, r3
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f000 fb6e 	bl	8001020 <keymap_key_to_keycode>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2bf0      	cmp	r3, #240	; 0xf0
 800094c:	d902      	bls.n	8000954 <matrix_break+0x84>
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	2bf4      	cmp	r3, #244	; 0xf4
 8000952:	d904      	bls.n	800095e <matrix_break+0x8e>
	    	prog_push_code(code, 0);
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f853 	bl	8000a04 <prog_push_code>
		unregister_code(keycode);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fc45 	bl	80011f0 <unregister_code>
    }
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200001d4 	.word	0x200001d4
 8000974:	200001f4 	.word	0x200001f4

08000978 <matrix_clear>:

void matrix_clear(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e006      	b.n	8000992 <matrix_clear+0x1a>
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <matrix_clear+0x2c>)
 8000988:	2100      	movs	r1, #0
 800098a:	54d1      	strb	r1, [r2, r3]
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	3301      	adds	r3, #1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b1f      	cmp	r3, #31
 8000996:	d9f5      	bls.n	8000984 <matrix_clear+0xc>
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	200001d4 	.word	0x200001d4

080009a8 <is_prog_error>:
// if user have pressed any keys while macro plays
// also here can be used simple matrix 32xbytes (for 256 keys), but I wanted to break them in
// reverse order.
static uint8_t code_to_break[PROG_MAX_POS] = {0};

uint8_t is_prog_error(void) { return prog_error; }
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <is_prog_error+0x10>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	200001f8 	.word	0x200001f8

080009bc <is_disco_time>:
uint8_t is_prog_in_progress(void) { return programming_in_progress; }
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }

uint8_t is_disco_time(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009c0:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <is_disco_time+0x3c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d009      	beq.n	80009dc <is_disco_time+0x20>
 80009c8:	f001 fa1c 	bl	8001e04 <HAL_GetTick>
 80009cc:	4602      	mov	r2, r0
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <is_disco_time+0x3c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009d8:	4293      	cmp	r3, r2
 80009da:	d807      	bhi.n	80009ec <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <is_disco_time+0x40>)
 80009de:	781b      	ldrb	r3, [r3, #0]
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d103      	bne.n	80009ec <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <is_disco_time+0x44>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <is_disco_time+0x34>
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <is_disco_time+0x36>
 80009f0:	2300      	movs	r3, #0
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200001fc 	.word	0x200001fc
 80009fc:	200001f6 	.word	0x200001f6
 8000a00:	200001f7 	.word	0x200001f7

08000a04 <prog_push_code>:
 * 8 last bits -> code
 *
 * All written inverted (so empty flash 0xffff -> transforms to 0x0000, which means no code last code)
 */
void prog_push_code(uint8_t code, uint8_t make)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	460a      	mov	r2, r1
 8000a0e:	71fb      	strb	r3, [r7, #7]
 8000a10:	4613      	mov	r3, r2
 8000a12:	71bb      	strb	r3, [r7, #6]
	uint32_t packet = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
	if (!programming_in_progress)
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <prog_push_code+0x100>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d069      	beq.n	8000af4 <prog_push_code+0xf0>
		return;
	if (current_pos > PROG_MAX_POS - PROG_STEPS_TO_ERROR)
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <prog_push_code+0x104>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	f5b3 7ff6 	cmp.w	r3, #492	; 0x1ec
 8000a28:	d902      	bls.n	8000a30 <prog_push_code+0x2c>
		prog_error = 1;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <prog_push_code+0x108>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
	if (current_pos == PROG_MAX_POS)
 8000a30:	4b35      	ldr	r3, [pc, #212]	; (8000b08 <prog_push_code+0x104>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a38:	d05e      	beq.n	8000af8 <prog_push_code+0xf4>
		return;
	if (current_pos == 0)
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <prog_push_code+0x104>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d108      	bne.n	8000a54 <prog_push_code+0x50>
	{
		// if first key = release from ctrl, ignore it!
		if ((!make)&&((code==RAW_LCTRL)||(code==RAW_RCTRL)))
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d105      	bne.n	8000a54 <prog_push_code+0x50>
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	2b14      	cmp	r3, #20
 8000a4c:	d056      	beq.n	8000afc <prog_push_code+0xf8>
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b94      	cmp	r3, #148	; 0x94
 8000a52:	d053      	beq.n	8000afc <prog_push_code+0xf8>
			return;
	}
	if (last_prog_time)
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <prog_push_code+0x10c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d025      	beq.n	8000aa8 <prog_push_code+0xa4>
	{
		packet = HAL_GetTick() - last_prog_time;
 8000a5c:	f001 f9d2 	bl	8001e04 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <prog_push_code+0x10c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	60fb      	str	r3, [r7, #12]
		if (packet >= (1 << 23))
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000a70:	d302      	bcc.n	8000a78 <prog_push_code+0x74>
			packet = ~0;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	60fb      	str	r3, [r7, #12]
		packet >>= PROG_TIME_MULT;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	099b      	lsrs	r3, r3, #6
 8000a7c:	60fb      	str	r3, [r7, #12]
		if (current_mods & (MOD_BIT(KC_LCTRL)))
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <prog_push_code+0x110>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d003      	beq.n	8000a92 <prog_push_code+0x8e>
		{
			packet >>= SPEEDY_CLICKY;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	085b      	lsrs	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	e007      	b.n	8000aa2 <prog_push_code+0x9e>
		} else if (current_mods & (MOD_BIT(KC_RCTRL)))
 8000a92:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <prog_push_code+0x110>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <prog_push_code+0x9e>
		{
			packet = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
		}
		packet = (packet) << 9; // divide 64 and shift time to the right
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	60fb      	str	r3, [r7, #12]
	}
	if (packet == 0)
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <prog_push_code+0xb0>
		packet = (1<<9);
 8000aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ab2:	60fb      	str	r3, [r7, #12]
	last_prog_time = HAL_GetTick();
 8000ab4:	f001 f9a6 	bl	8001e04 <HAL_GetTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <prog_push_code+0x10c>)
 8000abc:	6013      	str	r3, [r2, #0]
	if (make)
 8000abe:	79bb      	ldrb	r3, [r7, #6]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <prog_push_code+0xc8>
		packet |= (1<<8);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	60fb      	str	r3, [r7, #12]
	packet |= code;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
	EEE_write(current_code - KP_START, current_pos++, ~packet);
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <prog_push_code+0x114>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	330f      	adds	r3, #15
 8000ada:	b2d8      	uxtb	r0, r3
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <prog_push_code+0x104>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	b291      	uxth	r1, r2
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <prog_push_code+0x104>)
 8000ae6:	8011      	strh	r1, [r2, #0]
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	43d2      	mvns	r2, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	f7ff fb5d 	bl	80001ac <EEE_write>
 8000af2:	e004      	b.n	8000afe <prog_push_code+0xfa>
		return;
 8000af4:	bf00      	nop
 8000af6:	e002      	b.n	8000afe <prog_push_code+0xfa>
		return;
 8000af8:	bf00      	nop
 8000afa:	e000      	b.n	8000afe <prog_push_code+0xfa>
			return;
 8000afc:	bf00      	nop
}
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200001f6 	.word	0x200001f6
 8000b08:	20000206 	.word	0x20000206
 8000b0c:	200001f8 	.word	0x200001f8
 8000b10:	20000208 	.word	0x20000208
 8000b14:	2000020c 	.word	0x2000020c
 8000b18:	20000204 	.word	0x20000204

08000b1c <break_unbreaked>:

void break_unbreaked(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	// go from last to first
	for (uint16_t i = PROG_MAX_POS; i > 0; i--)
 8000b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b26:	80fb      	strh	r3, [r7, #6]
 8000b28:	e00f      	b.n	8000b4a <break_unbreaked+0x2e>
		if (code_to_break[i-1] != 0)
 8000b2a:	88fb      	ldrh	r3, [r7, #6]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <break_unbreaked+0x40>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <break_unbreaked+0x28>
			matrix_break(code_to_break[i-1]);
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <break_unbreaked+0x40>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fec6 	bl	80008d0 <matrix_break>
	for (uint16_t i = PROG_MAX_POS; i > 0; i--)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1ec      	bne.n	8000b2a <break_unbreaked+0xe>
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000210 	.word	0x20000210

08000b60 <prog_pop_code>:

void prog_pop_code(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
	static uint32_t ctrl_delay = 0;
	uint32_t packet;
	if (!prog_is_running)
 8000b66:	4b64      	ldr	r3, [pc, #400]	; (8000cf8 <prog_pop_code+0x198>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	f000 80bd 	beq.w	8000cea <prog_pop_code+0x18a>
		return;
	// check if we need first pop, but key is still pressed
	if (current_pos == 0)
 8000b70:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <prog_pop_code+0x19c>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d11c      	bne.n	8000bb2 <prog_pop_code+0x52>
	{
		// first position, check if Ctrl is still hold
		if (get_mods()&(MOD_BIT(KC_LCTRL)|MOD_BIT(KC_RCTRL)))
 8000b78:	f000 f960 	bl	8000e3c <get_mods>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	f003 0311 	and.w	r3, r3, #17
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d012      	beq.n	8000bac <prog_pop_code+0x4c>
		{
			if (!ctrl_delay)
 8000b86:	4b5e      	ldr	r3, [pc, #376]	; (8000d00 <prog_pop_code+0x1a0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d104      	bne.n	8000b98 <prog_pop_code+0x38>
				ctrl_delay = HAL_GetTick(); // initialize delay
 8000b8e:	f001 f939 	bl	8001e04 <HAL_GetTick>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4a5a      	ldr	r2, [pc, #360]	; (8000d00 <prog_pop_code+0x1a0>)
 8000b96:	6013      	str	r3, [r2, #0]
			if (HAL_GetTick() - ctrl_delay < WAIT_CTRL)
 8000b98:	f001 f934 	bl	8001e04 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	4b58      	ldr	r3, [pc, #352]	; (8000d00 <prog_pop_code+0x1a0>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ba8:	f0c0 80a1 	bcc.w	8000cee <prog_pop_code+0x18e>
				return;
		}
		ctrl_delay = 0;
 8000bac:	4b54      	ldr	r3, [pc, #336]	; (8000d00 <prog_pop_code+0x1a0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
	}
	if (next_time < HAL_GetTick())
 8000bb2:	f001 f927 	bl	8001e04 <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	4b52      	ldr	r3, [pc, #328]	; (8000d04 <prog_pop_code+0x1a4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f240 8097 	bls.w	8000cf0 <prog_pop_code+0x190>
	{
		if ((packet = ~EEE_read(current_code - KP_START, current_pos++)))
 8000bc2:	4b51      	ldr	r3, [pc, #324]	; (8000d08 <prog_pop_code+0x1a8>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	330f      	adds	r3, #15
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <prog_pop_code+0x19c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	1c59      	adds	r1, r3, #1
 8000bd0:	b288      	uxth	r0, r1
 8000bd2:	494a      	ldr	r1, [pc, #296]	; (8000cfc <prog_pop_code+0x19c>)
 8000bd4:	8008      	strh	r0, [r1, #0]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4610      	mov	r0, r2
 8000bda:	f7ff fb15 	bl	8000208 <EEE_read>
 8000bde:	4603      	mov	r3, r0
 8000be0:	43db      	mvns	r3, r3
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d073      	beq.n	8000cd2 <prog_pop_code+0x172>
		{
			uint8_t code = (uint8_t)(packet & 0xFF);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	71fb      	strb	r3, [r7, #7]
			if (packet & (1<<8)) // make or break
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d018      	beq.n	8000c2a <prog_pop_code+0xca>
			{
				// find first unused position, and add code here
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	817b      	strh	r3, [r7, #10]
 8000bfc:	e00c      	b.n	8000c18 <prog_pop_code+0xb8>
					if (code_to_break[i] == 0)
 8000bfe:	897b      	ldrh	r3, [r7, #10]
 8000c00:	4a42      	ldr	r2, [pc, #264]	; (8000d0c <prog_pop_code+0x1ac>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d104      	bne.n	8000c12 <prog_pop_code+0xb2>
					{
						code_to_break[i] = code;
 8000c08:	897b      	ldrh	r3, [r7, #10]
 8000c0a:	4940      	ldr	r1, [pc, #256]	; (8000d0c <prog_pop_code+0x1ac>)
 8000c0c:	79fa      	ldrb	r2, [r7, #7]
 8000c0e:	54ca      	strb	r2, [r1, r3]
						break;
 8000c10:	e006      	b.n	8000c20 <prog_pop_code+0xc0>
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000c12:	897b      	ldrh	r3, [r7, #10]
 8000c14:	3301      	adds	r3, #1
 8000c16:	817b      	strh	r3, [r7, #10]
 8000c18:	897b      	ldrh	r3, [r7, #10]
 8000c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c1e:	d3ee      	bcc.n	8000bfe <prog_pop_code+0x9e>
					}
				matrix_make(code);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe02 	bl	800082c <matrix_make>
 8000c28:	e018      	b.n	8000c5c <prog_pop_code+0xfc>
			}
			else
			{
				// find first position with code and remove it
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	813b      	strh	r3, [r7, #8]
 8000c2e:	e00d      	b.n	8000c4c <prog_pop_code+0xec>
					if (code_to_break[i] == code)
 8000c30:	893b      	ldrh	r3, [r7, #8]
 8000c32:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <prog_pop_code+0x1ac>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	79fa      	ldrb	r2, [r7, #7]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d104      	bne.n	8000c46 <prog_pop_code+0xe6>
					{
						code_to_break[i] = 0;
 8000c3c:	893b      	ldrh	r3, [r7, #8]
 8000c3e:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <prog_pop_code+0x1ac>)
 8000c40:	2100      	movs	r1, #0
 8000c42:	54d1      	strb	r1, [r2, r3]
						break;
 8000c44:	e006      	b.n	8000c54 <prog_pop_code+0xf4>
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000c46:	893b      	ldrh	r3, [r7, #8]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	813b      	strh	r3, [r7, #8]
 8000c4c:	893b      	ldrh	r3, [r7, #8]
 8000c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c52:	d3ed      	bcc.n	8000c30 <prog_pop_code+0xd0>
					}
				matrix_break(code);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fe3a 	bl	80008d0 <matrix_break>
			}

			if (current_pos < PROG_MAX_POS)
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <prog_pop_code+0x19c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c64:	d235      	bcs.n	8000cd2 <prog_pop_code+0x172>
			{
				packet = ~EEE_read(current_code - KP_START, current_pos);
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <prog_pop_code+0x1a8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	330f      	adds	r3, #15
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <prog_pop_code+0x19c>)
 8000c70:	8812      	ldrh	r2, [r2, #0]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fac7 	bl	8000208 <EEE_read>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	60fb      	str	r3, [r7, #12]
				if (packet)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d025      	beq.n	8000cd2 <prog_pop_code+0x172>
				{
					packet >>= 9;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	0a5b      	lsrs	r3, r3, #9
 8000c8a:	60fb      	str	r3, [r7, #12]
					if (current_mods & (MOD_BIT(KC_LCTRL)))
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <prog_pop_code+0x1b0>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d003      	beq.n	8000ca0 <prog_pop_code+0x140>
					{
						packet <<= (PROG_TIME_MULT - SPEEDY_CLICKY);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	015b      	lsls	r3, r3, #5
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	e00b      	b.n	8000cb8 <prog_pop_code+0x158>
					} else if (current_mods & (MOD_BIT(KC_RCTRL)))
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <prog_pop_code+0x1b0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d002      	beq.n	8000cb2 <prog_pop_code+0x152>
					{
						packet = 1 << PROG_TIME_MULT;
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	e002      	b.n	8000cb8 <prog_pop_code+0x158>
					} else {
						packet <<= PROG_TIME_MULT;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	60fb      	str	r3, [r7, #12]
					}
					if (packet < (1 << PROG_TIME_MULT))
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2b3f      	cmp	r3, #63	; 0x3f
 8000cbc:	d801      	bhi.n	8000cc2 <prog_pop_code+0x162>
						packet = 1 << PROG_TIME_MULT;
 8000cbe:	2340      	movs	r3, #64	; 0x40
 8000cc0:	60fb      	str	r3, [r7, #12]
					next_time = HAL_GetTick() + packet;
 8000cc2:	f001 f89f 	bl	8001e04 <HAL_GetTick>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <prog_pop_code+0x1a4>)
 8000cce:	6013      	str	r3, [r2, #0]
					return; // completed successfully, wait next step
 8000cd0:	e00e      	b.n	8000cf0 <prog_pop_code+0x190>
				}
			}
		}

		break_unbreaked();
 8000cd2:	f7ff ff23 	bl	8000b1c <break_unbreaked>
		prog_is_running = 0;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <prog_pop_code+0x198>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
		current_pos = 0;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <prog_pop_code+0x19c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
		next_time = 0;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <prog_pop_code+0x1a4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
		return;
 8000ce8:	e002      	b.n	8000cf0 <prog_pop_code+0x190>
		return;
 8000cea:	bf00      	nop
 8000cec:	e000      	b.n	8000cf0 <prog_pop_code+0x190>
				return;
 8000cee:	bf00      	nop
	}

}
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001f7 	.word	0x200001f7
 8000cfc:	20000206 	.word	0x20000206
 8000d00:	20000410 	.word	0x20000410
 8000d04:	20000200 	.word	0x20000200
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000210 	.word	0x20000210
 8000d10:	2000020c 	.word	0x2000020c

08000d14 <reset_prog>:


void reset_prog(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	current_pos = 0;
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <reset_prog+0x24>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
	last_prog_time = 0;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <reset_prog+0x28>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
	prog_error = 0;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <reset_prog+0x2c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
	next_time = 0;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <reset_prog+0x30>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	20000206 	.word	0x20000206
 8000d3c:	20000208 	.word	0x20000208
 8000d40:	200001f8 	.word	0x200001f8
 8000d44:	20000200 	.word	0x20000200

08000d48 <prog_pressed>:

void prog_pressed(uint8_t code)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	if (key_timer)
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <prog_pressed+0x50>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d117      	bne.n	8000d8a <prog_pressed+0x42>
		return; // another prog key pressed!
	// TODO detect if we are in programming or program is running, and compare code
	if (programming_in_progress && (code != current_code))
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <prog_pressed+0x54>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d004      	beq.n	8000d6c <prog_pressed+0x24>
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <prog_pressed+0x58>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	79fa      	ldrb	r2, [r7, #7]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d110      	bne.n	8000d8e <prog_pressed+0x46>
		return; // ignore key_press from over keys
	current_mods = get_mods();
 8000d6c:	f000 f866 	bl	8000e3c <get_mods>
 8000d70:	4603      	mov	r3, r0
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <prog_pressed+0x5c>)
 8000d76:	701a      	strb	r2, [r3, #0]
	current_code = code; // remember this code!
 8000d78:	4a09      	ldr	r2, [pc, #36]	; (8000da0 <prog_pressed+0x58>)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	7013      	strb	r3, [r2, #0]
	key_timer = HAL_GetTick();
 8000d7e:	f001 f841 	bl	8001e04 <HAL_GetTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <prog_pressed+0x50>)
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e002      	b.n	8000d90 <prog_pressed+0x48>
		return; // another prog key pressed!
 8000d8a:	bf00      	nop
 8000d8c:	e000      	b.n	8000d90 <prog_pressed+0x48>
		return; // ignore key_press from over keys
 8000d8e:	bf00      	nop
}
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200001fc 	.word	0x200001fc
 8000d9c:	200001f6 	.word	0x200001f6
 8000da0:	20000204 	.word	0x20000204
 8000da4:	2000020c 	.word	0x2000020c

08000da8 <prog_released>:

void prog_released(uint8_t code)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	if (code != current_code)
 8000db2:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <prog_released+0x84>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	79fa      	ldrb	r2, [r7, #7]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d132      	bne.n	8000e22 <prog_released+0x7a>
		return; // we are in programming, ignore other prog buttons
	if (key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)))
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <prog_released+0x88>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <prog_released+0x44>
 8000dc4:	f001 f81e 	bl	8001e04 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <prog_released+0x88>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d909      	bls.n	8000dec <prog_released+0x44>
	{
		// key pressed long, start programming
		programming_in_progress = 1;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <prog_released+0x8c>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
		EEE_erase(code - KP_START);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	330f      	adds	r3, #15
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff f9b1 	bl	800014c <EEE_erase>
 8000dea:	e016      	b.n	8000e1a <prog_released+0x72>
	}
	else
	{
		// key pressed short, stop programming or do some nice things
		if (programming_in_progress)
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <prog_released+0x8c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <prog_released+0x54>
		{
			programming_in_progress = 0;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <prog_released+0x8c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	e00e      	b.n	8000e1a <prog_released+0x72>
		}
		else
		{
			reset_prog();
 8000dfc:	f7ff ff8a 	bl	8000d14 <reset_prog>
			if (prog_is_running)
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <prog_released+0x90>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <prog_released+0x6c>
			{
				break_unbreaked(); // stopping program
 8000e08:	f7ff fe88 	bl	8000b1c <break_unbreaked>
				prog_is_running = 0;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <prog_released+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e002      	b.n	8000e1a <prog_released+0x72>
			} else {
				prog_is_running = 1;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <prog_released+0x90>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	key_timer = 0;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <prog_released+0x88>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e000      	b.n	8000e24 <prog_released+0x7c>
		return; // we are in programming, ignore other prog buttons
 8000e22:	bf00      	nop
}
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000204 	.word	0x20000204
 8000e30:	200001fc 	.word	0x200001fc
 8000e34:	200001f6 	.word	0x200001f6
 8000e38:	200001f7 	.word	0x200001f7

08000e3c <get_mods>:
typedef struct  {
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

uint8_t get_mods(void) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
	return mods;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <get_mods+0x10>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	20000414 	.word	0x20000414

08000e50 <send_system>:

static void send_system(uint16_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <send_system+0x4c>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d017      	beq.n	8000e94 <send_system+0x44>
	last_data = data;
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <send_system+0x4c>)
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	733b      	strb	r3, [r7, #12]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 8000e74:	bf00      	nop
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <send_system+0x50>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0fb      	beq.n	8000e76 <send_system+0x26>
	ready_to_send = 0;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <send_system+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <send_system+0x54>)
 8000e8e:	f006 f9b1 	bl	80071f4 <USBD_HID_SendReport>
 8000e92:	e000      	b.n	8000e96 <send_system+0x46>
	if (data == last_data) return;
 8000e94:	bf00      	nop
}
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000418 	.word	0x20000418
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000740 	.word	0x20000740

08000ea8 <send_consumer>:

static void send_consumer(uint16_t data)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <send_consumer+0x4c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	88fa      	ldrh	r2, [r7, #6]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d017      	beq.n	8000eec <send_consumer+0x44>
	last_data = data;
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <send_consumer+0x4c>)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	733b      	strb	r3, [r7, #12]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 8000ecc:	bf00      	nop
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <send_consumer+0x50>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0fb      	beq.n	8000ece <send_consumer+0x26>
	ready_to_send = 0;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <send_consumer+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <send_consumer+0x54>)
 8000ee6:	f006 f985 	bl	80071f4 <USBD_HID_SendReport>
 8000eea:	e000      	b.n	8000eee <send_consumer+0x46>
	if (data == last_data) return;
 8000eec:	bf00      	nop
}
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	2000041a 	.word	0x2000041a
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000740 	.word	0x20000740

08000f00 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <add_mods+0x24>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <add_mods+0x24>)
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000414 	.word	0x20000414

08000f28 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <del_mods+0x2c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	4013      	ands	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <del_mods+0x2c>)
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000414 	.word	0x20000414

08000f58 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000f66:	23ff      	movs	r3, #255	; 0xff
 8000f68:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000f6a:	e01b      	b.n	8000fa4 <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <add_key_byte+0x80>)
 8000f72:	4413      	add	r3, r2
 8000f74:	78db      	ldrb	r3, [r3, #3]
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d018      	beq.n	8000fae <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 8000f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d108      	bne.n	8000f98 <add_key_byte+0x40>
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <add_key_byte+0x80>)
 8000f8c:	4413      	add	r3, r2
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <add_key_byte+0x40>
            empty = i;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	dddf      	ble.n	8000f6c <add_key_byte+0x14>
 8000fac:	e000      	b.n	8000fb0 <add_key_byte+0x58>
            break;
 8000fae:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 8000fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	d10a      	bne.n	8000fce <add_key_byte+0x76>
        if (empty != -1) {
 8000fb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 8000fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fc6:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <add_key_byte+0x80>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	79fa      	ldrb	r2, [r7, #7]
 8000fcc:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8000fce:	bf00      	nop
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000444 	.word	0x20000444

08000fdc <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e00e      	b.n	800100a <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <del_key_byte+0x40>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	78db      	ldrb	r3, [r3, #3]
 8000ff4:	79fa      	ldrb	r2, [r7, #7]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d104      	bne.n	8001004 <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4a07      	ldr	r2, [pc, #28]	; (800101c <del_key_byte+0x40>)
 8000ffe:	4413      	add	r3, r2
 8001000:	2200      	movs	r2, #0
 8001002:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3301      	adds	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b05      	cmp	r3, #5
 800100e:	d9ed      	bls.n	8000fec <del_key_byte+0x10>
        }
    }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	20000444 	.word	0x20000444

08001020 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	4904      	ldr	r1, [pc, #16]	; (8001048 <keymap_key_to_keycode+0x28>)
 8001036:	00d2      	lsls	r2, r2, #3
 8001038:	440a      	add	r2, r1
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	08008c00 	.word	0x08008c00

0800104c <register_code>:


void register_code(uint8_t code)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	f000 80c5 	beq.w	80011e8 <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2bf0      	cmp	r3, #240	; 0xf0
 8001062:	d906      	bls.n	8001072 <register_code+0x26>
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2bf4      	cmp	r3, #244	; 0xf4
 8001068:	d803      	bhi.n	8001072 <register_code+0x26>
	{
    	prog_pressed(code);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe6b 	bl	8000d48 <prog_pressed>
	}

    if (code == KC_LOGOFF)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2bf0      	cmp	r3, #240	; 0xf0
 8001076:	d108      	bne.n	800108a <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 8001078:	2008      	movs	r0, #8
 800107a:	f7ff ff41 	bl	8000f00 <add_mods>
    	add_key_byte(KC_L);
 800107e:	200f      	movs	r0, #15
 8001080:	f7ff ff6a 	bl	8000f58 <add_key_byte>
	    send_keyboard_report();
 8001084:	f000 f9fe 	bl	8001484 <send_keyboard_report>
 8001088:	e0af      	b.n	80011ea <register_code+0x19e>
    }
    else if IS_KEY(code)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d909      	bls.n	80010a4 <register_code+0x58>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2ba4      	cmp	r3, #164	; 0xa4
 8001094:	d806      	bhi.n	80010a4 <register_code+0x58>
    {
	    add_key_byte(code);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5d 	bl	8000f58 <add_key_byte>
	    send_keyboard_report();
 800109e:	f000 f9f1 	bl	8001484 <send_keyboard_report>
 80010a2:	e0a2      	b.n	80011ea <register_code+0x19e>
    }
    else if IS_MOD(code) {
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2bdf      	cmp	r3, #223	; 0xdf
 80010a8:	d90f      	bls.n	80010ca <register_code+0x7e>
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2be7      	cmp	r3, #231	; 0xe7
 80010ae:	d80c      	bhi.n	80010ca <register_code+0x7e>
        add_mods(MOD_BIT(code));
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	2201      	movs	r2, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff1e 	bl	8000f00 <add_mods>
        send_keyboard_report();
 80010c4:	f000 f9de 	bl	8001484 <send_keyboard_report>
 80010c8:	e08f      	b.n	80011ea <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2ba4      	cmp	r3, #164	; 0xa4
 80010ce:	d916      	bls.n	80010fe <register_code+0xb2>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2ba7      	cmp	r3, #167	; 0xa7
 80010d4:	d813      	bhi.n	80010fe <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2ba5      	cmp	r3, #165	; 0xa5
 80010da:	d00b      	beq.n	80010f4 <register_code+0xa8>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2ba6      	cmp	r3, #166	; 0xa6
 80010e0:	d006      	beq.n	80010f0 <register_code+0xa4>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2ba7      	cmp	r3, #167	; 0xa7
 80010e6:	d101      	bne.n	80010ec <register_code+0xa0>
 80010e8:	2383      	movs	r3, #131	; 0x83
 80010ea:	e004      	b.n	80010f6 <register_code+0xaa>
 80010ec:	2300      	movs	r3, #0
 80010ee:	e002      	b.n	80010f6 <register_code+0xaa>
 80010f0:	2382      	movs	r3, #130	; 0x82
 80010f2:	e000      	b.n	80010f6 <register_code+0xaa>
 80010f4:	2381      	movs	r3, #129	; 0x81
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff feaa 	bl	8000e50 <send_system>
 80010fc:	e075      	b.n	80011ea <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	2ba7      	cmp	r3, #167	; 0xa7
 8001102:	d972      	bls.n	80011ea <register_code+0x19e>
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	2bba      	cmp	r3, #186	; 0xba
 8001108:	d86f      	bhi.n	80011ea <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2ba8      	cmp	r3, #168	; 0xa8
 800110e:	d066      	beq.n	80011de <register_code+0x192>
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2ba9      	cmp	r3, #169	; 0xa9
 8001114:	d061      	beq.n	80011da <register_code+0x18e>
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2baa      	cmp	r3, #170	; 0xaa
 800111a:	d05c      	beq.n	80011d6 <register_code+0x18a>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2bab      	cmp	r3, #171	; 0xab
 8001120:	d057      	beq.n	80011d2 <register_code+0x186>
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2bac      	cmp	r3, #172	; 0xac
 8001126:	d052      	beq.n	80011ce <register_code+0x182>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2bad      	cmp	r3, #173	; 0xad
 800112c:	d04d      	beq.n	80011ca <register_code+0x17e>
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2bb0      	cmp	r3, #176	; 0xb0
 8001132:	d048      	beq.n	80011c6 <register_code+0x17a>
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2bae      	cmp	r3, #174	; 0xae
 8001138:	d043      	beq.n	80011c2 <register_code+0x176>
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2baf      	cmp	r3, #175	; 0xaf
 800113e:	d03d      	beq.n	80011bc <register_code+0x170>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2bb1      	cmp	r3, #177	; 0xb1
 8001144:	d037      	beq.n	80011b6 <register_code+0x16a>
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2bb2      	cmp	r3, #178	; 0xb2
 800114a:	d031      	beq.n	80011b0 <register_code+0x164>
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2bb3      	cmp	r3, #179	; 0xb3
 8001150:	d02b      	beq.n	80011aa <register_code+0x15e>
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2bb4      	cmp	r3, #180	; 0xb4
 8001156:	d025      	beq.n	80011a4 <register_code+0x158>
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2bb5      	cmp	r3, #181	; 0xb5
 800115c:	d01f      	beq.n	800119e <register_code+0x152>
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2bb6      	cmp	r3, #182	; 0xb6
 8001162:	d019      	beq.n	8001198 <register_code+0x14c>
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2bb7      	cmp	r3, #183	; 0xb7
 8001168:	d013      	beq.n	8001192 <register_code+0x146>
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	2bb8      	cmp	r3, #184	; 0xb8
 800116e:	d00d      	beq.n	800118c <register_code+0x140>
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2bb9      	cmp	r3, #185	; 0xb9
 8001174:	d007      	beq.n	8001186 <register_code+0x13a>
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2bba      	cmp	r3, #186	; 0xba
 800117a:	d102      	bne.n	8001182 <register_code+0x136>
 800117c:	f240 232a 	movw	r3, #554	; 0x22a
 8001180:	e02e      	b.n	80011e0 <register_code+0x194>
 8001182:	2300      	movs	r3, #0
 8001184:	e02c      	b.n	80011e0 <register_code+0x194>
 8001186:	f240 2327 	movw	r3, #551	; 0x227
 800118a:	e029      	b.n	80011e0 <register_code+0x194>
 800118c:	f240 2326 	movw	r3, #550	; 0x226
 8001190:	e026      	b.n	80011e0 <register_code+0x194>
 8001192:	f240 2325 	movw	r3, #549	; 0x225
 8001196:	e023      	b.n	80011e0 <register_code+0x194>
 8001198:	f44f 7309 	mov.w	r3, #548	; 0x224
 800119c:	e020      	b.n	80011e0 <register_code+0x194>
 800119e:	f240 2323 	movw	r3, #547	; 0x223
 80011a2:	e01d      	b.n	80011e0 <register_code+0x194>
 80011a4:	f240 2321 	movw	r3, #545	; 0x221
 80011a8:	e01a      	b.n	80011e0 <register_code+0x194>
 80011aa:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80011ae:	e017      	b.n	80011e0 <register_code+0x194>
 80011b0:	f44f 73c9 	mov.w	r3, #402	; 0x192
 80011b4:	e014      	b.n	80011e0 <register_code+0x194>
 80011b6:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 80011ba:	e011      	b.n	80011e0 <register_code+0x194>
 80011bc:	f240 1383 	movw	r3, #387	; 0x183
 80011c0:	e00e      	b.n	80011e0 <register_code+0x194>
 80011c2:	23cd      	movs	r3, #205	; 0xcd
 80011c4:	e00c      	b.n	80011e0 <register_code+0x194>
 80011c6:	23cc      	movs	r3, #204	; 0xcc
 80011c8:	e00a      	b.n	80011e0 <register_code+0x194>
 80011ca:	23b7      	movs	r3, #183	; 0xb7
 80011cc:	e008      	b.n	80011e0 <register_code+0x194>
 80011ce:	23b6      	movs	r3, #182	; 0xb6
 80011d0:	e006      	b.n	80011e0 <register_code+0x194>
 80011d2:	23b5      	movs	r3, #181	; 0xb5
 80011d4:	e004      	b.n	80011e0 <register_code+0x194>
 80011d6:	23ea      	movs	r3, #234	; 0xea
 80011d8:	e002      	b.n	80011e0 <register_code+0x194>
 80011da:	23e9      	movs	r3, #233	; 0xe9
 80011dc:	e000      	b.n	80011e0 <register_code+0x194>
 80011de:	23e2      	movs	r3, #226	; 0xe2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fe61 	bl	8000ea8 <send_consumer>
 80011e6:	e000      	b.n	80011ea <register_code+0x19e>
        return;
 80011e8:	bf00      	nop
    }
}
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <unregister_code>:

void unregister_code(uint8_t code)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d049      	beq.n	8001294 <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2bf0      	cmp	r3, #240	; 0xf0
 8001204:	d906      	bls.n	8001214 <unregister_code+0x24>
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2bf4      	cmp	r3, #244	; 0xf4
 800120a:	d803      	bhi.n	8001214 <unregister_code+0x24>
	{
    	prog_released(code);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fdca 	bl	8000da8 <prog_released>
	}

    if (code == KC_LOGOFF)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2bf0      	cmp	r3, #240	; 0xf0
 8001218:	d108      	bne.n	800122c <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 800121a:	2008      	movs	r0, #8
 800121c:	f7ff fe84 	bl	8000f28 <del_mods>
    	del_key_byte(KC_L);
 8001220:	200f      	movs	r0, #15
 8001222:	f7ff fedb 	bl	8000fdc <del_key_byte>
    	send_keyboard_report();
 8001226:	f000 f92d 	bl	8001484 <send_keyboard_report>
 800122a:	e034      	b.n	8001296 <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d909      	bls.n	8001246 <unregister_code+0x56>
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	2ba4      	cmp	r3, #164	; 0xa4
 8001236:	d806      	bhi.n	8001246 <unregister_code+0x56>
        del_key_byte(code);
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fece 	bl	8000fdc <del_key_byte>
        send_keyboard_report();
 8001240:	f000 f920 	bl	8001484 <send_keyboard_report>
 8001244:	e027      	b.n	8001296 <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2bdf      	cmp	r3, #223	; 0xdf
 800124a:	d90f      	bls.n	800126c <unregister_code+0x7c>
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2be7      	cmp	r3, #231	; 0xe7
 8001250:	d80c      	bhi.n	800126c <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	2201      	movs	r2, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe61 	bl	8000f28 <del_mods>
        send_keyboard_report();
 8001266:	f000 f90d 	bl	8001484 <send_keyboard_report>
 800126a:	e014      	b.n	8001296 <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	2ba4      	cmp	r3, #164	; 0xa4
 8001270:	d906      	bls.n	8001280 <unregister_code+0x90>
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2ba7      	cmp	r3, #167	; 0xa7
 8001276:	d803      	bhi.n	8001280 <unregister_code+0x90>
	    send_system(0);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fde9 	bl	8000e50 <send_system>
 800127e:	e00a      	b.n	8001296 <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2ba7      	cmp	r3, #167	; 0xa7
 8001284:	d907      	bls.n	8001296 <unregister_code+0xa6>
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2bba      	cmp	r3, #186	; 0xba
 800128a:	d804      	bhi.n	8001296 <unregister_code+0xa6>
    	send_consumer(0);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe0b 	bl	8000ea8 <send_consumer>
 8001292:	e000      	b.n	8001296 <unregister_code+0xa6>
        return;
 8001294:	bf00      	nop
	}
}
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_time = 0;
	static uint8_t blinking = 0;
	static uint8_t last_blink = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 80012a0:	4b4e      	ldr	r3, [pc, #312]	; (80013dc <process_keyboard_USB+0x140>)
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <process_keyboard_USB+0x144>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d031      	beq.n	8001310 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <process_keyboard_USB+0x148>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d020      	beq.n	80012f6 <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <process_keyboard_USB+0x148>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 80012ba:	4b4b      	ldr	r3, [pc, #300]	; (80013e8 <process_keyboard_USB+0x14c>)
 80012bc:	22fa      	movs	r2, #250	; 0xfa
 80012be:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <process_keyboard_USB+0x144>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	4a47      	ldr	r2, [pc, #284]	; (80013ec <process_keyboard_USB+0x150>)
 80012ce:	4413      	add	r3, r2
 80012d0:	2209      	movs	r2, #9
 80012d2:	4619      	mov	r1, r3
 80012d4:	4846      	ldr	r0, [pc, #280]	; (80013f0 <process_keyboard_USB+0x154>)
 80012d6:	f005 ff8d 	bl	80071f4 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <process_keyboard_USB+0x144>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	425a      	negs	r2, r3
 80012e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012ea:	bf58      	it	pl
 80012ec:	4253      	negpl	r3, r2
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <process_keyboard_USB+0x144>)
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e00c      	b.n	8001310 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <process_keyboard_USB+0x14c>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <process_keyboard_USB+0x14c>)
 8001300:	801a      	strh	r2, [r3, #0]
 8001302:	4b39      	ldr	r3, [pc, #228]	; (80013e8 <process_keyboard_USB+0x14c>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <process_keyboard_USB+0x148>)
 800130c:	2201      	movs	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
	}

	if (is_disco_time())
 8001310:	f7ff fb54 	bl	80009bc <is_disco_time>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d04d      	beq.n	80013b6 <process_keyboard_USB+0x11a>
	{
		if (!blinking)
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <process_keyboard_USB+0x158>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d107      	bne.n	8001332 <process_keyboard_USB+0x96>
		{
			blinking = 1;
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <process_keyboard_USB+0x158>)
 8001324:	2201      	movs	r2, #1
 8001326:	701a      	strb	r2, [r3, #0]
			blink_time = HAL_GetTick();
 8001328:	f000 fd6c 	bl	8001e04 <HAL_GetTick>
 800132c:	4603      	mov	r3, r0
 800132e:	4a32      	ldr	r2, [pc, #200]	; (80013f8 <process_keyboard_USB+0x15c>)
 8001330:	6013      	str	r3, [r2, #0]
		}

		if (((HAL_GetTick() - blink_time)&(1<<8))&&last_blink)
 8001332:	f000 fd67 	bl	8001e04 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <process_keyboard_USB+0x15c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d016      	beq.n	8001374 <process_keyboard_USB+0xd8>
 8001346:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <process_keyboard_USB+0x160>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d012      	beq.n	8001374 <process_keyboard_USB+0xd8>
		{
			last_blink = 0;
 800134e:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <process_keyboard_USB+0x160>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <process_keyboard_USB+0x164>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 800135a:	f7ff fb25 	bl	80009a8 <is_prog_error>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <process_keyboard_USB+0xd0>
				leds_PS2(PS2_LED_CAPS_LOCK|PS2_LED_NUM_LOCK);
 8001364:	2006      	movs	r0, #6
 8001366:	f000 fab5 	bl	80018d4 <leds_PS2>
			if (is_prog_error())
 800136a:	e034      	b.n	80013d6 <process_keyboard_USB+0x13a>
			else
				leds_PS2(PS2_LED_CAPS_LOCK);
 800136c:	2004      	movs	r0, #4
 800136e:	f000 fab1 	bl	80018d4 <leds_PS2>
			if (is_prog_error())
 8001372:	e030      	b.n	80013d6 <process_keyboard_USB+0x13a>
		}
		else if ((!((HAL_GetTick() - blink_time)&(1<<8)))&&(!last_blink))
 8001374:	f000 fd46 	bl	8001e04 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <process_keyboard_USB+0x15c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d126      	bne.n	80013d6 <process_keyboard_USB+0x13a>
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <process_keyboard_USB+0x160>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d122      	bne.n	80013d6 <process_keyboard_USB+0x13a>
		{
			last_blink = 1;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <process_keyboard_USB+0x160>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <process_keyboard_USB+0x164>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 800139c:	f7ff fb04 	bl	80009a8 <is_prog_error>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <process_keyboard_USB+0x112>
				leds_PS2(0);
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 fa94 	bl	80018d4 <leds_PS2>
	{
		blinking = 0;
		leds_updated = 1;
		leds_PS2(leds_data);
	}
}
 80013ac:	e013      	b.n	80013d6 <process_keyboard_USB+0x13a>
				leds_PS2(PS2_LED_NUM_LOCK);
 80013ae:	2002      	movs	r0, #2
 80013b0:	f000 fa90 	bl	80018d4 <leds_PS2>
}
 80013b4:	e00f      	b.n	80013d6 <process_keyboard_USB+0x13a>
	else if (blinking)
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <process_keyboard_USB+0x158>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00b      	beq.n	80013d6 <process_keyboard_USB+0x13a>
		blinking = 0;
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <process_keyboard_USB+0x158>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
		leds_updated = 1;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <process_keyboard_USB+0x164>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <process_keyboard_USB+0x168>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa80 	bl	80018d4 <leds_PS2>
}
 80013d4:	e7ff      	b.n	80013d6 <process_keyboard_USB+0x13a>
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000415 	.word	0x20000415
 80013e0:	20000416 	.word	0x20000416
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000002 	.word	0x20000002
 80013ec:	20000450 	.word	0x20000450
 80013f0:	20000740 	.word	0x20000740
 80013f4:	2000041c 	.word	0x2000041c
 80013f8:	20000420 	.word	0x20000420
 80013fc:	20000424 	.word	0x20000424
 8001400:	20000691 	.word	0x20000691
 8001404:	20000690 	.word	0x20000690

08001408 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <USB_HID_buffer_sent_Callback+0x14>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000

08001420 <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <kbuf_push+0x58>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	425a      	negs	r2, r3
 8001430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001434:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001438:	bf58      	it	pl
 800143a:	4253      	negpl	r3, r2
 800143c:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <kbuf_push+0x5c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	429a      	cmp	r2, r3
 8001446:	d011      	beq.n	800146c <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <kbuf_push+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <kbuf_push+0x60>)
 8001450:	460b      	mov	r3, r1
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	4413      	add	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6810      	ldr	r0, [r2, #0]
 800145c:	6851      	ldr	r1, [r2, #4]
 800145e:	6018      	str	r0, [r3, #0]
 8001460:	6059      	str	r1, [r3, #4]
 8001462:	7a12      	ldrb	r2, [r2, #8]
 8001464:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <kbuf_push+0x58>)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	7013      	strb	r3, [r2, #0]
    }
}
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000415 	.word	0x20000415
 800147c:	20000416 	.word	0x20000416
 8001480:	20000450 	.word	0x20000450

08001484 <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <send_keyboard_report+0x1c>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <send_keyboard_report+0x20>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <send_keyboard_report+0x1c>)
 8001494:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <send_keyboard_report+0x1c>)
 8001498:	f7ff ffc2 	bl	8001420 <kbuf_push>
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000444 	.word	0x20000444
 80014a4:	20000414 	.word	0x20000414

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80014ac:	f000 fc52 	bl	8001d54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f822 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f7fe fec0 	bl	8000238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80014b8:	f006 ff8c 	bl	80083d4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80014bc:	f000 fbb6 	bl	8001c2c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <main+0x48>)
 80014c2:	f003 fa0f 	bl	80048e4 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 80014c6:	20fa      	movs	r0, #250	; 0xfa
 80014c8:	f000 fb6e 	bl	8001ba8 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <main+0x4c>)
 80014d4:	f001 f96d 	bl	80027b2 <HAL_GPIO_WritePin>
  reset_us_counter();
 80014d8:	f000 fb86 	bl	8001be8 <reset_us_counter>
  init_PS2();
 80014dc:	f000 f96c 	bl	80017b8 <init_PS2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 80014e0:	f000 fa54 	bl	800198c <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 80014e4:	f7ff feda 	bl	800129c <process_keyboard_USB>
	  _delay_ms(1);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 fb5d 	bl	8001ba8 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 80014ee:	e7f7      	b.n	80014e0 <main+0x38>
 80014f0:	200006d4 	.word	0x200006d4
 80014f4:	40010800 	.word	0x40010800

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001502:	2228      	movs	r2, #40	; 0x28
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f007 fb3c 	bl	8008b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001544:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001548:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fcda 	bl	8003f08 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800155a:	f000 f828 	bl	80015ae <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2101      	movs	r1, #1
 800157a:	4618      	mov	r0, r3
 800157c:	f002 ff44 	bl	8004408 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001586:	f000 f812 	bl	80015ae <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800158a:	2310      	movs	r3, #16
 800158c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800158e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001592:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f003 f89e 	bl	80046d8 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015a2:	f000 f804 	bl	80015ae <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3750      	adds	r7, #80	; 0x50
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b2:	b672      	cpsid	i
}
 80015b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <Error_Handler+0x8>

080015b8 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c8:	f040 80e6 	bne.w	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 80015cc:	4b74      	ldr	r3, [pc, #464]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d060      	beq.n	8001696 <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 80015d4:	4b72      	ldr	r3, [pc, #456]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d109      	bne.n	80015f0 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 80015dc:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80015de:	2202      	movs	r2, #2
 80015e0:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 80015e2:	4b70      	ldr	r3, [pc, #448]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
				parity = 0;
 80015e8:	4b6f      	ldr	r3, [pc, #444]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
				return;
 80015ee:	e0d3      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 80015f0:	4b6c      	ldr	r3, [pc, #432]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015f2:	f993 3000 	ldrsb.w	r3, [r3]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	dc1b      	bgt.n	8001632 <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 80015fa:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_GPIO_EXTI_Callback+0x1f4>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b68      	ldr	r3, [pc, #416]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001602:	f993 3000 	ldrsb.w	r3, [r3]
 8001606:	fa42 f303 	asr.w	r3, r2, r3
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00c      	beq.n	800162c <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 8001612:	4b65      	ldr	r3, [pc, #404]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bf0c      	ite	eq
 800161a:	2301      	moveq	r3, #1
 800161c:	2300      	movne	r3, #0
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001624:	701a      	strb	r2, [r3, #0]
					data_release();
 8001626:	f7fe ff05 	bl	8000434 <data_release>
 800162a:	e02a      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 800162c:	f7fe feba 	bl	80003a4 <data_low>
 8001630:	e027      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 8001632:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001634:	f993 3000 	ldrsb.w	r3, [r3]
 8001638:	2b08      	cmp	r3, #8
 800163a:	d109      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 800163c:	4b5a      	ldr	r3, [pc, #360]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 8001644:	f7fe fef6 	bl	8000434 <data_release>
 8001648:	e01b      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 800164a:	f7fe feab 	bl	80003a4 <data_low>
 800164e:	e018      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8001650:	4b54      	ldr	r3, [pc, #336]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d102      	bne.n	8001660 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 800165a:	f7fe feeb 	bl	8000434 <data_release>
 800165e:	e010      	b.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8001660:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001662:	f993 3000 	ldrsb.w	r3, [r3]
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d10b      	bne.n	8001682 <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 800166a:	f7fe fee3 	bl	8000434 <data_release>
				sendMode = 0;
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
				return;
 8001680:	e08a      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 8001682:	4b48      	ldr	r3, [pc, #288]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001684:	f993 3000 	ldrsb.w	r3, [r3]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3301      	adds	r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b25a      	sxtb	r2, r3
 8001690:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001692:	701a      	strb	r2, [r3, #0]
			return;
 8001694:	e080      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 8001696:	20c8      	movs	r0, #200	; 0xc8
 8001698:	f000 fab2 	bl	8001c00 <check_us_counter>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 80016a2:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 80016a8:	f000 fa9e 	bl	8001be8 <reset_us_counter>
			if (bitNr == 0)
 80016ac:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80016ae:	f993 3000 	ldrsb.w	r3, [r3]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10e      	bne.n	80016d4 <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 80016b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ba:	483d      	ldr	r0, [pc, #244]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80016bc:	f001 f862 	bl	8002784 <HAL_GPIO_ReadPin>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d167      	bne.n	8001796 <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
				parity = 0;
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e056      	b.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80016d6:	f993 3000 	ldrsb.w	r3, [r3]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	dc1f      	bgt.n	800171e <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	085b      	lsrs	r3, r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016e8:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 80016ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ee:	4830      	ldr	r0, [pc, #192]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80016f0:	f001 f848 	bl	8002784 <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d043      	beq.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001702:	b2da      	uxtb	r2, r3
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001706:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001708:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf0c      	ite	eq
 8001710:	2301      	moveq	r3, #1
 8001712:	2300      	movne	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e031      	b.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001720:	f993 3000 	ldrsb.w	r3, [r3]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d112      	bne.n	800174e <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172c:	4820      	ldr	r0, [pc, #128]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800172e:	f001 f829 	bl	8002784 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d024      	beq.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf0c      	ite	eq
 8001740:	2301      	moveq	r3, #1
 8001742:	2300      	movne	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e019      	b.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001750:	f993 3000 	ldrsb.w	r3, [r3]
 8001754:	2b0a      	cmp	r3, #10
 8001756:	d114      	bne.n	8001782 <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8001758:	f44f 7100 	mov.w	r1, #512	; 0x200
 800175c:	4814      	ldr	r0, [pc, #80]	; (80017b0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800175e:	f001 f811 	bl	8002784 <HAL_GPIO_ReadPin>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_GPIO_EXTI_Callback+0x1c2>
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8001770:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f93d 	bl	80019f4 <buf_push>
				bitNr = 0;
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
				return;
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001784:	f993 3000 	ldrsb.w	r3, [r3]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	3301      	adds	r3, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	b25a      	sxtb	r2, r3
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001792:	701a      	strb	r2, [r3, #0]
 8001794:	e000      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 8001796:	bf00      	nop
	}
}
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000425 	.word	0x20000425
 80017a4:	20000427 	.word	0x20000427
 80017a8:	2000042b 	.word	0x2000042b
 80017ac:	20000426 	.word	0x20000426
 80017b0:	40010c00 	.word	0x40010c00
 80017b4:	2000042c 	.word	0x2000042c

080017b8 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 80017be:	20ff      	movs	r0, #255	; 0xff
 80017c0:	f000 f820 	bl	8001804 <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 80017c4:	f000 f8c4 	bl	8001950 <wait_response_PS2>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2bfa      	cmp	r3, #250	; 0xfa
 80017cc:	d004      	beq.n	80017d8 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 80017ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d2:	f000 f9e9 	bl	8001ba8 <_delay_ms>
		send_PS2(PS2_RESET);
 80017d6:	e7f2      	b.n	80017be <init_PS2+0x6>
			break;
 80017d8:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	71fb      	strb	r3, [r7, #7]
 80017de:	e007      	b.n	80017f0 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 80017e0:	f000 f8b6 	bl	8001950 <wait_response_PS2>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2baa      	cmp	r3, #170	; 0xaa
 80017e8:	d006      	beq.n	80017f8 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f4      	bne.n	80017e0 <init_PS2+0x28>
			break;
	}
}
 80017f6:	e000      	b.n	80017fa <init_PS2+0x42>
			break;
 80017f8:	bf00      	nop
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <send_PS2+0x3c>)
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
	clock_low();
 8001814:	f7fe fdea 	bl	80003ec <clock_low>
	bitNr = 0;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <send_PS2+0x40>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	outputData = data;
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <send_PS2+0x44>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 8001824:	2064      	movs	r0, #100	; 0x64
 8001826:	f000 f9ca 	bl	8001bbe <_delay_us>

	data_low();
 800182a:	f7fe fdbb 	bl	80003a4 <data_low>
	_delay_us(10);
 800182e:	200a      	movs	r0, #10
 8001830:	f000 f9c5 	bl	8001bbe <_delay_us>
	clock_release();
 8001834:	f7fe fe1a 	bl	800046c <clock_release>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000425 	.word	0x20000425
 8001844:	20000427 	.word	0x20000427
 8001848:	20000426 	.word	0x20000426

0800184c <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SET_LEDS_Callback+0x5c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SET_LEDS_Callback+0x60>)
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	7013      	strb	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000691 	.word	0x20000691
 80018ac:	20000690 	.word	0x20000690

080018b0 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	3301      	adds	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <USBD_Sleep_Callback+0x20>)
 80018c2:	701a      	strb	r2, [r3, #0]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000428 	.word	0x20000428

080018d4 <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <leds_PS2+0x78>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d029      	beq.n	800193a <leds_PS2+0x66>
		return;
	if (buf_has_data())
 80018e6:	f000 f8d9 	bl	8001a9c <buf_has_data>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d126      	bne.n	800193e <leds_PS2+0x6a>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <leds_PS2+0x78>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 5; i > 0; i--){
 80018f6:	2305      	movs	r3, #5
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e01a      	b.n	8001932 <leds_PS2+0x5e>
		send_PS2(PS2_SET_LED);
 80018fc:	20ed      	movs	r0, #237	; 0xed
 80018fe:	f7ff ff81 	bl	8001804 <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 8001902:	f000 f825 	bl	8001950 <wait_response_PS2>
 8001906:	4603      	mov	r3, r0
 8001908:	2bfa      	cmp	r3, #250	; 0xfa
 800190a:	d003      	beq.n	8001914 <leds_PS2+0x40>
		{
			_delay_ms(20);
 800190c:	2014      	movs	r0, #20
 800190e:	f000 f94b 	bl	8001ba8 <_delay_ms>
			continue;
 8001912:	e00b      	b.n	800192c <leds_PS2+0x58>
		}
		send_PS2(led);
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff74 	bl	8001804 <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 800191c:	f000 f818 	bl	8001950 <wait_response_PS2>
 8001920:	4603      	mov	r3, r0
 8001922:	2bfa      	cmp	r3, #250	; 0xfa
 8001924:	d00d      	beq.n	8001942 <leds_PS2+0x6e>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 8001926:	2014      	movs	r0, #20
 8001928:	f000 f93e 	bl	8001ba8 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	3b01      	subs	r3, #1
 8001930:	73fb      	strb	r3, [r7, #15]
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e1      	bne.n	80018fc <leds_PS2+0x28>
 8001938:	e004      	b.n	8001944 <leds_PS2+0x70>
		return;
 800193a:	bf00      	nop
 800193c:	e002      	b.n	8001944 <leds_PS2+0x70>
		return; // do nothing if buffer is not clear - user input is more important!
 800193e:	bf00      	nop
 8001940:	e000      	b.n	8001944 <leds_PS2+0x70>
			return;
 8001942:	bf00      	nop
	}
}
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000691 	.word	0x20000691

08001950 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 8001956:	2319      	movs	r3, #25
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	e00a      	b.n	8001972 <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 800195c:	f000 f89e 	bl	8001a9c <buf_has_data>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f000 f91e 	bl	8001ba8 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	3b01      	subs	r3, #1
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f1      	bne.n	800195c <wait_response_PS2+0xc>
 8001978:	e000      	b.n	800197c <wait_response_PS2+0x2c>
			break;
 800197a:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 800197c:	f000 f864 	bl	8001a48 <buf_pop>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	if (sleep)
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <process_PS2+0x5c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <process_PS2+0x32>
	{
		leds_updated = 1;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <process_PS2+0x60>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <process_PS2+0x5c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d103      	bne.n	80019ae <process_PS2+0x22>
		{
			leds_PS2(0);
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff ff94 	bl	80018d4 <leds_PS2>
 80019ac:	e004      	b.n	80019b8 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <process_PS2+0x64>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff8e 	bl	80018d4 <leds_PS2>
		}
		sleep = 0;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <process_PS2+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 80019be:	f000 f86d 	bl	8001a9c <buf_has_data>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <process_PS2+0x4a>
		matrix_scan(buf_pop());
 80019c8:	f000 f83e 	bl	8001a48 <buf_pop>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd6a 	bl	80004a8 <matrix_scan>
 80019d4:	e004      	b.n	80019e0 <process_PS2+0x54>
	else
		leds_PS2(leds_data);
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <process_PS2+0x64>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ff7a 	bl	80018d4 <leds_PS2>
	prog_pop_code();
 80019e0:	f7ff f8be 	bl	8000b60 <prog_pop_code>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000428 	.word	0x20000428
 80019ec:	20000691 	.word	0x20000691
 80019f0:	20000690 	.word	0x20000690

080019f4 <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <buf_push+0x48>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	425a      	negs	r2, r3
 8001a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a0a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a0e:	bf58      	it	pl
 8001a10:	4253      	negpl	r3, r2
 8001a12:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <buf_push+0x4c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d008      	beq.n	8001a30 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <buf_push+0x48>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4a07      	ldr	r2, [pc, #28]	; (8001a44 <buf_push+0x50>)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <buf_push+0x48>)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	7013      	strb	r3, [r2, #0]
    }
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000429 	.word	0x20000429
 8001a40:	2000042a 	.word	0x2000042a
 8001a44:	20000694 	.word	0x20000694

08001a48 <buf_pop>:

uint8_t buf_pop(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <buf_pop+0x48>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <buf_pop+0x4c>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d012      	beq.n	8001a84 <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <buf_pop+0x4c>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <buf_pop+0x50>)
 8001a66:	5c9b      	ldrb	r3, [r3, r2]
 8001a68:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <buf_pop+0x4c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	425a      	negs	r2, r3
 8001a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a7a:	bf58      	it	pl
 8001a7c:	4253      	negpl	r3, r2
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <buf_pop+0x4c>)
 8001a82:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	20000429 	.word	0x20000429
 8001a94:	2000042a 	.word	0x2000042a
 8001a98:	20000694 	.word	0x20000694

08001a9c <buf_has_data>:

uint8_t buf_has_data(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <buf_has_data+0x20>)
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <buf_has_data+0x24>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000429 	.word	0x20000429
 8001ac0:	2000042a 	.word	0x2000042a

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_MspInit+0x5c>)
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6193      	str	r3, [r2, #24]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_MspInit+0x5c>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_MspInit+0x5c>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_MspInit+0x60>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_MspInit+0x60>)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b6e:	f000 f937 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b7c:	4802      	ldr	r0, [pc, #8]	; (8001b88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b7e:	f000 ff7a 	bl	8002a76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000c04 	.word	0x20000c04

08001b8c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b94:	f000 fe26 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f931 	bl	8001e18 <HAL_Delay>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8001bc8:	f000 f80e 	bl	8001be8 <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001bcc:	bf00      	nop
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f815 	bl	8001c00 <check_us_counter>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f8      	bne.n	8001bce <_delay_us+0x10>
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <reset_us_counter>:

inline void reset_us_counter(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <reset_us_counter+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	200006d4 	.word	0x200006d4

08001c00 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <check_us_counter+0x28>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	88fa      	ldrh	r2, [r7, #6]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	bf8c      	ite	hi
 8001c18:	2301      	movhi	r3, #1
 8001c1a:	2300      	movls	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	200006d4 	.word	0x200006d4

08001c2c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c4a:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <MX_TIM1_Init+0x9c>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c50:	222f      	movs	r2, #47	; 0x2f
 8001c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c76:	f002 fde5 	bl	8004844 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c80:	f7ff fc95 	bl	80015ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001c92:	f002 fe71 	bl	8004978 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c9c:	f7ff fc87 	bl	80015ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_TIM1_Init+0x98>)
 8001cae:	f003 f81f 	bl	8004cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cb8:	f7ff fc79 	bl	80015ae <Error_Handler>
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200006d4 	.word	0x200006d4
 8001cc8:	40012c00 	.word	0x40012c00

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_TIM_Base_MspInit+0x34>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_TIM_Base_MspInit+0x38>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_TIM_Base_MspInit+0x38>)
 8001ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce8:	6193      	str	r3, [r2, #24]
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_TIM_Base_MspInit+0x38>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40021000 	.word	0x40021000

08001d08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d0a:	e003      	b.n	8001d14 <LoopCopyDataInit>

08001d0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d12:	3104      	adds	r1, #4

08001d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d14:	480a      	ldr	r0, [pc, #40]	; (8001d40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d1c:	d3f6      	bcc.n	8001d0c <CopyDataInit>
  ldr r2, =_sbss
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d20:	e002      	b.n	8001d28 <LoopFillZerobss>

08001d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d24:	f842 3b04 	str.w	r3, [r2], #4

08001d28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d2c:	d3f9      	bcc.n	8001d22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d2e:	f7ff ff35 	bl	8001b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d32:	f006 ff03 	bl	8008b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d36:	f7ff fbb7 	bl	80014a8 <main>
  bx lr
 8001d3a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d3c:	08008d18 	.word	0x08008d18
  ldr r0, =_sdata
 8001d40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d44:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8001d48:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001d4c:	20000ef0 	.word	0x20000ef0

08001d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d50:	e7fe      	b.n	8001d50 <ADC1_2_IRQHandler>
	...

08001d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_Init+0x28>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <HAL_Init+0x28>)
 8001d5e:	f043 0310 	orr.w	r3, r3, #16
 8001d62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f947 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f808 	bl	8001d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d70:	f7ff fea8 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40022000 	.word	0x40022000

08001d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x54>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x58>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4619      	mov	r1, r3
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f95f 	bl	8002062 <HAL_SYSTICK_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00e      	b.n	8001dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d80a      	bhi.n	8001dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db4:	2200      	movs	r2, #0
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f000 f927 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <HAL_InitTick+0x5c>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e000      	b.n	8001dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20000008 	.word	0x20000008

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x1c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x20>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <HAL_IncTick+0x20>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	2000071c 	.word	0x2000071c

08001e04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return uwTick;
 8001e08:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <HAL_GetTick+0x10>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	2000071c 	.word	0x2000071c

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff fff0 	bl	8001e04 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffe0 	bl	8001e04 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000000c 	.word	0x2000000c

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4906      	ldr	r1, [pc, #24]	; (8001ef8 <__NVIC_EnableIRQ+0x34>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100

08001efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db0a      	blt.n	8001f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	490c      	ldr	r1, [pc, #48]	; (8001f48 <__NVIC_SetPriority+0x4c>)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	0112      	lsls	r2, r2, #4
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	440b      	add	r3, r1
 8001f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f24:	e00a      	b.n	8001f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4908      	ldr	r1, [pc, #32]	; (8001f4c <__NVIC_SetPriority+0x50>)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	3b04      	subs	r3, #4
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	440b      	add	r3, r1
 8001f3a:	761a      	strb	r2, [r3, #24]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000e100 	.word	0xe000e100
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f1c3 0307 	rsb	r3, r3, #7
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	bf28      	it	cs
 8001f6e:	2304      	movcs	r3, #4
 8001f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3304      	adds	r3, #4
 8001f76:	2b06      	cmp	r3, #6
 8001f78:	d902      	bls.n	8001f80 <NVIC_EncodePriority+0x30>
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3b03      	subs	r3, #3
 8001f7e:	e000      	b.n	8001f82 <NVIC_EncodePriority+0x32>
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	401a      	ands	r2, r3
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	4313      	orrs	r3, r2
         );
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3724      	adds	r7, #36	; 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff90 	bl	8001efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff2d 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff42 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff90 	bl	8001f50 <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5f 	bl	8001efc <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff35 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa2 	bl	8001fb4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002096:	4b2f      	ldr	r3, [pc, #188]	; (8002154 <HAL_FLASH_Program+0xd8>)
 8002098:	7e1b      	ldrb	r3, [r3, #24]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_FLASH_Program+0x26>
 800209e:	2302      	movs	r3, #2
 80020a0:	e054      	b.n	800214c <HAL_FLASH_Program+0xd0>
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_FLASH_Program+0xd8>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020ac:	f000 f8a8 	bl	8002200 <FLASH_WaitForLastOperation>
 80020b0:	4603      	mov	r3, r0
 80020b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d144      	bne.n	8002144 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d102      	bne.n	80020c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80020c0:	2301      	movs	r3, #1
 80020c2:	757b      	strb	r3, [r7, #21]
 80020c4:	e007      	b.n	80020d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d102      	bne.n	80020d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80020cc:	2302      	movs	r3, #2
 80020ce:	757b      	strb	r3, [r7, #21]
 80020d0:	e001      	b.n	80020d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80020d2:	2304      	movs	r3, #4
 80020d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	75bb      	strb	r3, [r7, #22]
 80020da:	e02d      	b.n	8002138 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020dc:	7dbb      	ldrb	r3, [r7, #22]
 80020de:	005a      	lsls	r2, r3, #1
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	eb02 0c03 	add.w	ip, r2, r3
 80020e6:	7dbb      	ldrb	r3, [r7, #22]
 80020e8:	0119      	lsls	r1, r3, #4
 80020ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020ee:	f1c1 0620 	rsb	r6, r1, #32
 80020f2:	f1a1 0020 	sub.w	r0, r1, #32
 80020f6:	fa22 f401 	lsr.w	r4, r2, r1
 80020fa:	fa03 f606 	lsl.w	r6, r3, r6
 80020fe:	4334      	orrs	r4, r6
 8002100:	fa23 f000 	lsr.w	r0, r3, r0
 8002104:	4304      	orrs	r4, r0
 8002106:	fa23 f501 	lsr.w	r5, r3, r1
 800210a:	b2a3      	uxth	r3, r4
 800210c:	4619      	mov	r1, r3
 800210e:	4660      	mov	r0, ip
 8002110:	f000 f85a 	bl	80021c8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002114:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002118:	f000 f872 	bl	8002200 <FLASH_WaitForLastOperation>
 800211c:	4603      	mov	r3, r0
 800211e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002120:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_FLASH_Program+0xdc>)
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_FLASH_Program+0xdc>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800212c:	7dfb      	ldrb	r3, [r7, #23]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002132:	7dbb      	ldrb	r3, [r7, #22]
 8002134:	3301      	adds	r3, #1
 8002136:	75bb      	strb	r3, [r7, #22]
 8002138:	7dba      	ldrb	r2, [r7, #22]
 800213a:	7d7b      	ldrb	r3, [r7, #21]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3cd      	bcc.n	80020dc <HAL_FLASH_Program+0x60>
 8002140:	e000      	b.n	8002144 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002142:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_FLASH_Program+0xd8>)
 8002146:	2200      	movs	r2, #0
 8002148:	761a      	strb	r2, [r3, #24]

  return status;
 800214a:	7dfb      	ldrb	r3, [r7, #23]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002154:	20000720 	.word	0x20000720
 8002158:	40022000 	.word	0x40022000

0800215c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_FLASH_Unlock+0x40>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_FLASH_Unlock+0x40>)
 8002174:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_FLASH_Unlock+0x44>)
 8002176:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_FLASH_Unlock+0x40>)
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_FLASH_Unlock+0x48>)
 800217c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800217e:	4b07      	ldr	r3, [pc, #28]	; (800219c <HAL_FLASH_Unlock+0x40>)
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800218e:	79fb      	ldrb	r3, [r7, #7]
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40022000 	.word	0x40022000
 80021a0:	45670123 	.word	0x45670123
 80021a4:	cdef89ab 	.word	0xcdef89ab

080021a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_FLASH_Lock+0x1c>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_FLASH_Lock+0x1c>)
 80021b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000

080021c8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <FLASH_Program_HalfWord+0x30>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <FLASH_Program_HalfWord+0x34>)
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4a07      	ldr	r2, [pc, #28]	; (80021fc <FLASH_Program_HalfWord+0x34>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	801a      	strh	r2, [r3, #0]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000720 	.word	0x20000720
 80021fc:	40022000 	.word	0x40022000

08002200 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff fdfc 	bl	8001e04 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800220e:	e010      	b.n	8002232 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002216:	d00c      	beq.n	8002232 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <FLASH_WaitForLastOperation+0x2e>
 800221e:	f7ff fdf1 	bl	8001e04 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	429a      	cmp	r2, r3
 800222c:	d201      	bcs.n	8002232 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e025      	b.n	800227e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e8      	bne.n	8002210 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0320 	and.w	r3, r3, #32
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 800224c:	2220      	movs	r2, #32
 800224e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002264:	2b00      	cmp	r3, #0
 8002266:	d105      	bne.n	8002274 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <FLASH_WaitForLastOperation+0x88>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002274:	f000 f80a 	bl	800228c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <FLASH_SetErrorCode+0x98>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f043 0302 	orr.w	r3, r3, #2
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f043 0310 	orr.w	r3, r3, #16
 80022b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80022b6:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <FLASH_SetErrorCode+0x98>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f043 0304 	orr.w	r3, r3, #4
 80022d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <FLASH_SetErrorCode+0x98>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <FLASH_SetErrorCode+0x9c>)
 80022ec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <FLASH_SetErrorCode+0x98>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <FLASH_SetErrorCode+0x98>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f240 1201 	movw	r2, #257	; 0x101
 8002300:	4293      	cmp	r3, r2
 8002302:	d106      	bne.n	8002312 <FLASH_SetErrorCode+0x86>
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <FLASH_SetErrorCode+0x98>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <FLASH_SetErrorCode+0x98>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	61d3      	str	r3, [r2, #28]
}  
 8002310:	e002      	b.n	8002318 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <FLASH_SetErrorCode+0x98>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	60d3      	str	r3, [r2, #12]
}  
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000
 8002328:	20000720 	.word	0x20000720

0800232c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800233e:	4b2f      	ldr	r3, [pc, #188]	; (80023fc <HAL_FLASHEx_Erase+0xd0>)
 8002340:	7e1b      	ldrb	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_FLASHEx_Erase+0x1e>
 8002346:	2302      	movs	r3, #2
 8002348:	e053      	b.n	80023f2 <HAL_FLASHEx_Erase+0xc6>
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_FLASHEx_Erase+0xd0>)
 800234c:	2201      	movs	r2, #1
 800234e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d116      	bne.n	8002386 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002358:	f24c 3050 	movw	r0, #50000	; 0xc350
 800235c:	f7ff ff50 	bl	8002200 <FLASH_WaitForLastOperation>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d141      	bne.n	80023ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002366:	2001      	movs	r0, #1
 8002368:	f000 f84c 	bl	8002404 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800236c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002370:	f7ff ff46 	bl	8002200 <FLASH_WaitForLastOperation>
 8002374:	4603      	mov	r3, r0
 8002376:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_FLASHEx_Erase+0xd4>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_FLASHEx_Erase+0xd4>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	6113      	str	r3, [r2, #16]
 8002384:	e031      	b.n	80023ea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002386:	f24c 3050 	movw	r0, #50000	; 0xc350
 800238a:	f7ff ff39 	bl	8002200 <FLASH_WaitForLastOperation>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d12a      	bne.n	80023ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f04f 32ff 	mov.w	r2, #4294967295
 800239a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	e019      	b.n	80023d8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80023a4:	68b8      	ldr	r0, [r7, #8]
 80023a6:	f000 f849 	bl	800243c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ae:	f7ff ff27 	bl	8002200 <FLASH_WaitForLastOperation>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_FLASHEx_Erase+0xd4>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_FLASHEx_Erase+0xd4>)
 80023bc:	f023 0302 	bic.w	r3, r3, #2
 80023c0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	601a      	str	r2, [r3, #0]
            break;
 80023ce:	e00c      	b.n	80023ea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	029a      	lsls	r2, r3, #10
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3dc      	bcc.n	80023a4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <HAL_FLASHEx_Erase+0xd0>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	761a      	strb	r2, [r3, #24]

  return status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000720 	.word	0x20000720
 8002400:	40022000 	.word	0x40022000

08002404 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <FLASH_MassErase+0x30>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <FLASH_MassErase+0x34>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <FLASH_MassErase+0x34>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <FLASH_MassErase+0x34>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <FLASH_MassErase+0x34>)
 8002424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002428:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	20000720 	.word	0x20000720
 8002438:	40022000 	.word	0x40022000

0800243c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <FLASH_PageErase+0x38>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <FLASH_PageErase+0x3c>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <FLASH_PageErase+0x3c>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <FLASH_PageErase+0x3c>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <FLASH_PageErase+0x3c>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4a05      	ldr	r2, [pc, #20]	; (8002478 <FLASH_PageErase+0x3c>)
 8002462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002466:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	20000720 	.word	0x20000720
 8002478:	40022000 	.word	0x40022000

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b08b      	sub	sp, #44	; 0x2c
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248e:	e169      	b.n	8002764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002490:	2201      	movs	r2, #1
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f040 8158 	bne.w	800275e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a9a      	ldr	r2, [pc, #616]	; (800271c <HAL_GPIO_Init+0x2a0>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d05e      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
 80024b8:	4a98      	ldr	r2, [pc, #608]	; (800271c <HAL_GPIO_Init+0x2a0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d875      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024be:	4a98      	ldr	r2, [pc, #608]	; (8002720 <HAL_GPIO_Init+0x2a4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d058      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
 80024c4:	4a96      	ldr	r2, [pc, #600]	; (8002720 <HAL_GPIO_Init+0x2a4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d86f      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024ca:	4a96      	ldr	r2, [pc, #600]	; (8002724 <HAL_GPIO_Init+0x2a8>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d052      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
 80024d0:	4a94      	ldr	r2, [pc, #592]	; (8002724 <HAL_GPIO_Init+0x2a8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d869      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024d6:	4a94      	ldr	r2, [pc, #592]	; (8002728 <HAL_GPIO_Init+0x2ac>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d04c      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
 80024dc:	4a92      	ldr	r2, [pc, #584]	; (8002728 <HAL_GPIO_Init+0x2ac>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d863      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024e2:	4a92      	ldr	r2, [pc, #584]	; (800272c <HAL_GPIO_Init+0x2b0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d046      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
 80024e8:	4a90      	ldr	r2, [pc, #576]	; (800272c <HAL_GPIO_Init+0x2b0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d85d      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024ee:	2b12      	cmp	r3, #18
 80024f0:	d82a      	bhi.n	8002548 <HAL_GPIO_Init+0xcc>
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d859      	bhi.n	80025aa <HAL_GPIO_Init+0x12e>
 80024f6:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <HAL_GPIO_Init+0x80>)
 80024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fc:	08002577 	.word	0x08002577
 8002500:	08002551 	.word	0x08002551
 8002504:	08002563 	.word	0x08002563
 8002508:	080025a5 	.word	0x080025a5
 800250c:	080025ab 	.word	0x080025ab
 8002510:	080025ab 	.word	0x080025ab
 8002514:	080025ab 	.word	0x080025ab
 8002518:	080025ab 	.word	0x080025ab
 800251c:	080025ab 	.word	0x080025ab
 8002520:	080025ab 	.word	0x080025ab
 8002524:	080025ab 	.word	0x080025ab
 8002528:	080025ab 	.word	0x080025ab
 800252c:	080025ab 	.word	0x080025ab
 8002530:	080025ab 	.word	0x080025ab
 8002534:	080025ab 	.word	0x080025ab
 8002538:	080025ab 	.word	0x080025ab
 800253c:	080025ab 	.word	0x080025ab
 8002540:	08002559 	.word	0x08002559
 8002544:	0800256d 	.word	0x0800256d
 8002548:	4a79      	ldr	r2, [pc, #484]	; (8002730 <HAL_GPIO_Init+0x2b4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800254e:	e02c      	b.n	80025aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	623b      	str	r3, [r7, #32]
          break;
 8002556:	e029      	b.n	80025ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	3304      	adds	r3, #4
 800255e:	623b      	str	r3, [r7, #32]
          break;
 8002560:	e024      	b.n	80025ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	3308      	adds	r3, #8
 8002568:	623b      	str	r3, [r7, #32]
          break;
 800256a:	e01f      	b.n	80025ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	330c      	adds	r3, #12
 8002572:	623b      	str	r3, [r7, #32]
          break;
 8002574:	e01a      	b.n	80025ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800257e:	2304      	movs	r3, #4
 8002580:	623b      	str	r3, [r7, #32]
          break;
 8002582:	e013      	b.n	80025ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d105      	bne.n	8002598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800258c:	2308      	movs	r3, #8
 800258e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	611a      	str	r2, [r3, #16]
          break;
 8002596:	e009      	b.n	80025ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002598:	2308      	movs	r3, #8
 800259a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	615a      	str	r2, [r3, #20]
          break;
 80025a2:	e003      	b.n	80025ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025a4:	2300      	movs	r3, #0
 80025a6:	623b      	str	r3, [r7, #32]
          break;
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x130>
          break;
 80025aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2bff      	cmp	r3, #255	; 0xff
 80025b0:	d801      	bhi.n	80025b6 <HAL_GPIO_Init+0x13a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	e001      	b.n	80025ba <HAL_GPIO_Init+0x13e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	2bff      	cmp	r3, #255	; 0xff
 80025c0:	d802      	bhi.n	80025c8 <HAL_GPIO_Init+0x14c>
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	e002      	b.n	80025ce <HAL_GPIO_Init+0x152>
 80025c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ca:	3b08      	subs	r3, #8
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	210f      	movs	r1, #15
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	401a      	ands	r2, r3
 80025e0:	6a39      	ldr	r1, [r7, #32]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	fa01 f303 	lsl.w	r3, r1, r3
 80025e8:	431a      	orrs	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 80b1 	beq.w	800275e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025fc:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <HAL_GPIO_Init+0x2b8>)
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	4a4c      	ldr	r2, [pc, #304]	; (8002734 <HAL_GPIO_Init+0x2b8>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6193      	str	r3, [r2, #24]
 8002608:	4b4a      	ldr	r3, [pc, #296]	; (8002734 <HAL_GPIO_Init+0x2b8>)
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002614:	4a48      	ldr	r2, [pc, #288]	; (8002738 <HAL_GPIO_Init+0x2bc>)
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a40      	ldr	r2, [pc, #256]	; (800273c <HAL_GPIO_Init+0x2c0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_GPIO_Init+0x1ec>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <HAL_GPIO_Init+0x2c4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00d      	beq.n	8002664 <HAL_GPIO_Init+0x1e8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <HAL_GPIO_Init+0x2c8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <HAL_GPIO_Init+0x1e4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3d      	ldr	r2, [pc, #244]	; (8002748 <HAL_GPIO_Init+0x2cc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_GPIO_Init+0x1e0>
 8002658:	2303      	movs	r3, #3
 800265a:	e006      	b.n	800266a <HAL_GPIO_Init+0x1ee>
 800265c:	2304      	movs	r3, #4
 800265e:	e004      	b.n	800266a <HAL_GPIO_Init+0x1ee>
 8002660:	2302      	movs	r3, #2
 8002662:	e002      	b.n	800266a <HAL_GPIO_Init+0x1ee>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_GPIO_Init+0x1ee>
 8002668:	2300      	movs	r3, #0
 800266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800266c:	f002 0203 	and.w	r2, r2, #3
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	4093      	lsls	r3, r2
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800267a:	492f      	ldr	r1, [pc, #188]	; (8002738 <HAL_GPIO_Init+0x2bc>)
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	3302      	adds	r3, #2
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002694:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_GPIO_Init+0x2d0>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	492c      	ldr	r1, [pc, #176]	; (800274c <HAL_GPIO_Init+0x2d0>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	600b      	str	r3, [r1, #0]
 80026a0:	e006      	b.n	80026b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	4928      	ldr	r1, [pc, #160]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026bc:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4922      	ldr	r1, [pc, #136]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ca:	4b20      	ldr	r3, [pc, #128]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	491e      	ldr	r1, [pc, #120]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	4918      	ldr	r1, [pc, #96]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	608b      	str	r3, [r1, #8]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026f2:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	4914      	ldr	r1, [pc, #80]	; (800274c <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d021      	beq.n	8002750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_GPIO_Init+0x2d0>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	490e      	ldr	r1, [pc, #56]	; (800274c <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e021      	b.n	800275e <HAL_GPIO_Init+0x2e2>
 800271a:	bf00      	nop
 800271c:	10320000 	.word	0x10320000
 8002720:	10310000 	.word	0x10310000
 8002724:	10220000 	.word	0x10220000
 8002728:	10210000 	.word	0x10210000
 800272c:	10120000 	.word	0x10120000
 8002730:	10110000 	.word	0x10110000
 8002734:	40021000 	.word	0x40021000
 8002738:	40010000 	.word	0x40010000
 800273c:	40010800 	.word	0x40010800
 8002740:	40010c00 	.word	0x40010c00
 8002744:	40011000 	.word	0x40011000
 8002748:	40011400 	.word	0x40011400
 800274c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_GPIO_Init+0x304>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	43db      	mvns	r3, r3
 8002758:	4909      	ldr	r1, [pc, #36]	; (8002780 <HAL_GPIO_Init+0x304>)
 800275a:	4013      	ands	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	3301      	adds	r3, #1
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	f47f ae8e 	bne.w	8002490 <HAL_GPIO_Init+0x14>
  }
}
 8002774:	bf00      	nop
 8002776:	bf00      	nop
 8002778:	372c      	adds	r7, #44	; 0x2c
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40010400 	.word	0x40010400

08002784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e001      	b.n	80027a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr

080027b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	807b      	strh	r3, [r7, #2]
 80027be:	4613      	mov	r3, r2
 80027c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c2:	787b      	ldrb	r3, [r7, #1]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ce:	e003      	b.n	80027d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d0:	887b      	ldrh	r3, [r7, #2]
 80027d2:	041a      	lsls	r2, r3, #16
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	611a      	str	r2, [r3, #16]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	; (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fed8 	bl	80015b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08b      	sub	sp, #44	; 0x2c
 8002818:	af06      	add	r7, sp, #24
 800281a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0fd      	b.n	8002a22 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f005 fefe 	bl	800863c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f002 fad3 	bl	8004df8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	687e      	ldr	r6, [r7, #4]
 800285a:	466d      	mov	r5, sp
 800285c:	f106 0410 	add.w	r4, r6, #16
 8002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	1d33      	adds	r3, r6, #4
 800286a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800286c:	6838      	ldr	r0, [r7, #0]
 800286e:	f002 fa9d 	bl	8004dac <USB_CoreInit>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0ce      	b.n	8002a22 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f002 face 	bl	8004e2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	e04c      	b.n	8002930 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	4613      	mov	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	440b      	add	r3, r1
 80028a6:	3301      	adds	r3, #1
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	440b      	add	r3, r1
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	b298      	uxth	r0, r3
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	3336      	adds	r3, #54	; 0x36
 80028d4:	4602      	mov	r2, r0
 80028d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	3303      	adds	r3, #3
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	3338      	adds	r3, #56	; 0x38
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	333c      	adds	r3, #60	; 0x3c
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	440b      	add	r3, r1
 8002924:	3340      	adds	r3, #64	; 0x40
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3301      	adds	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3ad      	bcc.n	8002896 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3b5      	bcc.n	8002940 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	687e      	ldr	r6, [r7, #4]
 80029dc:	466d      	mov	r5, sp
 80029de:	f106 0410 	add.w	r4, r6, #16
 80029e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	1d33      	adds	r3, r6, #4
 80029ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f002 fa28 	bl	8004e44 <USB_DevInit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00d      	b.n	8002a22 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 f9c2 	bl	8006da4 <USB_DevDisconnect>

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_PCD_Start+0x16>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e016      	b.n	8002a6e <HAL_PCD_Start+0x44>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f002 f9bd 	bl	8004dcc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002a52:	2101      	movs	r1, #1
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f006 f83a 	bl	8008ace <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 f996 	bl	8006d90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 f998 	bl	8006db8 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a92:	d102      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fb4a 	bl	800312e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f98a 	bl	8006db8 <USB_ReadInterrupts>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d112      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac2:	b292      	uxth	r2, r2
 8002ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f005 fe32 	bl	8008732 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f925 	bl	8002d20 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f96c 	bl	8006db8 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aea:	d10b      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002afe:	b292      	uxth	r2, r2
 8002b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 f955 	bl	8006db8 <USB_ReadInterrupts>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b18:	d10b      	bne.n	8002b32 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b2c:	b292      	uxth	r2, r2
 8002b2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 f93e 	bl	8006db8 <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	d126      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0204 	bic.w	r2, r2, #4
 8002b5a:	b292      	uxth	r2, r2
 8002b5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0208 	bic.w	r2, r2, #8
 8002b72:	b292      	uxth	r2, r2
 8002b74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f005 fe09 	bl	8008790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b90:	b292      	uxth	r2, r2
 8002b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 f90c 	bl	8006db8 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002baa:	f040 8084 	bne.w	8002cb6 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	77fb      	strb	r3, [r7, #31]
 8002bb2:	e011      	b.n	8002bd8 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	441a      	add	r2, r3
 8002bc0:	7ffb      	ldrb	r3, [r7, #31]
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	f107 0120 	add.w	r1, r7, #32
 8002bcc:	440b      	add	r3, r1
 8002bce:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	77fb      	strb	r3, [r7, #31]
 8002bd8:	7ffb      	ldrb	r3, [r7, #31]
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d9ea      	bls.n	8002bb4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0201 	bic.w	r2, r2, #1
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002c0e:	bf00      	nop
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f6      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c34:	b292      	uxth	r2, r2
 8002c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	77fb      	strb	r3, [r7, #31]
 8002c3e:	e010      	b.n	8002c62 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002c40:	7ffb      	ldrb	r3, [r7, #31]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4611      	mov	r1, r2
 8002c48:	7ffa      	ldrb	r2, [r7, #31]
 8002c4a:	0092      	lsls	r2, r2, #2
 8002c4c:	440a      	add	r2, r1
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	f107 0120 	add.w	r1, r7, #32
 8002c54:	440b      	add	r3, r1
 8002c56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002c5a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002c5c:	7ffb      	ldrb	r3, [r7, #31]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	77fb      	strb	r3, [r7, #31]
 8002c62:	7ffb      	ldrb	r3, [r7, #31]
 8002c64:	2b07      	cmp	r3, #7
 8002c66:	d9eb      	bls.n	8002c40 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0208 	orr.w	r2, r2, #8
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	b292      	uxth	r2, r2
 8002c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0204 	orr.w	r2, r2, #4
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f005 fd5c 	bl	800876e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 f87c 	bl	8006db8 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cca:	d10e      	bne.n	8002cea <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cde:	b292      	uxth	r2, r2
 8002ce0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f005 fd16 	bl	8008716 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f004 f862 	bl	8006db8 <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	d10b      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d12:	b292      	uxth	r2, r2
 8002d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3720      	adds	r7, #32
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_PCD_SetAddress+0x1a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e013      	b.n	8002d62 <HAL_PCD_SetAddress+0x42>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 f809 	bl	8006d6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b084      	sub	sp, #16
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	70fb      	strb	r3, [r7, #3]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	803b      	strh	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	da0e      	bge.n	8002dae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	705a      	strb	r2, [r3, #1]
 8002dac:	e00e      	b.n	8002dcc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 0207 	and.w	r2, r3, #7
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dd8:	883a      	ldrh	r2, [r7, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	78ba      	ldrb	r2, [r7, #2]
 8002de2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	785b      	ldrb	r3, [r3, #1]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d004      	beq.n	8002df6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002df6:	78bb      	ldrb	r3, [r7, #2]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d102      	bne.n	8002e02 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_PCD_EP_Open+0xa6>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e00e      	b.n	8002e2e <HAL_PCD_EP_Open+0xc4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 f830 	bl	8004e84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002e2c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da0e      	bge.n	8002e68 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	705a      	strb	r2, [r3, #1]
 8002e66:	e00e      	b.n	8002e86 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 0207 	and.w	r2, r3, #7
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_EP_Close+0x6a>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e00e      	b.n	8002ebe <HAL_PCD_EP_Close+0x88>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fb52 	bl	8005558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed6:	7afb      	ldrb	r3, [r7, #11]
 8002ed8:	f003 0207 	and.w	r2, r3, #7
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2200      	movs	r2, #0
 8002efe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2200      	movs	r2, #0
 8002f04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f12:	7afb      	ldrb	r3, [r7, #11]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6979      	ldr	r1, [r7, #20]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 fd04 	bl	8005930 <USB_EPStartXfer>
 8002f28:	e005      	b.n	8002f36 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6979      	ldr	r1, [r7, #20]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f002 fcfd 	bl	8005930 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f98:	7afb      	ldrb	r3, [r7, #11]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 fcc1 	bl	8005930 <USB_EPStartXfer>
 8002fae:	e005      	b.n	8002fbc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6979      	ldr	r1, [r7, #20]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fcba 	bl	8005930 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	f003 0207 	and.w	r2, r3, #7
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d901      	bls.n	8002fe4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e04c      	b.n	800307e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0e      	bge.n	800300a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	705a      	strb	r2, [r3, #1]
 8003008:	e00c      	b.n	8003024 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_PCD_EP_SetStall+0x7e>
 8003040:	2302      	movs	r3, #2
 8003042:	e01c      	b.n	800307e <HAL_PCD_EP_SetStall+0xb8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68f9      	ldr	r1, [r7, #12]
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fd8c 	bl	8006b70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f003 feb1 	bl	8006dd6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	d901      	bls.n	80030a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e040      	b.n	8003126 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da0e      	bge.n	80030ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	1c5a      	adds	r2, r3, #1
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	705a      	strb	r2, [r3, #1]
 80030c8:	e00e      	b.n	80030e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	f003 0207 	and.w	r2, r3, #7
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_EP_ClrStall+0x82>
 8003104:	2302      	movs	r3, #2
 8003106:	e00e      	b.n	8003126 <HAL_PCD_EP_ClrStall+0xa0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fd7a 	bl	8006c10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08e      	sub	sp, #56	; 0x38
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003136:	e2df      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003140:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003144:	b2db      	uxtb	r3, r3
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800314e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003152:	2b00      	cmp	r3, #0
 8003154:	f040 8158 	bne.w	8003408 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003158:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	2b00      	cmp	r3, #0
 8003160:	d152      	bne.n	8003208 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	81fb      	strh	r3, [r7, #14]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	89fb      	ldrh	r3, [r7, #14]
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29b      	uxth	r3, r3
 8003184:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3328      	adds	r3, #40	; 0x28
 800318a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	3302      	adds	r3, #2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	441a      	add	r2, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031c6:	2100      	movs	r1, #0
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f005 fa8a 	bl	80086e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 828e 	beq.w	80036f8 <PCD_EP_ISR_Handler+0x5ca>
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 8289 	bne.w	80036f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b292      	uxth	r2, r2
 80031fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003206:	e277      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003218:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800321a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321e:	2b00      	cmp	r3, #0
 8003220:	d034      	beq.n	800328c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322a:	b29b      	uxth	r3, r3
 800322c:	461a      	mov	r2, r3
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	3306      	adds	r3, #6
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003260:	b29b      	uxth	r3, r3
 8003262:	f003 fe08 	bl	8006e76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29a      	uxth	r2, r3
 800326e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003272:	4013      	ands	r3, r2
 8003274:	823b      	strh	r3, [r7, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	8a3a      	ldrh	r2, [r7, #16]
 800327c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003280:	b292      	uxth	r2, r2
 8003282:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f005 f9ff 	bl	8008688 <HAL_PCD_SetupStageCallback>
 800328a:	e235      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800328c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003290:	2b00      	cmp	r3, #0
 8003292:	f280 8231 	bge.w	80036f8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29a      	uxth	r2, r3
 800329e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032a2:	4013      	ands	r3, r2
 80032a4:	83bb      	strh	r3, [r7, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	8bba      	ldrh	r2, [r7, #28]
 80032ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032b0:	b292      	uxth	r2, r2
 80032b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032bc:	b29b      	uxth	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	3306      	adds	r3, #6
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d019      	beq.n	800331c <PCD_EP_ISR_Handler+0x1ee>
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d015      	beq.n	800331c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	6959      	ldr	r1, [r3, #20]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003300:	b29b      	uxth	r3, r3
 8003302:	f003 fdb8 	bl	8006e76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	441a      	add	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003314:	2100      	movs	r1, #0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f005 f9c8 	bl	80086ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4413      	add	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d112      	bne.n	800336a <PCD_EP_ISR_Handler+0x23c>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800334e:	b29a      	uxth	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	801a      	strh	r2, [r3, #0]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800335e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003362:	b29a      	uxth	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	801a      	strh	r2, [r3, #0]
 8003368:	e02f      	b.n	80033ca <PCD_EP_ISR_Handler+0x29c>
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b3e      	cmp	r3, #62	; 0x3e
 8003370:	d813      	bhi.n	800339a <PCD_EP_ISR_Handler+0x26c>
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <PCD_EP_ISR_Handler+0x25e>
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	3301      	adds	r3, #1
 800338a:	633b      	str	r3, [r7, #48]	; 0x30
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	b29b      	uxth	r3, r3
 8003390:	029b      	lsls	r3, r3, #10
 8003392:	b29a      	uxth	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e017      	b.n	80033ca <PCD_EP_ISR_Handler+0x29c>
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	633b      	str	r3, [r7, #48]	; 0x30
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <PCD_EP_ISR_Handler+0x286>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	3b01      	subs	r3, #1
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	029b      	lsls	r3, r3, #10
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	827b      	strh	r3, [r7, #18]
 80033dc:	8a7b      	ldrh	r3, [r7, #18]
 80033de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80033e2:	827b      	strh	r3, [r7, #18]
 80033e4:	8a7b      	ldrh	r3, [r7, #18]
 80033e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80033ea:	827b      	strh	r3, [r7, #18]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	8a7b      	ldrh	r3, [r7, #18]
 80033f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003402:	b29b      	uxth	r3, r3
 8003404:	8013      	strh	r3, [r2, #0]
 8003406:	e177      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800341a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800341e:	2b00      	cmp	r3, #0
 8003420:	f280 80ea 	bge.w	80035f8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29a      	uxth	r2, r3
 8003436:	f640 738f 	movw	r3, #3983	; 0xf8f
 800343a:	4013      	ands	r3, r2
 800343c:	853b      	strh	r3, [r7, #40]	; 0x28
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800344e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003452:	b292      	uxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003456:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	7b1b      	ldrb	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d122      	bne.n	80034ba <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800347c:	b29b      	uxth	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	3306      	adds	r3, #6
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800349e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8087 	beq.w	80035b4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	6959      	ldr	r1, [r3, #20]
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	88da      	ldrh	r2, [r3, #6]
 80034b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034b4:	f003 fcdf 	bl	8006e76 <USB_ReadPMA>
 80034b8:	e07c      	b.n	80035b4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d108      	bne.n	80034d4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034c4:	461a      	mov	r2, r3
 80034c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f923 	bl	8003714 <HAL_PCD_EP_DB_Receive>
 80034ce:	4603      	mov	r3, r0
 80034d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80034d2:	e06f      	b.n	80035b4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003510:	b29b      	uxth	r3, r3
 8003512:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d021      	beq.n	8003572 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	3302      	adds	r3, #2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003556:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800355a:	2b00      	cmp	r3, #0
 800355c:	d02a      	beq.n	80035b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	6959      	ldr	r1, [r3, #20]
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	891a      	ldrh	r2, [r3, #8]
 800356a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800356c:	f003 fc83 	bl	8006e76 <USB_ReadPMA>
 8003570:	e020      	b.n	80035b4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	3306      	adds	r3, #6
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800359c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d008      	beq.n	80035b4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6959      	ldr	r1, [r3, #20]
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	895a      	ldrh	r2, [r3, #10]
 80035ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035b0:	f003 fc61 	bl	8006e76 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ba:	441a      	add	r2, r3
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035c6:	441a      	add	r2, r3
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <PCD_EP_ISR_Handler+0x4b0>
 80035d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d206      	bcs.n	80035ec <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f005 f861 	bl	80086ac <HAL_PCD_DataOutStageCallback>
 80035ea:	e005      	b.n	80035f8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	4618      	mov	r0, r3
 80035f4:	f002 f99c 	bl	8005930 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d07a      	beq.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003602:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800362c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003630:	843b      	strh	r3, [r7, #32]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	8c3b      	ldrh	r3, [r7, #32]
 8003642:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003646:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800364a:	b29b      	uxth	r3, r3
 800364c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d108      	bne.n	8003668 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800365a:	2b02      	cmp	r3, #2
 800365c:	d146      	bne.n	80036ec <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800365e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d141      	bne.n	80036ec <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003670:	b29b      	uxth	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	3302      	adds	r3, #2
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	8bfb      	ldrh	r3, [r7, #30]
 8003698:	429a      	cmp	r2, r3
 800369a:	d906      	bls.n	80036aa <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	8bfb      	ldrh	r3, [r7, #30]
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	619a      	str	r2, [r3, #24]
 80036a8:	e002      	b.n	80036b0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d106      	bne.n	80036c6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4619      	mov	r1, r3
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f005 f80f 	bl	80086e2 <HAL_PCD_DataInStageCallback>
 80036c4:	e018      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	695a      	ldr	r2, [r3, #20]
 80036ca:	8bfb      	ldrh	r3, [r7, #30]
 80036cc:	441a      	add	r2, r3
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	8bfb      	ldrh	r3, [r7, #30]
 80036d8:	441a      	add	r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 f923 	bl	8005930 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80036ea:	e005      	b.n	80036f8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ee:	461a      	mov	r2, r3
 80036f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f91b 	bl	800392e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003700:	b29b      	uxth	r3, r3
 8003702:	b21b      	sxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	f6ff ad17 	blt.w	8003138 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3738      	adds	r7, #56	; 0x38
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d07e      	beq.n	800382a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003734:	b29b      	uxth	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	4413      	add	r3, r2
 8003740:	3302      	adds	r3, #2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003754:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	8b7b      	ldrh	r3, [r7, #26]
 800375c:	429a      	cmp	r2, r3
 800375e:	d306      	bcc.n	800376e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	699a      	ldr	r2, [r3, #24]
 8003764:	8b7b      	ldrh	r3, [r7, #26]
 8003766:	1ad2      	subs	r2, r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	619a      	str	r2, [r3, #24]
 800376c:	e002      	b.n	8003774 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d123      	bne.n	80037c4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	833b      	strh	r3, [r7, #24]
 8003798:	8b3b      	ldrh	r3, [r7, #24]
 800379a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800379e:	833b      	strh	r3, [r7, #24]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	8b3b      	ldrh	r3, [r7, #24]
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01f      	beq.n	800380e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e8:	82fb      	strh	r3, [r7, #22]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	441a      	add	r2, r3
 80037f8:	8afb      	ldrh	r3, [r7, #22]
 80037fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003806:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800380e:	8b7b      	ldrh	r3, [r7, #26]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8087 	beq.w	8003924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6959      	ldr	r1, [r3, #20]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	891a      	ldrh	r2, [r3, #8]
 8003822:	8b7b      	ldrh	r3, [r7, #26]
 8003824:	f003 fb27 	bl	8006e76 <USB_ReadPMA>
 8003828:	e07c      	b.n	8003924 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003832:	b29b      	uxth	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	3306      	adds	r3, #6
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003852:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	8b7b      	ldrh	r3, [r7, #26]
 800385a:	429a      	cmp	r2, r3
 800385c:	d306      	bcc.n	800386c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	8b7b      	ldrh	r3, [r7, #26]
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	619a      	str	r2, [r3, #24]
 800386a:	e002      	b.n	8003872 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2200      	movs	r2, #0
 8003870:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d123      	bne.n	80038c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	b29b      	uxth	r3, r3
 800388c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003894:	83fb      	strh	r3, [r7, #30]
 8003896:	8bfb      	ldrh	r3, [r7, #30]
 8003898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800389c:	83fb      	strh	r3, [r7, #30]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	441a      	add	r2, r3
 80038ac:	8bfb      	ldrh	r3, [r7, #30]
 80038ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038be:	b29b      	uxth	r3, r3
 80038c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d11f      	bne.n	800390c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	83bb      	strh	r3, [r7, #28]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	8bbb      	ldrh	r3, [r7, #28]
 80038f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003904:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800390c:	8b7b      	ldrh	r3, [r7, #26]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6959      	ldr	r1, [r3, #20]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	895a      	ldrh	r2, [r3, #10]
 800391e:	8b7b      	ldrh	r3, [r7, #26]
 8003920:	f003 faa9 	bl	8006e76 <USB_ReadPMA>
    }
  }

  return count;
 8003924:	8b7b      	ldrh	r3, [r7, #26]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b094      	sub	sp, #80	; 0x50
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8138 	beq.w	8003bb8 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	3302      	adds	r3, #2
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003970:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800397c:	429a      	cmp	r2, r3
 800397e:	d907      	bls.n	8003990 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003988:	1ad2      	subs	r2, r2, r3
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	619a      	str	r2, [r3, #24]
 800398e:	e002      	b.n	8003996 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d12c      	bne.n	80039f8 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f004 fe9c 	bl	80086e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 823a 	beq.w	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	461a      	mov	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d0:	82fb      	strh	r3, [r7, #22]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	441a      	add	r2, r3
 80039e0:	8afb      	ldrh	r3, [r7, #22]
 80039e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	8013      	strh	r3, [r2, #0]
 80039f6:	e218      	b.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01f      	beq.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	441a      	add	r2, r3
 8003a2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 81ee 	bne.w	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a56:	441a      	add	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a64:	441a      	add	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	6a1a      	ldr	r2, [r3, #32]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d309      	bcc.n	8003a8a <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	1ad2      	subs	r2, r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	621a      	str	r2, [r3, #32]
 8003a88:	e015      	b.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8003a92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003aa0:	e009      	b.n	8003ab6 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	785b      	ldrb	r3, [r3, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d155      	bne.n	8003b6a <HAL_PCD_EP_DB_Transmit+0x23c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	011a      	lsls	r2, r3, #4
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d112      	bne.n	8003b12 <HAL_PCD_EP_DB_Transmit+0x1e4>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e047      	b.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x274>
 8003b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b14:	2b3e      	cmp	r3, #62	; 0x3e
 8003b16:	d811      	bhi.n	8003b3c <HAL_PCD_EP_DB_Transmit+0x20e>
 8003b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_PCD_EP_DB_Transmit+0x200>
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	e032      	b.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x274>
 8003b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x224>
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	801a      	strh	r2, [r3, #0]
 8003b68:	e01b      	b.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x274>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d117      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x274>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	4413      	add	r3, r2
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	011a      	lsls	r2, r3, #4
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	4413      	add	r3, r2
 8003b94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	891a      	ldrh	r2, [r3, #8]
 8003bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f003 f91b 	bl	8006dec <USB_WritePMA>
 8003bb6:	e138      	b.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3306      	adds	r3, #6
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d307      	bcc.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d12e      	bne.n	8003c6c <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	4619      	mov	r1, r3
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f004 fd64 	bl	80086e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 8102 	bne.w	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4413      	add	r3, r2
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	8013      	strh	r3, [r2, #0]
 8003c6a:	e0de      	b.n	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11f      	bne.n	8003cb6 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	867b      	strh	r3, [r7, #50]	; 0x32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003caa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80b4 	bne.w	8003e2a <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cca:	441a      	add	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003cd8:	441a      	add	r2, r3
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d309      	bcc.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	e015      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003d0a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d14:	e009      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d155      	bne.n	8003de4 <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	461a      	mov	r2, r3
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	4413      	add	r3, r2
 8003d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	011a      	lsls	r2, r3, #4
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	4413      	add	r3, r2
 8003d5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d112      	bne.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x45e>
 8003d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	801a      	strh	r2, [r3, #0]
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	e044      	b.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d90:	d811      	bhi.n	8003db6 <HAL_PCD_EP_DB_Transmit+0x488>
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	085b      	lsrs	r3, r3, #1
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da4:	3301      	adds	r3, #1
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	029b      	lsls	r3, r3, #10
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e02f      	b.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_PCD_EP_DB_Transmit+0x49e>
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	029b      	lsls	r3, r3, #10
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e018      	b.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	785b      	ldrb	r3, [r3, #1]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d114      	bne.n	8003e16 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	4413      	add	r3, r2
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	011a      	lsls	r2, r3, #4
 8003e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e06:	4413      	add	r3, r2
 8003e08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e14:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6959      	ldr	r1, [r3, #20]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	895a      	ldrh	r2, [r3, #10]
 8003e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	f002 ffe1 	bl	8006dec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e44:	82bb      	strh	r3, [r7, #20]
 8003e46:	8abb      	ldrh	r3, [r7, #20]
 8003e48:	f083 0310 	eor.w	r3, r3, #16
 8003e4c:	82bb      	strh	r3, [r7, #20]
 8003e4e:	8abb      	ldrh	r3, [r7, #20]
 8003e50:	f083 0320 	eor.w	r3, r3, #32
 8003e54:	82bb      	strh	r3, [r7, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	441a      	add	r2, r3
 8003e64:	8abb      	ldrh	r3, [r7, #20]
 8003e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3750      	adds	r7, #80	; 0x50
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	607b      	str	r3, [r7, #4]
 8003e8e:	460b      	mov	r3, r1
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	4613      	mov	r3, r2
 8003e94:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003e96:	897b      	ldrh	r3, [r7, #10]
 8003e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e009      	b.n	8003ece <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eba:	897a      	ldrh	r2, [r7, #10]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ece:	893b      	ldrh	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	80da      	strh	r2, [r3, #6]
 8003ee2:	e00b      	b.n	8003efc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e26c      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8087 	beq.w	8004036 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f28:	4b92      	ldr	r3, [pc, #584]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 030c 	and.w	r3, r3, #12
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d00c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f34:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d112      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
 8003f40:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d10b      	bne.n	8003f66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	4b89      	ldr	r3, [pc, #548]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d06c      	beq.n	8004034 <HAL_RCC_OscConfig+0x12c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d168      	bne.n	8004034 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e246      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f6e:	d106      	bne.n	8003f7e <HAL_RCC_OscConfig+0x76>
 8003f70:	4b80      	ldr	r3, [pc, #512]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7f      	ldr	r2, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	e02e      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7a      	ldr	r2, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b78      	ldr	r3, [pc, #480]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a77      	ldr	r2, [pc, #476]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0xbc>
 8003faa:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a71      	ldr	r2, [pc, #452]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0xd4>
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd ff0e 	bl	8001e04 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fd ff0a 	bl	8001e04 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1fa      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0xe4>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd fefa 	bl	8001e04 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd fef6 	bl	8001e04 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1e6      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x10c>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004042:	4b4c      	ldr	r3, [pc, #304]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800404e:	4b49      	ldr	r3, [pc, #292]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b08      	cmp	r3, #8
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
 800405a:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	4b43      	ldr	r3, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1ba      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4939      	ldr	r1, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e03a      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd feaf 	bl	8001e04 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fd feab 	bl	8001e04 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e19b      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4927      	ldr	r1, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b26      	ldr	r3, [pc, #152]	; (8004178 <HAL_RCC_OscConfig+0x270>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e4:	f7fd fe8e 	bl	8001e04 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fd fe8a 	bl	8001e04 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e17a      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d03a      	beq.n	800418c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x274>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004124:	f7fd fe6e 	bl	8001e04 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7fd fe6a 	bl	8001e04 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e15a      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RCC_OscConfig+0x26c>)
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800414a:	2001      	movs	r0, #1
 800414c:	f000 faa6 	bl	800469c <RCC_Delay>
 8004150:	e01c      	b.n	800418c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_OscConfig+0x274>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fd fe54 	bl	8001e04 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800415e:	e00f      	b.n	8004180 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd fe50 	bl	8001e04 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d908      	bls.n	8004180 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e140      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	42420000 	.word	0x42420000
 800417c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b9e      	ldr	r3, [pc, #632]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e9      	bne.n	8004160 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a6 	beq.w	80042e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b97      	ldr	r3, [pc, #604]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10d      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	4b94      	ldr	r3, [pc, #592]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4a93      	ldr	r2, [pc, #588]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b4:	61d3      	str	r3, [r2, #28]
 80041b6:	4b91      	ldr	r3, [pc, #580]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041be:	60bb      	str	r3, [r7, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c6:	4b8e      	ldr	r3, [pc, #568]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d118      	bne.n	8004204 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d2:	4b8b      	ldr	r3, [pc, #556]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a8a      	ldr	r2, [pc, #552]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041de:	f7fd fe11 	bl	8001e04 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e6:	f7fd fe0d 	bl	8001e04 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b64      	cmp	r3, #100	; 0x64
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0fd      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f8:	4b81      	ldr	r3, [pc, #516]	; (8004400 <HAL_RCC_OscConfig+0x4f8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d106      	bne.n	800421a <HAL_RCC_OscConfig+0x312>
 800420c:	4b7b      	ldr	r3, [pc, #492]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	4a7a      	ldr	r2, [pc, #488]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	6213      	str	r3, [r2, #32]
 8004218:	e02d      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10c      	bne.n	800423c <HAL_RCC_OscConfig+0x334>
 8004222:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	4a75      	ldr	r2, [pc, #468]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004228:	f023 0301 	bic.w	r3, r3, #1
 800422c:	6213      	str	r3, [r2, #32]
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	4a72      	ldr	r2, [pc, #456]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	6213      	str	r3, [r2, #32]
 800423a:	e01c      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d10c      	bne.n	800425e <HAL_RCC_OscConfig+0x356>
 8004244:	4b6d      	ldr	r3, [pc, #436]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a6c      	ldr	r2, [pc, #432]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6213      	str	r3, [r2, #32]
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	4a69      	ldr	r2, [pc, #420]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6213      	str	r3, [r2, #32]
 800425c:	e00b      	b.n	8004276 <HAL_RCC_OscConfig+0x36e>
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4a66      	ldr	r2, [pc, #408]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004264:	f023 0301 	bic.w	r3, r3, #1
 8004268:	6213      	str	r3, [r2, #32]
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	4a63      	ldr	r2, [pc, #396]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004270:	f023 0304 	bic.w	r3, r3, #4
 8004274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d015      	beq.n	80042aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800427e:	f7fd fdc1 	bl	8001e04 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	e00a      	b.n	800429c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004286:	f7fd fdbd 	bl	8001e04 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f241 3288 	movw	r2, #5000	; 0x1388
 8004294:	4293      	cmp	r3, r2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e0ab      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	4b57      	ldr	r3, [pc, #348]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ee      	beq.n	8004286 <HAL_RCC_OscConfig+0x37e>
 80042a8:	e014      	b.n	80042d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042aa:	f7fd fdab 	bl	8001e04 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd fda7 	bl	8001e04 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e095      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c8:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1ee      	bne.n	80042b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d105      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042da:	4b48      	ldr	r3, [pc, #288]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	69db      	ldr	r3, [r3, #28]
 80042de:	4a47      	ldr	r2, [pc, #284]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8081 	beq.w	80043f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 030c 	and.w	r3, r3, #12
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d061      	beq.n	80043c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d146      	bne.n	8004392 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b3f      	ldr	r3, [pc, #252]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fd fd7b 	bl	8001e04 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd fd77 	bl	8001e04 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e067      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004324:	4b35      	ldr	r3, [pc, #212]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d108      	bne.n	800434c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	492d      	ldr	r1, [pc, #180]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434c:	4b2b      	ldr	r3, [pc, #172]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a19      	ldr	r1, [r3, #32]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	430b      	orrs	r3, r1
 800435e:	4927      	ldr	r1, [pc, #156]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004360:	4313      	orrs	r3, r2
 8004362:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fd fd4b 	bl	8001e04 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004372:	f7fd fd47 	bl	8001e04 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e037      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCC_OscConfig+0x46a>
 8004390:	e02f      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <HAL_RCC_OscConfig+0x4fc>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd fd34 	bl	8001e04 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fd fd30 	bl	8001e04 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e020      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x498>
 80043be:	e018      	b.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e013      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d106      	bne.n	80043ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40021000 	.word	0x40021000
 8004400:	40007000 	.word	0x40007000
 8004404:	42420060 	.word	0x42420060

08004408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0d0      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b6a      	ldr	r3, [pc, #424]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d910      	bls.n	800444c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b67      	ldr	r3, [pc, #412]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 0207 	bic.w	r2, r3, #7
 8004432:	4965      	ldr	r1, [pc, #404]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b63      	ldr	r3, [pc, #396]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b8      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d020      	beq.n	800449a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a58      	ldr	r2, [pc, #352]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800446e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800447c:	4b53      	ldr	r3, [pc, #332]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a52      	ldr	r2, [pc, #328]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004482:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004486:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b50      	ldr	r3, [pc, #320]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	494d      	ldr	r1, [pc, #308]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d040      	beq.n	8004528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b47      	ldr	r3, [pc, #284]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d115      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e07f      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e073      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d6:	4b3d      	ldr	r3, [pc, #244]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e06b      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b39      	ldr	r3, [pc, #228]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4936      	ldr	r1, [pc, #216]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f8:	f7fd fc84 	bl	8001e04 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fd fc80 	bl	8001e04 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e053      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2d      	ldr	r3, [pc, #180]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b27      	ldr	r3, [pc, #156]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d210      	bcs.n	8004558 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 0207 	bic.w	r2, r3, #7
 800453e:	4922      	ldr	r1, [pc, #136]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	4313      	orrs	r3, r2
 8004544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004546:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d001      	beq.n	8004558 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e032      	b.n	80045be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004564:	4b19      	ldr	r3, [pc, #100]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4916      	ldr	r1, [pc, #88]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4602      	mov	r2, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	490a      	ldr	r1, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	5ccb      	ldrb	r3, [r1, r3]
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x1cc>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1d0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fbe2 	bl	8001d80 <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40022000 	.word	0x40022000
 80045cc:	40021000 	.word	0x40021000
 80045d0:	08008d00 	.word	0x08008d00
 80045d4:	20000004 	.word	0x20000004
 80045d8:	20000008 	.word	0x20000008

080045dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	b490      	push	{r4, r7}
 80045de:	b08a      	sub	sp, #40	; 0x28
 80045e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <HAL_RCC_GetSysClockFreq+0xb0>)
 80045e4:	1d3c      	adds	r4, r7, #4
 80045e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045ec:	f240 2301 	movw	r3, #513	; 0x201
 80045f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	; 0x24
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004606:	4b22      	ldr	r3, [pc, #136]	; (8004690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b04      	cmp	r3, #4
 8004614:	d002      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0x46>
 800461a:	e02d      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461e:	623b      	str	r3, [r7, #32]
      break;
 8004620:	e02d      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	0c9b      	lsrs	r3, r3, #18
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800462e:	4413      	add	r3, r2
 8004630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004634:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d013      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004640:	4b13      	ldr	r3, [pc, #76]	; (8004690 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	0c5b      	lsrs	r3, r3, #17
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800464e:	4413      	add	r3, r2
 8004650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004654:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800465a:	fb02 f203 	mul.w	r2, r2, r3
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	e004      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4a0b      	ldr	r2, [pc, #44]	; (8004698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800466c:	fb02 f303 	mul.w	r3, r2, r3
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	623b      	str	r3, [r7, #32]
      break;
 8004676:	e002      	b.n	800467e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <HAL_RCC_GetSysClockFreq+0xb8>)
 800467a:	623b      	str	r3, [r7, #32]
      break;
 800467c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800467e:	6a3b      	ldr	r3, [r7, #32]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3728      	adds	r7, #40	; 0x28
 8004684:	46bd      	mov	sp, r7
 8004686:	bc90      	pop	{r4, r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	08008bac 	.word	0x08008bac
 8004690:	40021000 	.word	0x40021000
 8004694:	007a1200 	.word	0x007a1200
 8004698:	003d0900 	.word	0x003d0900

0800469c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <RCC_Delay+0x34>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <RCC_Delay+0x38>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	0a5b      	lsrs	r3, r3, #9
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046b8:	bf00      	nop
  }
  while (Delay --);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	60fa      	str	r2, [r7, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f9      	bne.n	80046b8 <RCC_Delay+0x1c>
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	20000004 	.word	0x20000004
 80046d4:	10624dd3 	.word	0x10624dd3

080046d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d07d      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80046f4:	2300      	movs	r3, #0
 80046f6:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f8:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10d      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b4c      	ldr	r3, [pc, #304]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4a4b      	ldr	r2, [pc, #300]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	61d3      	str	r3, [r2, #28]
 8004710:	4b49      	ldr	r3, [pc, #292]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b46      	ldr	r3, [pc, #280]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d118      	bne.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800472c:	4b43      	ldr	r3, [pc, #268]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a42      	ldr	r2, [pc, #264]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004738:	f7fd fb64 	bl	8001e04 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473e:	e008      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004740:	f7fd fb60 	bl	8001e04 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	; 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e06d      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004752:	4b3a      	ldr	r3, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0f0      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004766:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d02e      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	429a      	cmp	r2, r3
 800477a:	d027      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004784:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004786:	4b2e      	ldr	r3, [pc, #184]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478c:	4b2c      	ldr	r3, [pc, #176]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fd fb2f 	bl	8001e04 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fd fb2b 	bl	8001e04 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e036      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d0ee      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047cc:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4917      	ldr	r1, [pc, #92]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b14      	ldr	r3, [pc, #80]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	4a13      	ldr	r2, [pc, #76]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047fc:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	490b      	ldr	r1, [pc, #44]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	4904      	ldr	r1, [pc, #16]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
 8004840:	42420440 	.word	0x42420440

08004844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e041      	b.n	80048da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fa2e 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 f93c 	bl	8004b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e032      	b.n	8004962 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_TIM_Base_Start+0x88>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_TIM_Base_Start+0x48>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004916:	d009      	beq.n	800492c <HAL_TIM_Base_Start+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a14      	ldr	r2, [pc, #80]	; (8004970 <HAL_TIM_Base_Start+0x8c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_Base_Start+0x48>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a13      	ldr	r2, [pc, #76]	; (8004974 <HAL_TIM_Base_Start+0x90>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d111      	bne.n	8004950 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d010      	beq.n	8004960 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	e007      	b.n	8004960 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800

08004978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x18>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b3      	b.n	8004af8 <HAL_TIM_ConfigClockSource+0x180>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c8:	d03e      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xd0>
 80049ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ce:	f200 8087 	bhi.w	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d6:	f000 8085 	beq.w	8004ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80049da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049de:	d87f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049e0:	2b70      	cmp	r3, #112	; 0x70
 80049e2:	d01a      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0xa2>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d87b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049e8:	2b60      	cmp	r3, #96	; 0x60
 80049ea:	d050      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0x116>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d877      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d03c      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xf6>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d873      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 80049f8:	2b40      	cmp	r3, #64	; 0x40
 80049fa:	d058      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x136>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d86f      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a00:	2b30      	cmp	r3, #48	; 0x30
 8004a02:	d064      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d86b      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d060      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d867      	bhi.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d05c      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
 8004a14:	2b10      	cmp	r3, #16
 8004a16:	d05a      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a18:	e062      	b.n	8004ae0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6899      	ldr	r1, [r3, #8]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f000 f942 	bl	8004cb2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e04e      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6899      	ldr	r1, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f000 f92b 	bl	8004cb2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	609a      	str	r2, [r3, #8]
      break;
 8004a6c:	e03b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6859      	ldr	r1, [r3, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f000 f8a2 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2150      	movs	r1, #80	; 0x50
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 f8f9 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004a8c:	e02b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 f8c0 	bl	8004c20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2160      	movs	r1, #96	; 0x60
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 f8e9 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004aac:	e01b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 f882 	bl	8004bc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2140      	movs	r1, #64	; 0x40
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f8d9 	bl	8004c7e <TIM_ITRx_SetConfig>
      break;
 8004acc:	e00b      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	f000 f8d0 	bl	8004c7e <TIM_ITRx_SetConfig>
        break;
 8004ade:	e002      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ae4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <TIM_Base_SetConfig+0xb8>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b1e:	d007      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a26      	ldr	r2, [pc, #152]	; (8004bbc <TIM_Base_SetConfig+0xbc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <TIM_Base_SetConfig+0x30>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a25      	ldr	r2, [pc, #148]	; (8004bc0 <TIM_Base_SetConfig+0xc0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d108      	bne.n	8004b42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <TIM_Base_SetConfig+0xb8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00b      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d007      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a19      	ldr	r2, [pc, #100]	; (8004bbc <TIM_Base_SetConfig+0xbc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d003      	beq.n	8004b62 <TIM_Base_SetConfig+0x62>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <TIM_Base_SetConfig+0xc0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a07      	ldr	r2, [pc, #28]	; (8004bb8 <TIM_Base_SetConfig+0xb8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d103      	bne.n	8004ba8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	615a      	str	r2, [r3, #20]
}
 8004bae:	bf00      	nop
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800

08004bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f023 0201 	bic.w	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 030a 	bic.w	r3, r3, #10
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	f023 0210 	bic.w	r2, r3, #16
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	031b      	lsls	r3, r3, #12
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	621a      	str	r2, [r3, #32]
}
 8004c74:	bf00      	nop
 8004c76:	371c      	adds	r7, #28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr

08004c7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f043 0307 	orr.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
 8004cbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ccc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	021a      	lsls	r2, r3, #8
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e046      	b.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a16      	ldr	r2, [pc, #88]	; (8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00e      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d009      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a12      	ldr	r2, [pc, #72]	; (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10c      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800

08004dac <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dac:	b084      	sub	sp, #16
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	f107 0014 	add.w	r0, r7, #20
 8004dba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	b004      	add	sp, #16
 8004dca:	4770      	bx	lr

08004dcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ddc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004de0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr

08004df8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e00:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004e04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	4013      	ands	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	460b      	mov	r3, r1
 8004e36:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr

08004e44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	f107 0014 	add.w	r0, r7, #20
 8004e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	b004      	add	sp, #16
 8004e82:	4770      	bx	lr

08004e84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b09b      	sub	sp, #108	; 0x6c
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eaa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	78db      	ldrb	r3, [r3, #3]
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d81f      	bhi.n	8004ef6 <USB_ActivateEndpoint+0x72>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <USB_ActivateEndpoint+0x38>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004ee9 	.word	0x08004ee9
 8004ec4:	08004eff 	.word	0x08004eff
 8004ec8:	08004edb 	.word	0x08004edb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ed0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ed4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ed8:	e012      	b.n	8004f00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004eda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ede:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004ee2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ee6:	e00b      	b.n	8004f00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ee8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004eec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ef0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ef4:	e004      	b.n	8004f00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004efc:	e000      	b.n	8004f00 <USB_ActivateEndpoint+0x7c>
      break;
 8004efe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	441a      	add	r2, r3
 8004f50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	7b1b      	ldrb	r3, [r3, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8149 	bne.w	8005204 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8084 	beq.w	8005084 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	011a      	lsls	r2, r3, #4
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	88db      	ldrh	r3, [r3, #6]
 8004fa4:	085b      	lsrs	r3, r3, #1
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	81fb      	strh	r3, [r7, #14]
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01b      	beq.n	8005000 <USB_ActivateEndpoint+0x17c>
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fde:	81bb      	strh	r3, [r7, #12]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	89bb      	ldrh	r3, [r7, #12]
 8004fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	78db      	ldrb	r3, [r3, #3]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d020      	beq.n	800504a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501e:	813b      	strh	r3, [r7, #8]
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	f083 0320 	eor.w	r3, r3, #32
 8005026:	813b      	strh	r3, [r7, #8]
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	441a      	add	r2, r3
 8005032:	893b      	ldrh	r3, [r7, #8]
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
 8005048:	e27f      	b.n	800554a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	817b      	strh	r3, [r7, #10]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	897b      	ldrh	r3, [r7, #10]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e262      	b.n	800554a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508e:	b29b      	uxth	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	4413      	add	r3, r2
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	011a      	lsls	r2, r3, #4
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	88db      	ldrh	r3, [r3, #6]
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	4413      	add	r3, r2
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	011a      	lsls	r2, r3, #4
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	4413      	add	r3, r2
 80050d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050da:	623b      	str	r3, [r7, #32]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d112      	bne.n	800510a <USB_ActivateEndpoint+0x286>
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005102:	b29a      	uxth	r2, r3
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e02f      	b.n	800516a <USB_ActivateEndpoint+0x2e6>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b3e      	cmp	r3, #62	; 0x3e
 8005110:	d813      	bhi.n	800513a <USB_ActivateEndpoint+0x2b6>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	663b      	str	r3, [r7, #96]	; 0x60
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <USB_ActivateEndpoint+0x2a8>
 8005126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005128:	3301      	adds	r3, #1
 800512a:	663b      	str	r3, [r7, #96]	; 0x60
 800512c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800512e:	b29b      	uxth	r3, r3
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	b29a      	uxth	r2, r3
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	e017      	b.n	800516a <USB_ActivateEndpoint+0x2e6>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	663b      	str	r3, [r7, #96]	; 0x60
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <USB_ActivateEndpoint+0x2d0>
 800514e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005150:	3b01      	subs	r3, #1
 8005152:	663b      	str	r3, [r7, #96]	; 0x60
 8005154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29b      	uxth	r3, r3
 800515c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005164:	b29a      	uxth	r2, r3
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	83fb      	strh	r3, [r7, #30]
 8005178:	8bfb      	ldrh	r3, [r7, #30]
 800517a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01b      	beq.n	80051ba <USB_ActivateEndpoint+0x336>
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005198:	83bb      	strh	r3, [r7, #28]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	8bbb      	ldrh	r3, [r7, #28]
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d0:	837b      	strh	r3, [r7, #26]
 80051d2:	8b7b      	ldrh	r3, [r7, #26]
 80051d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80051d8:	837b      	strh	r3, [r7, #26]
 80051da:	8b7b      	ldrh	r3, [r7, #26]
 80051dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80051e0:	837b      	strh	r3, [r7, #26]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	441a      	add	r2, r3
 80051ec:	8b7b      	ldrh	r3, [r7, #26]
 80051ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fe:	b29b      	uxth	r3, r3
 8005200:	8013      	strh	r3, [r2, #0]
 8005202:	e1a2      	b.n	800554a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	65bb      	str	r3, [r7, #88]	; 0x58
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005250:	4413      	add	r3, r2
 8005252:	65bb      	str	r3, [r7, #88]	; 0x58
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	011a      	lsls	r2, r3, #4
 800525a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525c:	4413      	add	r3, r2
 800525e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005262:	657b      	str	r3, [r7, #84]	; 0x54
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	891b      	ldrh	r3, [r3, #8]
 8005268:	085b      	lsrs	r3, r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005272:	801a      	strh	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	653b      	str	r3, [r7, #80]	; 0x50
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527e:	b29b      	uxth	r3, r3
 8005280:	461a      	mov	r2, r3
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	4413      	add	r3, r2
 8005286:	653b      	str	r3, [r7, #80]	; 0x50
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	011a      	lsls	r2, r3, #4
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	4413      	add	r3, r2
 8005292:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	895b      	ldrh	r3, [r3, #10]
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	b29b      	uxth	r3, r3
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f040 8091 	bne.w	80053d4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80052c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80052c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01b      	beq.n	8005302 <USB_ActivateEndpoint+0x47e>
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	881b      	ldrh	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	441a      	add	r2, r3
 80052ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80052ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fe:	b29b      	uxth	r3, r3
 8005300:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005310:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01b      	beq.n	8005352 <USB_ActivateEndpoint+0x4ce>
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	881b      	ldrh	r3, [r3, #0]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005330:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800533e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800534e:	b29b      	uxth	r3, r3
 8005350:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29b      	uxth	r3, r3
 8005360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005368:	86bb      	strh	r3, [r7, #52]	; 0x34
 800536a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800536c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005370:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005372:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005378:	86bb      	strh	r3, [r7, #52]	; 0x34
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800538a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800538e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005396:	b29b      	uxth	r3, r3
 8005398:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b0:	867b      	strh	r3, [r7, #50]	; 0x32
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	441a      	add	r2, r3
 80053bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80053be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	8013      	strh	r3, [r2, #0]
 80053d2:	e0ba      	b.n	800554a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01d      	beq.n	800542c <USB_ActivateEndpoint+0x5a8>
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	441a      	add	r2, r3
 8005414:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005428:	b29b      	uxth	r3, r3
 800542a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800543c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01d      	beq.n	8005484 <USB_ActivateEndpoint+0x600>
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	441a      	add	r2, r3
 800546c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005480:	b29b      	uxth	r3, r3
 8005482:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	78db      	ldrb	r3, [r3, #3]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d024      	beq.n	80054d6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054aa:	f083 0320 	eor.w	r3, r3, #32
 80054ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	441a      	add	r2, r3
 80054bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80054c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	8013      	strh	r3, [r2, #0]
 80054d4:	e01d      	b.n	8005512 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4413      	add	r3, r2
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80054fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800550a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800550e:	b29b      	uxth	r3, r3
 8005510:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800553a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800553e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005546:	b29b      	uxth	r3, r3
 8005548:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800554a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800554e:	4618      	mov	r0, r3
 8005550:	376c      	adds	r7, #108	; 0x6c
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005558:	b480      	push	{r7}
 800555a:	b08d      	sub	sp, #52	; 0x34
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	7b1b      	ldrb	r3, [r3, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f040 808e 	bne.w	8005688 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d044      	beq.n	80055fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	81bb      	strh	r3, [r7, #12]
 8005582:	89bb      	ldrh	r3, [r7, #12]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01b      	beq.n	80055c4 <USB_DeactivateEndpoint+0x6c>
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800559e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a2:	817b      	strh	r3, [r7, #10]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055da:	813b      	strh	r3, [r7, #8]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	893b      	ldrh	r3, [r7, #8]
 80055e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	8013      	strh	r3, [r2, #0]
 80055fc:	e192      	b.n	8005924 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	827b      	strh	r3, [r7, #18]
 800560c:	8a7b      	ldrh	r3, [r7, #18]
 800560e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01b      	beq.n	800564e <USB_DeactivateEndpoint+0xf6>
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562c:	823b      	strh	r3, [r7, #16]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8a3b      	ldrh	r3, [r7, #16]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	81fb      	strh	r3, [r7, #14]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	89fb      	ldrh	r3, [r7, #14]
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]
 8005686:	e14d      	b.n	8005924 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	2b00      	cmp	r3, #0
 800568e:	f040 80a5 	bne.w	80057dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	843b      	strh	r3, [r7, #32]
 80056a0:	8c3b      	ldrh	r3, [r7, #32]
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d01b      	beq.n	80056e2 <USB_DeactivateEndpoint+0x18a>
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c0:	83fb      	strh	r3, [r7, #30]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	441a      	add	r2, r3
 80056cc:	8bfb      	ldrh	r3, [r7, #30]
 80056ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056de:	b29b      	uxth	r3, r3
 80056e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	83bb      	strh	r3, [r7, #28]
 80056f0:	8bbb      	ldrh	r3, [r7, #28]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01b      	beq.n	8005732 <USB_DeactivateEndpoint+0x1da>
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	837b      	strh	r3, [r7, #26]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	441a      	add	r2, r3
 800571c:	8b7b      	ldrh	r3, [r7, #26]
 800571e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800572e:	b29b      	uxth	r3, r3
 8005730:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29b      	uxth	r3, r3
 8005740:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005748:	833b      	strh	r3, [r7, #24]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	441a      	add	r2, r3
 8005754:	8b3b      	ldrh	r3, [r7, #24]
 8005756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800575a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005762:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005766:	b29b      	uxth	r3, r3
 8005768:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800577c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005780:	82fb      	strh	r3, [r7, #22]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	441a      	add	r2, r3
 800578c:	8afb      	ldrh	r3, [r7, #22]
 800578e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800579e:	b29b      	uxth	r3, r3
 80057a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	881b      	ldrh	r3, [r3, #0]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b8:	82bb      	strh	r3, [r7, #20]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	8abb      	ldrh	r3, [r7, #20]
 80057c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]
 80057da:	e0a3      	b.n	8005924 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01b      	beq.n	800582c <USB_DeactivateEndpoint+0x2d4>
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	441a      	add	r2, r3
 8005816:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005828:	b29b      	uxth	r3, r3
 800582a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	881b      	ldrh	r3, [r3, #0]
 8005838:	857b      	strh	r3, [r7, #42]	; 0x2a
 800583a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01b      	beq.n	800587c <USB_DeactivateEndpoint+0x324>
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	881b      	ldrh	r3, [r3, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	853b      	strh	r3, [r7, #40]	; 0x28
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	441a      	add	r2, r3
 8005866:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800586c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005878:	b29b      	uxth	r3, r3
 800587a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29b      	uxth	r3, r3
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	441a      	add	r2, r3
 800589e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	441a      	add	r2, r3
 80058d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005902:	847b      	strh	r3, [r7, #34]	; 0x22
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800591c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005920:	b29b      	uxth	r3, r3
 8005922:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3734      	adds	r7, #52	; 0x34
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b0c4      	sub	sp, #272	; 0x110
 8005934:	af00      	add	r7, sp, #0
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	6018      	str	r0, [r3, #0]
 800593a:	463b      	mov	r3, r7
 800593c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800593e:	463b      	mov	r3, r7
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b01      	cmp	r3, #1
 8005946:	f040 8557 	bne.w	80063f8 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800594a:	463b      	mov	r3, r7
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	463b      	mov	r3, r7
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d905      	bls.n	8005966 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800595a:	463b      	mov	r3, r7
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005964:	e004      	b.n	8005970 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005970:	463b      	mov	r3, r7
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	7b1b      	ldrb	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d12c      	bne.n	80059d4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6959      	ldr	r1, [r3, #20]
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	88da      	ldrh	r2, [r3, #6]
 8005986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800598a:	b29b      	uxth	r3, r3
 800598c:	1d38      	adds	r0, r7, #4
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	f001 fa2c 	bl	8006dec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	1d3b      	adds	r3, r7, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	4413      	add	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	463b      	mov	r3, r7
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	011a      	lsls	r2, r3, #4
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4413      	add	r3, r2
 80059b8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f107 0310 	add.w	r3, r7, #16
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	f000 bcdd 	b.w	800638e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80059d4:	463b      	mov	r3, r7
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	f040 8347 	bne.w	800606e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80059e0:	463b      	mov	r3, r7
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a1a      	ldr	r2, [r3, #32]
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	f240 82eb 	bls.w	8005fc8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80059f2:	1d3b      	adds	r3, r7, #4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	463b      	mov	r3, r7
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	463b      	mov	r3, r7
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005a36:	463b      	mov	r3, r7
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a40:	1ad2      	subs	r2, r2, r3
 8005a42:	463b      	mov	r3, r7
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	463b      	mov	r3, r7
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 8159 	beq.w	8005d16 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d164      	bne.n	8005b3e <USB_EPStartXfer+0x20e>
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	461a      	mov	r2, r3
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	4413      	add	r3, r2
 8005a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a8c:	463b      	mov	r3, r7
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	011a      	lsls	r2, r3, #4
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	4413      	add	r3, r2
 8005a98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d112      	bne.n	8005acc <USB_EPStartXfer+0x19c>
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	801a      	strh	r2, [r3, #0]
 8005aca:	e054      	b.n	8005b76 <USB_EPStartXfer+0x246>
 8005acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad2:	d817      	bhi.n	8005b04 <USB_EPStartXfer+0x1d4>
 8005ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d004      	beq.n	8005af4 <USB_EPStartXfer+0x1c4>
 8005aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aee:	3301      	adds	r3, #1
 8005af0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	801a      	strh	r2, [r3, #0]
 8005b02:	e038      	b.n	8005b76 <USB_EPStartXfer+0x246>
 8005b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b08:	095b      	lsrs	r3, r3, #5
 8005b0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <USB_EPStartXfer+0x1f4>
 8005b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	029b      	lsls	r3, r3, #10
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e01b      	b.n	8005b76 <USB_EPStartXfer+0x246>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d116      	bne.n	8005b76 <USB_EPStartXfer+0x246>
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	4413      	add	r3, r2
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5a:	463b      	mov	r3, r7
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	011a      	lsls	r2, r3, #4
 8005b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b76:	463b      	mov	r3, r7
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	895b      	ldrh	r3, [r3, #10]
 8005b7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b80:	463b      	mov	r3, r7
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6959      	ldr	r1, [r3, #20]
 8005b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b90:	1d38      	adds	r0, r7, #4
 8005b92:	6800      	ldr	r0, [r0, #0]
 8005b94:	f001 f92a 	bl	8006dec <USB_WritePMA>
            ep->xfer_buff += len;
 8005b98:	463b      	mov	r3, r7
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695a      	ldr	r2, [r3, #20]
 8005b9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba2:	441a      	add	r2, r3
 8005ba4:	463b      	mov	r3, r7
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005baa:	463b      	mov	r3, r7
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a1a      	ldr	r2, [r3, #32]
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d909      	bls.n	8005bce <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005bba:	463b      	mov	r3, r7
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1a      	ldr	r2, [r3, #32]
 8005bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bc4:	1ad2      	subs	r2, r2, r3
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	621a      	str	r2, [r3, #32]
 8005bcc:	e008      	b.n	8005be0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005bce:	463b      	mov	r3, r7
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005bd8:	463b      	mov	r3, r7
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005be0:	463b      	mov	r3, r7
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d164      	bne.n	8005cb4 <USB_EPStartXfer+0x384>
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61fb      	str	r3, [r7, #28]
 8005bf0:	1d3b      	adds	r3, r7, #4
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d112      	bne.n	8005c42 <USB_EPStartXfer+0x312>
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	e057      	b.n	8005cf2 <USB_EPStartXfer+0x3c2>
 8005c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c46:	2b3e      	cmp	r3, #62	; 0x3e
 8005c48:	d817      	bhi.n	8005c7a <USB_EPStartXfer+0x34a>
 8005c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <USB_EPStartXfer+0x33a>
 8005c60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c64:	3301      	adds	r3, #1
 8005c66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	029b      	lsls	r3, r3, #10
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	801a      	strh	r2, [r3, #0]
 8005c78:	e03b      	b.n	8005cf2 <USB_EPStartXfer+0x3c2>
 8005c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <USB_EPStartXfer+0x36a>
 8005c90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c94:	3b01      	subs	r3, #1
 8005c96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005c9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	029b      	lsls	r3, r3, #10
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	801a      	strh	r2, [r3, #0]
 8005cb2:	e01e      	b.n	8005cf2 <USB_EPStartXfer+0x3c2>
 8005cb4:	463b      	mov	r3, r7
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d119      	bne.n	8005cf2 <USB_EPStartXfer+0x3c2>
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd2:	4413      	add	r3, r2
 8005cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	011a      	lsls	r2, r3, #4
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce6:	623b      	str	r3, [r7, #32]
 8005ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	891b      	ldrh	r3, [r3, #8]
 8005cf8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6959      	ldr	r1, [r3, #20]
 8005d02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d0c:	1d38      	adds	r0, r7, #4
 8005d0e:	6800      	ldr	r0, [r0, #0]
 8005d10:	f001 f86c 	bl	8006dec <USB_WritePMA>
 8005d14:	e33b      	b.n	800638e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d16:	463b      	mov	r3, r7
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	785b      	ldrb	r3, [r3, #1]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d164      	bne.n	8005dea <USB_EPStartXfer+0x4ba>
 8005d20:	1d3b      	adds	r3, r7, #4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d34:	4413      	add	r3, r2
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d38:	463b      	mov	r3, r7
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	011a      	lsls	r2, r3, #4
 8005d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d42:	4413      	add	r3, r2
 8005d44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d112      	bne.n	8005d78 <USB_EPStartXfer+0x448>
 8005d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e057      	b.n	8005e28 <USB_EPStartXfer+0x4f8>
 8005d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d817      	bhi.n	8005db0 <USB_EPStartXfer+0x480>
 8005d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <USB_EPStartXfer+0x470>
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	e03b      	b.n	8005e28 <USB_EPStartXfer+0x4f8>
 8005db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0x4a0>
 8005dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	029b      	lsls	r3, r3, #10
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	e01e      	b.n	8005e28 <USB_EPStartXfer+0x4f8>
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d119      	bne.n	8005e28 <USB_EPStartXfer+0x4f8>
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	657b      	str	r3, [r7, #84]	; 0x54
 8005dfa:	1d3b      	adds	r3, r7, #4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e08:	4413      	add	r3, r2
 8005e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e0c:	463b      	mov	r3, r7
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005e28:	463b      	mov	r3, r7
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	891b      	ldrh	r3, [r3, #8]
 8005e2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e32:	463b      	mov	r3, r7
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6959      	ldr	r1, [r3, #20]
 8005e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e42:	1d38      	adds	r0, r7, #4
 8005e44:	6800      	ldr	r0, [r0, #0]
 8005e46:	f000 ffd1 	bl	8006dec <USB_WritePMA>
            ep->xfer_buff += len;
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e54:	441a      	add	r2, r3
 8005e56:	463b      	mov	r3, r7
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e5c:	463b      	mov	r3, r7
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	463b      	mov	r3, r7
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d909      	bls.n	8005e80 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e76:	1ad2      	subs	r2, r2, r3
 8005e78:	463b      	mov	r3, r7
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	621a      	str	r2, [r3, #32]
 8005e7e:	e008      	b.n	8005e92 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e80:	463b      	mov	r3, r7
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	647b      	str	r3, [r7, #68]	; 0x44
 8005e98:	463b      	mov	r3, r7
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d164      	bne.n	8005f6c <USB_EPStartXfer+0x63c>
 8005ea2:	1d3b      	adds	r3, r7, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	4413      	add	r3, r2
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eba:	463b      	mov	r3, r7
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	011a      	lsls	r2, r3, #4
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d112      	bne.n	8005efa <USB_EPStartXfer+0x5ca>
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	e054      	b.n	8005fa4 <USB_EPStartXfer+0x674>
 8005efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005efe:	2b3e      	cmp	r3, #62	; 0x3e
 8005f00:	d817      	bhi.n	8005f32 <USB_EPStartXfer+0x602>
 8005f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <USB_EPStartXfer+0x5f2>
 8005f18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	029b      	lsls	r3, r3, #10
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	e038      	b.n	8005fa4 <USB_EPStartXfer+0x674>
 8005f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d104      	bne.n	8005f52 <USB_EPStartXfer+0x622>
 8005f48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	029b      	lsls	r3, r3, #10
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	801a      	strh	r2, [r3, #0]
 8005f6a:	e01b      	b.n	8005fa4 <USB_EPStartXfer+0x674>
 8005f6c:	463b      	mov	r3, r7
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d116      	bne.n	8005fa4 <USB_EPStartXfer+0x674>
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f84:	4413      	add	r3, r2
 8005f86:	647b      	str	r3, [r7, #68]	; 0x44
 8005f88:	463b      	mov	r3, r7
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	011a      	lsls	r2, r3, #4
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	4413      	add	r3, r2
 8005f94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f98:	643b      	str	r3, [r7, #64]	; 0x40
 8005f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fa4:	463b      	mov	r3, r7
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fae:	463b      	mov	r3, r7
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	6959      	ldr	r1, [r3, #20]
 8005fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005fbe:	1d38      	adds	r0, r7, #4
 8005fc0:	6800      	ldr	r0, [r0, #0]
 8005fc2:	f000 ff13 	bl	8006dec <USB_WritePMA>
 8005fc6:	e1e2      	b.n	800638e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	463b      	mov	r3, r7
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fec:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005ff0:	1d3b      	adds	r3, r7, #4
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800600a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800600e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006012:	b29b      	uxth	r3, r3
 8006014:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006016:	1d3b      	adds	r3, r7, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	663b      	str	r3, [r7, #96]	; 0x60
 800601c:	1d3b      	adds	r3, r7, #4
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602a:	4413      	add	r3, r2
 800602c:	663b      	str	r3, [r7, #96]	; 0x60
 800602e:	463b      	mov	r3, r7
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	011a      	lsls	r2, r3, #4
 8006036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006038:	4413      	add	r3, r2
 800603a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800603e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006044:	b29a      	uxth	r2, r3
 8006046:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006048:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800604a:	463b      	mov	r3, r7
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	891b      	ldrh	r3, [r3, #8]
 8006050:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006054:	463b      	mov	r3, r7
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6959      	ldr	r1, [r3, #20]
 800605a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800605e:	b29b      	uxth	r3, r3
 8006060:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006064:	1d38      	adds	r0, r7, #4
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	f000 fec0 	bl	8006dec <USB_WritePMA>
 800606c:	e18f      	b.n	800638e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800606e:	1d3b      	adds	r3, r7, #4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	463b      	mov	r3, r7
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 808f 	beq.w	80061a8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006090:	463b      	mov	r3, r7
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d164      	bne.n	8006164 <USB_EPStartXfer+0x834>
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	673b      	str	r3, [r7, #112]	; 0x70
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ae:	4413      	add	r3, r2
 80060b0:	673b      	str	r3, [r7, #112]	; 0x70
 80060b2:	463b      	mov	r3, r7
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	011a      	lsls	r2, r3, #4
 80060ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060bc:	4413      	add	r3, r2
 80060be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d112      	bne.n	80060f2 <USB_EPStartXfer+0x7c2>
 80060cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060da:	801a      	strh	r2, [r3, #0]
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e054      	b.n	800619c <USB_EPStartXfer+0x86c>
 80060f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060f6:	2b3e      	cmp	r3, #62	; 0x3e
 80060f8:	d817      	bhi.n	800612a <USB_EPStartXfer+0x7fa>
 80060fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060fe:	085b      	lsrs	r3, r3, #1
 8006100:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d004      	beq.n	800611a <USB_EPStartXfer+0x7ea>
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	3301      	adds	r3, #1
 8006116:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	b29b      	uxth	r3, r3
 8006120:	029b      	lsls	r3, r3, #10
 8006122:	b29a      	uxth	r2, r3
 8006124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e038      	b.n	800619c <USB_EPStartXfer+0x86c>
 800612a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006134:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <USB_EPStartXfer+0x81a>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006144:	3b01      	subs	r3, #1
 8006146:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800614a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614e:	b29b      	uxth	r3, r3
 8006150:	029b      	lsls	r3, r3, #10
 8006152:	b29b      	uxth	r3, r3
 8006154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615c:	b29a      	uxth	r2, r3
 800615e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006160:	801a      	strh	r2, [r3, #0]
 8006162:	e01b      	b.n	800619c <USB_EPStartXfer+0x86c>
 8006164:	463b      	mov	r3, r7
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	785b      	ldrb	r3, [r3, #1]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d116      	bne.n	800619c <USB_EPStartXfer+0x86c>
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006176:	b29b      	uxth	r3, r3
 8006178:	461a      	mov	r2, r3
 800617a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800617c:	4413      	add	r3, r2
 800617e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006180:	463b      	mov	r3, r7
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	011a      	lsls	r2, r3, #4
 8006188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618a:	4413      	add	r3, r2
 800618c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006190:	677b      	str	r3, [r7, #116]	; 0x74
 8006192:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006196:	b29a      	uxth	r2, r3
 8006198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800619c:	463b      	mov	r3, r7
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	895b      	ldrh	r3, [r3, #10]
 80061a2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80061a6:	e097      	b.n	80062d8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80061a8:	463b      	mov	r3, r7
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	785b      	ldrb	r3, [r3, #1]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d168      	bne.n	8006284 <USB_EPStartXfer+0x954>
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061ca:	4413      	add	r3, r2
 80061cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	011a      	lsls	r2, r3, #4
 80061d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061dc:	4413      	add	r3, r2
 80061de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80061e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d112      	bne.n	8006212 <USB_EPStartXfer+0x8e2>
 80061ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620a:	b29a      	uxth	r2, r3
 800620c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	e05d      	b.n	80062ce <USB_EPStartXfer+0x99e>
 8006212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006216:	2b3e      	cmp	r3, #62	; 0x3e
 8006218:	d817      	bhi.n	800624a <USB_EPStartXfer+0x91a>
 800621a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006224:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <USB_EPStartXfer+0x90a>
 8006230:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006234:	3301      	adds	r3, #1
 8006236:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800623a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800623e:	b29b      	uxth	r3, r3
 8006240:	029b      	lsls	r3, r3, #10
 8006242:	b29a      	uxth	r2, r3
 8006244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	e041      	b.n	80062ce <USB_EPStartXfer+0x99e>
 800624a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800624e:	095b      	lsrs	r3, r3, #5
 8006250:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006254:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006258:	f003 031f 	and.w	r3, r3, #31
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USB_EPStartXfer+0x93a>
 8006260:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006264:	3b01      	subs	r3, #1
 8006266:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800626a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800626e:	b29b      	uxth	r3, r3
 8006270:	029b      	lsls	r3, r3, #10
 8006272:	b29b      	uxth	r3, r3
 8006274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627c:	b29a      	uxth	r2, r3
 800627e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	e024      	b.n	80062ce <USB_EPStartXfer+0x99e>
 8006284:	463b      	mov	r3, r7
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	785b      	ldrb	r3, [r3, #1]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d11f      	bne.n	80062ce <USB_EPStartXfer+0x99e>
 800628e:	1d3b      	adds	r3, r7, #4
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006296:	1d3b      	adds	r3, r7, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629e:	b29b      	uxth	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062a6:	4413      	add	r3, r2
 80062a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062ac:	463b      	mov	r3, r7
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	011a      	lsls	r2, r3, #4
 80062b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062b8:	4413      	add	r3, r2
 80062ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80062ce:	463b      	mov	r3, r7
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	891b      	ldrh	r3, [r3, #8]
 80062d4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062d8:	463b      	mov	r3, r7
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6959      	ldr	r1, [r3, #20]
 80062de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80062e8:	1d38      	adds	r0, r7, #4
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	f000 fd7e 	bl	8006dec <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80062f0:	463b      	mov	r3, r7
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d122      	bne.n	8006340 <USB_EPStartXfer+0xa10>
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	463b      	mov	r3, r7
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006314:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006318:	1d3b      	adds	r3, r7, #4
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	463b      	mov	r3, r7
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	441a      	add	r2, r3
 8006326:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
 800633e:	e026      	b.n	800638e <USB_EPStartXfer+0xa5e>
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	785b      	ldrb	r3, [r3, #1]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d121      	bne.n	800638e <USB_EPStartXfer+0xa5e>
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006364:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800637a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800637e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006382:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800638a:	b29b      	uxth	r3, r3
 800638c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f107 020e 	add.w	r2, r7, #14
 80063a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ac:	8013      	strh	r3, [r2, #0]
 80063ae:	f107 030e 	add.w	r3, r7, #14
 80063b2:	f107 020e 	add.w	r2, r7, #14
 80063b6:	8812      	ldrh	r2, [r2, #0]
 80063b8:	f082 0210 	eor.w	r2, r2, #16
 80063bc:	801a      	strh	r2, [r3, #0]
 80063be:	f107 030e 	add.w	r3, r7, #14
 80063c2:	f107 020e 	add.w	r2, r7, #14
 80063c6:	8812      	ldrh	r2, [r2, #0]
 80063c8:	f082 0220 	eor.w	r2, r2, #32
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	f107 030e 	add.w	r3, r7, #14
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	8013      	strh	r3, [r2, #0]
 80063f6:	e3b5      	b.n	8006b64 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80063f8:	463b      	mov	r3, r7
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	7b1b      	ldrb	r3, [r3, #12]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 8090 	bne.w	8006524 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006404:	463b      	mov	r3, r7
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	429a      	cmp	r2, r3
 8006412:	d90e      	bls.n	8006432 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800641e:	463b      	mov	r3, r7
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699a      	ldr	r2, [r3, #24]
 8006424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	619a      	str	r2, [r3, #24]
 8006430:	e008      	b.n	8006444 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006444:	1d3b      	adds	r3, r7, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800644c:	1d3b      	adds	r3, r7, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006454:	b29b      	uxth	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800645c:	4413      	add	r3, r2
 800645e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006462:	463b      	mov	r3, r7
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	011a      	lsls	r2, r3, #4
 800646a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800646e:	4413      	add	r3, r2
 8006470:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d116      	bne.n	80064ae <USB_EPStartXfer+0xb7e>
 8006480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800648c:	b29a      	uxth	r2, r3
 800648e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e32c      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
 80064ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064b2:	2b3e      	cmp	r3, #62	; 0x3e
 80064b4:	d818      	bhi.n	80064e8 <USB_EPStartXfer+0xbb8>
 80064b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <USB_EPStartXfer+0xba6>
 80064cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064d0:	3301      	adds	r3, #1
 80064d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80064da:	b29b      	uxth	r3, r3
 80064dc:	029b      	lsls	r3, r3, #10
 80064de:	b29a      	uxth	r2, r3
 80064e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064e4:	801a      	strh	r2, [r3, #0]
 80064e6:	e30f      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
 80064e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80064f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <USB_EPStartXfer+0xbd8>
 80064fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006502:	3b01      	subs	r3, #1
 8006504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006508:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006520:	801a      	strh	r2, [r3, #0]
 8006522:	e2f1      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006524:	463b      	mov	r3, r7
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	78db      	ldrb	r3, [r3, #3]
 800652a:	2b02      	cmp	r3, #2
 800652c:	f040 818f 	bne.w	800684e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006530:	463b      	mov	r3, r7
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d175      	bne.n	8006626 <USB_EPStartXfer+0xcf6>
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006542:	1d3b      	adds	r3, r7, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800654a:	b29b      	uxth	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006552:	4413      	add	r3, r2
 8006554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006558:	463b      	mov	r3, r7
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	011a      	lsls	r2, r3, #4
 8006560:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006564:	4413      	add	r3, r2
 8006566:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d116      	bne.n	80065a6 <USB_EPStartXfer+0xc76>
 8006578:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006590:	881b      	ldrh	r3, [r3, #0]
 8006592:	b29b      	uxth	r3, r3
 8006594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659c:	b29a      	uxth	r2, r3
 800659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e065      	b.n	8006672 <USB_EPStartXfer+0xd42>
 80065a6:	463b      	mov	r3, r7
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b3e      	cmp	r3, #62	; 0x3e
 80065ae:	d81a      	bhi.n	80065e6 <USB_EPStartXfer+0xcb6>
 80065b0:	463b      	mov	r3, r7
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065bc:	463b      	mov	r3, r7
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <USB_EPStartXfer+0xca4>
 80065ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065ce:	3301      	adds	r3, #1
 80065d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	029b      	lsls	r3, r3, #10
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e045      	b.n	8006672 <USB_EPStartXfer+0xd42>
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065f2:	463b      	mov	r3, r7
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <USB_EPStartXfer+0xcda>
 8006600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006604:	3b01      	subs	r3, #1
 8006606:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800660a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800660e:	b29b      	uxth	r3, r3
 8006610:	029b      	lsls	r3, r3, #10
 8006612:	b29b      	uxth	r3, r3
 8006614:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006618:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800661c:	b29a      	uxth	r2, r3
 800661e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	e025      	b.n	8006672 <USB_EPStartXfer+0xd42>
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	785b      	ldrb	r3, [r3, #1]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d120      	bne.n	8006672 <USB_EPStartXfer+0xd42>
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006640:	b29b      	uxth	r3, r3
 8006642:	461a      	mov	r2, r3
 8006644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006648:	4413      	add	r3, r2
 800664a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	011a      	lsls	r2, r3, #4
 8006656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800665a:	4413      	add	r3, r2
 800665c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006664:	463b      	mov	r3, r7
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	1d3b      	adds	r3, r7, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800667a:	463b      	mov	r3, r7
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d175      	bne.n	8006770 <USB_EPStartXfer+0xe40>
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800668c:	1d3b      	adds	r3, r7, #4
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006694:	b29b      	uxth	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800669c:	4413      	add	r3, r2
 800669e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066a2:	463b      	mov	r3, r7
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	011a      	lsls	r2, r3, #4
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	4413      	add	r3, r2
 80066b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066b8:	463b      	mov	r3, r7
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d116      	bne.n	80066f0 <USB_EPStartXfer+0xdc0>
 80066c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d4:	801a      	strh	r2, [r3, #0]
 80066d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ec:	801a      	strh	r2, [r3, #0]
 80066ee:	e061      	b.n	80067b4 <USB_EPStartXfer+0xe84>
 80066f0:	463b      	mov	r3, r7
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	2b3e      	cmp	r3, #62	; 0x3e
 80066f8:	d81a      	bhi.n	8006730 <USB_EPStartXfer+0xe00>
 80066fa:	463b      	mov	r3, r7
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006706:	463b      	mov	r3, r7
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <USB_EPStartXfer+0xdee>
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006718:	3301      	adds	r3, #1
 800671a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800671e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006722:	b29b      	uxth	r3, r3
 8006724:	029b      	lsls	r3, r3, #10
 8006726:	b29a      	uxth	r2, r3
 8006728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	e041      	b.n	80067b4 <USB_EPStartXfer+0xe84>
 8006730:	463b      	mov	r3, r7
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800673c:	463b      	mov	r3, r7
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_EPStartXfer+0xe24>
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	3b01      	subs	r3, #1
 8006750:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29b      	uxth	r3, r3
 800675e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006766:	b29a      	uxth	r2, r3
 8006768:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800676c:	801a      	strh	r2, [r3, #0]
 800676e:	e021      	b.n	80067b4 <USB_EPStartXfer+0xe84>
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d11c      	bne.n	80067b4 <USB_EPStartXfer+0xe84>
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006782:	b29b      	uxth	r3, r3
 8006784:	461a      	mov	r2, r3
 8006786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800678a:	4413      	add	r3, r2
 800678c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	011a      	lsls	r2, r3, #4
 8006798:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800679c:	4413      	add	r3, r2
 800679e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067a6:	463b      	mov	r3, r7
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 81a4 	beq.w	8006b08 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	463b      	mov	r3, r7
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <USB_EPStartXfer+0xebc>
 80067e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 8187 	bne.w	8006b08 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80067fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80067fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006802:	2b00      	cmp	r3, #0
 8006804:	f040 8180 	bne.w	8006b08 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006808:	1d3b      	adds	r3, r7, #4
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	463b      	mov	r3, r7
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	463b      	mov	r3, r7
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
 800684c:	e15c      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	2b01      	cmp	r3, #1
 8006856:	f040 8155 	bne.w	8006b04 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800685a:	463b      	mov	r3, r7
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	463b      	mov	r3, r7
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d90e      	bls.n	8006888 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800686a:	463b      	mov	r3, r7
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699a      	ldr	r2, [r3, #24]
 800687a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	463b      	mov	r3, r7
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	619a      	str	r2, [r3, #24]
 8006886:	e008      	b.n	800689a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006888:	463b      	mov	r3, r7
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8006892:	463b      	mov	r3, r7
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2200      	movs	r2, #0
 8006898:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800689a:	463b      	mov	r3, r7
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	785b      	ldrb	r3, [r3, #1]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d16f      	bne.n	8006984 <USB_EPStartXfer+0x1054>
 80068a4:	1d3b      	adds	r3, r7, #4
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ac:	1d3b      	adds	r3, r7, #4
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	461a      	mov	r2, r3
 80068b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068bc:	4413      	add	r3, r2
 80068be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c2:	463b      	mov	r3, r7
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	011a      	lsls	r2, r3, #4
 80068ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80068ce:	4413      	add	r3, r2
 80068d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80068d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d116      	bne.n	800690e <USB_EPStartXfer+0xfde>
 80068e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006900:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006904:	b29a      	uxth	r2, r3
 8006906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e05f      	b.n	80069ce <USB_EPStartXfer+0x109e>
 800690e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006912:	2b3e      	cmp	r3, #62	; 0x3e
 8006914:	d818      	bhi.n	8006948 <USB_EPStartXfer+0x1018>
 8006916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <USB_EPStartXfer+0x1006>
 800692c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006930:	3301      	adds	r3, #1
 8006932:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693a:	b29b      	uxth	r3, r3
 800693c:	029b      	lsls	r3, r3, #10
 800693e:	b29a      	uxth	r2, r3
 8006940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e042      	b.n	80069ce <USB_EPStartXfer+0x109e>
 8006948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	2b00      	cmp	r3, #0
 800695c:	d104      	bne.n	8006968 <USB_EPStartXfer+0x1038>
 800695e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006962:	3b01      	subs	r3, #1
 8006964:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	b29b      	uxth	r3, r3
 800696e:	029b      	lsls	r3, r3, #10
 8006970:	b29b      	uxth	r3, r3
 8006972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800697a:	b29a      	uxth	r2, r3
 800697c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006980:	801a      	strh	r2, [r3, #0]
 8006982:	e024      	b.n	80069ce <USB_EPStartXfer+0x109e>
 8006984:	463b      	mov	r3, r7
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d11f      	bne.n	80069ce <USB_EPStartXfer+0x109e>
 800698e:	1d3b      	adds	r3, r7, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a6:	4413      	add	r3, r2
 80069a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069ac:	463b      	mov	r3, r7
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	011a      	lsls	r2, r3, #4
 80069b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80069c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069cc:	801a      	strh	r2, [r3, #0]
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069d6:	463b      	mov	r3, r7
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	785b      	ldrb	r3, [r3, #1]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d16f      	bne.n	8006ac0 <USB_EPStartXfer+0x1190>
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069f8:	4413      	add	r3, r2
 80069fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069fe:	463b      	mov	r3, r7
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006a14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d116      	bne.n	8006a4a <USB_EPStartXfer+0x111a>
 8006a1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e05e      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a50:	d818      	bhi.n	8006a84 <USB_EPStartXfer+0x1154>
 8006a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <USB_EPStartXfer+0x1142>
 8006a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e041      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
 8006a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <USB_EPStartXfer+0x1174>
 8006a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	029b      	lsls	r3, r3, #10
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e023      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	785b      	ldrb	r3, [r3, #1]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d11e      	bne.n	8006b08 <USB_EPStartXfer+0x11d8>
 8006aca:	1d3b      	adds	r3, r7, #4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ada:	4413      	add	r3, r2
 8006adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ae0:	463b      	mov	r3, r7
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	011a      	lsls	r2, r3, #4
 8006ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aec:	4413      	add	r3, r2
 8006aee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006af2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	e001      	b.n	8006b08 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e02e      	b.n	8006b66 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b08:	1d3b      	adds	r3, r7, #4
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	881b      	ldrh	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b22:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006b26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b2e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006b32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006b3e:	1d3b      	adds	r3, r7, #4
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	463b      	mov	r3, r7
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	441a      	add	r2, r3
 8006b4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	785b      	ldrb	r3, [r3, #1]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d020      	beq.n	8006bc4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b98:	81bb      	strh	r3, [r7, #12]
 8006b9a:	89bb      	ldrh	r3, [r7, #12]
 8006b9c:	f083 0310 	eor.w	r3, r3, #16
 8006ba0:	81bb      	strh	r3, [r7, #12]
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	441a      	add	r2, r3
 8006bac:	89bb      	ldrh	r3, [r7, #12]
 8006bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	8013      	strh	r3, [r2, #0]
 8006bc2:	e01f      	b.n	8006c04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bda:	81fb      	strh	r3, [r7, #14]
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006be2:	81fb      	strh	r3, [r7, #14]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bc80      	pop	{r7}
 8006c0e:	4770      	bx	lr

08006c10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	7b1b      	ldrb	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 809d 	bne.w	8006d5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d04c      	beq.n	8006cc6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	823b      	strh	r3, [r7, #16]
 8006c3a:	8a3b      	ldrh	r3, [r7, #16]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01b      	beq.n	8006c7c <USB_EPClearStall+0x6c>
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5a:	81fb      	strh	r3, [r7, #14]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	441a      	add	r2, r3
 8006c66:	89fb      	ldrh	r3, [r7, #14]
 8006c68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	78db      	ldrb	r3, [r3, #3]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d06c      	beq.n	8006d5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c9a:	81bb      	strh	r3, [r7, #12]
 8006c9c:	89bb      	ldrh	r3, [r7, #12]
 8006c9e:	f083 0320 	eor.w	r3, r3, #32
 8006ca2:	81bb      	strh	r3, [r7, #12]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	89bb      	ldrh	r3, [r7, #12]
 8006cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	8013      	strh	r3, [r2, #0]
 8006cc4:	e04b      	b.n	8006d5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	82fb      	strh	r3, [r7, #22]
 8006cd4:	8afb      	ldrh	r3, [r7, #22]
 8006cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d01b      	beq.n	8006d16 <USB_EPClearStall+0x106>
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	881b      	ldrh	r3, [r3, #0]
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf4:	82bb      	strh	r3, [r7, #20]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	441a      	add	r2, r3
 8006d00:	8abb      	ldrh	r3, [r7, #20]
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	827b      	strh	r3, [r7, #18]
 8006d2e:	8a7b      	ldrh	r3, [r7, #18]
 8006d30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d34:	827b      	strh	r3, [r7, #18]
 8006d36:	8a7b      	ldrh	r3, [r7, #18]
 8006d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d3c:	827b      	strh	r3, [r7, #18]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	441a      	add	r2, r3
 8006d48:	8a7b      	ldrh	r3, [r7, #18]
 8006d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr

08006d6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d103      	bne.n	8006d84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006dca:	68fb      	ldr	r3, [r7, #12]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bc80      	pop	{r7}
 8006dd4:	4770      	bx	lr

08006dd6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b08d      	sub	sp, #52	; 0x34
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	80fb      	strh	r3, [r7, #6]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006e02:	88bb      	ldrh	r3, [r7, #4]
 8006e04:	3301      	adds	r3, #1
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	005a      	lsls	r2, r3, #1
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e24:	e01e      	b.n	8006e64 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	3301      	adds	r3, #1
 8006e30:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	3302      	adds	r3, #2
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	3302      	adds	r3, #2
 8006e56:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e60:	3b01      	subs	r3, #1
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1dd      	bne.n	8006e26 <USB_WritePMA+0x3a>
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	3734      	adds	r7, #52	; 0x34
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b08b      	sub	sp, #44	; 0x2c
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	4611      	mov	r1, r2
 8006e82:	461a      	mov	r2, r3
 8006e84:	460b      	mov	r3, r1
 8006e86:	80fb      	strh	r3, [r7, #6]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006e8c:	88bb      	ldrh	r3, [r7, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	005a      	lsls	r2, r3, #1
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	e01b      	b.n	8006ee8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	3302      	adds	r3, #2
 8006ebc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	3302      	adds	r3, #2
 8006ee0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e0      	bne.n	8006eb0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006eee:	88bb      	ldrh	r3, [r7, #4]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	881b      	ldrh	r3, [r3, #0]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	701a      	strb	r2, [r3, #0]
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	372c      	adds	r7, #44	; 0x2c
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bc80      	pop	{r7}
 8006f12:	4770      	bx	lr

08006f14 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006f20:	2308      	movs	r3, #8
 8006f22:	2203      	movs	r2, #3
 8006f24:	2181      	movs	r1, #129	; 0x81
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fca7 	bl	800887a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8006f32:	2301      	movs	r3, #1
 8006f34:	2203      	movs	r2, #3
 8006f36:	2101      	movs	r1, #1
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fc9e 	bl	800887a <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006f3e:	2010      	movs	r0, #16
 8006f40:	f001 fdb0 	bl	8008aa4 <USBD_static_malloc>
 8006f44:	4602      	mov	r2, r0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	4a0b      	ldr	r2, [pc, #44]	; (8006f7c <USBD_HID_Init+0x68>)
 8006f50:	2101      	movs	r1, #1
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fd82 	bl	8008a5c <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8006f62:	2302      	movs	r3, #2
 8006f64:	e005      	b.n	8006f72 <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	2000042d 	.word	0x2000042d

08006f80 <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006f92:	2301      	movs	r3, #1
 8006f94:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <USBD_HID_DataOut+0x30>)
 8006f96:	2101      	movs	r1, #1
 8006f98:	f7fb ff95 	bl	8002ec6 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <USBD_HID_DataOut+0x30>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fa fc53 	bl	800184c <SET_LEDS_Callback>

	return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	2000042d 	.word	0x2000042d

08006fb4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006fc0:	2181      	movs	r1, #129	; 0x81
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f001 fc7f 	bl	80088c6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d009      	beq.n	8006fec <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 fd6c 	bl	8008abc <USBD_static_free>
    pdev->pClassData = NULL;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
	...

08006ff8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800700a:	2300      	movs	r3, #0
 800700c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007022:	2b00      	cmp	r3, #0
 8007024:	d045      	beq.n	80070b2 <USBD_HID_Setup+0xba>
 8007026:	2b20      	cmp	r3, #32
 8007028:	f040 80d3 	bne.w	80071d2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	785b      	ldrb	r3, [r3, #1]
 8007030:	3b02      	subs	r3, #2
 8007032:	2b09      	cmp	r3, #9
 8007034:	d835      	bhi.n	80070a2 <USBD_HID_Setup+0xaa>
 8007036:	a201      	add	r2, pc, #4	; (adr r2, 800703c <USBD_HID_Setup+0x44>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007093 	.word	0x08007093
 8007040:	08007073 	.word	0x08007073
 8007044:	080070a3 	.word	0x080070a3
 8007048:	080070a3 	.word	0x080070a3
 800704c:	080070a3 	.word	0x080070a3
 8007050:	080070a3 	.word	0x080070a3
 8007054:	080070a3 	.word	0x080070a3
 8007058:	080070a3 	.word	0x080070a3
 800705c:	08007081 	.word	0x08007081
 8007060:	08007065 	.word	0x08007065
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	885b      	ldrh	r3, [r3, #2]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	601a      	str	r2, [r3, #0]
          break;
 8007070:	e01e      	b.n	80070b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2201      	movs	r2, #1
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f944 	bl	8008306 <USBD_CtlSendData>
          break;
 800707e:	e017      	b.n	80070b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	0a1b      	lsrs	r3, r3, #8
 8007086:	b29b      	uxth	r3, r3
 8007088:	b2db      	uxtb	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]
          break;
 8007090:	e00e      	b.n	80070b0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	3304      	adds	r3, #4
 8007096:	2201      	movs	r2, #1
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 f933 	bl	8008306 <USBD_CtlSendData>
          break;
 80070a0:	e006      	b.n	80070b0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 f8c4 	bl	8008232 <USBD_CtlError>
          ret = USBD_FAIL;
 80070aa:	2302      	movs	r3, #2
 80070ac:	75fb      	strb	r3, [r7, #23]
          break;
 80070ae:	bf00      	nop
      }
      break;
 80070b0:	e096      	b.n	80071e0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	785b      	ldrb	r3, [r3, #1]
 80070b6:	2b0b      	cmp	r3, #11
 80070b8:	f200 8083 	bhi.w	80071c2 <USBD_HID_Setup+0x1ca>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <USBD_HID_Setup+0xcc>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	080071c3 	.word	0x080071c3
 80070cc:	080071c3 	.word	0x080071c3
 80070d0:	080071c3 	.word	0x080071c3
 80070d4:	080071c3 	.word	0x080071c3
 80070d8:	080071c3 	.word	0x080071c3
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	080071c3 	.word	0x080071c3
 80070e4:	080071c3 	.word	0x080071c3
 80070e8:	080071c3 	.word	0x080071c3
 80070ec:	08007175 	.word	0x08007175
 80070f0:	0800719d 	.word	0x0800719d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d107      	bne.n	800710e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80070fe:	f107 030e 	add.w	r3, r7, #14
 8007102:	2202      	movs	r2, #2
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 f8fd 	bl	8008306 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800710c:	e060      	b.n	80071d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f88e 	bl	8008232 <USBD_CtlError>
            ret = USBD_FAIL;
 8007116:	2302      	movs	r3, #2
 8007118:	75fb      	strb	r3, [r7, #23]
          break;
 800711a:	e059      	b.n	80071d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	885b      	ldrh	r3, [r3, #2]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b22      	cmp	r3, #34	; 0x22
 8007126:	d108      	bne.n	800713a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	88db      	ldrh	r3, [r3, #6]
 800712c:	2b73      	cmp	r3, #115	; 0x73
 800712e:	bf28      	it	cs
 8007130:	2373      	movcs	r3, #115	; 0x73
 8007132:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8007134:	4b2d      	ldr	r3, [pc, #180]	; (80071ec <USBD_HID_Setup+0x1f4>)
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e015      	b.n	8007166 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	885b      	ldrh	r3, [r3, #2]
 800713e:	0a1b      	lsrs	r3, r3, #8
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b21      	cmp	r3, #33	; 0x21
 8007144:	d108      	bne.n	8007158 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007146:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <USBD_HID_Setup+0x1f8>)
 8007148:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	88db      	ldrh	r3, [r3, #6]
 800714e:	2b09      	cmp	r3, #9
 8007150:	bf28      	it	cs
 8007152:	2309      	movcs	r3, #9
 8007154:	83fb      	strh	r3, [r7, #30]
 8007156:	e006      	b.n	8007166 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 f869 	bl	8008232 <USBD_CtlError>
            ret = USBD_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	75fb      	strb	r3, [r7, #23]
            break;
 8007164:	e034      	b.n	80071d0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007166:	8bfb      	ldrh	r3, [r7, #30]
 8007168:	461a      	mov	r2, r3
 800716a:	69b9      	ldr	r1, [r7, #24]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 f8ca 	bl	8008306 <USBD_CtlSendData>
          break;
 8007172:	e02d      	b.n	80071d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717a:	2b03      	cmp	r3, #3
 800717c:	d107      	bne.n	800718e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	3308      	adds	r3, #8
 8007182:	2201      	movs	r2, #1
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 f8bd 	bl	8008306 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800718c:	e020      	b.n	80071d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f84e 	bl	8008232 <USBD_CtlError>
            ret = USBD_FAIL;
 8007196:	2302      	movs	r3, #2
 8007198:	75fb      	strb	r3, [r7, #23]
          break;
 800719a:	e019      	b.n	80071d0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d106      	bne.n	80071b4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	885b      	ldrh	r3, [r3, #2]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071b2:	e00d      	b.n	80071d0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f83b 	bl	8008232 <USBD_CtlError>
            ret = USBD_FAIL;
 80071bc:	2302      	movs	r3, #2
 80071be:	75fb      	strb	r3, [r7, #23]
          break;
 80071c0:	e006      	b.n	80071d0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 f834 	bl	8008232 <USBD_CtlError>
          ret = USBD_FAIL;
 80071ca:	2302      	movs	r3, #2
 80071cc:	75fb      	strb	r3, [r7, #23]
          break;
 80071ce:	bf00      	nop
      }
      break;
 80071d0:	e006      	b.n	80071e0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f82c 	bl	8008232 <USBD_CtlError>
      ret = USBD_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	75fb      	strb	r3, [r7, #23]
      break;
 80071de:	bf00      	nop
  }

  return ret;
 80071e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	200000e4 	.word	0x200000e4
 80071f0:	200000cc 	.word	0x200000cc

080071f4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	2b03      	cmp	r3, #3
 8007212:	d10c      	bne.n	800722e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	7b1b      	ldrb	r3, [r3, #12]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d108      	bne.n	800722e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2201      	movs	r2, #1
 8007220:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	2181      	movs	r1, #129	; 0x81
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f001 fbf4 	bl	8008a16 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2229      	movs	r2, #41	; 0x29
 8007244:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007246:	4b03      	ldr	r3, [pc, #12]	; (8007254 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	bc80      	pop	{r7}
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000048 	.word	0x20000048

08007258 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2229      	movs	r2, #41	; 0x29
 8007264:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007266:	4b03      	ldr	r3, [pc, #12]	; (8007274 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000074 	.word	0x20000074

08007278 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2229      	movs	r2, #41	; 0x29
 8007284:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007286:	4b03      	ldr	r3, [pc, #12]	; (8007294 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007288:	4618      	mov	r0, r3
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	200000a0 	.word	0x200000a0

08007298 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 80072a4:	f7fa f8b0 	bl	8001408 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ae:	2200      	movs	r2, #0
 80072b0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	220a      	movs	r2, #10
 80072c8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80072ca:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	200000d8 	.word	0x200000d8

080072dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80072f0:	2302      	movs	r3, #2
 80072f2:	e01a      	b.n	800732a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	79fa      	ldrb	r2, [r7, #7]
 8007320:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 fa46 	bl	80087b4 <USBD_LL_Init>

  return USBD_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007332:	b480      	push	{r7}
 8007334:	b085      	sub	sp, #20
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	e001      	b.n	8007358 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007354:	2302      	movs	r3, #2
 8007356:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fa69 	bl	8008844 <USBD_LL_Start>

  return USBD_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr

08007390 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800739c:	2302      	movs	r3, #2
 800739e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00c      	beq.n	80073c4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	78fa      	ldrb	r2, [r7, #3]
 80073b4:	4611      	mov	r1, r2
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b082      	sub	sp, #8
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	78fa      	ldrb	r2, [r7, #3]
 80073e4:	4611      	mov	r1, r2
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 fed7 	bl	80081ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007428:	f003 031f 	and.w	r3, r3, #31
 800742c:	2b02      	cmp	r3, #2
 800742e:	d016      	beq.n	800745e <USBD_LL_SetupStage+0x6a>
 8007430:	2b02      	cmp	r3, #2
 8007432:	d81c      	bhi.n	800746e <USBD_LL_SetupStage+0x7a>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <USBD_LL_SetupStage+0x4a>
 8007438:	2b01      	cmp	r3, #1
 800743a:	d008      	beq.n	800744e <USBD_LL_SetupStage+0x5a>
 800743c:	e017      	b.n	800746e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9ca 	bl	80077e0 <USBD_StdDevReq>
      break;
 800744c:	e01a      	b.n	8007484 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa2c 	bl	80078b4 <USBD_StdItfReq>
      break;
 800745c:	e012      	b.n	8007484 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fa6c 	bl	8007944 <USBD_StdEPReq>
      break;
 800746c:	e00a      	b.n	8007484 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007474:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fa41 	bl	8008904 <USBD_LL_StallEP>
      break;
 8007482:	bf00      	nop
  }

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b086      	sub	sp, #24
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	460b      	mov	r3, r1
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d14b      	bne.n	800753a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80074a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d134      	bne.n	800751e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d919      	bls.n	80074f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	68da      	ldr	r2, [r3, #12]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	1ad2      	subs	r2, r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d203      	bcs.n	80074e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074de:	b29b      	uxth	r3, r3
 80074e0:	e002      	b.n	80074e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	461a      	mov	r2, r3
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 ff38 	bl	8008362 <USBD_CtlContinueRx>
 80074f2:	e038      	b.n	8007566 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007506:	2b03      	cmp	r3, #3
 8007508:	d105      	bne.n	8007516 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 ff35 	bl	8008386 <USBD_CtlSendStatus>
 800751c:	e023      	b.n	8007566 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007524:	2b05      	cmp	r3, #5
 8007526:	d11e      	bne.n	8007566 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007530:	2100      	movs	r1, #0
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f001 f9e6 	bl	8008904 <USBD_LL_StallEP>
 8007538:	e015      	b.n	8007566 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800754c:	2b03      	cmp	r3, #3
 800754e:	d108      	bne.n	8007562 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	7afa      	ldrb	r2, [r7, #11]
 800755a:	4611      	mov	r1, r2
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	4798      	blx	r3
 8007560:	e001      	b.n	8007566 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007562:	2302      	movs	r3, #2
 8007564:	e000      	b.n	8007568 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	460b      	mov	r3, r1
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d17f      	bne.n	8007684 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3314      	adds	r3, #20
 8007588:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007590:	2b02      	cmp	r3, #2
 8007592:	d15c      	bne.n	800764e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	429a      	cmp	r2, r3
 800759e:	d915      	bls.n	80075cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	1ad2      	subs	r2, r2, r3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	6879      	ldr	r1, [r7, #4]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fec0 	bl	800833e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075be:	2300      	movs	r3, #0
 80075c0:	2200      	movs	r2, #0
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f001 fa49 	bl	8008a5c <USBD_LL_PrepareReceive>
 80075ca:	e04e      	b.n	800766a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	6912      	ldr	r2, [r2, #16]
 80075d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80075d8:	fb02 f201 	mul.w	r2, r2, r1
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d11c      	bne.n	800761c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d316      	bcc.n	800761c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d20f      	bcs.n	800761c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075fc:	2200      	movs	r2, #0
 80075fe:	2100      	movs	r1, #0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fe9c 	bl	800833e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800760e:	2300      	movs	r3, #0
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f001 fa21 	bl	8008a5c <USBD_LL_PrepareReceive>
 800761a:	e026      	b.n	800766a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800762e:	2b03      	cmp	r3, #3
 8007630:	d105      	bne.n	800763e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800763e:	2180      	movs	r1, #128	; 0x80
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f001 f95f 	bl	8008904 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 feb0 	bl	80083ac <USBD_CtlReceiveStatus>
 800764c:	e00d      	b.n	800766a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007654:	2b04      	cmp	r3, #4
 8007656:	d004      	beq.n	8007662 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f001 f94d 	bl	8008904 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007670:	2b01      	cmp	r3, #1
 8007672:	d11d      	bne.n	80076b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fe81 	bl	800737c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007682:	e015      	b.n	80076b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00d      	beq.n	80076ac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007696:	2b03      	cmp	r3, #3
 8007698:	d108      	bne.n	80076ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	7afa      	ldrb	r2, [r7, #11]
 80076a4:	4611      	mov	r1, r2
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	4798      	blx	r3
 80076aa:	e001      	b.n	80076b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076ac:	2302      	movs	r3, #2
 80076ae:	e000      	b.n	80076b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f8d6 	bl	800887a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2240      	movs	r2, #64	; 0x40
 80076da:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076de:	2340      	movs	r3, #64	; 0x40
 80076e0:	2200      	movs	r2, #0
 80076e2:	2180      	movs	r1, #128	; 0x80
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 f8c8 	bl	800887a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2240      	movs	r2, #64	; 0x40
 80076f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771a:	2b00      	cmp	r3, #0
 800771c:	d009      	beq.n	8007732 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6852      	ldr	r2, [r2, #4]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	4611      	mov	r1, r2
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	4798      	blx	r3
  }

  return USBD_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	bc80      	pop	{r7}
 8007758:	4770      	bx	lr

0800775a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2204      	movs	r2, #4
 8007772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	2b04      	cmp	r3, #4
 8007792:	d105      	bne.n	80077a0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d10b      	bne.n	80077d6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d005      	beq.n	8007806 <USBD_StdDevReq+0x26>
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d84f      	bhi.n	800789e <USBD_StdDevReq+0xbe>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <USBD_StdDevReq+0x36>
 8007802:	2b20      	cmp	r3, #32
 8007804:	d14b      	bne.n	800789e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	4798      	blx	r3
      break;
 8007814:	e048      	b.n	80078a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	2b09      	cmp	r3, #9
 800781c:	d839      	bhi.n	8007892 <USBD_StdDevReq+0xb2>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <USBD_StdDevReq+0x44>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	08007875 	.word	0x08007875
 8007828:	08007889 	.word	0x08007889
 800782c:	08007893 	.word	0x08007893
 8007830:	0800787f 	.word	0x0800787f
 8007834:	08007893 	.word	0x08007893
 8007838:	08007857 	.word	0x08007857
 800783c:	0800784d 	.word	0x0800784d
 8007840:	08007893 	.word	0x08007893
 8007844:	0800786b 	.word	0x0800786b
 8007848:	08007861 	.word	0x08007861
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9dc 	bl	8007c0c <USBD_GetDescriptor>
          break;
 8007854:	e022      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 fb3f 	bl	8007edc <USBD_SetAddress>
          break;
 800785e:	e01d      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fb7e 	bl	8007f64 <USBD_SetConfig>
          break;
 8007868:	e018      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc07 	bl	8008080 <USBD_GetConfig>
          break;
 8007872:	e013      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc37 	bl	80080ea <USBD_GetStatus>
          break;
 800787c:	e00e      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc65 	bl	8008150 <USBD_SetFeature>
          break;
 8007886:	e009      	b.n	800789c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc74 	bl	8008178 <USBD_ClrFeature>
          break;
 8007890:	e004      	b.n	800789c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fccc 	bl	8008232 <USBD_CtlError>
          break;
 800789a:	bf00      	nop
      }
      break;
 800789c:	e004      	b.n	80078a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fcc6 	bl	8008232 <USBD_CtlError>
      break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop

080078b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <USBD_StdItfReq+0x26>
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d82e      	bhi.n	8007930 <USBD_StdItfReq+0x7c>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <USBD_StdItfReq+0x26>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d12a      	bne.n	8007930 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d81d      	bhi.n	8007922 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	889b      	ldrh	r3, [r3, #4]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d813      	bhi.n	8007918 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <USBD_StdItfReq+0x78>
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10d      	bne.n	800792c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd38 	bl	8008386 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007916:	e009      	b.n	800792c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc89 	bl	8008232 <USBD_CtlError>
          break;
 8007920:	e004      	b.n	800792c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc84 	bl	8008232 <USBD_CtlError>
          break;
 800792a:	e000      	b.n	800792e <USBD_StdItfReq+0x7a>
          break;
 800792c:	bf00      	nop
      }
      break;
 800792e:	e004      	b.n	800793a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc7d 	bl	8008232 <USBD_CtlError>
      break;
 8007938:	bf00      	nop
  }

  return USBD_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	889b      	ldrh	r3, [r3, #4]
 8007956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d007      	beq.n	8007974 <USBD_StdEPReq+0x30>
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	f200 8146 	bhi.w	8007bf6 <USBD_StdEPReq+0x2b2>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <USBD_StdEPReq+0x40>
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 8141 	bne.w	8007bf6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
      break;
 8007982:	e13d      	b.n	8007c00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800798c:	2b20      	cmp	r3, #32
 800798e:	d10a      	bne.n	80079a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	e12d      	b.n	8007c02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d007      	beq.n	80079be <USBD_StdEPReq+0x7a>
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	f300 811b 	bgt.w	8007bea <USBD_StdEPReq+0x2a6>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d072      	beq.n	8007a9e <USBD_StdEPReq+0x15a>
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d03a      	beq.n	8007a32 <USBD_StdEPReq+0xee>
 80079bc:	e115      	b.n	8007bea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d002      	beq.n	80079ce <USBD_StdEPReq+0x8a>
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d015      	beq.n	80079f8 <USBD_StdEPReq+0xb4>
 80079cc:	e02b      	b.n	8007a26 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ce:	7bbb      	ldrb	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <USBD_StdEPReq+0xaa>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b80      	cmp	r3, #128	; 0x80
 80079d8:	d009      	beq.n	80079ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 ff90 	bl	8008904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079e4:	2180      	movs	r1, #128	; 0x80
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 ff8c 	bl	8008904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079ec:	e020      	b.n	8007a30 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc1e 	bl	8008232 <USBD_CtlError>
              break;
 80079f6:	e01b      	b.n	8007a30 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	885b      	ldrh	r3, [r3, #2]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10e      	bne.n	8007a1e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <USBD_StdEPReq+0xda>
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d008      	beq.n	8007a1e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 ff73 	bl	8008904 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fcb1 	bl	8008386 <USBD_CtlSendStatus>

              break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fc02 	bl	8008232 <USBD_CtlError>
              break;
 8007a2e:	bf00      	nop
          }
          break;
 8007a30:	e0e0      	b.n	8007bf4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d002      	beq.n	8007a42 <USBD_StdEPReq+0xfe>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d015      	beq.n	8007a6c <USBD_StdEPReq+0x128>
 8007a40:	e026      	b.n	8007a90 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00c      	beq.n	8007a62 <USBD_StdEPReq+0x11e>
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d009      	beq.n	8007a62 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 ff56 	bl	8008904 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a58:	2180      	movs	r1, #128	; 0x80
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 ff52 	bl	8008904 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a60:	e01c      	b.n	8007a9c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fbe4 	bl	8008232 <USBD_CtlError>
              break;
 8007a6a:	e017      	b.n	8007a9c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	885b      	ldrh	r3, [r3, #2]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d112      	bne.n	8007a9a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	4619      	mov	r1, r3
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 ff5d 	bl	8008942 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc7c 	bl	8008386 <USBD_CtlSendStatus>
              }
              break;
 8007a8e:	e004      	b.n	8007a9a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbcd 	bl	8008232 <USBD_CtlError>
              break;
 8007a98:	e000      	b.n	8007a9c <USBD_StdEPReq+0x158>
              break;
 8007a9a:	bf00      	nop
          }
          break;
 8007a9c:	e0aa      	b.n	8007bf4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d002      	beq.n	8007aae <USBD_StdEPReq+0x16a>
 8007aa8:	2b03      	cmp	r3, #3
 8007aaa:	d032      	beq.n	8007b12 <USBD_StdEPReq+0x1ce>
 8007aac:	e097      	b.n	8007bde <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <USBD_StdEPReq+0x180>
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	2b80      	cmp	r3, #128	; 0x80
 8007ab8:	d004      	beq.n	8007ac4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fbb8 	bl	8008232 <USBD_CtlError>
                break;
 8007ac2:	e091      	b.n	8007be8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da0b      	bge.n	8007ae4 <USBD_StdEPReq+0x1a0>
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	3310      	adds	r3, #16
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	4413      	add	r3, r2
 8007ae0:	3304      	adds	r3, #4
 8007ae2:	e00b      	b.n	8007afc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	4413      	add	r3, r2
 8007afa:	3304      	adds	r3, #4
 8007afc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2200      	movs	r2, #0
 8007b02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2202      	movs	r2, #2
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fbfb 	bl	8008306 <USBD_CtlSendData>
              break;
 8007b10:	e06a      	b.n	8007be8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da11      	bge.n	8007b3e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3318      	adds	r3, #24
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d117      	bne.n	8007b64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fb7b 	bl	8008232 <USBD_CtlError>
                  break;
 8007b3c:	e054      	b.n	8007be8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	f003 020f 	and.w	r2, r3, #15
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d104      	bne.n	8007b64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fb68 	bl	8008232 <USBD_CtlError>
                  break;
 8007b62:	e041      	b.n	8007be8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	da0b      	bge.n	8007b84 <USBD_StdEPReq+0x240>
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	3310      	adds	r3, #16
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4413      	add	r3, r2
 8007b80:	3304      	adds	r3, #4
 8007b82:	e00b      	b.n	8007b9c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d002      	beq.n	8007baa <USBD_StdEPReq+0x266>
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b80      	cmp	r3, #128	; 0x80
 8007ba8:	d103      	bne.n	8007bb2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	601a      	str	r2, [r3, #0]
 8007bb0:	e00e      	b.n	8007bd0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fee2 	bl	8008980 <USBD_LL_IsStallEP>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	e002      	b.n	8007bd0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fb95 	bl	8008306 <USBD_CtlSendData>
              break;
 8007bdc:	e004      	b.n	8007be8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb26 	bl	8008232 <USBD_CtlError>
              break;
 8007be6:	bf00      	nop
          }
          break;
 8007be8:	e004      	b.n	8007bf4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb20 	bl	8008232 <USBD_CtlError>
          break;
 8007bf2:	bf00      	nop
      }
      break;
 8007bf4:	e004      	b.n	8007c00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fb1a 	bl	8008232 <USBD_CtlError>
      break;
 8007bfe:	bf00      	nop
  }

  return ret;
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
	...

08007c0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	885b      	ldrh	r3, [r3, #2]
 8007c26:	0a1b      	lsrs	r3, r3, #8
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	f200 8128 	bhi.w	8007e82 <USBD_GetDescriptor+0x276>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBD_GetDescriptor+0x2c>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	08007c6d 	.word	0x08007c6d
 8007c40:	08007cad 	.word	0x08007cad
 8007c44:	08007e83 	.word	0x08007e83
 8007c48:	08007e83 	.word	0x08007e83
 8007c4c:	08007e23 	.word	0x08007e23
 8007c50:	08007e4f 	.word	0x08007e4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
      break;
 8007c6a:	e112      	b.n	8007e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7c1b      	ldrb	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c8e:	e100      	b.n	8007e92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	f107 0208 	add.w	r2, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e0f2      	b.n	8007e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	885b      	ldrh	r3, [r3, #2]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	f200 80ac 	bhi.w	8007e10 <USBD_GetDescriptor+0x204>
 8007cb8:	a201      	add	r2, pc, #4	; (adr r2, 8007cc0 <USBD_GetDescriptor+0xb4>)
 8007cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbe:	bf00      	nop
 8007cc0:	08007cd9 	.word	0x08007cd9
 8007cc4:	08007d0d 	.word	0x08007d0d
 8007cc8:	08007d41 	.word	0x08007d41
 8007ccc:	08007d75 	.word	0x08007d75
 8007cd0:	08007da9 	.word	0x08007da9
 8007cd4:	08007ddd 	.word	0x08007ddd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	7c12      	ldrb	r2, [r2, #16]
 8007cf0:	f107 0108 	add.w	r1, r7, #8
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
 8007cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cfa:	e091      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa97 	bl	8008232 <USBD_CtlError>
            err++;
 8007d04:	7afb      	ldrb	r3, [r7, #11]
 8007d06:	3301      	adds	r3, #1
 8007d08:	72fb      	strb	r3, [r7, #11]
          break;
 8007d0a:	e089      	b.n	8007e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00b      	beq.n	8007d30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	7c12      	ldrb	r2, [r2, #16]
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	4610      	mov	r0, r2
 8007d2a:	4798      	blx	r3
 8007d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d2e:	e077      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa7d 	bl	8008232 <USBD_CtlError>
            err++;
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d3e:	e06f      	b.n	8007e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d62:	e05d      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa63 	bl	8008232 <USBD_CtlError>
            err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
          break;
 8007d72:	e055      	b.n	8007e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e043      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa49 	bl	8008232 <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e03b      	b.n	8007e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e029      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa2f 	bl	8008232 <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e021      	b.n	8007e20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e00f      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa15 	bl	8008232 <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e007      	b.n	8007e20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa0d 	bl	8008232 <USBD_CtlError>
          err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e1e:	e038      	b.n	8007e92 <USBD_GetDescriptor+0x286>
 8007e20:	e037      	b.n	8007e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	7c1b      	ldrb	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e32:	f107 0208 	add.w	r2, r7, #8
 8007e36:	4610      	mov	r0, r2
 8007e38:	4798      	blx	r3
 8007e3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e3c:	e029      	b.n	8007e92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9f6 	bl	8008232 <USBD_CtlError>
        err++;
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4c:	e021      	b.n	8007e92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7c1b      	ldrb	r3, [r3, #16]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10d      	bne.n	8007e72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	f107 0208 	add.w	r2, r7, #8
 8007e62:	4610      	mov	r0, r2
 8007e64:	4798      	blx	r3
 8007e66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	2207      	movs	r2, #7
 8007e6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e70:	e00f      	b.n	8007e92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f9dc 	bl	8008232 <USBD_CtlError>
        err++;
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e80:	e007      	b.n	8007e92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9d4 	bl	8008232 <USBD_CtlError>
      err++;
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e90:	bf00      	nop
  }

  if (err != 0U)
 8007e92:	7afb      	ldrb	r3, [r7, #11]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d11c      	bne.n	8007ed2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e98:	893b      	ldrh	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d011      	beq.n	8007ec2 <USBD_GetDescriptor+0x2b6>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	88db      	ldrh	r3, [r3, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00d      	beq.n	8007ec2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88da      	ldrh	r2, [r3, #6]
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	4293      	cmp	r3, r2
 8007eae:	bf28      	it	cs
 8007eb0:	4613      	movcs	r3, r2
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fa22 	bl	8008306 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	88db      	ldrh	r3, [r3, #6]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d104      	bne.n	8007ed4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa5b 	bl	8008386 <USBD_CtlSendStatus>
 8007ed0:	e000      	b.n	8007ed4 <USBD_GetDescriptor+0x2c8>
    return;
 8007ed2:	bf00      	nop
    }
  }
}
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop

08007edc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	889b      	ldrh	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d130      	bne.n	8007f50 <USBD_SetAddress+0x74>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	88db      	ldrh	r3, [r3, #6]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d12c      	bne.n	8007f50 <USBD_SetAddress+0x74>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	2b7f      	cmp	r3, #127	; 0x7f
 8007efc:	d828      	bhi.n	8007f50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	885b      	ldrh	r3, [r3, #2]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d104      	bne.n	8007f1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f98b 	bl	8008232 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1c:	e01d      	b.n	8007f5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fd54 	bl	80089d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa28 	bl	8008386 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f44:	e009      	b.n	8007f5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f4e:	e004      	b.n	8007f5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f96d 	bl	8008232 <USBD_CtlError>
  }
}
 8007f58:	bf00      	nop
 8007f5a:	bf00      	nop
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	885b      	ldrh	r3, [r3, #2]
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	4b41      	ldr	r3, [pc, #260]	; (800807c <USBD_SetConfig+0x118>)
 8007f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f78:	4b40      	ldr	r3, [pc, #256]	; (800807c <USBD_SetConfig+0x118>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d904      	bls.n	8007f8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f955 	bl	8008232 <USBD_CtlError>
 8007f88:	e075      	b.n	8008076 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d002      	beq.n	8007f9a <USBD_SetConfig+0x36>
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d023      	beq.n	8007fe0 <USBD_SetConfig+0x7c>
 8007f98:	e062      	b.n	8008060 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f9a:	4b38      	ldr	r3, [pc, #224]	; (800807c <USBD_SetConfig+0x118>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01a      	beq.n	8007fd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007fa2:	4b36      	ldr	r3, [pc, #216]	; (800807c <USBD_SetConfig+0x118>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2203      	movs	r2, #3
 8007fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fb4:	4b31      	ldr	r3, [pc, #196]	; (800807c <USBD_SetConfig+0x118>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f9e8 	bl	8007390 <USBD_SetClassConfig>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d104      	bne.n	8007fd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f932 	bl	8008232 <USBD_CtlError>
            return;
 8007fce:	e052      	b.n	8008076 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f9d8 	bl	8008386 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007fd6:	e04e      	b.n	8008076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f9d4 	bl	8008386 <USBD_CtlSendStatus>
        break;
 8007fde:	e04a      	b.n	8008076 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007fe0:	4b26      	ldr	r3, [pc, #152]	; (800807c <USBD_SetConfig+0x118>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d112      	bne.n	800800e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ff0:	4b22      	ldr	r3, [pc, #136]	; (800807c <USBD_SetConfig+0x118>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ffa:	4b20      	ldr	r3, [pc, #128]	; (800807c <USBD_SetConfig+0x118>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff f9e4 	bl	80073ce <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f9bd 	bl	8008386 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800800c:	e033      	b.n	8008076 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800800e:	4b1b      	ldr	r3, [pc, #108]	; (800807c <USBD_SetConfig+0x118>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d01d      	beq.n	8008058 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff f9d2 	bl	80073ce <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <USBD_SetConfig+0x118>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008034:	4b11      	ldr	r3, [pc, #68]	; (800807c <USBD_SetConfig+0x118>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4619      	mov	r1, r3
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff f9a8 	bl	8007390 <USBD_SetClassConfig>
 8008040:	4603      	mov	r3, r0
 8008042:	2b02      	cmp	r3, #2
 8008044:	d104      	bne.n	8008050 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8f2 	bl	8008232 <USBD_CtlError>
            return;
 800804e:	e012      	b.n	8008076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f998 	bl	8008386 <USBD_CtlSendStatus>
        break;
 8008056:	e00e      	b.n	8008076 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f994 	bl	8008386 <USBD_CtlSendStatus>
        break;
 800805e:	e00a      	b.n	8008076 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f8e5 	bl	8008232 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008068:	4b04      	ldr	r3, [pc, #16]	; (800807c <USBD_SetConfig+0x118>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff f9ad 	bl	80073ce <USBD_ClrClassConfig>
        break;
 8008074:	bf00      	nop
    }
  }
}
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	2000042e 	.word	0x2000042e

08008080 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	88db      	ldrh	r3, [r3, #6]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d004      	beq.n	800809c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f8cc 	bl	8008232 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800809a:	e022      	b.n	80080e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	dc02      	bgt.n	80080ac <USBD_GetConfig+0x2c>
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	dc03      	bgt.n	80080b2 <USBD_GetConfig+0x32>
 80080aa:	e015      	b.n	80080d8 <USBD_GetConfig+0x58>
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d00b      	beq.n	80080c8 <USBD_GetConfig+0x48>
 80080b0:	e012      	b.n	80080d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3308      	adds	r3, #8
 80080bc:	2201      	movs	r2, #1
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f920 	bl	8008306 <USBD_CtlSendData>
        break;
 80080c6:	e00c      	b.n	80080e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	2201      	movs	r2, #1
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f918 	bl	8008306 <USBD_CtlSendData>
        break;
 80080d6:	e004      	b.n	80080e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f8a9 	bl	8008232 <USBD_CtlError>
        break;
 80080e0:	bf00      	nop
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fa:	3b01      	subs	r3, #1
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d81e      	bhi.n	800813e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	88db      	ldrh	r3, [r3, #6]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d004      	beq.n	8008112 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f891 	bl	8008232 <USBD_CtlError>
        break;
 8008110:	e01a      	b.n	8008148 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800811e:	2b00      	cmp	r3, #0
 8008120:	d005      	beq.n	800812e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f043 0202 	orr.w	r2, r3, #2
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	330c      	adds	r3, #12
 8008132:	2202      	movs	r2, #2
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8e5 	bl	8008306 <USBD_CtlSendData>
      break;
 800813c:	e004      	b.n	8008148 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f876 	bl	8008232 <USBD_CtlError>
      break;
 8008146:	bf00      	nop
  }
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	885b      	ldrh	r3, [r3, #2]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d106      	bne.n	8008170 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f90b 	bl	8008386 <USBD_CtlSendStatus>
  }
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008188:	3b01      	subs	r3, #1
 800818a:	2b02      	cmp	r3, #2
 800818c:	d80b      	bhi.n	80081a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10c      	bne.n	80081b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8f1 	bl	8008386 <USBD_CtlSendStatus>
      }
      break;
 80081a4:	e004      	b.n	80081b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f842 	bl	8008232 <USBD_CtlError>
      break;
 80081ae:	e000      	b.n	80081b2 <USBD_ClrFeature+0x3a>
      break;
 80081b0:	bf00      	nop
  }
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781a      	ldrb	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	785a      	ldrb	r2, [r3, #1]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	3302      	adds	r3, #2
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	b29a      	uxth	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	3303      	adds	r3, #3
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	4413      	add	r3, r2
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	3304      	adds	r3, #4
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	3305      	adds	r3, #5
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	4413      	add	r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	3306      	adds	r3, #6
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b29a      	uxth	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	3307      	adds	r3, #7
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b29b      	uxth	r3, r3
 8008220:	4413      	add	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	80da      	strh	r2, [r3, #6]

}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fb60 	bl	8008904 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008244:	2100      	movs	r1, #0
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb5c 	bl	8008904 <USBD_LL_StallEP>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d032      	beq.n	80082d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f000 f834 	bl	80082d8 <USBD_GetLen>
 8008270:	4603      	mov	r3, r0
 8008272:	3301      	adds	r3, #1
 8008274:	b29b      	uxth	r3, r3
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	1c5a      	adds	r2, r3, #1
 8008282:	75fa      	strb	r2, [r7, #23]
 8008284:	461a      	mov	r2, r3
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	7812      	ldrb	r2, [r2, #0]
 800828e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	75fa      	strb	r2, [r7, #23]
 8008296:	461a      	mov	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	2203      	movs	r2, #3
 800829e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80082a0:	e012      	b.n	80082c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	60fa      	str	r2, [r7, #12]
 80082a8:	7dfa      	ldrb	r2, [r7, #23]
 80082aa:	1c51      	adds	r1, r2, #1
 80082ac:	75f9      	strb	r1, [r7, #23]
 80082ae:	4611      	mov	r1, r2
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	440a      	add	r2, r1
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	75fa      	strb	r2, [r7, #23]
 80082be:	461a      	mov	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4413      	add	r3, r2
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e8      	bne.n	80082a2 <USBD_GetString+0x4e>
    }
  }
}
 80082d0:	bf00      	nop
 80082d2:	3718      	adds	r7, #24
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80082e4:	e005      	b.n	80082f2 <USBD_GetLen+0x1a>
  {
    len++;
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	3301      	adds	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3301      	adds	r3, #1
 80082f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f5      	bne.n	80082e6 <USBD_GetLen+0xe>
  }

  return len;
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr

08008306 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	4613      	mov	r3, r2
 8008312:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2202      	movs	r2, #2
 8008318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800831c:	88fa      	ldrh	r2, [r7, #6]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008328:	88fb      	ldrh	r3, [r7, #6]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fb71 	bl	8008a16 <USBD_LL_Transmit>

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	60f8      	str	r0, [r7, #12]
 8008346:	60b9      	str	r1, [r7, #8]
 8008348:	4613      	mov	r3, r2
 800834a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800834c:	88fb      	ldrh	r3, [r7, #6]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	2100      	movs	r1, #0
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fb5f 	bl	8008a16 <USBD_LL_Transmit>

  return USBD_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4613      	mov	r3, r2
 800836e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008370:	88fb      	ldrh	r3, [r7, #6]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fb70 	bl	8008a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008396:	2300      	movs	r3, #0
 8008398:	2200      	movs	r2, #0
 800839a:	2100      	movs	r1, #0
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb3a 	bl	8008a16 <USBD_LL_Transmit>

  return USBD_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2205      	movs	r2, #5
 80083b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083bc:	2300      	movs	r3, #0
 80083be:	2200      	movs	r2, #0
 80083c0:	2100      	movs	r1, #0
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fb4a 	bl	8008a5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083d8:	2200      	movs	r2, #0
 80083da:	490e      	ldr	r1, [pc, #56]	; (8008414 <MX_USB_DEVICE_Init+0x40>)
 80083dc:	480e      	ldr	r0, [pc, #56]	; (8008418 <MX_USB_DEVICE_Init+0x44>)
 80083de:	f7fe ff7d 	bl	80072dc <USBD_Init>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083e8:	f7f9 f8e1 	bl	80015ae <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80083ec:	490b      	ldr	r1, [pc, #44]	; (800841c <MX_USB_DEVICE_Init+0x48>)
 80083ee:	480a      	ldr	r0, [pc, #40]	; (8008418 <MX_USB_DEVICE_Init+0x44>)
 80083f0:	f7fe ff9f 	bl	8007332 <USBD_RegisterClass>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083fa:	f7f9 f8d8 	bl	80015ae <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083fe:	4806      	ldr	r0, [pc, #24]	; (8008418 <MX_USB_DEVICE_Init+0x44>)
 8008400:	f7fe ffb0 	bl	8007364 <USBD_Start>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800840a:	f7f9 f8d0 	bl	80015ae <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000158 	.word	0x20000158
 8008418:	20000740 	.word	0x20000740
 800841c:	20000010 	.word	0x20000010

08008420 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2212      	movs	r2, #18
 8008430:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000174 	.word	0x20000174

08008444 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	2204      	movs	r2, #4
 8008454:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008456:	4b03      	ldr	r3, [pc, #12]	; (8008464 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000188 	.word	0x20000188

08008468 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	4603      	mov	r3, r0
 8008470:	6039      	str	r1, [r7, #0]
 8008472:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008474:	79fb      	ldrb	r3, [r7, #7]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4907      	ldr	r1, [pc, #28]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800847e:	4808      	ldr	r0, [pc, #32]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008480:	f7ff fee8 	bl	8008254 <USBD_GetString>
 8008484:	e004      	b.n	8008490 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4904      	ldr	r1, [pc, #16]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
 800848a:	4805      	ldr	r0, [pc, #20]	; (80084a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800848c:	f7ff fee2 	bl	8008254 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000a04 	.word	0x20000a04
 80084a0:	08008bbc 	.word	0x08008bbc

080084a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b082      	sub	sp, #8
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	4603      	mov	r3, r0
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	4904      	ldr	r1, [pc, #16]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084b6:	f7ff fecd 	bl	8008254 <USBD_GetString>
  return USBD_StrDesc;
 80084ba:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000a04 	.word	0x20000a04
 80084c8:	08008bd0 	.word	0x08008bd0

080084cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	221a      	movs	r2, #26
 80084dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084de:	f000 f843 	bl	8008568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084e2:	4b02      	ldr	r3, [pc, #8]	; (80084ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	2000018c 	.word	0x2000018c

080084f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	6039      	str	r1, [r7, #0]
 80084fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d105      	bne.n	800850e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4907      	ldr	r1, [pc, #28]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008506:	4808      	ldr	r0, [pc, #32]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008508:	f7ff fea4 	bl	8008254 <USBD_GetString>
 800850c:	e004      	b.n	8008518 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4904      	ldr	r1, [pc, #16]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008512:	4805      	ldr	r0, [pc, #20]	; (8008528 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008514:	f7ff fe9e 	bl	8008254 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008518:	4b02      	ldr	r3, [pc, #8]	; (8008524 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20000a04 	.word	0x20000a04
 8008528:	08008be4 	.word	0x08008be4

0800852c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	4603      	mov	r3, r0
 8008534:	6039      	str	r1, [r7, #0]
 8008536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4907      	ldr	r1, [pc, #28]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008542:	4808      	ldr	r0, [pc, #32]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008544:	f7ff fe86 	bl	8008254 <USBD_GetString>
 8008548:	e004      	b.n	8008554 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	4904      	ldr	r1, [pc, #16]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800854e:	4805      	ldr	r0, [pc, #20]	; (8008564 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008550:	f7ff fe80 	bl	8008254 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000a04 	.word	0x20000a04
 8008564:	08008bf0 	.word	0x08008bf0

08008568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <Get_SerialNum+0x44>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <Get_SerialNum+0x48>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800857a:	4b0e      	ldr	r3, [pc, #56]	; (80085b4 <Get_SerialNum+0x4c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4413      	add	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800858e:	2208      	movs	r2, #8
 8008590:	4909      	ldr	r1, [pc, #36]	; (80085b8 <Get_SerialNum+0x50>)
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 f814 	bl	80085c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008598:	2204      	movs	r2, #4
 800859a:	4908      	ldr	r1, [pc, #32]	; (80085bc <Get_SerialNum+0x54>)
 800859c:	68b8      	ldr	r0, [r7, #8]
 800859e:	f000 f80f 	bl	80085c0 <IntToUnicode>
  }
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	1ffff7e8 	.word	0x1ffff7e8
 80085b0:	1ffff7ec 	.word	0x1ffff7ec
 80085b4:	1ffff7f0 	.word	0x1ffff7f0
 80085b8:	2000018e 	.word	0x2000018e
 80085bc:	2000019e 	.word	0x2000019e

080085c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	4613      	mov	r3, r2
 80085cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085d2:	2300      	movs	r3, #0
 80085d4:	75fb      	strb	r3, [r7, #23]
 80085d6:	e027      	b.n	8008628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	0f1b      	lsrs	r3, r3, #28
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d80b      	bhi.n	80085f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	7dfb      	ldrb	r3, [r7, #23]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4619      	mov	r1, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	440b      	add	r3, r1
 80085f0:	3230      	adds	r2, #48	; 0x30
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e00a      	b.n	800860e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	0f1b      	lsrs	r3, r3, #28
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4619      	mov	r1, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	440b      	add	r3, r1
 8008608:	3237      	adds	r2, #55	; 0x37
 800860a:	b2d2      	uxtb	r2, r2
 800860c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008614:	7dfb      	ldrb	r3, [r7, #23]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	3301      	adds	r3, #1
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	4413      	add	r3, r2
 800861e:	2200      	movs	r2, #0
 8008620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	3301      	adds	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
 8008628:	7dfa      	ldrb	r2, [r7, #23]
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	429a      	cmp	r2, r3
 800862e:	d3d3      	bcc.n	80085d8 <IntToUnicode+0x18>
  }
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr

0800863c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a0d      	ldr	r2, [pc, #52]	; (8008680 <HAL_PCD_MspInit+0x44>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d113      	bne.n	8008676 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800864e:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <HAL_PCD_MspInit+0x48>)
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	4a0c      	ldr	r2, [pc, #48]	; (8008684 <HAL_PCD_MspInit+0x48>)
 8008654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008658:	61d3      	str	r3, [r2, #28]
 800865a:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <HAL_PCD_MspInit+0x48>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	2014      	movs	r0, #20
 800866c:	f7f9 fccf 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008670:	2014      	movs	r0, #20
 8008672:	f7f9 fce8 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40005c00 	.word	0x40005c00
 8008684:	40021000 	.word	0x40021000

08008688 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f7fe fea8 	bl	80073f4 <USBD_LL_SetupStage>
}
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	6879      	ldr	r1, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	440b      	add	r3, r1
 80086cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7fe feda 	bl	800748e <USBD_LL_DataOutStage>
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b082      	sub	sp, #8
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086f4:	78fa      	ldrb	r2, [r7, #3]
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	440b      	add	r3, r1
 8008702:	333c      	adds	r3, #60	; 0x3c
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	4619      	mov	r1, r3
 800870a:	f7fe ff31 	bl	8007570 <USBD_LL_DataInStage>
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff f841 	bl	80077ac <USBD_LL_SOF>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800873a:	2301      	movs	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d001      	beq.n	800874a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008746:	f7f8 ff32 	bl	80015ae <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008750:	7bfa      	ldrb	r2, [r7, #15]
 8008752:	4611      	mov	r1, r2
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fff1 	bl	800773c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe ffaa 	bl	80076ba <USBD_LL_Reset>
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe ffec 	bl	800775a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8008782:	2001      	movs	r0, #1
 8008784:	f7f9 f894 	bl	80018b0 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8008788:	bf00      	nop
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8008798:	2000      	movs	r0, #0
 800879a:	f7f9 f889 	bl	80018b0 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe ffec 	bl	8007782 <USBD_LL_Resume>
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087bc:	4a1f      	ldr	r2, [pc, #124]	; (800883c <USBD_LL_Init+0x88>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a1d      	ldr	r2, [pc, #116]	; (800883c <USBD_LL_Init+0x88>)
 80087c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087cc:	4b1b      	ldr	r3, [pc, #108]	; (800883c <USBD_LL_Init+0x88>)
 80087ce:	4a1c      	ldr	r2, [pc, #112]	; (8008840 <USBD_LL_Init+0x8c>)
 80087d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <USBD_LL_Init+0x88>)
 80087d4:	2208      	movs	r2, #8
 80087d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087d8:	4b18      	ldr	r3, [pc, #96]	; (800883c <USBD_LL_Init+0x88>)
 80087da:	2202      	movs	r2, #2
 80087dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087de:	4b17      	ldr	r3, [pc, #92]	; (800883c <USBD_LL_Init+0x88>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087e4:	4b15      	ldr	r3, [pc, #84]	; (800883c <USBD_LL_Init+0x88>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087ea:	4b14      	ldr	r3, [pc, #80]	; (800883c <USBD_LL_Init+0x88>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087f0:	4812      	ldr	r0, [pc, #72]	; (800883c <USBD_LL_Init+0x88>)
 80087f2:	f7fa f80f 	bl	8002814 <HAL_PCD_Init>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087fc:	f7f8 fed7 	bl	80015ae <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008806:	2318      	movs	r3, #24
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	f7fb fb3a 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008816:	2358      	movs	r3, #88	; 0x58
 8008818:	2200      	movs	r2, #0
 800881a:	2180      	movs	r1, #128	; 0x80
 800881c:	f7fb fb32 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882a:	2200      	movs	r2, #0
 800882c:	2181      	movs	r1, #129	; 0x81
 800882e:	f7fb fb29 	bl	8003e84 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20000c04 	.word	0x20000c04
 8008840:	40005c00 	.word	0x40005c00

08008844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800885a:	4618      	mov	r0, r3
 800885c:	f7fa f8e5 	bl	8002a2a <HAL_PCD_Start>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f93c 	bl	8008ae4 <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008870:	7bbb      	ldrb	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	4608      	mov	r0, r1
 8008884:	4611      	mov	r1, r2
 8008886:	461a      	mov	r2, r3
 8008888:	4603      	mov	r3, r0
 800888a:	70fb      	strb	r3, [r7, #3]
 800888c:	460b      	mov	r3, r1
 800888e:	70bb      	strb	r3, [r7, #2]
 8008890:	4613      	mov	r3, r2
 8008892:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088a2:	78bb      	ldrb	r3, [r7, #2]
 80088a4:	883a      	ldrh	r2, [r7, #0]
 80088a6:	78f9      	ldrb	r1, [r7, #3]
 80088a8:	f7fa fa5f 	bl	8002d6a <HAL_PCD_EP_Open>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f916 	bl	8008ae4 <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	460b      	mov	r3, r1
 80088d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088e0:	78fa      	ldrb	r2, [r7, #3]
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fa faa6 	bl	8002e36 <HAL_PCD_EP_Close>
 80088ea:	4603      	mov	r3, r0
 80088ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 f8f7 	bl	8008ae4 <USBD_Get_USB_Status>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891e:	78fa      	ldrb	r2, [r7, #3]
 8008920:	4611      	mov	r1, r2
 8008922:	4618      	mov	r0, r3
 8008924:	f7fa fb4f 	bl	8002fc6 <HAL_PCD_EP_SetStall>
 8008928:	4603      	mov	r3, r0
 800892a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	4618      	mov	r0, r3
 8008930:	f000 f8d8 	bl	8008ae4 <USBD_Get_USB_Status>
 8008934:	4603      	mov	r3, r0
 8008936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008938:	7bbb      	ldrb	r3, [r7, #14]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7fa fb90 	bl	8003086 <HAL_PCD_EP_ClrStall>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800896a:	7bfb      	ldrb	r3, [r7, #15]
 800896c:	4618      	mov	r0, r3
 800896e:	f000 f8b9 	bl	8008ae4 <USBD_Get_USB_Status>
 8008972:	4603      	mov	r3, r0
 8008974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008976:	7bbb      	ldrb	r3, [r7, #14]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008992:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	da0c      	bge.n	80089b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800899c:	78fb      	ldrb	r3, [r7, #3]
 800899e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089a2:	68f9      	ldr	r1, [r7, #12]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	4613      	mov	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	440b      	add	r3, r1
 80089b0:	3302      	adds	r3, #2
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	e00b      	b.n	80089ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	440b      	add	r3, r1
 80089c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr

080089d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089f2:	78fa      	ldrb	r2, [r7, #3]
 80089f4:	4611      	mov	r1, r2
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fa f992 	bl	8002d20 <HAL_PCD_SetAddress>
 80089fc:	4603      	mov	r3, r0
 80089fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 f86e 	bl	8008ae4 <USBD_Get_USB_Status>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b086      	sub	sp, #24
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	60f8      	str	r0, [r7, #12]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	461a      	mov	r2, r3
 8008a22:	460b      	mov	r3, r1
 8008a24:	72fb      	strb	r3, [r7, #11]
 8008a26:	4613      	mov	r3, r2
 8008a28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a38:	893b      	ldrh	r3, [r7, #8]
 8008a3a:	7af9      	ldrb	r1, [r7, #11]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	f7fa fa7f 	bl	8002f40 <HAL_PCD_EP_Transmit>
 8008a42:	4603      	mov	r3, r0
 8008a44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a46:	7dfb      	ldrb	r3, [r7, #23]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f84b 	bl	8008ae4 <USBD_Get_USB_Status>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	461a      	mov	r2, r3
 8008a68:	460b      	mov	r3, r1
 8008a6a:	72fb      	strb	r3, [r7, #11]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a7e:	893b      	ldrh	r3, [r7, #8]
 8008a80:	7af9      	ldrb	r1, [r7, #11]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f7fa fa1f 	bl	8002ec6 <HAL_PCD_EP_Receive>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f828 	bl	8008ae4 <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a98:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008aac:	4b02      	ldr	r3, [pc, #8]	; (8008ab8 <USBD_static_malloc+0x14>)
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bc80      	pop	{r7}
 8008ab6:	4770      	bx	lr
 8008ab8:	20000430 	.word	0x20000430

08008abc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]

}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr

08008ace <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr

08008ae4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b085      	sub	sp, #20
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008af2:	79fb      	ldrb	r3, [r7, #7]
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d817      	bhi.n	8008b28 <USBD_Get_USB_Status+0x44>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBD_Get_USB_Status+0x1c>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b17 	.word	0x08008b17
 8008b08:	08008b1d 	.word	0x08008b1d
 8008b0c:	08008b23 	.word	0x08008b23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]
    break;
 8008b14:	e00b      	b.n	8008b2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b16:	2302      	movs	r3, #2
 8008b18:	73fb      	strb	r3, [r7, #15]
    break;
 8008b1a:	e008      	b.n	8008b2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b20:	e005      	b.n	8008b2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b22:	2302      	movs	r3, #2
 8008b24:	73fb      	strb	r3, [r7, #15]
    break;
 8008b26:	e002      	b.n	8008b2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2c:	bf00      	nop
  }
  return usb_status;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bc80      	pop	{r7}
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop

08008b3c <__libc_init_array>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	2600      	movs	r6, #0
 8008b40:	4d0c      	ldr	r5, [pc, #48]	; (8008b74 <__libc_init_array+0x38>)
 8008b42:	4c0d      	ldr	r4, [pc, #52]	; (8008b78 <__libc_init_array+0x3c>)
 8008b44:	1b64      	subs	r4, r4, r5
 8008b46:	10a4      	asrs	r4, r4, #2
 8008b48:	42a6      	cmp	r6, r4
 8008b4a:	d109      	bne.n	8008b60 <__libc_init_array+0x24>
 8008b4c:	f000 f822 	bl	8008b94 <_init>
 8008b50:	2600      	movs	r6, #0
 8008b52:	4d0a      	ldr	r5, [pc, #40]	; (8008b7c <__libc_init_array+0x40>)
 8008b54:	4c0a      	ldr	r4, [pc, #40]	; (8008b80 <__libc_init_array+0x44>)
 8008b56:	1b64      	subs	r4, r4, r5
 8008b58:	10a4      	asrs	r4, r4, #2
 8008b5a:	42a6      	cmp	r6, r4
 8008b5c:	d105      	bne.n	8008b6a <__libc_init_array+0x2e>
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b64:	4798      	blx	r3
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7ee      	b.n	8008b48 <__libc_init_array+0xc>
 8008b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b6e:	4798      	blx	r3
 8008b70:	3601      	adds	r6, #1
 8008b72:	e7f2      	b.n	8008b5a <__libc_init_array+0x1e>
 8008b74:	08008d10 	.word	0x08008d10
 8008b78:	08008d10 	.word	0x08008d10
 8008b7c:	08008d10 	.word	0x08008d10
 8008b80:	08008d14 	.word	0x08008d14

08008b84 <memset>:
 8008b84:	4603      	mov	r3, r0
 8008b86:	4402      	add	r2, r0
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d100      	bne.n	8008b8e <memset+0xa>
 8008b8c:	4770      	bx	lr
 8008b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b92:	e7f9      	b.n	8008b88 <memset+0x4>

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
