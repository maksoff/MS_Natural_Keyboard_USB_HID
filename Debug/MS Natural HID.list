
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c14  08008c14  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008c14  08008c14  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c14  08008c14  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c14  08008c14  00018c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  200001a8  08008dc4  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  08008dc4  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018664  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d5e  00000000  00000000  00038835  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003c598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba3b  00000000  00000000  0003ea10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139bf  00000000  00000000  0005a44b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009097f  00000000  00000000  0006de0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c6c  00000000  00000000  000fe804  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a94 	.word	0x08008a94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008a94 	.word	0x08008a94

0800014c <EEE_erase>:
#include "main.h"
#include "gpio.h"
#include "eee.h"

void EEE_erase(uint8_t page)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000156:	2200      	movs	r2, #0
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	4811      	ldr	r0, [pc, #68]	; (80001a4 <EEE_erase+0x58>)
 800015e:	f002 face 	bl	80026fe <HAL_GPIO_WritePin>

	HAL_FLASH_Unlock();
 8000162:	f001 ffcb 	bl	80020fc <HAL_FLASH_Unlock>
   /* Fill EraseInit structure*/
   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <EEE_erase+0x5c>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
   EraseInitStruct.PageAddress = PAGE_START(page);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000172:	331c      	adds	r3, #28
 8000174:	02db      	lsls	r3, r3, #11
 8000176:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <EEE_erase+0x5c>)
 8000178:	6093      	str	r3, [r2, #8]
   EraseInitStruct.NbPages     = PAGES_PRO_PROGRAM;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <EEE_erase+0x5c>)
 800017c:	2202      	movs	r2, #2
 800017e:	60da      	str	r2, [r3, #12]

   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000180:	f107 030c 	add.w	r3, r7, #12
 8000184:	4619      	mov	r1, r3
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <EEE_erase+0x5c>)
 8000188:	f002 f8a0 	bl	80022cc <HAL_FLASHEx_Erase>
   {
	 /*Error occurred while page erase.*/
	  // TODO process error //return HAL_FLASH_GetError ();
   }
	HAL_FLASH_Lock();
 800018c:	f001 ffdc 	bl	8002148 <HAL_FLASH_Lock>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	4803      	ldr	r0, [pc, #12]	; (80001a4 <EEE_erase+0x58>)
 8000198:	f002 fab1 	bl	80026fe <HAL_GPIO_WritePin>
}
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40011000 	.word	0x40011000
 80001a8:	200001c4 	.word	0x200001c4

080001ac <EEE_write>:

void EEE_write(uint8_t page, uint16_t pos, uint32_t data)
{
 80001ac:	b590      	push	{r4, r7, lr}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	603a      	str	r2, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	460b      	mov	r3, r1
 80001ba:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <EEE_write+0x58>)
 80001c4:	f002 fa9b 	bl	80026fe <HAL_GPIO_WritePin>
	HAL_FLASH_Unlock();
 80001c8:	f001 ff98 	bl	80020fc <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE_START(page) + (uint32_t)pos*sizeof(data), data) != HAL_OK)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80001d2:	331c      	adds	r3, #28
 80001d4:	025a      	lsls	r2, r3, #9
 80001d6:	88bb      	ldrh	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	0099      	lsls	r1, r3, #2
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	f04f 0400 	mov.w	r4, #0
 80001e2:	461a      	mov	r2, r3
 80001e4:	4623      	mov	r3, r4
 80001e6:	2002      	movs	r0, #2
 80001e8:	f001 ff18 	bl	800201c <HAL_FLASH_Program>
	{
	/* Error occurred while writing data in Flash memory*/
	 // TODO check error. and lock flash return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
 80001ec:	f001 ffac 	bl	8002148 <HAL_FLASH_Lock>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4803      	ldr	r0, [pc, #12]	; (8000204 <EEE_write+0x58>)
 80001f8:	f002 fa81 	bl	80026fe <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bd90      	pop	{r4, r7, pc}
 8000204:	40011000 	.word	0x40011000

08000208 <EEE_read>:

uint32_t EEE_read(uint8_t page, uint16_t pos)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	4613      	mov	r3, r2
 8000216:	80bb      	strh	r3, [r7, #4]
	uint32_t data;
	data = *(__IO uint32_t *)(PAGE_START(page) + (uint32_t)pos*sizeof(data));
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800021e:	331c      	adds	r3, #28
 8000220:	025a      	lsls	r2, r3, #9
 8000222:	88bb      	ldrh	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]
	return data;
 800022c:	68fb      	ldr	r3, [r7, #12]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024c:	4b50      	ldr	r3, [pc, #320]	; (8000390 <MX_GPIO_Init+0x158>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a4f      	ldr	r2, [pc, #316]	; (8000390 <MX_GPIO_Init+0x158>)
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x158>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b4a      	ldr	r3, [pc, #296]	; (8000390 <MX_GPIO_Init+0x158>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a49      	ldr	r2, [pc, #292]	; (8000390 <MX_GPIO_Init+0x158>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b47      	ldr	r3, [pc, #284]	; (8000390 <MX_GPIO_Init+0x158>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b44      	ldr	r3, [pc, #272]	; (8000390 <MX_GPIO_Init+0x158>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a43      	ldr	r2, [pc, #268]	; (8000390 <MX_GPIO_Init+0x158>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b41      	ldr	r3, [pc, #260]	; (8000390 <MX_GPIO_Init+0x158>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x158>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3d      	ldr	r2, [pc, #244]	; (8000390 <MX_GPIO_Init+0x158>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x158>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b2:	4838      	ldr	r0, [pc, #224]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002b4:	f002 fa23 	bl	80026fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4836      	ldr	r0, [pc, #216]	; (8000398 <MX_GPIO_Init+0x160>)
 80002c0:	f002 fa1d 	bl	80026fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4619      	mov	r1, r3
 80002dc:	482d      	ldr	r0, [pc, #180]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002de:	f002 f89d 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80002e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002f4:	f002 f892 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80002fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fe:	2303      	movs	r3, #3
 8000300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4823      	ldr	r0, [pc, #140]	; (8000398 <MX_GPIO_Init+0x160>)
 800030a:	f002 f887 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800030e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000312:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000314:	2303      	movs	r3, #3
 8000316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	481f      	ldr	r0, [pc, #124]	; (800039c <MX_GPIO_Init+0x164>)
 8000320:	f002 f87c 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x160>)
 800033e:	f002 f86d 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x168>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_GPIO_Init+0x164>)
 8000358:	f002 f860 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_GPIO_Init+0x164>)
 8000372:	f002 f853 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	2017      	movs	r0, #23
 800037c:	f001 fe17 	bl	8001fae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000380:	2017      	movs	r0, #23
 8000382:	f001 fe30 	bl	8001fe6 <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	10210000 	.word	0x10210000

080003a4 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <data_low+0x44>)
 80003b2:	f002 f9a4 	bl	80026fe <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80003c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80003d4:	463b      	mov	r3, r7
 80003d6:	4619      	mov	r1, r3
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <data_low+0x44>)
 80003da:	f002 f81f 	bl	800241c <HAL_GPIO_Init>
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010c00 	.word	0x40010c00

080003ec <clock_low>:

void clock_low(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <clock_low+0x44>)
 80003fa:	f002 f980 	bl	80026fe <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800040a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800040e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000414:	2301      	movs	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <clock_low+0x44>)
 8000422:	f001 fffb 	bl	800241c <HAL_GPIO_Init>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010c00 	.word	0x40010c00

08000434 <data_release>:

void data_release(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	463b      	mov	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800044a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000454:	463b      	mov	r3, r7
 8000456:	4619      	mov	r1, r3
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <data_release+0x34>)
 800045a:	f001 ffdf 	bl	800241c <HAL_GPIO_Init>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <clock_release>:

void clock_release(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800047e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000482:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <clock_release+0x34>)
 8000486:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <clock_release+0x38>)
 8000492:	f001 ffc3 	bl	800241c <HAL_GPIO_Init>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	10210000 	.word	0x10210000
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80004b2:	4bb5      	ldr	r3, [pc, #724]	; (8000788 <matrix_scan+0x2e0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80004b8:	2106      	movs	r1, #6
 80004ba:	201f      	movs	r0, #31
 80004bc:	f000 f98c 	bl	80007d8 <matrix_is_on>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <matrix_scan+0x24>
        matrix_break(PAUSE);
 80004c6:	20fe      	movs	r0, #254	; 0xfe
 80004c8:	f000 f9f4 	bl	80008b4 <matrix_break>
    }

	if (code == 0)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 817c 	beq.w	80007cc <matrix_scan+0x324>
		return;

	switch (state) {
 80004d4:	4bad      	ldr	r3, [pc, #692]	; (800078c <matrix_scan+0x2e4>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	f200 8172 	bhi.w	80007c2 <matrix_scan+0x31a>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <matrix_scan+0x3c>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	0800051d 	.word	0x0800051d
 80004e8:	08000619 	.word	0x08000619
 80004ec:	0800059d 	.word	0x0800059d
 80004f0:	08000669 	.word	0x08000669
 80004f4:	080006cd 	.word	0x080006cd
 80004f8:	080006e5 	.word	0x080006e5
 80004fc:	080006fd 	.word	0x080006fd
 8000500:	08000715 	.word	0x08000715
 8000504:	0800072d 	.word	0x0800072d
 8000508:	08000745 	.word	0x08000745
 800050c:	0800075d 	.word	0x0800075d
 8000510:	0800077b 	.word	0x0800077b
 8000514:	08000799 	.word	0x08000799
 8000518:	080007af 	.word	0x080007af
		case INIT:
			switch (code) {
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b84      	cmp	r3, #132	; 0x84
 8000520:	d01f      	beq.n	8000562 <matrix_scan+0xba>
 8000522:	2b84      	cmp	r3, #132	; 0x84
 8000524:	dc04      	bgt.n	8000530 <matrix_scan+0x88>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d022      	beq.n	8000570 <matrix_scan+0xc8>
 800052a:	2b83      	cmp	r3, #131	; 0x83
 800052c:	d012      	beq.n	8000554 <matrix_scan+0xac>
 800052e:	e025      	b.n	800057c <matrix_scan+0xd4>
 8000530:	2be1      	cmp	r3, #225	; 0xe1
 8000532:	d00b      	beq.n	800054c <matrix_scan+0xa4>
 8000534:	2bf0      	cmp	r3, #240	; 0xf0
 8000536:	d005      	beq.n	8000544 <matrix_scan+0x9c>
 8000538:	2be0      	cmp	r3, #224	; 0xe0
 800053a:	d11f      	bne.n	800057c <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 800053c:	4b93      	ldr	r3, [pc, #588]	; (800078c <matrix_scan+0x2e4>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]
					break;
 8000542:	e02a      	b.n	800059a <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000544:	4b91      	ldr	r3, [pc, #580]	; (800078c <matrix_scan+0x2e4>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
					break;
 800054a:	e026      	b.n	800059a <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 800054c:	4b8f      	ldr	r3, [pc, #572]	; (800078c <matrix_scan+0x2e4>)
 800054e:	2204      	movs	r2, #4
 8000550:	701a      	strb	r2, [r3, #0]
					break;
 8000552:	e022      	b.n	800059a <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000554:	2083      	movs	r0, #131	; 0x83
 8000556:	f000 f95b 	bl	8000810 <matrix_make>
					state = INIT;
 800055a:	4b8c      	ldr	r3, [pc, #560]	; (800078c <matrix_scan+0x2e4>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
					break;
 8000560:	e01b      	b.n	800059a <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000562:	20fc      	movs	r0, #252	; 0xfc
 8000564:	f000 f954 	bl	8000810 <matrix_make>
					state = INIT;
 8000568:	4b88      	ldr	r3, [pc, #544]	; (800078c <matrix_scan+0x2e4>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
					break;
 800056e:	e014      	b.n	800059a <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000570:	f000 f9f4 	bl	800095c <matrix_clear>
					state = INIT;
 8000574:	4b85      	ldr	r3, [pc, #532]	; (800078c <matrix_scan+0x2e4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
					break;
 800057a:	e00e      	b.n	800059a <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db04      	blt.n	800058e <matrix_scan+0xe6>
						matrix_make(code);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f942 	bl	8000810 <matrix_make>
 800058c:	e001      	b.n	8000592 <matrix_scan+0xea>
					} else {
						matrix_clear();
 800058e:	f000 f9e5 	bl	800095c <matrix_clear>
					}
					state = INIT;
 8000592:	4b7e      	ldr	r3, [pc, #504]	; (800078c <matrix_scan+0x2e4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000598:	e116      	b.n	80007c8 <matrix_scan+0x320>
 800059a:	e115      	b.n	80007c8 <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b59      	cmp	r3, #89	; 0x59
 80005a0:	d00d      	beq.n	80005be <matrix_scan+0x116>
 80005a2:	2b59      	cmp	r3, #89	; 0x59
 80005a4:	dc04      	bgt.n	80005b0 <matrix_scan+0x108>
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d01c      	beq.n	80005e4 <matrix_scan+0x13c>
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d007      	beq.n	80005be <matrix_scan+0x116>
 80005ae:	e020      	b.n	80005f2 <matrix_scan+0x14a>
 80005b0:	2b83      	cmp	r3, #131	; 0x83
 80005b2:	d010      	beq.n	80005d6 <matrix_scan+0x12e>
 80005b4:	2bf0      	cmp	r3, #240	; 0xf0
 80005b6:	d00a      	beq.n	80005ce <matrix_scan+0x126>
 80005b8:	2b7e      	cmp	r3, #126	; 0x7e
 80005ba:	d004      	beq.n	80005c6 <matrix_scan+0x11e>
 80005bc:	e019      	b.n	80005f2 <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80005be:	4b73      	ldr	r3, [pc, #460]	; (800078c <matrix_scan+0x2e4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
					break;
 80005c4:	e027      	b.n	8000616 <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80005c6:	4b71      	ldr	r3, [pc, #452]	; (800078c <matrix_scan+0x2e4>)
 80005c8:	220b      	movs	r2, #11
 80005ca:	701a      	strb	r2, [r3, #0]
					break;
 80005cc:	e023      	b.n	8000616 <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 80005ce:	4b6f      	ldr	r3, [pc, #444]	; (800078c <matrix_scan+0x2e4>)
 80005d0:	2203      	movs	r2, #3
 80005d2:	701a      	strb	r2, [r3, #0]
					break;
 80005d4:	e01f      	b.n	8000616 <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 80005d6:	2083      	movs	r0, #131	; 0x83
 80005d8:	f000 f91a 	bl	8000810 <matrix_make>
					state = INIT;
 80005dc:	4b6b      	ldr	r3, [pc, #428]	; (800078c <matrix_scan+0x2e4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
					break;
 80005e2:	e018      	b.n	8000616 <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f913 	bl	8000810 <matrix_make>
					state = INIT;
 80005ea:	4b68      	ldr	r3, [pc, #416]	; (800078c <matrix_scan+0x2e4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
					break;
 80005f0:	e011      	b.n	8000616 <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db07      	blt.n	800060a <matrix_scan+0x162>
						matrix_make(code|0x80);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f904 	bl	8000810 <matrix_make>
 8000608:	e001      	b.n	800060e <matrix_scan+0x166>
					} else {
						matrix_clear();
 800060a:	f000 f9a7 	bl	800095c <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 800060e:	4b5f      	ldr	r3, [pc, #380]	; (800078c <matrix_scan+0x2e4>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000614:	e0d8      	b.n	80007c8 <matrix_scan+0x320>
 8000616:	e0d7      	b.n	80007c8 <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b84      	cmp	r3, #132	; 0x84
 800061c:	d00a      	beq.n	8000634 <matrix_scan+0x18c>
 800061e:	2bf0      	cmp	r3, #240	; 0xf0
 8000620:	d00f      	beq.n	8000642 <matrix_scan+0x19a>
 8000622:	2b83      	cmp	r3, #131	; 0x83
 8000624:	d110      	bne.n	8000648 <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 8000626:	2083      	movs	r0, #131	; 0x83
 8000628:	f000 f944 	bl	80008b4 <matrix_break>
					state = INIT;
 800062c:	4b57      	ldr	r3, [pc, #348]	; (800078c <matrix_scan+0x2e4>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
					break;
 8000632:	e018      	b.n	8000666 <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000634:	20fc      	movs	r0, #252	; 0xfc
 8000636:	f000 f93d 	bl	80008b4 <matrix_break>
					state = INIT;
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <matrix_scan+0x2e4>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
					break;
 8000640:	e011      	b.n	8000666 <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000642:	f000 f98b 	bl	800095c <matrix_clear>
					//clear_keyboard();
					break;
 8000646:	e00e      	b.n	8000666 <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db04      	blt.n	800065a <matrix_scan+0x1b2>
					matrix_break(code);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f92e 	bl	80008b4 <matrix_break>
 8000658:	e001      	b.n	800065e <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 800065a:	f000 f97f 	bl	800095c <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <matrix_scan+0x2e4>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000664:	e0b0      	b.n	80007c8 <matrix_scan+0x320>
 8000666:	e0af      	b.n	80007c8 <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b12      	cmp	r3, #18
 800066c:	d009      	beq.n	8000682 <matrix_scan+0x1da>
 800066e:	2b12      	cmp	r3, #18
 8000670:	dc02      	bgt.n	8000678 <matrix_scan+0x1d0>
 8000672:	2b03      	cmp	r3, #3
 8000674:	d010      	beq.n	8000698 <matrix_scan+0x1f0>
 8000676:	e016      	b.n	80006a6 <matrix_scan+0x1fe>
 8000678:	2b59      	cmp	r3, #89	; 0x59
 800067a:	d002      	beq.n	8000682 <matrix_scan+0x1da>
 800067c:	2b83      	cmp	r3, #131	; 0x83
 800067e:	d004      	beq.n	800068a <matrix_scan+0x1e2>
 8000680:	e011      	b.n	80006a6 <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <matrix_scan+0x2e4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
					break;
 8000688:	e01f      	b.n	80006ca <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 800068a:	2083      	movs	r0, #131	; 0x83
 800068c:	f000 f912 	bl	80008b4 <matrix_break>
					state = INIT;
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <matrix_scan+0x2e4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
					break;
 8000696:	e018      	b.n	80006ca <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f90b 	bl	80008b4 <matrix_break>
					state = INIT;
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <matrix_scan+0x2e4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
					break;
 80006a4:	e011      	b.n	80006ca <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db07      	blt.n	80006be <matrix_scan+0x216>
						matrix_break(code|0x80);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f8fc 	bl	80008b4 <matrix_break>
 80006bc:	e001      	b.n	80006c2 <matrix_scan+0x21a>
					} else {
						matrix_clear();
 80006be:	f000 f94d 	bl	800095c <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <matrix_scan+0x2e4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006c8:	e07e      	b.n	80007c8 <matrix_scan+0x320>
 80006ca:	e07d      	b.n	80007c8 <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b14      	cmp	r3, #20
 80006d0:	d104      	bne.n	80006dc <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <matrix_scan+0x2e4>)
 80006d4:	2205      	movs	r2, #5
 80006d6:	701a      	strb	r2, [r3, #0]
					break;
 80006d8:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80006da:	e075      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <matrix_scan+0x2e4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	e071      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b77      	cmp	r3, #119	; 0x77
 80006e8:	d104      	bne.n	80006f4 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <matrix_scan+0x2e4>)
 80006ec:	2206      	movs	r2, #6
 80006ee:	701a      	strb	r2, [r3, #0]
					break;
 80006f0:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80006f2:	e069      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <matrix_scan+0x2e4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			break;
 80006fa:	e065      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2be1      	cmp	r3, #225	; 0xe1
 8000700:	d104      	bne.n	800070c <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <matrix_scan+0x2e4>)
 8000704:	2207      	movs	r2, #7
 8000706:	701a      	strb	r2, [r3, #0]
					break;
 8000708:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800070a:	e05d      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <matrix_scan+0x2e4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			break;
 8000712:	e059      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2bf0      	cmp	r3, #240	; 0xf0
 8000718:	d104      	bne.n	8000724 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <matrix_scan+0x2e4>)
 800071c:	2208      	movs	r2, #8
 800071e:	701a      	strb	r2, [r3, #0]
					break;
 8000720:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000722:	e051      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <matrix_scan+0x2e4>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
			break;
 800072a:	e04d      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b14      	cmp	r3, #20
 8000730:	d104      	bne.n	800073c <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <matrix_scan+0x2e4>)
 8000734:	2209      	movs	r2, #9
 8000736:	701a      	strb	r2, [r3, #0]
					break;
 8000738:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800073a:	e045      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <matrix_scan+0x2e4>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
			break;
 8000742:	e041      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2bf0      	cmp	r3, #240	; 0xf0
 8000748:	d104      	bne.n	8000754 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <matrix_scan+0x2e4>)
 800074c:	220a      	movs	r2, #10
 800074e:	701a      	strb	r2, [r3, #0]
					break;
 8000750:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000752:	e039      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <matrix_scan+0x2e4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
			break;
 800075a:	e035      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b77      	cmp	r3, #119	; 0x77
 8000760:	d107      	bne.n	8000772 <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 8000762:	20fe      	movs	r0, #254	; 0xfe
 8000764:	f000 f854 	bl	8000810 <matrix_make>
					state = INIT;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <matrix_scan+0x2e4>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
					break;
 800076e:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000770:	e02a      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <matrix_scan+0x2e4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
			break;
 8000778:	e026      	b.n	80007c8 <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2be0      	cmp	r3, #224	; 0xe0
 800077e:	d107      	bne.n	8000790 <matrix_scan+0x2e8>
				state = E0_7E_E0;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <matrix_scan+0x2e4>)
 8000782:	220c      	movs	r2, #12
 8000784:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8000786:	e01f      	b.n	80007c8 <matrix_scan+0x320>
 8000788:	200001f4 	.word	0x200001f4
 800078c:	200001f5 	.word	0x200001f5
				state = INIT;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <matrix_scan+0x32c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
			break;
 8000796:	e017      	b.n	80007c8 <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2bf0      	cmp	r3, #240	; 0xf0
 800079c:	d103      	bne.n	80007a6 <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <matrix_scan+0x32c>)
 80007a0:	220d      	movs	r2, #13
 80007a2:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80007a4:	e010      	b.n	80007c8 <matrix_scan+0x320>
				state = INIT;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <matrix_scan+0x32c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
			break;
 80007ac:	e00c      	b.n	80007c8 <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b7e      	cmp	r3, #126	; 0x7e
 80007b2:	d102      	bne.n	80007ba <matrix_scan+0x312>
				matrix_make(PAUSE);
 80007b4:	20fe      	movs	r0, #254	; 0xfe
 80007b6:	f000 f82b 	bl	8000810 <matrix_make>
			state = INIT;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <matrix_scan+0x32c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
			break;
 80007c0:	e002      	b.n	80007c8 <matrix_scan+0x320>
		default:
			state = INIT;
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <matrix_scan+0x32c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <matrix_scan+0x326>
		return;
 80007cc:	bf00      	nop
}
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001f5 	.word	0x200001f5

080007d8 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <matrix_is_on+0x34>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4013      	ands	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200001d4 	.word	0x200001d4

08000810 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	4610      	mov	r0, r2
 800082c:	f7ff ffd4 	bl	80007d8 <matrix_is_on>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d135      	bne.n	80008a2 <matrix_make+0x92>
	    matrix[ROW(code)] |= 1<<COL(code);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <matrix_make+0x9c>)
 8000840:	5c9b      	ldrb	r3, [r3, r2]
 8000842:	b25a      	sxtb	r2, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b259      	sxtb	r1, r3
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <matrix_make+0x9c>)
 8000862:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <matrix_make+0xa0>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	b2da      	uxtb	r2, r3
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f000 fba4 	bl	8000fc8 <keymap_key_to_keycode>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d902      	bls.n	8000890 <matrix_make+0x80>
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2bf4      	cmp	r3, #244	; 0xf4
 800088e:	d904      	bls.n	800089a <matrix_make+0x8a>
	    	prog_push_code(code, 1);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f8a7 	bl	80009e8 <prog_push_code>
		register_code(keycode);
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 fba9 	bl	8000ff4 <register_code>
    }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001d4 	.word	0x200001d4
 80008b0:	200001f4 	.word	0x200001f4

080008b4 <matrix_break>:

void matrix_break(uint8_t code)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	4610      	mov	r0, r2
 80008d0:	f7ff ff82 	bl	80007d8 <matrix_is_on>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d037      	beq.n	800094a <matrix_break+0x96>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <matrix_break+0xa0>)
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	2101      	movs	r1, #1
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	4013      	ands	r3, r2
 80008fc:	b259      	sxtb	r1, r3
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	b2c9      	uxtb	r1, r1
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <matrix_break+0xa0>)
 800090a:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <matrix_break+0xa4>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b2da      	uxtb	r2, r3
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4619      	mov	r1, r3
 8000922:	4610      	mov	r0, r2
 8000924:	f000 fb50 	bl	8000fc8 <keymap_key_to_keycode>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2bf0      	cmp	r3, #240	; 0xf0
 8000930:	d902      	bls.n	8000938 <matrix_break+0x84>
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2bf4      	cmp	r3, #244	; 0xf4
 8000936:	d904      	bls.n	8000942 <matrix_break+0x8e>
	    	prog_push_code(code, 0);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f853 	bl	80009e8 <prog_push_code>
		unregister_code(keycode);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fc27 	bl	8001198 <unregister_code>
    }
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001d4 	.word	0x200001d4
 8000958:	200001f4 	.word	0x200001f4

0800095c <matrix_clear>:

void matrix_clear(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e006      	b.n	8000976 <matrix_clear+0x1a>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <matrix_clear+0x2c>)
 800096c:	2100      	movs	r1, #0
 800096e:	54d1      	strb	r1, [r2, r3]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3301      	adds	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b1f      	cmp	r3, #31
 800097a:	d9f5      	bls.n	8000968 <matrix_clear+0xc>
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200001d4 	.word	0x200001d4

0800098c <is_prog_error>:
// if user have pressed any keys while macro plays
// also here can be used simple matrix 32xbytes (for 256 keys), but I wanted to break them in
// reverse order.
static uint8_t code_to_break[PROG_MAX_POS] = {0};

uint8_t is_prog_error(void) { return prog_error; }
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <is_prog_error+0x10>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	200001f8 	.word	0x200001f8

080009a0 <is_disco_time>:
uint8_t is_prog_in_progress(void) { return programming_in_progress; }
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }

uint8_t is_disco_time(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <is_disco_time+0x3c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d009      	beq.n	80009c0 <is_disco_time+0x20>
 80009ac:	f001 f9fc 	bl	8001da8 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <is_disco_time+0x3c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009bc:	4293      	cmp	r3, r2
 80009be:	d807      	bhi.n	80009d0 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <is_disco_time+0x40>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <is_disco_time+0x44>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <is_disco_time+0x34>
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <is_disco_time+0x36>
 80009d4:	2300      	movs	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001fc 	.word	0x200001fc
 80009e0:	200001f6 	.word	0x200001f6
 80009e4:	200001f7 	.word	0x200001f7

080009e8 <prog_push_code>:
 * 8 last bits -> code
 *
 * All written inverted (so empty flash 0xffff -> transforms to 0x0000, which means no code last code)
 */
void prog_push_code(uint8_t code, uint8_t make)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint32_t packet = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	if (!programming_in_progress)
 80009fc:	4b33      	ldr	r3, [pc, #204]	; (8000acc <prog_push_code+0xe4>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d05c      	beq.n	8000abe <prog_push_code+0xd6>
		return;
	if (current_pos > PROG_MAX_POS - PROG_STEPS_TO_ERROR)
 8000a04:	4b32      	ldr	r3, [pc, #200]	; (8000ad0 <prog_push_code+0xe8>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	f5b3 7ff6 	cmp.w	r3, #492	; 0x1ec
 8000a0c:	d902      	bls.n	8000a14 <prog_push_code+0x2c>
		prog_error = 1;
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <prog_push_code+0xec>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
	if (current_pos == PROG_MAX_POS)
 8000a14:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <prog_push_code+0xe8>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a1c:	d051      	beq.n	8000ac2 <prog_push_code+0xda>
		return;
	if (last_prog_time)
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <prog_push_code+0xf0>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d025      	beq.n	8000a72 <prog_push_code+0x8a>
	{
		packet = HAL_GetTick() - last_prog_time;
 8000a26:	f001 f9bf 	bl	8001da8 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <prog_push_code+0xf0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	60fb      	str	r3, [r7, #12]
		if (packet >= (1 << 23))
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000a3a:	d302      	bcc.n	8000a42 <prog_push_code+0x5a>
			packet = ~0;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	60fb      	str	r3, [r7, #12]
		packet >>= PROG_TIME_MULT;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	60fb      	str	r3, [r7, #12]
		if (current_mods & (MOD_BIT(KC_LCTRL)))
 8000a48:	4b24      	ldr	r3, [pc, #144]	; (8000adc <prog_push_code+0xf4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <prog_push_code+0x74>
		{
			packet >>= SPEEDY_CLICKY;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	085b      	lsrs	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e007      	b.n	8000a6c <prog_push_code+0x84>
		} else if (current_mods & (MOD_BIT(KC_RCTRL)))
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <prog_push_code+0xf4>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <prog_push_code+0x84>
		{
			packet = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
		}
		packet = (packet) << 9; // divide 64 and shift time to the right
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	025b      	lsls	r3, r3, #9
 8000a70:	60fb      	str	r3, [r7, #12]
	}
	if (packet == 0)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <prog_push_code+0x96>
		packet = (1<<9);
 8000a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7c:	60fb      	str	r3, [r7, #12]
	last_prog_time = HAL_GetTick();
 8000a7e:	f001 f993 	bl	8001da8 <HAL_GetTick>
 8000a82:	4602      	mov	r2, r0
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <prog_push_code+0xf0>)
 8000a86:	601a      	str	r2, [r3, #0]
	if (make)
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <prog_push_code+0xae>
		packet |= (1<<8);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a94:	60fb      	str	r3, [r7, #12]
	packet |= code;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
	EEE_write(current_code - KP_START, current_pos++, ~packet);
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <prog_push_code+0xf8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	330f      	adds	r3, #15
 8000aa4:	b2d8      	uxtb	r0, r3
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <prog_push_code+0xe8>)
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	b291      	uxth	r1, r2
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <prog_push_code+0xe8>)
 8000ab0:	8011      	strh	r1, [r2, #0]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	f7ff fb78 	bl	80001ac <EEE_write>
 8000abc:	e002      	b.n	8000ac4 <prog_push_code+0xdc>
		return;
 8000abe:	bf00      	nop
 8000ac0:	e000      	b.n	8000ac4 <prog_push_code+0xdc>
		return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200001f6 	.word	0x200001f6
 8000ad0:	20000206 	.word	0x20000206
 8000ad4:	200001f8 	.word	0x200001f8
 8000ad8:	20000208 	.word	0x20000208
 8000adc:	2000020c 	.word	0x2000020c
 8000ae0:	20000204 	.word	0x20000204

08000ae4 <break_unbreaked>:

void break_unbreaked(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	// go from last to first
	for (uint16_t i = PROG_MAX_POS; i > 0; i--)
 8000aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aee:	80fb      	strh	r3, [r7, #6]
 8000af0:	e00f      	b.n	8000b12 <break_unbreaked+0x2e>
		if (code_to_break[i-1] != 0)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <break_unbreaked+0x3c>)
 8000af8:	5cd3      	ldrb	r3, [r2, r3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <break_unbreaked+0x28>
			matrix_break(code_to_break[i-1]);
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <break_unbreaked+0x3c>)
 8000b04:	5cd3      	ldrb	r3, [r2, r3]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fed4 	bl	80008b4 <matrix_break>
	for (uint16_t i = PROG_MAX_POS; i > 0; i--)
 8000b0c:	88fb      	ldrh	r3, [r7, #6]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1ec      	bne.n	8000af2 <break_unbreaked+0xe>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000210 	.word	0x20000210

08000b24 <prog_pop_code>:

void prog_pop_code(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
	uint32_t packet;
	if (!prog_is_running)
 8000b2a:	4b52      	ldr	r3, [pc, #328]	; (8000c74 <prog_pop_code+0x150>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f000 809c 	beq.w	8000c6c <prog_pop_code+0x148>
		return;
	if (next_time < HAL_GetTick())
 8000b34:	f001 f938 	bl	8001da8 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b4f      	ldr	r3, [pc, #316]	; (8000c78 <prog_pop_code+0x154>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	f240 8095 	bls.w	8000c6e <prog_pop_code+0x14a>
	{
		if ((packet = ~EEE_read(current_code - KP_START, current_pos++)))
 8000b44:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <prog_pop_code+0x158>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	330f      	adds	r3, #15
 8000b4a:	b2d8      	uxtb	r0, r3
 8000b4c:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <prog_pop_code+0x15c>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	b291      	uxth	r1, r2
 8000b54:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <prog_pop_code+0x15c>)
 8000b56:	8011      	strh	r1, [r2, #0]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f7ff fb55 	bl	8000208 <EEE_read>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	43db      	mvns	r3, r3
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d073      	beq.n	8000c52 <prog_pop_code+0x12e>
		{
			uint8_t code = (uint8_t)(packet & 0xFF);
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	71fb      	strb	r3, [r7, #7]
			if (packet & (1<<8)) // make or break
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d018      	beq.n	8000baa <prog_pop_code+0x86>
			{
				// find first unused position, and add code here
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000b78:	2300      	movs	r3, #0
 8000b7a:	817b      	strh	r3, [r7, #10]
 8000b7c:	e00c      	b.n	8000b98 <prog_pop_code+0x74>
					if (code_to_break[i] == 0)
 8000b7e:	897b      	ldrh	r3, [r7, #10]
 8000b80:	4a40      	ldr	r2, [pc, #256]	; (8000c84 <prog_pop_code+0x160>)
 8000b82:	5cd3      	ldrb	r3, [r2, r3]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d104      	bne.n	8000b92 <prog_pop_code+0x6e>
					{
						code_to_break[i] = code;
 8000b88:	897b      	ldrh	r3, [r7, #10]
 8000b8a:	493e      	ldr	r1, [pc, #248]	; (8000c84 <prog_pop_code+0x160>)
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	54ca      	strb	r2, [r1, r3]
						break;
 8000b90:	e006      	b.n	8000ba0 <prog_pop_code+0x7c>
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000b92:	897b      	ldrh	r3, [r7, #10]
 8000b94:	3301      	adds	r3, #1
 8000b96:	817b      	strh	r3, [r7, #10]
 8000b98:	897b      	ldrh	r3, [r7, #10]
 8000b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b9e:	d3ee      	bcc.n	8000b7e <prog_pop_code+0x5a>
					}
				matrix_make(code);
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fe34 	bl	8000810 <matrix_make>
 8000ba8:	e018      	b.n	8000bdc <prog_pop_code+0xb8>
			}
			else
			{
				// find first position with code and remove it
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000baa:	2300      	movs	r3, #0
 8000bac:	813b      	strh	r3, [r7, #8]
 8000bae:	e00d      	b.n	8000bcc <prog_pop_code+0xa8>
					if (code_to_break[i] == code)
 8000bb0:	893b      	ldrh	r3, [r7, #8]
 8000bb2:	4a34      	ldr	r2, [pc, #208]	; (8000c84 <prog_pop_code+0x160>)
 8000bb4:	5cd3      	ldrb	r3, [r2, r3]
 8000bb6:	79fa      	ldrb	r2, [r7, #7]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d104      	bne.n	8000bc6 <prog_pop_code+0xa2>
					{
						code_to_break[i] = 0;
 8000bbc:	893b      	ldrh	r3, [r7, #8]
 8000bbe:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <prog_pop_code+0x160>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	54d1      	strb	r1, [r2, r3]
						break;
 8000bc4:	e006      	b.n	8000bd4 <prog_pop_code+0xb0>
				for (uint16_t i = 0; i < PROG_MAX_POS; i++)
 8000bc6:	893b      	ldrh	r3, [r7, #8]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	813b      	strh	r3, [r7, #8]
 8000bcc:	893b      	ldrh	r3, [r7, #8]
 8000bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bd2:	d3ed      	bcc.n	8000bb0 <prog_pop_code+0x8c>
					}
				matrix_break(code);
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe6c 	bl	80008b4 <matrix_break>
			}

			if (current_pos < PROG_MAX_POS)
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <prog_pop_code+0x15c>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000be4:	d235      	bcs.n	8000c52 <prog_pop_code+0x12e>
			{
				packet = ~EEE_read(current_code - KP_START, current_pos);
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <prog_pop_code+0x158>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	330f      	adds	r3, #15
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <prog_pop_code+0x15c>)
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	f7ff fb07 	bl	8000208 <EEE_read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	60fb      	str	r3, [r7, #12]
				if (packet)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d025      	beq.n	8000c52 <prog_pop_code+0x12e>
				{
					packet >>= 9;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	0a5b      	lsrs	r3, r3, #9
 8000c0a:	60fb      	str	r3, [r7, #12]
					if (current_mods & (MOD_BIT(KC_LCTRL)))
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <prog_pop_code+0x164>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d003      	beq.n	8000c20 <prog_pop_code+0xfc>
					{
						packet <<= (PROG_TIME_MULT - SPEEDY_CLICKY);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	015b      	lsls	r3, r3, #5
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	e00b      	b.n	8000c38 <prog_pop_code+0x114>
					} else if (current_mods & (MOD_BIT(KC_RCTRL)))
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <prog_pop_code+0x164>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f003 0310 	and.w	r3, r3, #16
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <prog_pop_code+0x10e>
					{
						packet = 1 << PROG_TIME_MULT;
 8000c2c:	2340      	movs	r3, #64	; 0x40
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	e002      	b.n	8000c38 <prog_pop_code+0x114>
					} else {
						packet <<= PROG_TIME_MULT;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	019b      	lsls	r3, r3, #6
 8000c36:	60fb      	str	r3, [r7, #12]
					}
					if (packet < (1 << PROG_TIME_MULT))
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3c:	d801      	bhi.n	8000c42 <prog_pop_code+0x11e>
						packet = 1 << PROG_TIME_MULT;
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	60fb      	str	r3, [r7, #12]
					next_time = HAL_GetTick() + packet;
 8000c42:	f001 f8b1 	bl	8001da8 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <prog_pop_code+0x154>)
 8000c4e:	6013      	str	r3, [r2, #0]
					return; // completed successfully, wait next step
 8000c50:	e00d      	b.n	8000c6e <prog_pop_code+0x14a>
				}
			}
		}

		break_unbreaked();
 8000c52:	f7ff ff47 	bl	8000ae4 <break_unbreaked>
		prog_is_running = 0;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <prog_pop_code+0x150>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
		current_pos = 0;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <prog_pop_code+0x15c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	801a      	strh	r2, [r3, #0]
		next_time = 0;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <prog_pop_code+0x154>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
		return;
 8000c68:	bf00      	nop
 8000c6a:	e000      	b.n	8000c6e <prog_pop_code+0x14a>
		return;
 8000c6c:	bf00      	nop
	}

}
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200001f7 	.word	0x200001f7
 8000c78:	20000200 	.word	0x20000200
 8000c7c:	20000204 	.word	0x20000204
 8000c80:	20000206 	.word	0x20000206
 8000c84:	20000210 	.word	0x20000210
 8000c88:	2000020c 	.word	0x2000020c

08000c8c <reset_prog>:


void reset_prog(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	current_pos = 0;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <reset_prog+0x24>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	801a      	strh	r2, [r3, #0]
	last_prog_time = 0;
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <reset_prog+0x28>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
	prog_error = 0;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <reset_prog+0x2c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
	next_time = 0;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <reset_prog+0x30>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000206 	.word	0x20000206
 8000cb4:	20000208 	.word	0x20000208
 8000cb8:	200001f8 	.word	0x200001f8
 8000cbc:	20000200 	.word	0x20000200

08000cc0 <prog_pressed>:

void prog_pressed(uint8_t code)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
	if (key_timer)
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <prog_pressed+0x50>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d117      	bne.n	8000d02 <prog_pressed+0x42>
		return; // another prog key pressed!
	// TODO detect if we are in programming or program is running, and compare code
	if (programming_in_progress && (code != current_code))
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <prog_pressed+0x54>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d004      	beq.n	8000ce4 <prog_pressed+0x24>
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <prog_pressed+0x58>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d110      	bne.n	8000d06 <prog_pressed+0x46>
		return; // ignore key_press from over keys
	current_mods = get_mods();
 8000ce4:	f000 f87e 	bl	8000de4 <get_mods>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <prog_pressed+0x5c>)
 8000cee:	701a      	strb	r2, [r3, #0]
	current_code = code; // remember this code!
 8000cf0:	4a09      	ldr	r2, [pc, #36]	; (8000d18 <prog_pressed+0x58>)
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	7013      	strb	r3, [r2, #0]
	key_timer = HAL_GetTick();
 8000cf6:	f001 f857 	bl	8001da8 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <prog_pressed+0x50>)
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	e002      	b.n	8000d08 <prog_pressed+0x48>
		return; // another prog key pressed!
 8000d02:	bf00      	nop
 8000d04:	e000      	b.n	8000d08 <prog_pressed+0x48>
		return; // ignore key_press from over keys
 8000d06:	bf00      	nop
}
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200001fc 	.word	0x200001fc
 8000d14:	200001f6 	.word	0x200001f6
 8000d18:	20000204 	.word	0x20000204
 8000d1c:	2000020c 	.word	0x2000020c

08000d20 <prog_released>:

void prog_released(uint8_t code)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
	static uint32_t wait_ctrl = 0;
	if (code != current_code)
 8000d2a:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <prog_released+0xb0>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	79fa      	ldrb	r2, [r7, #7]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d148      	bne.n	8000dc6 <prog_released+0xa6>
		return; // we are in programming, ignore other prog buttons
	if (key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)))
 8000d34:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <prog_released+0xb4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d013      	beq.n	8000d64 <prog_released+0x44>
 8000d3c:	f001 f834 	bl	8001da8 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <prog_released+0xb4>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d909      	bls.n	8000d64 <prog_released+0x44>
	{
		// key pressed long, start programming
		programming_in_progress = 1;
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <prog_released+0xb8>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
		EEE_erase(code - KP_START);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	330f      	adds	r3, #15
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff f9f5 	bl	800014c <EEE_erase>
 8000d62:	e02c      	b.n	8000dbe <prog_released+0x9e>
	}
	else
	{
		// key pressed short, stop programming or do some nice things
		if (programming_in_progress)
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <prog_released+0xb8>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <prog_released+0x54>
		{
			programming_in_progress = 0;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <prog_released+0xb8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	e024      	b.n	8000dbe <prog_released+0x9e>
		}
		else
		{
			reset_prog();
 8000d74:	f7ff ff8a 	bl	8000c8c <reset_prog>
			if (prog_is_running)
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <prog_released+0xbc>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <prog_released+0x6c>
			{
				break_unbreaked(); // stopping program
 8000d80:	f7ff feb0 	bl	8000ae4 <break_unbreaked>
				prog_is_running = 0;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <prog_released+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e018      	b.n	8000dbe <prog_released+0x9e>
			} else {
				// before starting program, wait for a sec to ctrl be released
				wait_ctrl = HAL_GetTick();
 8000d8c:	f001 f80c 	bl	8001da8 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <prog_released+0xc0>)
 8000d94:	601a      	str	r2, [r3, #0]
				while((HAL_GetTick()-wait_ctrl < 1000) &&
 8000d96:	bf00      	nop
 8000d98:	f001 f806 	bl	8001da8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <prog_released+0xc0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da8:	d206      	bcs.n	8000db8 <prog_released+0x98>
						(get_mods()&(MOD_BIT(KC_LCTRL)|MOD_BIT(KC_RCTRL))));
 8000daa:	f000 f81b 	bl	8000de4 <get_mods>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f003 0311 	and.w	r3, r3, #17
				while((HAL_GetTick()-wait_ctrl < 1000) &&
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1ef      	bne.n	8000d98 <prog_released+0x78>
				prog_is_running = 1;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <prog_released+0xbc>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	key_timer = 0;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <prog_released+0xb4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	e000      	b.n	8000dc8 <prog_released+0xa8>
		return; // we are in programming, ignore other prog buttons
 8000dc6:	bf00      	nop
}
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000204 	.word	0x20000204
 8000dd4:	200001fc 	.word	0x200001fc
 8000dd8:	200001f6 	.word	0x200001f6
 8000ddc:	200001f7 	.word	0x200001f7
 8000de0:	20000410 	.word	0x20000410

08000de4 <get_mods>:
typedef struct  {
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

uint8_t get_mods(void) {
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	return mods;
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <get_mods+0x10>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000414 	.word	0x20000414

08000df8 <send_system>:

static void send_system(uint16_t data)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <send_system+0x4c>)
 8000e04:	881b      	ldrh	r3, [r3, #0]
 8000e06:	88fa      	ldrh	r2, [r7, #6]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d017      	beq.n	8000e3c <send_system+0x44>
	last_data = data;
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <send_system+0x4c>)
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000e12:	2302      	movs	r3, #2
 8000e14:	733b      	strb	r3, [r7, #12]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 8000e1c:	bf00      	nop
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <send_system+0x50>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0fb      	beq.n	8000e1e <send_system+0x26>
	ready_to_send = 0;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <send_system+0x50>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2203      	movs	r2, #3
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <send_system+0x54>)
 8000e36:	f006 f96b 	bl	8007110 <USBD_HID_SendReport>
 8000e3a:	e000      	b.n	8000e3e <send_system+0x46>
	if (data == last_data) return;
 8000e3c:	bf00      	nop
}
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000418 	.word	0x20000418
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000740 	.word	0x20000740

08000e50 <send_consumer>:

static void send_consumer(uint16_t data)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <send_consumer+0x4c>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	88fa      	ldrh	r2, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d017      	beq.n	8000e94 <send_consumer+0x44>
	last_data = data;
 8000e64:	4a0d      	ldr	r2, [pc, #52]	; (8000e9c <send_consumer+0x4c>)
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	733b      	strb	r3, [r7, #12]
 8000e6e:	88fb      	ldrh	r3, [r7, #6]
 8000e70:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 8000e74:	bf00      	nop
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <send_consumer+0x50>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0fb      	beq.n	8000e76 <send_consumer+0x26>
	ready_to_send = 0;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <send_consumer+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <send_consumer+0x54>)
 8000e8e:	f006 f93f 	bl	8007110 <USBD_HID_SendReport>
 8000e92:	e000      	b.n	8000e96 <send_consumer+0x46>
	if (data == last_data) return;
 8000e94:	bf00      	nop
}
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000041a 	.word	0x2000041a
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	20000740 	.word	0x20000740

08000ea8 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <add_mods+0x24>)
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <add_mods+0x24>)
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000414 	.word	0x20000414

08000ed0 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	b25a      	sxtb	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <del_mods+0x2c>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b25b      	sxtb	r3, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <del_mods+0x2c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000414 	.word	0x20000414

08000f00 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000f0e:	23ff      	movs	r3, #255	; 0xff
 8000f10:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000f12:	e01b      	b.n	8000f4c <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <add_key_byte+0x80>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	78db      	ldrb	r3, [r3, #3]
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d018      	beq.n	8000f56 <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 8000f24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d108      	bne.n	8000f40 <add_key_byte+0x40>
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <add_key_byte+0x80>)
 8000f34:	4413      	add	r3, r2
 8000f36:	78db      	ldrb	r3, [r3, #3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <add_key_byte+0x40>
            empty = i;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	2b05      	cmp	r3, #5
 8000f52:	dddf      	ble.n	8000f14 <add_key_byte+0x14>
 8000f54:	e000      	b.n	8000f58 <add_key_byte+0x58>
            break;
 8000f56:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b06      	cmp	r3, #6
 8000f5e:	d10a      	bne.n	8000f76 <add_key_byte+0x76>
        if (empty != -1) {
 8000f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f68:	d005      	beq.n	8000f76 <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 8000f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <add_key_byte+0x80>)
 8000f70:	4413      	add	r3, r2
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8000f76:	bf00      	nop
 8000f78:	3714      	adds	r7, #20
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000444 	.word	0x20000444

08000f84 <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
 8000f92:	e00e      	b.n	8000fb2 <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <del_key_byte+0x40>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d104      	bne.n	8000fac <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <del_key_byte+0x40>)
 8000fa6:	4413      	add	r3, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	73fb      	strb	r3, [r7, #15]
 8000fb2:	7bfb      	ldrb	r3, [r7, #15]
 8000fb4:	2b05      	cmp	r3, #5
 8000fb6:	d9ed      	bls.n	8000f94 <del_key_byte+0x10>
        }
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000444 	.word	0x20000444

08000fc8 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <keymap_key_to_keycode+0x28>)
 8000fde:	00d2      	lsls	r2, r2, #3
 8000fe0:	440a      	add	r2, r1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	08008b04 	.word	0x08008b04

08000ff4 <register_code>:


void register_code(uint8_t code)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	f000 80c5 	beq.w	8001190 <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2bf0      	cmp	r3, #240	; 0xf0
 800100a:	d906      	bls.n	800101a <register_code+0x26>
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2bf4      	cmp	r3, #244	; 0xf4
 8001010:	d803      	bhi.n	800101a <register_code+0x26>
	{
    	prog_pressed(code);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe53 	bl	8000cc0 <prog_pressed>
	}

    if (code == KC_LOGOFF)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2bf0      	cmp	r3, #240	; 0xf0
 800101e:	d108      	bne.n	8001032 <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 8001020:	2008      	movs	r0, #8
 8001022:	f7ff ff41 	bl	8000ea8 <add_mods>
    	add_key_byte(KC_L);
 8001026:	200f      	movs	r0, #15
 8001028:	f7ff ff6a 	bl	8000f00 <add_key_byte>
	    send_keyboard_report();
 800102c:	f000 f9fe 	bl	800142c <send_keyboard_report>
 8001030:	e0af      	b.n	8001192 <register_code+0x19e>
    }
    else if IS_KEY(code)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d909      	bls.n	800104c <register_code+0x58>
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2ba4      	cmp	r3, #164	; 0xa4
 800103c:	d806      	bhi.n	800104c <register_code+0x58>
    {
	    add_key_byte(code);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <add_key_byte>
	    send_keyboard_report();
 8001046:	f000 f9f1 	bl	800142c <send_keyboard_report>
 800104a:	e0a2      	b.n	8001192 <register_code+0x19e>
    }
    else if IS_MOD(code) {
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2bdf      	cmp	r3, #223	; 0xdf
 8001050:	d90f      	bls.n	8001072 <register_code+0x7e>
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2be7      	cmp	r3, #231	; 0xe7
 8001056:	d80c      	bhi.n	8001072 <register_code+0x7e>
        add_mods(MOD_BIT(code));
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	2201      	movs	r2, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff1e 	bl	8000ea8 <add_mods>
        send_keyboard_report();
 800106c:	f000 f9de 	bl	800142c <send_keyboard_report>
 8001070:	e08f      	b.n	8001192 <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2ba4      	cmp	r3, #164	; 0xa4
 8001076:	d916      	bls.n	80010a6 <register_code+0xb2>
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2ba7      	cmp	r3, #167	; 0xa7
 800107c:	d813      	bhi.n	80010a6 <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2ba5      	cmp	r3, #165	; 0xa5
 8001082:	d00b      	beq.n	800109c <register_code+0xa8>
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2ba6      	cmp	r3, #166	; 0xa6
 8001088:	d006      	beq.n	8001098 <register_code+0xa4>
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2ba7      	cmp	r3, #167	; 0xa7
 800108e:	d101      	bne.n	8001094 <register_code+0xa0>
 8001090:	2383      	movs	r3, #131	; 0x83
 8001092:	e004      	b.n	800109e <register_code+0xaa>
 8001094:	2300      	movs	r3, #0
 8001096:	e002      	b.n	800109e <register_code+0xaa>
 8001098:	2382      	movs	r3, #130	; 0x82
 800109a:	e000      	b.n	800109e <register_code+0xaa>
 800109c:	2381      	movs	r3, #129	; 0x81
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff feaa 	bl	8000df8 <send_system>
 80010a4:	e075      	b.n	8001192 <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2ba7      	cmp	r3, #167	; 0xa7
 80010aa:	d972      	bls.n	8001192 <register_code+0x19e>
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2bba      	cmp	r3, #186	; 0xba
 80010b0:	d86f      	bhi.n	8001192 <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	2ba8      	cmp	r3, #168	; 0xa8
 80010b6:	d066      	beq.n	8001186 <register_code+0x192>
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2ba9      	cmp	r3, #169	; 0xa9
 80010bc:	d061      	beq.n	8001182 <register_code+0x18e>
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2baa      	cmp	r3, #170	; 0xaa
 80010c2:	d05c      	beq.n	800117e <register_code+0x18a>
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2bab      	cmp	r3, #171	; 0xab
 80010c8:	d057      	beq.n	800117a <register_code+0x186>
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2bac      	cmp	r3, #172	; 0xac
 80010ce:	d052      	beq.n	8001176 <register_code+0x182>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2bad      	cmp	r3, #173	; 0xad
 80010d4:	d04d      	beq.n	8001172 <register_code+0x17e>
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2bb0      	cmp	r3, #176	; 0xb0
 80010da:	d048      	beq.n	800116e <register_code+0x17a>
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2bae      	cmp	r3, #174	; 0xae
 80010e0:	d043      	beq.n	800116a <register_code+0x176>
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2baf      	cmp	r3, #175	; 0xaf
 80010e6:	d03d      	beq.n	8001164 <register_code+0x170>
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	2bb1      	cmp	r3, #177	; 0xb1
 80010ec:	d037      	beq.n	800115e <register_code+0x16a>
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2bb2      	cmp	r3, #178	; 0xb2
 80010f2:	d031      	beq.n	8001158 <register_code+0x164>
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2bb3      	cmp	r3, #179	; 0xb3
 80010f8:	d02b      	beq.n	8001152 <register_code+0x15e>
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2bb4      	cmp	r3, #180	; 0xb4
 80010fe:	d025      	beq.n	800114c <register_code+0x158>
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2bb5      	cmp	r3, #181	; 0xb5
 8001104:	d01f      	beq.n	8001146 <register_code+0x152>
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2bb6      	cmp	r3, #182	; 0xb6
 800110a:	d019      	beq.n	8001140 <register_code+0x14c>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2bb7      	cmp	r3, #183	; 0xb7
 8001110:	d013      	beq.n	800113a <register_code+0x146>
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2bb8      	cmp	r3, #184	; 0xb8
 8001116:	d00d      	beq.n	8001134 <register_code+0x140>
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2bb9      	cmp	r3, #185	; 0xb9
 800111c:	d007      	beq.n	800112e <register_code+0x13a>
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	2bba      	cmp	r3, #186	; 0xba
 8001122:	d102      	bne.n	800112a <register_code+0x136>
 8001124:	f240 232a 	movw	r3, #554	; 0x22a
 8001128:	e02e      	b.n	8001188 <register_code+0x194>
 800112a:	2300      	movs	r3, #0
 800112c:	e02c      	b.n	8001188 <register_code+0x194>
 800112e:	f240 2327 	movw	r3, #551	; 0x227
 8001132:	e029      	b.n	8001188 <register_code+0x194>
 8001134:	f240 2326 	movw	r3, #550	; 0x226
 8001138:	e026      	b.n	8001188 <register_code+0x194>
 800113a:	f240 2325 	movw	r3, #549	; 0x225
 800113e:	e023      	b.n	8001188 <register_code+0x194>
 8001140:	f44f 7309 	mov.w	r3, #548	; 0x224
 8001144:	e020      	b.n	8001188 <register_code+0x194>
 8001146:	f240 2323 	movw	r3, #547	; 0x223
 800114a:	e01d      	b.n	8001188 <register_code+0x194>
 800114c:	f240 2321 	movw	r3, #545	; 0x221
 8001150:	e01a      	b.n	8001188 <register_code+0x194>
 8001152:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001156:	e017      	b.n	8001188 <register_code+0x194>
 8001158:	f44f 73c9 	mov.w	r3, #402	; 0x192
 800115c:	e014      	b.n	8001188 <register_code+0x194>
 800115e:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8001162:	e011      	b.n	8001188 <register_code+0x194>
 8001164:	f240 1383 	movw	r3, #387	; 0x183
 8001168:	e00e      	b.n	8001188 <register_code+0x194>
 800116a:	23cd      	movs	r3, #205	; 0xcd
 800116c:	e00c      	b.n	8001188 <register_code+0x194>
 800116e:	23cc      	movs	r3, #204	; 0xcc
 8001170:	e00a      	b.n	8001188 <register_code+0x194>
 8001172:	23b7      	movs	r3, #183	; 0xb7
 8001174:	e008      	b.n	8001188 <register_code+0x194>
 8001176:	23b6      	movs	r3, #182	; 0xb6
 8001178:	e006      	b.n	8001188 <register_code+0x194>
 800117a:	23b5      	movs	r3, #181	; 0xb5
 800117c:	e004      	b.n	8001188 <register_code+0x194>
 800117e:	23ea      	movs	r3, #234	; 0xea
 8001180:	e002      	b.n	8001188 <register_code+0x194>
 8001182:	23e9      	movs	r3, #233	; 0xe9
 8001184:	e000      	b.n	8001188 <register_code+0x194>
 8001186:	23e2      	movs	r3, #226	; 0xe2
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe61 	bl	8000e50 <send_consumer>
 800118e:	e000      	b.n	8001192 <register_code+0x19e>
        return;
 8001190:	bf00      	nop
    }
}
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <unregister_code>:

void unregister_code(uint8_t code)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d049      	beq.n	800123c <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2bf0      	cmp	r3, #240	; 0xf0
 80011ac:	d906      	bls.n	80011bc <unregister_code+0x24>
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2bf4      	cmp	r3, #244	; 0xf4
 80011b2:	d803      	bhi.n	80011bc <unregister_code+0x24>
	{
    	prog_released(code);
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fdb2 	bl	8000d20 <prog_released>
	}

    if (code == KC_LOGOFF)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2bf0      	cmp	r3, #240	; 0xf0
 80011c0:	d108      	bne.n	80011d4 <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 80011c2:	2008      	movs	r0, #8
 80011c4:	f7ff fe84 	bl	8000ed0 <del_mods>
    	del_key_byte(KC_L);
 80011c8:	200f      	movs	r0, #15
 80011ca:	f7ff fedb 	bl	8000f84 <del_key_byte>
    	send_keyboard_report();
 80011ce:	f000 f92d 	bl	800142c <send_keyboard_report>
 80011d2:	e034      	b.n	800123e <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d909      	bls.n	80011ee <unregister_code+0x56>
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2ba4      	cmp	r3, #164	; 0xa4
 80011de:	d806      	bhi.n	80011ee <unregister_code+0x56>
        del_key_byte(code);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fece 	bl	8000f84 <del_key_byte>
        send_keyboard_report();
 80011e8:	f000 f920 	bl	800142c <send_keyboard_report>
 80011ec:	e027      	b.n	800123e <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2bdf      	cmp	r3, #223	; 0xdf
 80011f2:	d90f      	bls.n	8001214 <unregister_code+0x7c>
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2be7      	cmp	r3, #231	; 0xe7
 80011f8:	d80c      	bhi.n	8001214 <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	2201      	movs	r2, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fe61 	bl	8000ed0 <del_mods>
        send_keyboard_report();
 800120e:	f000 f90d 	bl	800142c <send_keyboard_report>
 8001212:	e014      	b.n	800123e <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2ba4      	cmp	r3, #164	; 0xa4
 8001218:	d906      	bls.n	8001228 <unregister_code+0x90>
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2ba7      	cmp	r3, #167	; 0xa7
 800121e:	d803      	bhi.n	8001228 <unregister_code+0x90>
	    send_system(0);
 8001220:	2000      	movs	r0, #0
 8001222:	f7ff fde9 	bl	8000df8 <send_system>
 8001226:	e00a      	b.n	800123e <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2ba7      	cmp	r3, #167	; 0xa7
 800122c:	d907      	bls.n	800123e <unregister_code+0xa6>
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2bba      	cmp	r3, #186	; 0xba
 8001232:	d804      	bhi.n	800123e <unregister_code+0xa6>
    	send_consumer(0);
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fe0b 	bl	8000e50 <send_consumer>
 800123a:	e000      	b.n	800123e <unregister_code+0xa6>
        return;
 800123c:	bf00      	nop
	}
}
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_time = 0;
	static uint8_t blinking = 0;
	static uint8_t last_blink = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 8001248:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <process_keyboard_USB+0x140>)
 800124a:	781a      	ldrb	r2, [r3, #0]
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <process_keyboard_USB+0x144>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d031      	beq.n	80012b8 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <process_keyboard_USB+0x148>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 800125c:	4b4b      	ldr	r3, [pc, #300]	; (800138c <process_keyboard_USB+0x148>)
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <process_keyboard_USB+0x14c>)
 8001264:	22fa      	movs	r2, #250	; 0xfa
 8001266:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8001268:	4b47      	ldr	r3, [pc, #284]	; (8001388 <process_keyboard_USB+0x144>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	4a47      	ldr	r2, [pc, #284]	; (8001394 <process_keyboard_USB+0x150>)
 8001276:	4413      	add	r3, r2
 8001278:	2209      	movs	r2, #9
 800127a:	4619      	mov	r1, r3
 800127c:	4846      	ldr	r0, [pc, #280]	; (8001398 <process_keyboard_USB+0x154>)
 800127e:	f005 ff47 	bl	8007110 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <process_keyboard_USB+0x144>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	425a      	negs	r2, r3
 800128a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800128e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001292:	bf58      	it	pl
 8001294:	4253      	negpl	r3, r2
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <process_keyboard_USB+0x144>)
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e00c      	b.n	80012b8 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <process_keyboard_USB+0x14c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	4b3a      	ldr	r3, [pc, #232]	; (8001390 <process_keyboard_USB+0x14c>)
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <process_keyboard_USB+0x14c>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 80012b2:	4b36      	ldr	r3, [pc, #216]	; (800138c <process_keyboard_USB+0x148>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	701a      	strb	r2, [r3, #0]
	}

	if (is_disco_time())
 80012b8:	f7ff fb72 	bl	80009a0 <is_disco_time>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d04d      	beq.n	800135e <process_keyboard_USB+0x11a>
	{
		if (!blinking)
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <process_keyboard_USB+0x158>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <process_keyboard_USB+0x96>
		{
			blinking = 1;
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <process_keyboard_USB+0x158>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
			blink_time = HAL_GetTick();
 80012d0:	f000 fd6a 	bl	8001da8 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <process_keyboard_USB+0x15c>)
 80012d8:	601a      	str	r2, [r3, #0]
		}

		if (((HAL_GetTick() - blink_time)&(1<<8))&&last_blink)
 80012da:	f000 fd65 	bl	8001da8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <process_keyboard_USB+0x15c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d016      	beq.n	800131c <process_keyboard_USB+0xd8>
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <process_keyboard_USB+0x160>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d012      	beq.n	800131c <process_keyboard_USB+0xd8>
		{
			last_blink = 0;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <process_keyboard_USB+0x160>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	; (80013a8 <process_keyboard_USB+0x164>)
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001302:	f7ff fb43 	bl	800098c <is_prog_error>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <process_keyboard_USB+0xd0>
				leds_PS2(PS2_LED_CAPS_LOCK|PS2_LED_NUM_LOCK);
 800130c:	2006      	movs	r0, #6
 800130e:	f000 fab5 	bl	800187c <leds_PS2>
			if (is_prog_error())
 8001312:	e034      	b.n	800137e <process_keyboard_USB+0x13a>
			else
				leds_PS2(PS2_LED_CAPS_LOCK);
 8001314:	2004      	movs	r0, #4
 8001316:	f000 fab1 	bl	800187c <leds_PS2>
			if (is_prog_error())
 800131a:	e030      	b.n	800137e <process_keyboard_USB+0x13a>
		}
		else if ((!((HAL_GetTick() - blink_time)&(1<<8)))&&(!last_blink))
 800131c:	f000 fd44 	bl	8001da8 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <process_keyboard_USB+0x15c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	2b00      	cmp	r3, #0
 800132e:	d126      	bne.n	800137e <process_keyboard_USB+0x13a>
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <process_keyboard_USB+0x160>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d122      	bne.n	800137e <process_keyboard_USB+0x13a>
		{
			last_blink = 1;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <process_keyboard_USB+0x160>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 800133e:	4b1a      	ldr	r3, [pc, #104]	; (80013a8 <process_keyboard_USB+0x164>)
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 8001344:	f7ff fb22 	bl	800098c <is_prog_error>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <process_keyboard_USB+0x112>
				leds_PS2(0);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fa94 	bl	800187c <leds_PS2>
	{
		blinking = 0;
		leds_updated = 1;
		leds_PS2(leds_data);
	}
}
 8001354:	e013      	b.n	800137e <process_keyboard_USB+0x13a>
				leds_PS2(PS2_LED_NUM_LOCK);
 8001356:	2002      	movs	r0, #2
 8001358:	f000 fa90 	bl	800187c <leds_PS2>
}
 800135c:	e00f      	b.n	800137e <process_keyboard_USB+0x13a>
	else if (blinking)
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <process_keyboard_USB+0x158>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <process_keyboard_USB+0x13a>
		blinking = 0;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <process_keyboard_USB+0x158>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
		leds_updated = 1;
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <process_keyboard_USB+0x164>)
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <process_keyboard_USB+0x168>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fa80 	bl	800187c <leds_PS2>
}
 800137c:	e7ff      	b.n	800137e <process_keyboard_USB+0x13a>
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000415 	.word	0x20000415
 8001388:	20000416 	.word	0x20000416
 800138c:	20000000 	.word	0x20000000
 8001390:	20000002 	.word	0x20000002
 8001394:	20000450 	.word	0x20000450
 8001398:	20000740 	.word	0x20000740
 800139c:	2000041c 	.word	0x2000041c
 80013a0:	20000420 	.word	0x20000420
 80013a4:	20000424 	.word	0x20000424
 80013a8:	20000691 	.word	0x20000691
 80013ac:	20000690 	.word	0x20000690

080013b0 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <USB_HID_buffer_sent_Callback+0x14>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000

080013c8 <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <kbuf_push+0x58>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	425a      	negs	r2, r3
 80013d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013e0:	bf58      	it	pl
 80013e2:	4253      	negpl	r3, r2
 80013e4:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <kbuf_push+0x5c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d011      	beq.n	8001414 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <kbuf_push+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <kbuf_push+0x60>)
 80013f8:	460b      	mov	r3, r1
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	4413      	add	r3, r2
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	6851      	ldr	r1, [r2, #4]
 8001406:	6018      	str	r0, [r3, #0]
 8001408:	6059      	str	r1, [r3, #4]
 800140a:	7a12      	ldrb	r2, [r2, #8]
 800140c:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <kbuf_push+0x58>)
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	7013      	strb	r3, [r2, #0]
    }
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000415 	.word	0x20000415
 8001424:	20000416 	.word	0x20000416
 8001428:	20000450 	.word	0x20000450

0800142c <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <send_keyboard_report+0x1c>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <send_keyboard_report+0x20>)
 8001438:	781a      	ldrb	r2, [r3, #0]
 800143a:	4b03      	ldr	r3, [pc, #12]	; (8001448 <send_keyboard_report+0x1c>)
 800143c:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <send_keyboard_report+0x1c>)
 8001440:	f7ff ffc2 	bl	80013c8 <kbuf_push>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000444 	.word	0x20000444
 800144c:	20000414 	.word	0x20000414

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 8001454:	f000 fc50 	bl	8001cf8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f822 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f7fe feec 	bl	8000238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001460:	f006 ff38 	bl	80082d4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001464:	f000 fbb4 	bl	8001bd0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <main+0x48>)
 800146a:	f003 f9d5 	bl	8004818 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 800146e:	20fa      	movs	r0, #250	; 0xfa
 8001470:	f000 fb6e 	bl	8001b50 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <main+0x4c>)
 800147c:	f001 f93f 	bl	80026fe <HAL_GPIO_WritePin>
  reset_us_counter();
 8001480:	f000 fb84 	bl	8001b8c <reset_us_counter>
  init_PS2();
 8001484:	f000 f96c 	bl	8001760 <init_PS2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001488:	f000 fa54 	bl	8001934 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 800148c:	f7ff feda 	bl	8001244 <process_keyboard_USB>
	  _delay_ms(1);
 8001490:	2001      	movs	r0, #1
 8001492:	f000 fb5d 	bl	8001b50 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001496:	e7f7      	b.n	8001488 <main+0x38>
 8001498:	200006d4 	.word	0x200006d4
 800149c:	40010800 	.word	0x40010800

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	; 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f007 fae8 	bl	8008a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014de:	2301      	movs	r3, #1
 80014e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e2:	2302      	movs	r3, #2
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014f6:	4618      	mov	r0, r3
 80014f8:	f002 fc9e 	bl	8003e38 <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001502:	f000 f828 	bl	8001556 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001516:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2101      	movs	r1, #1
 8001522:	4618      	mov	r0, r3
 8001524:	f002 ff08 	bl	8004338 <HAL_RCC_ClockConfig>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800152e:	f000 f812 	bl	8001556 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001532:	2310      	movs	r3, #16
 8001534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f864 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800154a:	f000 f804 	bl	8001556 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155a:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x6>
	...

08001560 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001570:	f040 80e6 	bne.w	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8001574:	4b74      	ldr	r3, [pc, #464]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d060      	beq.n	800163e <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 800157c:	4b72      	ldr	r3, [pc, #456]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d109      	bne.n	8001598 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8001584:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001586:	2202      	movs	r2, #2
 8001588:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 800158a:	4b70      	ldr	r3, [pc, #448]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001590:	4b6f      	ldr	r3, [pc, #444]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
				return;
 8001596:	e0d3      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8001598:	4b6c      	ldr	r3, [pc, #432]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800159a:	f993 3000 	ldrsb.w	r3, [r3]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	dc1b      	bgt.n	80015da <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 80015a2:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015aa:	f993 3000 	ldrsb.w	r3, [r3]
 80015ae:	fa42 f303 	asr.w	r3, r2, r3
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00c      	beq.n	80015d4 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 80015ba:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b61      	ldr	r3, [pc, #388]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80015cc:	701a      	strb	r2, [r3, #0]
					data_release();
 80015ce:	f7fe ff31 	bl	8000434 <data_release>
 80015d2:	e02a      	b.n	800162a <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 80015d4:	f7fe fee6 	bl	80003a4 <data_low>
 80015d8:	e027      	b.n	800162a <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 80015da:	4b5c      	ldr	r3, [pc, #368]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015dc:	f993 3000 	ldrsb.w	r3, [r3]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d109      	bne.n	80015f8 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 80015ec:	f7fe ff22 	bl	8000434 <data_release>
 80015f0:	e01b      	b.n	800162a <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 80015f2:	f7fe fed7 	bl	80003a4 <data_low>
 80015f6:	e018      	b.n	800162a <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 80015f8:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d102      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 8001602:	f7fe ff17 	bl	8000434 <data_release>
 8001606:	e010      	b.n	800162a <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 8001608:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800160a:	f993 3000 	ldrsb.w	r3, [r3]
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d10b      	bne.n	800162a <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 8001612:	f7fe ff0f 	bl	8000434 <data_release>
				sendMode = 0;
 8001616:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
				return;
 8001628:	e08a      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 800162a:	4b48      	ldr	r3, [pc, #288]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800162c:	f993 3000 	ldrsb.w	r3, [r3]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	3301      	adds	r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	b25a      	sxtb	r2, r3
 8001638:	4b44      	ldr	r3, [pc, #272]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800163a:	701a      	strb	r2, [r3, #0]
			return;
 800163c:	e080      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 800163e:	20c8      	movs	r0, #200	; 0xc8
 8001640:	f000 fab0 	bl	8001ba4 <check_us_counter>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 8001650:	f000 fa9c 	bl	8001b8c <reset_us_counter>
			if (bitNr == 0)
 8001654:	4b3d      	ldr	r3, [pc, #244]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001656:	f993 3000 	ldrsb.w	r3, [r3]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10e      	bne.n	800167c <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 800165e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001662:	483d      	ldr	r0, [pc, #244]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001664:	f001 f834 	bl	80026d0 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d167      	bne.n	800173e <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 800166e:	4b3b      	ldr	r3, [pc, #236]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
 800167a:	e056      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 800167c:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800167e:	f993 3000 	ldrsb.w	r3, [r3]
 8001682:	2b08      	cmp	r3, #8
 8001684:	dc1f      	bgt.n	80016c6 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8001686:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001690:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001692:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001696:	4830      	ldr	r0, [pc, #192]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001698:	f001 f81a 	bl	80026d0 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d043      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 80016ae:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	461a      	mov	r2, r3
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80016c2:	701a      	strb	r2, [r3, #0]
 80016c4:	e031      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80016c8:	f993 3000 	ldrsb.w	r3, [r3]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d112      	bne.n	80016f6 <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 80016d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d4:	4820      	ldr	r0, [pc, #128]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80016d6:	f000 fffb 	bl	80026d0 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d024      	beq.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	2301      	moveq	r3, #1
 80016ea:	2300      	movne	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	e019      	b.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 80016f8:	f993 3000 	ldrsb.w	r3, [r3]
 80016fc:	2b0a      	cmp	r3, #10
 80016fe:	d114      	bne.n	800172a <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	4814      	ldr	r0, [pc, #80]	; (8001758 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001706:	f000 ffe3 	bl	80026d0 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_GPIO_EXTI_Callback+0x1c2>
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_GPIO_EXTI_Callback+0x1fc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 f93d 	bl	800199c <buf_push>
				bitNr = 0;
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
				return;
 8001728:	e00a      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800172c:	f993 3000 	ldrsb.w	r3, [r3]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	3301      	adds	r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	b25a      	sxtb	r2, r3
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_GPIO_EXTI_Callback+0x1ec>)
 800173a:	701a      	strb	r2, [r3, #0]
 800173c:	e000      	b.n	8001740 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 800173e:	bf00      	nop
	}
}
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000425 	.word	0x20000425
 800174c:	20000427 	.word	0x20000427
 8001750:	2000042b 	.word	0x2000042b
 8001754:	20000426 	.word	0x20000426
 8001758:	40010c00 	.word	0x40010c00
 800175c:	2000042c 	.word	0x2000042c

08001760 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8001766:	20ff      	movs	r0, #255	; 0xff
 8001768:	f000 f820 	bl	80017ac <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 800176c:	f000 f8c4 	bl	80018f8 <wait_response_PS2>
 8001770:	4603      	mov	r3, r0
 8001772:	2bfa      	cmp	r3, #250	; 0xfa
 8001774:	d004      	beq.n	8001780 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8001776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177a:	f000 f9e9 	bl	8001b50 <_delay_ms>
		send_PS2(PS2_RESET);
 800177e:	e7f2      	b.n	8001766 <init_PS2+0x6>
			break;
 8001780:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001782:	2364      	movs	r3, #100	; 0x64
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e007      	b.n	8001798 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8001788:	f000 f8b6 	bl	80018f8 <wait_response_PS2>
 800178c:	4603      	mov	r3, r0
 800178e:	2baa      	cmp	r3, #170	; 0xaa
 8001790:	d006      	beq.n	80017a0 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	3b01      	subs	r3, #1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f4      	bne.n	8001788 <init_PS2+0x28>
			break;
	}
}
 800179e:	e000      	b.n	80017a2 <init_PS2+0x42>
			break;
 80017a0:	bf00      	nop
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <send_PS2+0x3c>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
	clock_low();
 80017bc:	f7fe fe16 	bl	80003ec <clock_low>
	bitNr = 0;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <send_PS2+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
	outputData = data;
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <send_PS2+0x44>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 80017cc:	2064      	movs	r0, #100	; 0x64
 80017ce:	f000 f9ca 	bl	8001b66 <_delay_us>

	data_low();
 80017d2:	f7fe fde7 	bl	80003a4 <data_low>
	_delay_us(10);
 80017d6:	200a      	movs	r0, #10
 80017d8:	f000 f9c5 	bl	8001b66 <_delay_us>
	clock_release();
 80017dc:	f7fe fe46 	bl	800046c <clock_release>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000425 	.word	0x20000425
 80017ec:	20000427 	.word	0x20000427
 80017f0:	20000426 	.word	0x20000426

080017f4 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <SET_LEDS_Callback+0x5c>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SET_LEDS_Callback+0x60>)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	7013      	strb	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000691 	.word	0x20000691
 8001854:	20000690 	.word	0x20000690

08001858 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	3301      	adds	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <USBD_Sleep_Callback+0x20>)
 800186a:	701a      	strb	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000428 	.word	0x20000428

0800187c <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <leds_PS2+0x78>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d029      	beq.n	80018e2 <leds_PS2+0x66>
		return;
	if (buf_has_data())
 800188e:	f000 f8d9 	bl	8001a44 <buf_has_data>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d126      	bne.n	80018e6 <leds_PS2+0x6a>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <leds_PS2+0x78>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 5; i > 0; i--){
 800189e:	2305      	movs	r3, #5
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	e01a      	b.n	80018da <leds_PS2+0x5e>
		send_PS2(PS2_SET_LED);
 80018a4:	20ed      	movs	r0, #237	; 0xed
 80018a6:	f7ff ff81 	bl	80017ac <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 80018aa:	f000 f825 	bl	80018f8 <wait_response_PS2>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2bfa      	cmp	r3, #250	; 0xfa
 80018b2:	d003      	beq.n	80018bc <leds_PS2+0x40>
		{
			_delay_ms(20);
 80018b4:	2014      	movs	r0, #20
 80018b6:	f000 f94b 	bl	8001b50 <_delay_ms>
			continue;
 80018ba:	e00b      	b.n	80018d4 <leds_PS2+0x58>
		}
		send_PS2(led);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff74 	bl	80017ac <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 80018c4:	f000 f818 	bl	80018f8 <wait_response_PS2>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2bfa      	cmp	r3, #250	; 0xfa
 80018cc:	d00d      	beq.n	80018ea <leds_PS2+0x6e>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 80018ce:	2014      	movs	r0, #20
 80018d0:	f000 f93e 	bl	8001b50 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e1      	bne.n	80018a4 <leds_PS2+0x28>
 80018e0:	e004      	b.n	80018ec <leds_PS2+0x70>
		return;
 80018e2:	bf00      	nop
 80018e4:	e002      	b.n	80018ec <leds_PS2+0x70>
		return; // do nothing if buffer is not clear - user input is more important!
 80018e6:	bf00      	nop
 80018e8:	e000      	b.n	80018ec <leds_PS2+0x70>
			return;
 80018ea:	bf00      	nop
	}
}
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000691 	.word	0x20000691

080018f8 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 80018fe:	2319      	movs	r3, #25
 8001900:	71fb      	strb	r3, [r7, #7]
 8001902:	e00a      	b.n	800191a <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 8001904:	f000 f89e 	bl	8001a44 <buf_has_data>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f000 f91e 	bl	8001b50 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	3b01      	subs	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f1      	bne.n	8001904 <wait_response_PS2+0xc>
 8001920:	e000      	b.n	8001924 <wait_response_PS2+0x2c>
			break;
 8001922:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 8001924:	f000 f864 	bl	80019f0 <buf_pop>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	if (sleep)
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <process_PS2+0x5c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <process_PS2+0x32>
	{
		leds_updated = 1;
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <process_PS2+0x60>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <process_PS2+0x5c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d103      	bne.n	8001956 <process_PS2+0x22>
		{
			leds_PS2(0);
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff ff94 	bl	800187c <leds_PS2>
 8001954:	e004      	b.n	8001960 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <process_PS2+0x64>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff8e 	bl	800187c <leds_PS2>
		}
		sleep = 0;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <process_PS2+0x5c>)
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 8001966:	f000 f86d 	bl	8001a44 <buf_has_data>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8001970:	f000 f83e 	bl	80019f0 <buf_pop>
 8001974:	4603      	mov	r3, r0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd96 	bl	80004a8 <matrix_scan>
 800197c:	e004      	b.n	8001988 <process_PS2+0x54>
	else
		leds_PS2(leds_data);
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <process_PS2+0x64>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff7a 	bl	800187c <leds_PS2>
	prog_pop_code();
 8001988:	f7ff f8cc 	bl	8000b24 <prog_pop_code>
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000428 	.word	0x20000428
 8001994:	20000691 	.word	0x20000691
 8001998:	20000690 	.word	0x20000690

0800199c <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <buf_push+0x48>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	425a      	negs	r2, r3
 80019ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80019b6:	bf58      	it	pl
 80019b8:	4253      	negpl	r3, r2
 80019ba:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <buf_push+0x4c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	7bfa      	ldrb	r2, [r7, #15]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d008      	beq.n	80019d8 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <buf_push+0x48>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <buf_push+0x50>)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 80019d2:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <buf_push+0x48>)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	7013      	strb	r3, [r2, #0]
    }
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000429 	.word	0x20000429
 80019e8:	2000042a 	.word	0x2000042a
 80019ec:	20000694 	.word	0x20000694

080019f0 <buf_pop>:

uint8_t buf_pop(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <buf_pop+0x48>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <buf_pop+0x4c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d012      	beq.n	8001a2c <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <buf_pop+0x4c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <buf_pop+0x50>)
 8001a0e:	5c9b      	ldrb	r3, [r3, r2]
 8001a10:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <buf_pop+0x4c>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	425a      	negs	r2, r3
 8001a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a22:	bf58      	it	pl
 8001a24:	4253      	negpl	r3, r2
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b04      	ldr	r3, [pc, #16]	; (8001a3c <buf_pop+0x4c>)
 8001a2a:	701a      	strb	r2, [r3, #0]
    }
    return val;
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000429 	.word	0x20000429
 8001a3c:	2000042a 	.word	0x2000042a
 8001a40:	20000694 	.word	0x20000694

08001a44 <buf_has_data>:

uint8_t buf_has_data(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <buf_has_data+0x20>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <buf_has_data+0x24>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	bf14      	ite	ne
 8001a54:	2301      	movne	r3, #1
 8001a56:	2300      	moveq	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc80      	pop	{r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000429 	.word	0x20000429
 8001a68:	2000042a 	.word	0x2000042a

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6193      	str	r3, [r2, #24]
 8001a7e:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_MspInit+0x5c>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_MspInit+0x60>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <HAL_MspInit+0x60>)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40010000 	.word	0x40010000

08001ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <NMI_Handler+0x4>

08001ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <HardFault_Handler+0x4>

08001adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <MemManage_Handler+0x4>

08001ae2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <BusFault_Handler+0x4>

08001ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <UsageFault_Handler+0x4>

08001aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f935 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b26:	f000 ff4c 	bl	80029c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000c04 	.word	0x20000c04

08001b34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b38:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b3c:	f000 fdf8 	bl	8002730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f92f 	bl	8001dbc <HAL_Delay>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8001b70:	f000 f80c 	bl	8001b8c <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001b74:	bf00      	nop
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f813 	bl	8001ba4 <check_us_counter>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f8      	bne.n	8001b76 <_delay_us+0x10>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <reset_us_counter>:

inline void reset_us_counter(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <reset_us_counter+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	200006d4 	.word	0x200006d4

08001ba4 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <check_us_counter+0x28>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	bf8c      	ite	hi
 8001bbc:	2301      	movhi	r3, #1
 8001bbe:	2300      	movls	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	200006d4 	.word	0x200006d4

08001bd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bd6:	f107 0308 	add.w	r3, r7, #8
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be4:	463b      	mov	r3, r7
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001bee:	4a1f      	ldr	r2, [pc, #124]	; (8001c6c <MX_TIM1_Init+0x9c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001bf4:	222f      	movs	r2, #47	; 0x2f
 8001bf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c18:	4813      	ldr	r0, [pc, #76]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c1a:	f002 fdad 	bl	8004778 <HAL_TIM_Base_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001c24:	f7ff fc97 	bl	8001556 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c36:	f002 fe39 	bl	80048ac <HAL_TIM_ConfigClockSource>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001c40:	f7ff fc89 	bl	8001556 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4c:	463b      	mov	r3, r7
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_TIM1_Init+0x98>)
 8001c52:	f002 ffdb 	bl	8004c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c5c:	f7ff fc7b 	bl	8001556 <Error_Handler>
  }

}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200006d4 	.word	0x200006d4
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a09      	ldr	r2, [pc, #36]	; (8001ca4 <HAL_TIM_Base_MspInit+0x34>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10b      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_TIM_Base_MspInit+0x38>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_TIM_Base_MspInit+0x38>)
 8001c88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_TIM_Base_MspInit+0x38>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40012c00 	.word	0x40012c00
 8001ca8:	40021000 	.word	0x40021000

08001cac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cae:	e003      	b.n	8001cb8 <LoopCopyDataInit>

08001cb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cb6:	3104      	adds	r1, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cc0:	d3f6      	bcc.n	8001cb0 <CopyDataInit>
  ldr r2, =_sbss
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001cc4:	e002      	b.n	8001ccc <LoopFillZerobss>

08001cc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001cc8:	f842 3b04 	str.w	r3, [r2], #4

08001ccc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001cd0:	d3f9      	bcc.n	8001cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cd2:	f7ff ff37 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f006 feb1 	bl	8008a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cda:	f7ff fbb9 	bl	8001450 <main>
  bx lr
 8001cde:	4770      	bx	lr
  ldr r3, =_sidata
 8001ce0:	08008c1c 	.word	0x08008c1c
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ce8:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8001cec:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001cf0:	20000ef0 	.word	0x20000ef0

08001cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cf4:	e7fe      	b.n	8001cf4 <ADC1_2_IRQHandler>
	...

08001cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x28>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x28>)
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f945 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff feaa 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40022000 	.word	0x40022000

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f95d 	bl	8002002 <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f925 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000004 	.word	0x20000004
 8001d7c:	2000000c 	.word	0x2000000c
 8001d80:	20000008 	.word	0x20000008

08001d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_IncTick+0x1c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_IncTick+0x20>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <HAL_IncTick+0x20>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	2000000c 	.word	0x2000000c
 8001da4:	2000071c 	.word	0x2000071c

08001da8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <HAL_GetTick+0x10>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	2000071c 	.word	0x2000071c

08001dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff fff0 	bl	8001da8 <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd4:	d005      	beq.n	8001de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_Delay+0x40>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001de2:	bf00      	nop
 8001de4:	f7ff ffe0 	bl	8001da8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d8f7      	bhi.n	8001de4 <HAL_Delay+0x28>
  {
  }
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	2000000c 	.word	0x2000000c

08001e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e16:	68ba      	ldr	r2, [r7, #8]
 8001e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <__NVIC_SetPriorityGrouping+0x44>)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	60d3      	str	r3, [r2, #12]
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <__NVIC_GetPriorityGrouping+0x18>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	0a1b      	lsrs	r3, r3, #8
 8001e52:	f003 0307 	and.w	r3, r3, #7
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0b      	blt.n	8001e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	f003 021f 	and.w	r2, r3, #31
 8001e7c:	4906      	ldr	r1, [pc, #24]	; (8001e98 <__NVIC_EnableIRQ+0x34>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	095b      	lsrs	r3, r3, #5
 8001e84:	2001      	movs	r0, #1
 8001e86:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
         );
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff90 	bl	8001e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff2d 	bl	8001e00 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff42 	bl	8001e48 <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff90 	bl	8001ef0 <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5f 	bl	8001e9c <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff35 	bl	8001e64 <__NVIC_EnableIRQ>
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffa2 	bl	8001f54 <SysTick_Config>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800201c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_FLASH_Program+0xd8>)
 8002038:	7e1b      	ldrb	r3, [r3, #24]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_FLASH_Program+0x26>
 800203e:	2302      	movs	r3, #2
 8002040:	e054      	b.n	80020ec <HAL_FLASH_Program+0xd0>
 8002042:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <HAL_FLASH_Program+0xd8>)
 8002044:	2201      	movs	r2, #1
 8002046:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002048:	f24c 3050 	movw	r0, #50000	; 0xc350
 800204c:	f000 f8a8 	bl	80021a0 <FLASH_WaitForLastOperation>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d144      	bne.n	80020e4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d102      	bne.n	8002066 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002060:	2301      	movs	r3, #1
 8002062:	757b      	strb	r3, [r7, #21]
 8002064:	e007      	b.n	8002076 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d102      	bne.n	8002072 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800206c:	2302      	movs	r3, #2
 800206e:	757b      	strb	r3, [r7, #21]
 8002070:	e001      	b.n	8002076 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002072:	2304      	movs	r3, #4
 8002074:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002076:	2300      	movs	r3, #0
 8002078:	75bb      	strb	r3, [r7, #22]
 800207a:	e02d      	b.n	80020d8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800207c:	7dbb      	ldrb	r3, [r7, #22]
 800207e:	005a      	lsls	r2, r3, #1
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	eb02 0c03 	add.w	ip, r2, r3
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	0119      	lsls	r1, r3, #4
 800208a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800208e:	f1c1 0620 	rsb	r6, r1, #32
 8002092:	f1a1 0020 	sub.w	r0, r1, #32
 8002096:	fa22 f401 	lsr.w	r4, r2, r1
 800209a:	fa03 f606 	lsl.w	r6, r3, r6
 800209e:	4334      	orrs	r4, r6
 80020a0:	fa23 f000 	lsr.w	r0, r3, r0
 80020a4:	4304      	orrs	r4, r0
 80020a6:	fa23 f501 	lsr.w	r5, r3, r1
 80020aa:	b2a3      	uxth	r3, r4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4660      	mov	r0, ip
 80020b0:	f000 f85a 	bl	8002168 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020b8:	f000 f872 	bl	80021a0 <FLASH_WaitForLastOperation>
 80020bc:	4603      	mov	r3, r0
 80020be:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_FLASH_Program+0xdc>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_FLASH_Program+0xdc>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	3301      	adds	r3, #1
 80020d6:	75bb      	strb	r3, [r7, #22]
 80020d8:	7dba      	ldrb	r2, [r7, #22]
 80020da:	7d7b      	ldrb	r3, [r7, #21]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3cd      	bcc.n	800207c <HAL_FLASH_Program+0x60>
 80020e0:	e000      	b.n	80020e4 <HAL_FLASH_Program+0xc8>
      {
        break;
 80020e2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_FLASH_Program+0xd8>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	761a      	strb	r2, [r3, #24]

  return status;
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f4:	20000720 	.word	0x20000720
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002106:	4b0d      	ldr	r3, [pc, #52]	; (800213c <HAL_FLASH_Unlock+0x40>)
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00d      	beq.n	800212e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_FLASH_Unlock+0x40>)
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_FLASH_Unlock+0x44>)
 8002116:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_FLASH_Unlock+0x40>)
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_FLASH_Unlock+0x48>)
 800211c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_FLASH_Unlock+0x40>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800212e:	79fb      	ldrb	r3, [r7, #7]
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	45670123 	.word	0x45670123
 8002144:	cdef89ab 	.word	0xcdef89ab

08002148 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_FLASH_Lock+0x1c>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_FLASH_Lock+0x1c>)
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000

08002168 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <FLASH_Program_HalfWord+0x30>)
 8002176:	2200      	movs	r2, #0
 8002178:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <FLASH_Program_HalfWord+0x34>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <FLASH_Program_HalfWord+0x34>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	887a      	ldrh	r2, [r7, #2]
 800218a:	801a      	strh	r2, [r3, #0]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000720 	.word	0x20000720
 800219c:	40022000 	.word	0x40022000

080021a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fdfe 	bl	8001da8 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80021ae:	e010      	b.n	80021d2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d00c      	beq.n	80021d2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <FLASH_WaitForLastOperation+0x2e>
 80021be:	f7ff fdf3 	bl	8001da8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d201      	bcs.n	80021d2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e025      	b.n	800221e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e8      	bne.n	80021b0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 80021ec:	2220      	movs	r2, #32
 80021ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <FLASH_WaitForLastOperation+0x88>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002214:	f000 f80a 	bl	800222c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000

0800222c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 800224c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002256:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 800226c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f043 0304 	orr.w	r3, r3, #4
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <FLASH_SetErrorCode+0x9c>)
 800228c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f240 1201 	movw	r2, #257	; 0x101
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d106      	bne.n	80022b2 <FLASH_SetErrorCode+0x86>
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 80022aa:	f023 0301 	bic.w	r3, r3, #1
 80022ae:	61d3      	str	r3, [r2, #28]
}  
 80022b0:	e002      	b.n	80022b8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <FLASH_SetErrorCode+0x98>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	60d3      	str	r3, [r2, #12]
}  
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40022000 	.word	0x40022000
 80022c8:	20000720 	.word	0x20000720

080022cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022de:	4b2f      	ldr	r3, [pc, #188]	; (800239c <HAL_FLASHEx_Erase+0xd0>)
 80022e0:	7e1b      	ldrb	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_FLASHEx_Erase+0x1e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e053      	b.n	8002392 <HAL_FLASHEx_Erase+0xc6>
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_FLASHEx_Erase+0xd0>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d116      	bne.n	8002326 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80022f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022fc:	f7ff ff50 	bl	80021a0 <FLASH_WaitForLastOperation>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d141      	bne.n	800238a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 f84c 	bl	80023a4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800230c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002310:	f7ff ff46 	bl	80021a0 <FLASH_WaitForLastOperation>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_FLASHEx_Erase+0xd4>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_FLASHEx_Erase+0xd4>)
 800231e:	f023 0304 	bic.w	r3, r3, #4
 8002322:	6113      	str	r3, [r2, #16]
 8002324:	e031      	b.n	800238a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002326:	f24c 3050 	movw	r0, #50000	; 0xc350
 800232a:	f7ff ff39 	bl	80021a0 <FLASH_WaitForLastOperation>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d12a      	bne.n	800238a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f04f 32ff 	mov.w	r2, #4294967295
 800233a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	e019      	b.n	8002378 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f000 f849 	bl	80023dc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800234a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800234e:	f7ff ff27 	bl	80021a0 <FLASH_WaitForLastOperation>
 8002352:	4603      	mov	r3, r0
 8002354:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_FLASHEx_Erase+0xd4>)
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <HAL_FLASHEx_Erase+0xd4>)
 800235c:	f023 0302 	bic.w	r3, r3, #2
 8002360:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d003      	beq.n	8002370 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	601a      	str	r2, [r3, #0]
            break;
 800236e:	e00c      	b.n	800238a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	029a      	lsls	r2, r3, #10
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	d3dc      	bcc.n	8002344 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <HAL_FLASHEx_Erase+0xd0>)
 800238c:	2200      	movs	r2, #0
 800238e:	761a      	strb	r2, [r3, #24]

  return status;
 8002390:	7bfb      	ldrb	r3, [r7, #15]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000720 	.word	0x20000720
 80023a0:	40022000 	.word	0x40022000

080023a4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <FLASH_MassErase+0x30>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <FLASH_MassErase+0x34>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <FLASH_MassErase+0x34>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <FLASH_MassErase+0x34>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <FLASH_MassErase+0x34>)
 80023c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000720 	.word	0x20000720
 80023d8:	40022000 	.word	0x40022000

080023dc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <FLASH_PageErase+0x38>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <FLASH_PageErase+0x3c>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <FLASH_PageErase+0x3c>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <FLASH_PageErase+0x3c>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <FLASH_PageErase+0x3c>)
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <FLASH_PageErase+0x3c>)
 8002402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002406:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	20000720 	.word	0x20000720
 8002418:	40022000 	.word	0x40022000

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b08b      	sub	sp, #44	; 0x2c
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	e127      	b.n	8002680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002430:	2201      	movs	r2, #1
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69fa      	ldr	r2, [r7, #28]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8116 	bne.w	800267a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b12      	cmp	r3, #18
 8002454:	d034      	beq.n	80024c0 <HAL_GPIO_Init+0xa4>
 8002456:	2b12      	cmp	r3, #18
 8002458:	d80d      	bhi.n	8002476 <HAL_GPIO_Init+0x5a>
 800245a:	2b02      	cmp	r3, #2
 800245c:	d02b      	beq.n	80024b6 <HAL_GPIO_Init+0x9a>
 800245e:	2b02      	cmp	r3, #2
 8002460:	d804      	bhi.n	800246c <HAL_GPIO_Init+0x50>
 8002462:	2b00      	cmp	r3, #0
 8002464:	d031      	beq.n	80024ca <HAL_GPIO_Init+0xae>
 8002466:	2b01      	cmp	r3, #1
 8002468:	d01c      	beq.n	80024a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800246a:	e048      	b.n	80024fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800246c:	2b03      	cmp	r3, #3
 800246e:	d043      	beq.n	80024f8 <HAL_GPIO_Init+0xdc>
 8002470:	2b11      	cmp	r3, #17
 8002472:	d01b      	beq.n	80024ac <HAL_GPIO_Init+0x90>
          break;
 8002474:	e043      	b.n	80024fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002476:	4a89      	ldr	r2, [pc, #548]	; (800269c <HAL_GPIO_Init+0x280>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d026      	beq.n	80024ca <HAL_GPIO_Init+0xae>
 800247c:	4a87      	ldr	r2, [pc, #540]	; (800269c <HAL_GPIO_Init+0x280>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d806      	bhi.n	8002490 <HAL_GPIO_Init+0x74>
 8002482:	4a87      	ldr	r2, [pc, #540]	; (80026a0 <HAL_GPIO_Init+0x284>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d020      	beq.n	80024ca <HAL_GPIO_Init+0xae>
 8002488:	4a86      	ldr	r2, [pc, #536]	; (80026a4 <HAL_GPIO_Init+0x288>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01d      	beq.n	80024ca <HAL_GPIO_Init+0xae>
          break;
 800248e:	e036      	b.n	80024fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002490:	4a85      	ldr	r2, [pc, #532]	; (80026a8 <HAL_GPIO_Init+0x28c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0xae>
 8002496:	4a85      	ldr	r2, [pc, #532]	; (80026ac <HAL_GPIO_Init+0x290>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d016      	beq.n	80024ca <HAL_GPIO_Init+0xae>
 800249c:	4a84      	ldr	r2, [pc, #528]	; (80026b0 <HAL_GPIO_Init+0x294>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0xae>
          break;
 80024a2:	e02c      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	623b      	str	r3, [r7, #32]
          break;
 80024aa:	e028      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	3304      	adds	r3, #4
 80024b2:	623b      	str	r3, [r7, #32]
          break;
 80024b4:	e023      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	3308      	adds	r3, #8
 80024bc:	623b      	str	r3, [r7, #32]
          break;
 80024be:	e01e      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	330c      	adds	r3, #12
 80024c6:	623b      	str	r3, [r7, #32]
          break;
 80024c8:	e019      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024d2:	2304      	movs	r3, #4
 80024d4:	623b      	str	r3, [r7, #32]
          break;
 80024d6:	e012      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024e0:	2308      	movs	r3, #8
 80024e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	611a      	str	r2, [r3, #16]
          break;
 80024ea:	e008      	b.n	80024fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ec:	2308      	movs	r3, #8
 80024ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	615a      	str	r2, [r3, #20]
          break;
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
          break;
 80024fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2bff      	cmp	r3, #255	; 0xff
 8002502:	d801      	bhi.n	8002508 <HAL_GPIO_Init+0xec>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	e001      	b.n	800250c <HAL_GPIO_Init+0xf0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2bff      	cmp	r3, #255	; 0xff
 8002512:	d802      	bhi.n	800251a <HAL_GPIO_Init+0xfe>
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x104>
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3b08      	subs	r3, #8
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	210f      	movs	r1, #15
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	6a39      	ldr	r1, [r7, #32]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	431a      	orrs	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8096 	beq.w	800267a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800254e:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_GPIO_Init+0x298>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_GPIO_Init+0x298>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_GPIO_Init+0x298>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002566:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_GPIO_Init+0x29c>)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4013      	ands	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4b      	ldr	r2, [pc, #300]	; (80026bc <HAL_GPIO_Init+0x2a0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d013      	beq.n	80025ba <HAL_GPIO_Init+0x19e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <HAL_GPIO_Init+0x2a4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d00d      	beq.n	80025b6 <HAL_GPIO_Init+0x19a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a49      	ldr	r2, [pc, #292]	; (80026c4 <HAL_GPIO_Init+0x2a8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d007      	beq.n	80025b2 <HAL_GPIO_Init+0x196>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a48      	ldr	r2, [pc, #288]	; (80026c8 <HAL_GPIO_Init+0x2ac>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_GPIO_Init+0x192>
 80025aa:	2303      	movs	r3, #3
 80025ac:	e006      	b.n	80025bc <HAL_GPIO_Init+0x1a0>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e004      	b.n	80025bc <HAL_GPIO_Init+0x1a0>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e002      	b.n	80025bc <HAL_GPIO_Init+0x1a0>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_GPIO_Init+0x1a0>
 80025ba:	2300      	movs	r3, #0
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	f002 0203 	and.w	r2, r2, #3
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	4093      	lsls	r3, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025cc:	493a      	ldr	r1, [pc, #232]	; (80026b8 <HAL_GPIO_Init+0x29c>)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4938      	ldr	r1, [pc, #224]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
 80025f2:	e006      	b.n	8002602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025f4:	4b35      	ldr	r3, [pc, #212]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	4933      	ldr	r1, [pc, #204]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	492e      	ldr	r1, [pc, #184]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
 800261a:	e006      	b.n	800262a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	43db      	mvns	r3, r3
 8002624:	4929      	ldr	r1, [pc, #164]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002626:	4013      	ands	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	4924      	ldr	r1, [pc, #144]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
 8002642:	e006      	b.n	8002652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	43db      	mvns	r3, r3
 800264c:	491f      	ldr	r1, [pc, #124]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 800264e:	4013      	ands	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	491a      	ldr	r1, [pc, #104]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	60cb      	str	r3, [r1, #12]
 800266a:	e006      	b.n	800267a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 800266e:	68da      	ldr	r2, [r3, #12]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	43db      	mvns	r3, r3
 8002674:	4915      	ldr	r1, [pc, #84]	; (80026cc <HAL_GPIO_Init+0x2b0>)
 8002676:	4013      	ands	r3, r2
 8002678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	f47f aed0 	bne.w	8002430 <HAL_GPIO_Init+0x14>
  }
}
 8002690:	bf00      	nop
 8002692:	372c      	adds	r7, #44	; 0x2c
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	10210000 	.word	0x10210000
 80026a0:	10110000 	.word	0x10110000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10310000 	.word	0x10310000
 80026ac:	10320000 	.word	0x10320000
 80026b0:	10220000 	.word	0x10220000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40010800 	.word	0x40010800
 80026c0:	40010c00 	.word	0x40010c00
 80026c4:	40011000 	.word	0x40011000
 80026c8:	40011400 	.word	0x40011400
 80026cc:	40010400 	.word	0x40010400

080026d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e001      	b.n	80026f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	807b      	strh	r3, [r7, #2]
 800270a:	4613      	mov	r3, r2
 800270c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800270e:	787b      	ldrb	r3, [r7, #1]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002714:	887a      	ldrh	r2, [r7, #2]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800271a:	e003      	b.n	8002724 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	041a      	lsls	r2, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	611a      	str	r2, [r3, #16]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
	...

08002730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	4013      	ands	r3, r2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ff06 	bl	8001560 <HAL_GPIO_EXTI_Callback>
  }
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40010400 	.word	0x40010400

08002760 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	b08b      	sub	sp, #44	; 0x2c
 8002764:	af06      	add	r7, sp, #24
 8002766:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0fd      	b.n	800296e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f005 fed8 	bl	800853c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2203      	movs	r2, #3
 8002790:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f002 fabb 	bl	8004d14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	687e      	ldr	r6, [r7, #4]
 80027a6:	466d      	mov	r5, sp
 80027a8:	f106 0410 	add.w	r4, r6, #16
 80027ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b0:	6823      	ldr	r3, [r4, #0]
 80027b2:	602b      	str	r3, [r5, #0]
 80027b4:	1d33      	adds	r3, r6, #4
 80027b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	f002 fa85 	bl	8004cc8 <USB_CoreInit>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0ce      	b.n	800296e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fab6 	bl	8004d48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e04c      	b.n	800287c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	440b      	add	r3, r1
 80027f2:	3301      	adds	r3, #1
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	b298      	uxth	r0, r3
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	3336      	adds	r3, #54	; 0x36
 8002820:	4602      	mov	r2, r0
 8002822:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	440b      	add	r3, r1
 8002834:	3303      	adds	r3, #3
 8002836:	2200      	movs	r2, #0
 8002838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	440b      	add	r3, r1
 8002848:	3338      	adds	r3, #56	; 0x38
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	333c      	adds	r3, #60	; 0x3c
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3340      	adds	r3, #64	; 0x40
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	3301      	adds	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	429a      	cmp	r2, r3
 8002884:	d3ad      	bcc.n	80027e2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e044      	b.n	8002916 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	3301      	adds	r3, #1
 8002914:	73fb      	strb	r3, [r7, #15]
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d3b5      	bcc.n	800288c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	687e      	ldr	r6, [r7, #4]
 8002928:	466d      	mov	r5, sp
 800292a:	f106 0410 	add.w	r4, r6, #16
 800292e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	602b      	str	r3, [r5, #0]
 8002936:	1d33      	adds	r3, r6, #4
 8002938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293a:	6838      	ldr	r0, [r7, #0]
 800293c:	f002 fa10 	bl	8004d60 <USB_DevInit>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00d      	b.n	800296e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f004 f9aa 	bl	8006cc0 <USB_DevDisconnect>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002976 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_Start+0x16>
 8002988:	2302      	movs	r3, #2
 800298a:	e016      	b.n	80029ba <HAL_PCD_Start+0x44>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f002 f9a5 	bl	8004ce8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800299e:	2101      	movs	r1, #1
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f006 f814 	bl	80089ce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 f97e 	bl	8006cac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b088      	sub	sp, #32
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f980 	bl	8006cd4 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029de:	d102      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fb4a 	bl	800307a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f972 	bl	8006cd4 <USB_ReadInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d112      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0e:	b292      	uxth	r2, r2
 8002a10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f005 fe0c 	bl	8008632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f925 	bl	8002c6c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f954 	bl	8006cd4 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a36:	d10b      	bne.n	8002a50 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 f93d 	bl	8006cd4 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a64:	d10b      	bne.n	8002a7e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 f926 	bl	8006cd4 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	d126      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	b292      	uxth	r2, r2
 8002aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0208 	bic.w	r2, r2, #8
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f005 fde3 	bl	8008690 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002adc:	b292      	uxth	r2, r2
 8002ade:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 f8f4 	bl	8006cd4 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002af6:	f040 8084 	bne.w	8002c02 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e011      	b.n	8002b24 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	441a      	add	r2, r3
 8002b0c:	7ffb      	ldrb	r3, [r7, #31]
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	b292      	uxth	r2, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	f107 0120 	add.w	r1, r7, #32
 8002b18:	440b      	add	r3, r1
 8002b1a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002b1e:	7ffb      	ldrb	r3, [r7, #31]
 8002b20:	3301      	adds	r3, #1
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	7ffb      	ldrb	r3, [r7, #31]
 8002b26:	2b07      	cmp	r3, #7
 8002b28:	d9ea      	bls.n	8002b00 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	b292      	uxth	r2, r2
 8002b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0201 	bic.w	r2, r2, #1
 8002b54:	b292      	uxth	r2, r2
 8002b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002b5a:	bf00      	nop
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f6      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b80:	b292      	uxth	r2, r2
 8002b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002b86:	2300      	movs	r3, #0
 8002b88:	77fb      	strb	r3, [r7, #31]
 8002b8a:	e010      	b.n	8002bae <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b8c:	7ffb      	ldrb	r3, [r7, #31]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	7ffa      	ldrb	r2, [r7, #31]
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	440a      	add	r2, r1
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	f107 0120 	add.w	r1, r7, #32
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002ba6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
 8002baa:	3301      	adds	r3, #1
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	d9eb      	bls.n	8002b8c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0208 	orr.w	r2, r2, #8
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bde:	b292      	uxth	r2, r2
 8002be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0204 	orr.w	r2, r2, #4
 8002bf6:	b292      	uxth	r2, r2
 8002bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f005 fd36 	bl	800866e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 f864 	bl	8006cd4 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c16:	d10e      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f005 fcf0 	bl	8008616 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f004 f84a 	bl	8006cd4 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d10b      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_PCD_SetAddress+0x1a>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e013      	b.n	8002cae <HAL_PCD_SetAddress+0x42>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fff1 	bl	8006c86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	4608      	mov	r0, r1
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	70fb      	strb	r3, [r7, #3]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	803b      	strh	r3, [r7, #0]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da0e      	bge.n	8002cfa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
 8002cf8:	e00e      	b.n	8002d18 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	f003 0207 	and.w	r2, r3, #7
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d24:	883a      	ldrh	r2, [r7, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	78ba      	ldrb	r2, [r7, #2]
 8002d2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	785b      	ldrb	r3, [r3, #1]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d004      	beq.n	8002d42 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d42:	78bb      	ldrb	r3, [r7, #2]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d102      	bne.n	8002d4e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_PCD_EP_Open+0xa6>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e00e      	b.n	8002d7a <HAL_PCD_EP_Open+0xc4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 f818 	bl	8004da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	da0e      	bge.n	8002db4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4413      	add	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	705a      	strb	r2, [r3, #1]
 8002db2:	e00e      	b.n	8002dd2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 0207 	and.w	r2, r3, #7
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_PCD_EP_Close+0x6a>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e00e      	b.n	8002e0a <HAL_PCD_EP_Close+0x88>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68f9      	ldr	r1, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 fb3a 	bl	8005474 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 0207 	and.w	r2, r3, #7
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f002 fcec 	bl	800584c <USB_EPStartXfer>
 8002e74:	e005      	b.n	8002e82 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6979      	ldr	r1, [r7, #20]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f002 fce5 	bl	800584c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed8:	7afb      	ldrb	r3, [r7, #11]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ee4:	7afb      	ldrb	r3, [r7, #11]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fca9 	bl	800584c <USB_EPStartXfer>
 8002efa:	e005      	b.n	8002f08 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6979      	ldr	r1, [r7, #20]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f002 fca2 	bl	800584c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	f003 0207 	and.w	r2, r3, #7
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d901      	bls.n	8002f30 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e04c      	b.n	8002fca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da0e      	bge.n	8002f56 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f38:	78fb      	ldrb	r3, [r7, #3]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	705a      	strb	r2, [r3, #1]
 8002f54:	e00c      	b.n	8002f70 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	4413      	add	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_PCD_EP_SetStall+0x7e>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e01c      	b.n	8002fca <HAL_PCD_EP_SetStall+0xb8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fd74 	bl	8006a8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d108      	bne.n	8002fc0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f003 fe99 	bl	8006cf2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 020f 	and.w	r2, r3, #15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d901      	bls.n	8002ff0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e040      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0e      	bge.n	8003016 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0207 	and.w	r2, r3, #7
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	b2da      	uxtb	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_EP_ClrStall+0x82>
 8003050:	2302      	movs	r3, #2
 8003052:	e00e      	b.n	8003072 <HAL_PCD_EP_ClrStall+0xa0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 fd62 	bl	8006b2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08e      	sub	sp, #56	; 0x38
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003082:	e2df      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800308c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800308e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800309a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 8158 	bne.w	8003354 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d152      	bne.n	8003154 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80030ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030be:	81fb      	strh	r3, [r7, #14]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	89fb      	ldrh	r3, [r7, #14]
 80030c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3328      	adds	r3, #40	; 0x28
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	3302      	adds	r3, #2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	441a      	add	r2, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003112:	2100      	movs	r1, #0
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f005 fa64 	bl	80085e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 828e 	beq.w	8003644 <PCD_EP_ISR_Handler+0x5ca>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 8289 	bne.w	8003644 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800313e:	b2da      	uxtb	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b292      	uxth	r2, r2
 8003146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003152:	e277      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003164:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316a:	2b00      	cmp	r3, #0
 800316c:	d034      	beq.n	80031d8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	3306      	adds	r3, #6
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f003 fdef 	bl	8006d90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031be:	4013      	ands	r3, r2
 80031c0:	823b      	strh	r3, [r7, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	8a3a      	ldrh	r2, [r7, #16]
 80031c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031cc:	b292      	uxth	r2, r2
 80031ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f005 f9d9 	bl	8008588 <HAL_PCD_SetupStageCallback>
 80031d6:	e235      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f280 8231 	bge.w	8003644 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80031ee:	4013      	ands	r3, r2
 80031f0:	83bb      	strh	r3, [r7, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	8bba      	ldrh	r2, [r7, #28]
 80031f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031fc:	b292      	uxth	r2, r2
 80031fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	3306      	adds	r3, #6
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	4413      	add	r3, r2
 800321e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d019      	beq.n	8003268 <PCD_EP_ISR_Handler+0x1ee>
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d015      	beq.n	8003268 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	6959      	ldr	r1, [r3, #20]
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800324c:	b29b      	uxth	r3, r3
 800324e:	f003 fd9f 	bl	8006d90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	441a      	add	r2, r3
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003260:	2100      	movs	r1, #0
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f005 f9a2 	bl	80085ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003276:	b29b      	uxth	r3, r3
 8003278:	461a      	mov	r2, r3
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d112      	bne.n	80032b6 <PCD_EP_ISR_Handler+0x23c>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	881b      	ldrh	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800329a:	b29a      	uxth	r2, r3
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	e02f      	b.n	8003316 <PCD_EP_ISR_Handler+0x29c>
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b3e      	cmp	r3, #62	; 0x3e
 80032bc:	d813      	bhi.n	80032e6 <PCD_EP_ISR_Handler+0x26c>
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	633b      	str	r3, [r7, #48]	; 0x30
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <PCD_EP_ISR_Handler+0x25e>
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	3301      	adds	r3, #1
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	b29b      	uxth	r3, r3
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	b29a      	uxth	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	e017      	b.n	8003316 <PCD_EP_ISR_Handler+0x29c>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d102      	bne.n	8003300 <PCD_EP_ISR_Handler+0x286>
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	3b01      	subs	r3, #1
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	b29b      	uxth	r3, r3
 8003304:	029b      	lsls	r3, r3, #10
 8003306:	b29b      	uxth	r3, r3
 8003308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800330c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003310:	b29a      	uxth	r2, r3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	827b      	strh	r3, [r7, #18]
 8003328:	8a7b      	ldrh	r3, [r7, #18]
 800332a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800332e:	827b      	strh	r3, [r7, #18]
 8003330:	8a7b      	ldrh	r3, [r7, #18]
 8003332:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003336:	827b      	strh	r3, [r7, #18]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	8a7b      	ldrh	r3, [r7, #18]
 800333e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334e:	b29b      	uxth	r3, r3
 8003350:	8013      	strh	r3, [r2, #0]
 8003352:	e177      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003366:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800336a:	2b00      	cmp	r3, #0
 800336c:	f280 80ea 	bge.w	8003544 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	b29a      	uxth	r2, r3
 8003382:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003386:	4013      	ands	r3, r2
 8003388:	853b      	strh	r3, [r7, #40]	; 0x28
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800339a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800339e:	b292      	uxth	r2, r2
 80033a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	7b1b      	ldrb	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d122      	bne.n	8003406 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	3306      	adds	r3, #6
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6812      	ldr	r2, [r2, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80033ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8087 	beq.w	8003500 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	6959      	ldr	r1, [r3, #20]
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	88da      	ldrh	r2, [r3, #6]
 80033fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003400:	f003 fcc6 	bl	8006d90 <USB_ReadPMA>
 8003404:	e07c      	b.n	8003500 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d108      	bne.n	8003420 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800340e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003410:	461a      	mov	r2, r3
 8003412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f923 	bl	8003660 <HAL_PCD_EP_DB_Receive>
 800341a:	4603      	mov	r3, r0
 800341c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800341e:	e06f      	b.n	8003500 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343a:	847b      	strh	r3, [r7, #34]	; 0x22
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800344c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003458:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800345c:	b29b      	uxth	r3, r3
 800345e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d021      	beq.n	80034be <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003482:	b29b      	uxth	r3, r3
 8003484:	461a      	mov	r2, r3
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	3302      	adds	r3, #2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02a      	beq.n	8003500 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	6959      	ldr	r1, [r3, #20]
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	891a      	ldrh	r2, [r3, #8]
 80034b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034b8:	f003 fc6a 	bl	8006d90 <USB_ReadPMA>
 80034bc:	e020      	b.n	8003500 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	3306      	adds	r3, #6
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80034e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	6959      	ldr	r1, [r3, #20]
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	895a      	ldrh	r2, [r3, #10]
 80034fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034fc:	f003 fc48 	bl	8006d90 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003506:	441a      	add	r2, r3
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003512:	441a      	add	r2, r3
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <PCD_EP_ISR_Handler+0x4b0>
 8003520:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d206      	bcs.n	8003538 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f005 f83b 	bl	80085ac <HAL_PCD_DataOutStageCallback>
 8003536:	e005      	b.n	8003544 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f002 f984 	bl	800584c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003544:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b00      	cmp	r3, #0
 800354c:	d07a      	beq.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800354e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357c:	843b      	strh	r3, [r7, #32]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	8c3b      	ldrh	r3, [r7, #32]
 800358e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003596:	b29b      	uxth	r3, r3
 8003598:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	78db      	ldrb	r3, [r3, #3]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d108      	bne.n	80035b4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d146      	bne.n	8003638 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80035aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d141      	bne.n	8003638 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	3302      	adds	r3, #2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6812      	ldr	r2, [r2, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035dc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	699a      	ldr	r2, [r3, #24]
 80035e2:	8bfb      	ldrh	r3, [r7, #30]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d906      	bls.n	80035f6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	8bfb      	ldrh	r3, [r7, #30]
 80035ee:	1ad2      	subs	r2, r2, r3
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	619a      	str	r2, [r3, #24]
 80035f4:	e002      	b.n	80035fc <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f004 ffe9 	bl	80085e2 <HAL_PCD_DataInStageCallback>
 8003610:	e018      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	8bfb      	ldrh	r3, [r7, #30]
 8003618:	441a      	add	r2, r3
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	69da      	ldr	r2, [r3, #28]
 8003622:	8bfb      	ldrh	r3, [r7, #30]
 8003624:	441a      	add	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003630:	4618      	mov	r0, r3
 8003632:	f002 f90b 	bl	800584c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003636:	e005      	b.n	8003644 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003638:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800363a:	461a      	mov	r2, r3
 800363c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f91b 	bl	800387a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800364c:	b29b      	uxth	r3, r3
 800364e:	b21b      	sxth	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f6ff ad17 	blt.w	8003084 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3738      	adds	r7, #56	; 0x38
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d07e      	beq.n	8003776 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003680:	b29b      	uxth	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	3302      	adds	r3, #2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	8b7b      	ldrh	r3, [r7, #26]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d306      	bcc.n	80036ba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	8b7b      	ldrh	r3, [r7, #26]
 80036b2:	1ad2      	subs	r2, r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	619a      	str	r2, [r3, #24]
 80036b8:	e002      	b.n	80036c0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2200      	movs	r2, #0
 80036be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d123      	bne.n	8003710 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	833b      	strh	r3, [r7, #24]
 80036e4:	8b3b      	ldrh	r3, [r7, #24]
 80036e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036ea:	833b      	strh	r3, [r7, #24]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	441a      	add	r2, r3
 80036fa:	8b3b      	ldrh	r3, [r7, #24]
 80036fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370c:	b29b      	uxth	r3, r3
 800370e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01f      	beq.n	800375a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003734:	82fb      	strh	r3, [r7, #22]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	441a      	add	r2, r3
 8003744:	8afb      	ldrh	r3, [r7, #22]
 8003746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003756:	b29b      	uxth	r3, r3
 8003758:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800375a:	8b7b      	ldrh	r3, [r7, #26]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8087 	beq.w	8003870 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6959      	ldr	r1, [r3, #20]
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	891a      	ldrh	r2, [r3, #8]
 800376e:	8b7b      	ldrh	r3, [r7, #26]
 8003770:	f003 fb0e 	bl	8006d90 <USB_ReadPMA>
 8003774:	e07c      	b.n	8003870 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	3306      	adds	r3, #6
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800379e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	699a      	ldr	r2, [r3, #24]
 80037a4:	8b7b      	ldrh	r3, [r7, #26]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d306      	bcc.n	80037b8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	8b7b      	ldrh	r3, [r7, #26]
 80037b0:	1ad2      	subs	r2, r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	619a      	str	r2, [r3, #24]
 80037b6:	e002      	b.n	80037be <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d123      	bne.n	800380e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e0:	83fb      	strh	r3, [r7, #30]
 80037e2:	8bfb      	ldrh	r3, [r7, #30]
 80037e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037e8:	83fb      	strh	r3, [r7, #30]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	441a      	add	r2, r3
 80037f8:	8bfb      	ldrh	r3, [r7, #30]
 80037fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800380a:	b29b      	uxth	r3, r3
 800380c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d11f      	bne.n	8003858 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	83bb      	strh	r3, [r7, #28]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	8bbb      	ldrh	r3, [r7, #28]
 8003844:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003848:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800384c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003850:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003854:	b29b      	uxth	r3, r3
 8003856:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003858:	8b7b      	ldrh	r3, [r7, #26]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6959      	ldr	r1, [r3, #20]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	895a      	ldrh	r2, [r3, #10]
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	f003 fa90 	bl	8006d90 <USB_ReadPMA>
    }
  }

  return count;
 8003870:	8b7b      	ldrh	r3, [r7, #26]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b092      	sub	sp, #72	; 0x48
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8132 	beq.w	8003af8 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389c:	b29b      	uxth	r3, r3
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	3302      	adds	r3, #2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038bc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d906      	bls.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	619a      	str	r2, [r3, #24]
 80038d4:	e002      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d12c      	bne.n	800393e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f004 fe79 	bl	80085e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 822f 	beq.w	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003916:	827b      	strh	r3, [r7, #18]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	8a7b      	ldrh	r3, [r7, #18]
 8003928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800392c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]
 800393c:	e20d      	b.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01f      	beq.n	8003988 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	441a      	add	r2, r3
 8003972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003974:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003978:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	b29b      	uxth	r3, r3
 8003986:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 81e3 	bne.w	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800399a:	441a      	add	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039a6:	441a      	add	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d309      	bcc.n	80039cc <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	621a      	str	r2, [r3, #32]
 80039ca:	e014      	b.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 80039d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039d6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80039e0:	e009      	b.n	80039f6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d155      	bne.n	8003aaa <HAL_PCD_EP_DB_Transmit+0x230>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	011a      	lsls	r2, r3, #4
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d112      	bne.n	8003a52 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	e047      	b.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x268>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	2b3e      	cmp	r3, #62	; 0x3e
 8003a56:	d811      	bhi.n	8003a7c <HAL_PCD_EP_DB_Transmit+0x202>
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	029b      	lsls	r3, r3, #10
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	e032      	b.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x268>
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x218>
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	029b      	lsls	r3, r3, #10
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	e01b      	b.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x268>
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d117      	bne.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x268>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	623b      	str	r3, [r7, #32]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	011a      	lsls	r2, r3, #4
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6959      	ldr	r1, [r3, #20]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	891a      	ldrh	r2, [r3, #8]
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f003 f909 	bl	8006d08 <USB_WritePMA>
 8003af6:	e130      	b.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3306      	adds	r3, #6
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d306      	bcc.n	8003b3a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	619a      	str	r2, [r3, #24]
 8003b38:	e002      	b.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d12c      	bne.n	8003ba2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f004 fd47 	bl	80085e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f040 80fd 	bne.w	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]
 8003ba0:	e0db      	b.n	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d11f      	bne.n	8003bec <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	441a      	add	r2, r3
 8003bd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f040 80b1 	bne.w	8003d5a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003bfe:	441a      	add	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c0a:	441a      	add	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d309      	bcc.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c28:	1ad2      	subs	r2, r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	621a      	str	r2, [r3, #32]
 8003c2e:	e014      	b.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c44:	e009      	b.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	785b      	ldrb	r3, [r3, #1]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d155      	bne.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c7c:	4413      	add	r3, r2
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	011a      	lsls	r2, r3, #4
 8003c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c88:	4413      	add	r3, r2
 8003c8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d112      	bne.n	8003cbc <HAL_PCD_EP_DB_Transmit+0x442>
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb8:	801a      	strh	r2, [r3, #0]
 8003cba:	e044      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003cc0:	d811      	bhi.n	8003ce6 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	e02f      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cee:	f003 031f 	and.w	r3, r3, #31
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_PCD_EP_DB_Transmit+0x482>
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	e018      	b.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d114      	bne.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	4413      	add	r3, r2
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	011a      	lsls	r2, r3, #4
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	4413      	add	r3, r2
 8003d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6959      	ldr	r1, [r3, #20]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	895a      	ldrh	r2, [r3, #10]
 8003d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f002 ffd7 	bl	8006d08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d74:	823b      	strh	r3, [r7, #16]
 8003d76:	8a3b      	ldrh	r3, [r7, #16]
 8003d78:	f083 0310 	eor.w	r3, r3, #16
 8003d7c:	823b      	strh	r3, [r7, #16]
 8003d7e:	8a3b      	ldrh	r3, [r7, #16]
 8003d80:	f083 0320 	eor.w	r3, r3, #32
 8003d84:	823b      	strh	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	441a      	add	r2, r3
 8003d94:	8a3b      	ldrh	r3, [r7, #16]
 8003d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3748      	adds	r7, #72	; 0x48
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd2:	897b      	ldrh	r3, [r7, #10]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	e009      	b.n	8003dfe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dea:	897a      	ldrh	r2, [r7, #10]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dfe:	893b      	ldrh	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d107      	bne.n	8003e14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2200      	movs	r2, #0
 8003e08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	80da      	strh	r2, [r3, #6]
 8003e12:	e00b      	b.n	8003e2c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2201      	movs	r2, #1
 8003e18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e26c      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 8087 	beq.w	8003f66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e58:	4b92      	ldr	r3, [pc, #584]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d00c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e64:	4b8f      	ldr	r3, [pc, #572]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d112      	bne.n	8003e96 <HAL_RCC_OscConfig+0x5e>
 8003e70:	4b8c      	ldr	r3, [pc, #560]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7e:	4b89      	ldr	r3, [pc, #548]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d06c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x12c>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d168      	bne.n	8003f64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e246      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9e:	d106      	bne.n	8003eae <HAL_RCC_OscConfig+0x76>
 8003ea0:	4b80      	ldr	r3, [pc, #512]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7f      	ldr	r2, [pc, #508]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	e02e      	b.n	8003f0c <HAL_RCC_OscConfig+0xd4>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x98>
 8003eb6:	4b7b      	ldr	r3, [pc, #492]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a7a      	ldr	r2, [pc, #488]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b78      	ldr	r3, [pc, #480]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a77      	ldr	r2, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e01d      	b.n	8003f0c <HAL_RCC_OscConfig+0xd4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xbc>
 8003eda:	4b72      	ldr	r3, [pc, #456]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a71      	ldr	r2, [pc, #452]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b6f      	ldr	r3, [pc, #444]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6e      	ldr	r2, [pc, #440]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e00b      	b.n	8003f0c <HAL_RCC_OscConfig+0xd4>
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	4b68      	ldr	r3, [pc, #416]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a67      	ldr	r2, [pc, #412]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d013      	beq.n	8003f3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fd ff48 	bl	8001da8 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f1c:	f7fd ff44 	bl	8001da8 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b64      	cmp	r3, #100	; 0x64
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e1fa      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0xe4>
 8003f3a:	e014      	b.n	8003f66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fd ff34 	bl	8001da8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f44:	f7fd ff30 	bl	8001da8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1e6      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f56:	4b53      	ldr	r3, [pc, #332]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x10c>
 8003f62:	e000      	b.n	8003f66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d063      	beq.n	800403a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f72:	4b4c      	ldr	r3, [pc, #304]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f7e:	4b49      	ldr	r3, [pc, #292]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 030c 	and.w	r3, r3, #12
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d11c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x18c>
 8003f8a:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f96:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_RCC_OscConfig+0x176>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e1ba      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fae:	4b3d      	ldr	r3, [pc, #244]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4939      	ldr	r1, [pc, #228]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	e03a      	b.n	800403a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d020      	beq.n	800400e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fcc:	4b36      	ldr	r3, [pc, #216]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd2:	f7fd fee9 	bl	8001da8 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fd fee5 	bl	8001da8 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e19b      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4927      	ldr	r1, [pc, #156]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	600b      	str	r3, [r1, #0]
 800400c:	e015      	b.n	800403a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <HAL_RCC_OscConfig+0x270>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd fec8 	bl	8001da8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800401c:	f7fd fec4 	bl	8001da8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e17a      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d03a      	beq.n	80040bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d019      	beq.n	8004082 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <HAL_RCC_OscConfig+0x274>)
 8004050:	2201      	movs	r2, #1
 8004052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fd fea8 	bl	8001da8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800405c:	f7fd fea4 	bl	8001da8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e15a      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_RCC_OscConfig+0x26c>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800407a:	2001      	movs	r0, #1
 800407c:	f000 faa8 	bl	80045d0 <RCC_Delay>
 8004080:	e01c      	b.n	80040bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004082:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <HAL_RCC_OscConfig+0x274>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004088:	f7fd fe8e 	bl	8001da8 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800408e:	e00f      	b.n	80040b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004090:	f7fd fe8a 	bl	8001da8 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d908      	bls.n	80040b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e140      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000
 80040a8:	42420000 	.word	0x42420000
 80040ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	4b9e      	ldr	r3, [pc, #632]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e9      	bne.n	8004090 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80a6 	beq.w	8004216 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ce:	4b97      	ldr	r3, [pc, #604]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10d      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	4b94      	ldr	r3, [pc, #592]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4a93      	ldr	r2, [pc, #588]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	61d3      	str	r3, [r2, #28]
 80040e6:	4b91      	ldr	r3, [pc, #580]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	60bb      	str	r3, [r7, #8]
 80040f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <HAL_RCC_OscConfig+0x4f8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d118      	bne.n	8004134 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004102:	4b8b      	ldr	r3, [pc, #556]	; (8004330 <HAL_RCC_OscConfig+0x4f8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a8a      	ldr	r2, [pc, #552]	; (8004330 <HAL_RCC_OscConfig+0x4f8>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800410e:	f7fd fe4b 	bl	8001da8 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fd fe47 	bl	8001da8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b64      	cmp	r3, #100	; 0x64
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0fd      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004128:	4b81      	ldr	r3, [pc, #516]	; (8004330 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x312>
 800413c:	4b7b      	ldr	r3, [pc, #492]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a7a      	ldr	r2, [pc, #488]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6213      	str	r3, [r2, #32]
 8004148:	e02d      	b.n	80041a6 <HAL_RCC_OscConfig+0x36e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x334>
 8004152:	4b76      	ldr	r3, [pc, #472]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a75      	ldr	r2, [pc, #468]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	4b73      	ldr	r3, [pc, #460]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a72      	ldr	r2, [pc, #456]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	6213      	str	r3, [r2, #32]
 800416a:	e01c      	b.n	80041a6 <HAL_RCC_OscConfig+0x36e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d10c      	bne.n	800418e <HAL_RCC_OscConfig+0x356>
 8004174:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	4a6c      	ldr	r2, [pc, #432]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6213      	str	r3, [r2, #32]
 8004180:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	4a69      	ldr	r2, [pc, #420]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	6213      	str	r3, [r2, #32]
 800418c:	e00b      	b.n	80041a6 <HAL_RCC_OscConfig+0x36e>
 800418e:	4b67      	ldr	r3, [pc, #412]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	4a66      	ldr	r2, [pc, #408]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	6213      	str	r3, [r2, #32]
 800419a:	4b64      	ldr	r3, [pc, #400]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4a63      	ldr	r2, [pc, #396]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	f023 0304 	bic.w	r3, r3, #4
 80041a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d015      	beq.n	80041da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ae:	f7fd fdfb 	bl	8001da8 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd fdf7 	bl	8001da8 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e0ab      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041cc:	4b57      	ldr	r3, [pc, #348]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ee      	beq.n	80041b6 <HAL_RCC_OscConfig+0x37e>
 80041d8:	e014      	b.n	8004204 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7fd fde5 	bl	8001da8 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fde1 	bl	8001da8 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e095      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f8:	4b4c      	ldr	r3, [pc, #304]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ee      	bne.n	80041e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d105      	bne.n	8004216 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800420a:	4b48      	ldr	r3, [pc, #288]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4a47      	ldr	r2, [pc, #284]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004214:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8081 	beq.w	8004322 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004220:	4b42      	ldr	r3, [pc, #264]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 030c 	and.w	r3, r3, #12
 8004228:	2b08      	cmp	r3, #8
 800422a:	d061      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d146      	bne.n	80042c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b3f      	ldr	r3, [pc, #252]	; (8004334 <HAL_RCC_OscConfig+0x4fc>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423a:	f7fd fdb5 	bl	8001da8 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004242:	f7fd fdb1 	bl	8001da8 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e067      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004254:	4b35      	ldr	r3, [pc, #212]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d108      	bne.n	800427c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800426a:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	492d      	ldr	r1, [pc, #180]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427c:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a19      	ldr	r1, [r3, #32]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	430b      	orrs	r3, r1
 800428e:	4927      	ldr	r1, [pc, #156]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004294:	4b27      	ldr	r3, [pc, #156]	; (8004334 <HAL_RCC_OscConfig+0x4fc>)
 8004296:	2201      	movs	r2, #1
 8004298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd fd85 	bl	8001da8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fd fd81 	bl	8001da8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e037      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042b4:	4b1d      	ldr	r3, [pc, #116]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x46a>
 80042c0:	e02f      	b.n	8004322 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <HAL_RCC_OscConfig+0x4fc>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fd fd6e 	bl	8001da8 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d0:	f7fd fd6a 	bl	8001da8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e020      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1f0      	bne.n	80042d0 <HAL_RCC_OscConfig+0x498>
 80042ee:	e018      	b.n	8004322 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e013      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	429a      	cmp	r2, r3
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	40007000 	.word	0x40007000
 8004334:	42420060 	.word	0x42420060

08004338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e0d0      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800434c:	4b6a      	ldr	r3, [pc, #424]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d910      	bls.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435a:	4b67      	ldr	r3, [pc, #412]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f023 0207 	bic.w	r2, r3, #7
 8004362:	4965      	ldr	r1, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800439e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80043b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d040      	beq.n	8004458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d115      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d107      	bne.n	8004406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f6:	4b41      	ldr	r3, [pc, #260]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e073      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e06b      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004416:	4b39      	ldr	r3, [pc, #228]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f023 0203 	bic.w	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	4936      	ldr	r1, [pc, #216]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004428:	f7fd fcbe 	bl	8001da8 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	e00a      	b.n	8004446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004430:	f7fd fcba 	bl	8001da8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	f241 3288 	movw	r2, #5000	; 0x1388
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e053      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004446:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 020c 	and.w	r2, r3, #12
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	429a      	cmp	r2, r3
 8004456:	d1eb      	bne.n	8004430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004458:	4b27      	ldr	r3, [pc, #156]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d210      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f023 0207 	bic.w	r2, r3, #7
 800446e:	4922      	ldr	r1, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1c0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4601      	mov	r1, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c8>)
 80044d8:	5cd3      	ldrb	r3, [r2, r3]
 80044da:	fa21 f303 	lsr.w	r3, r1, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1cc>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1d0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fc1c 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40022000 	.word	0x40022000
 80044fc:	40021000 	.word	0x40021000
 8004500:	08008c04 	.word	0x08008c04
 8004504:	20000004 	.word	0x20000004
 8004508:	20000008 	.word	0x20000008

0800450c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b490      	push	{r4, r7}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004512:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004514:	1d3c      	adds	r4, r7, #4
 8004516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004518:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800451c:	4b28      	ldr	r3, [pc, #160]	; (80045c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	2300      	movs	r3, #0
 8004530:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004536:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	2b04      	cmp	r3, #4
 8004544:	d002      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004546:	2b08      	cmp	r3, #8
 8004548:	d003      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x46>
 800454a:	e02d      	b.n	80045a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800454c:	4b1e      	ldr	r3, [pc, #120]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800454e:	623b      	str	r3, [r7, #32]
      break;
 8004550:	e02d      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	0c9b      	lsrs	r3, r3, #18
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800455e:	4413      	add	r3, r2
 8004560:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004564:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	0c5b      	lsrs	r3, r3, #17
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800457e:	4413      	add	r3, r2
 8004580:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004584:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800458a:	fb02 f203 	mul.w	r2, r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	e004      	b.n	80045a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	4a0c      	ldr	r2, [pc, #48]	; (80045cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	623b      	str	r3, [r7, #32]
      break;
 80045a6:	e002      	b.n	80045ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b07      	ldr	r3, [pc, #28]	; (80045c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045aa:	623b      	str	r3, [r7, #32]
      break;
 80045ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ae:	6a3b      	ldr	r3, [r7, #32]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3728      	adds	r7, #40	; 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bc90      	pop	{r4, r7}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	08008aac 	.word	0x08008aac
 80045c0:	08008abc 	.word	0x08008abc
 80045c4:	40021000 	.word	0x40021000
 80045c8:	007a1200 	.word	0x007a1200
 80045cc:	003d0900 	.word	0x003d0900

080045d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <RCC_Delay+0x34>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <RCC_Delay+0x38>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0a5b      	lsrs	r3, r3, #9
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045ec:	bf00      	nop
  }
  while (Delay --);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	60fa      	str	r2, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f9      	bne.n	80045ec <RCC_Delay+0x1c>
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000004 	.word	0x20000004
 8004608:	10624dd3 	.word	0x10624dd3

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d07d      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004628:	2300      	movs	r3, #0
 800462a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462c:	4b4f      	ldr	r3, [pc, #316]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10d      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004638:	4b4c      	ldr	r3, [pc, #304]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	4a4b      	ldr	r2, [pc, #300]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004642:	61d3      	str	r3, [r2, #28]
 8004644:	4b49      	ldr	r3, [pc, #292]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004654:	4b46      	ldr	r3, [pc, #280]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d118      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a42      	ldr	r2, [pc, #264]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466c:	f7fd fb9c 	bl	8001da8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004672:	e008      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004674:	f7fd fb98 	bl	8001da8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e06d      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	4b3a      	ldr	r3, [pc, #232]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004692:	4b36      	ldr	r3, [pc, #216]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d02e      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d027      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b0:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ba:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b2c      	ldr	r3, [pc, #176]	; (8004774 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046c6:	4a29      	ldr	r2, [pc, #164]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d014      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fd fb67 	bl	8001da8 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fd fb63 	bl	8001da8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e036      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	4b1d      	ldr	r3, [pc, #116]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f6:	6a1b      	ldr	r3, [r3, #32]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004700:	4b1a      	ldr	r3, [pc, #104]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4917      	ldr	r1, [pc, #92]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470e:	4313      	orrs	r3, r2
 8004710:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004712:	7dfb      	ldrb	r3, [r7, #23]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d105      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4a13      	ldr	r2, [pc, #76]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004722:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	490b      	ldr	r1, [pc, #44]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473e:	4313      	orrs	r3, r2
 8004740:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000
 8004770:	40007000 	.word	0x40007000
 8004774:	42420440 	.word	0x42420440

08004778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e041      	b.n	800480e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d106      	bne.n	80047a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fd fa66 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f000 f930 	bl	8004a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
	...

08004818 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b01      	cmp	r3, #1
 800482a:	d001      	beq.n	8004830 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e032      	b.n	8004896 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <HAL_TIM_Base_Start+0x88>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_Base_Start+0x48>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d009      	beq.n	8004860 <HAL_TIM_Base_Start+0x48>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <HAL_TIM_Base_Start+0x8c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_Base_Start+0x48>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_TIM_Base_Start+0x90>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d010      	beq.n	8004894 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	e007      	b.n	8004894 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800

080048ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIM_ConfigClockSource+0x18>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e0a6      	b.n	8004a12 <HAL_TIM_ConfigClockSource+0x166>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b40      	cmp	r3, #64	; 0x40
 80048fa:	d067      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0x120>
 80048fc:	2b40      	cmp	r3, #64	; 0x40
 80048fe:	d80b      	bhi.n	8004918 <HAL_TIM_ConfigClockSource+0x6c>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d073      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0x140>
 8004904:	2b10      	cmp	r3, #16
 8004906:	d802      	bhi.n	800490e <HAL_TIM_ConfigClockSource+0x62>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d06f      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800490c:	e078      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800490e:	2b20      	cmp	r3, #32
 8004910:	d06c      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0x140>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d06a      	beq.n	80049ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004916:	e073      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004918:	2b70      	cmp	r3, #112	; 0x70
 800491a:	d00d      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0x8c>
 800491c:	2b70      	cmp	r3, #112	; 0x70
 800491e:	d804      	bhi.n	800492a <HAL_TIM_ConfigClockSource+0x7e>
 8004920:	2b50      	cmp	r3, #80	; 0x50
 8004922:	d033      	beq.n	800498c <HAL_TIM_ConfigClockSource+0xe0>
 8004924:	2b60      	cmp	r3, #96	; 0x60
 8004926:	d041      	beq.n	80049ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004928:	e06a      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800492a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492e:	d066      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x152>
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	d017      	beq.n	8004966 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004936:	e063      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6899      	ldr	r1, [r3, #8]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f000 f941 	bl	8004bce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800495a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	609a      	str	r2, [r3, #8]
      break;
 8004964:	e04c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6899      	ldr	r1, [r3, #8]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f000 f92a 	bl	8004bce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004988:	609a      	str	r2, [r3, #8]
      break;
 800498a:	e039      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	461a      	mov	r2, r3
 800499a:	f000 f8a1 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2150      	movs	r1, #80	; 0x50
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f8f8 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049aa:	e029      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	6859      	ldr	r1, [r3, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	461a      	mov	r2, r3
 80049ba:	f000 f8bf 	bl	8004b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2160      	movs	r1, #96	; 0x60
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 f8e8 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049ca:	e019      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	461a      	mov	r2, r3
 80049da:	f000 f881 	bl	8004ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2140      	movs	r1, #64	; 0x40
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 f8d8 	bl	8004b9a <TIM_ITRx_SetConfig>
      break;
 80049ea:	e009      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 f8cf 	bl	8004b9a <TIM_ITRx_SetConfig>
        break;
 80049fc:	e000      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
	...

08004a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <TIM_Base_SetConfig+0xb8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00b      	beq.n	8004a4c <TIM_Base_SetConfig+0x30>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3a:	d007      	beq.n	8004a4c <TIM_Base_SetConfig+0x30>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a26      	ldr	r2, [pc, #152]	; (8004ad8 <TIM_Base_SetConfig+0xbc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d003      	beq.n	8004a4c <TIM_Base_SetConfig+0x30>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a25      	ldr	r2, [pc, #148]	; (8004adc <TIM_Base_SetConfig+0xc0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d108      	bne.n	8004a5e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <TIM_Base_SetConfig+0xb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <TIM_Base_SetConfig+0x62>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6c:	d007      	beq.n	8004a7e <TIM_Base_SetConfig+0x62>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <TIM_Base_SetConfig+0xbc>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d003      	beq.n	8004a7e <TIM_Base_SetConfig+0x62>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a18      	ldr	r2, [pc, #96]	; (8004adc <TIM_Base_SetConfig+0xc0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d108      	bne.n	8004a90 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <TIM_Base_SetConfig+0xb8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d103      	bne.n	8004ac4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	615a      	str	r2, [r3, #20]
}
 8004aca:	bf00      	nop
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800

08004ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	f023 0201 	bic.w	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f023 030a 	bic.w	r3, r3, #10
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f023 0210 	bic.w	r2, r3, #16
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	031b      	lsls	r3, r3, #12
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	621a      	str	r2, [r3, #32]
}
 8004b90:	bf00      	nop
 8004b92:	371c      	adds	r7, #28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr

08004b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f043 0307 	orr.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	609a      	str	r2, [r3, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr

08004bce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b087      	sub	sp, #28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004be8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	609a      	str	r2, [r3, #8]
}
 8004c02:	bf00      	nop
 8004c04:	371c      	adds	r7, #28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bc80      	pop	{r7}
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e046      	b.n	8004cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00e      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c70:	d009      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10c      	bne.n	8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800

08004cc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cc8:	b084      	sub	sp, #16
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	f107 0014 	add.w	r0, r7, #20
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	b004      	add	sp, #16
 8004ce6:	4770      	bx	lr

08004ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cf8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cfc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d1c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4013      	ands	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d60:	b084      	sub	sp, #16
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	f107 0014 	add.w	r0, r7, #20
 8004d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	b004      	add	sp, #16
 8004d9e:	4770      	bx	lr

08004da0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b09b      	sub	sp, #108	; 0x6c
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d81f      	bhi.n	8004e12 <USB_ActivateEndpoint+0x72>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <USB_ActivateEndpoint+0x38>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004de9 	.word	0x08004de9
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e1b 	.word	0x08004e1b
 8004de4:	08004df7 	.word	0x08004df7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004de8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004df0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004df4:	e012      	b.n	8004e1c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004df6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004dfa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004dfe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e02:	e00b      	b.n	8004e1c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004e10:	e004      	b.n	8004e1c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004e18:	e000      	b.n	8004e1c <USB_ActivateEndpoint+0x7c>
      break;
 8004e1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	441a      	add	r2, r3
 8004e26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	441a      	add	r2, r3
 8004e6c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	7b1b      	ldrb	r3, [r3, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 8149 	bne.w	8005120 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	785b      	ldrb	r3, [r3, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 8084 	beq.w	8004fa0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	011a      	lsls	r2, r3, #4
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	88db      	ldrh	r3, [r3, #6]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	81fb      	strh	r3, [r7, #14]
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <USB_ActivateEndpoint+0x17c>
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	81bb      	strh	r3, [r7, #12]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	441a      	add	r2, r3
 8004f06:	89bb      	ldrh	r3, [r7, #12]
 8004f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	78db      	ldrb	r3, [r3, #3]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d020      	beq.n	8004f66 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3a:	813b      	strh	r3, [r7, #8]
 8004f3c:	893b      	ldrh	r3, [r7, #8]
 8004f3e:	f083 0320 	eor.w	r3, r3, #32
 8004f42:	813b      	strh	r3, [r7, #8]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	441a      	add	r2, r3
 8004f4e:	893b      	ldrh	r3, [r7, #8]
 8004f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8013      	strh	r3, [r2, #0]
 8004f64:	e27f      	b.n	8005466 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	817b      	strh	r3, [r7, #10]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	897b      	ldrh	r3, [r7, #10]
 8004f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	8013      	strh	r3, [r2, #0]
 8004f9e:	e262      	b.n	8005466 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	4413      	add	r3, r2
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	011a      	lsls	r2, r3, #4
 8004fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	88db      	ldrh	r3, [r3, #6]
 8004fc8:	085b      	lsrs	r3, r3, #1
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	4413      	add	r3, r2
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	011a      	lsls	r2, r3, #4
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d112      	bne.n	8005026 <USB_ActivateEndpoint+0x286>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	b29b      	uxth	r3, r3
 8005006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800500a:	b29a      	uxth	r2, r3
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501e:	b29a      	uxth	r2, r3
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e02f      	b.n	8005086 <USB_ActivateEndpoint+0x2e6>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b3e      	cmp	r3, #62	; 0x3e
 800502c:	d813      	bhi.n	8005056 <USB_ActivateEndpoint+0x2b6>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	085b      	lsrs	r3, r3, #1
 8005034:	663b      	str	r3, [r7, #96]	; 0x60
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <USB_ActivateEndpoint+0x2a8>
 8005042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005044:	3301      	adds	r3, #1
 8005046:	663b      	str	r3, [r7, #96]	; 0x60
 8005048:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800504a:	b29b      	uxth	r3, r3
 800504c:	029b      	lsls	r3, r3, #10
 800504e:	b29a      	uxth	r2, r3
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e017      	b.n	8005086 <USB_ActivateEndpoint+0x2e6>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	663b      	str	r3, [r7, #96]	; 0x60
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2b00      	cmp	r3, #0
 8005068:	d102      	bne.n	8005070 <USB_ActivateEndpoint+0x2d0>
 800506a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800506c:	3b01      	subs	r3, #1
 800506e:	663b      	str	r3, [r7, #96]	; 0x60
 8005070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005072:	b29b      	uxth	r3, r3
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	83fb      	strh	r3, [r7, #30]
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01b      	beq.n	80050d6 <USB_ActivateEndpoint+0x336>
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	83bb      	strh	r3, [r7, #28]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	8bbb      	ldrh	r3, [r7, #28]
 80050c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	837b      	strh	r3, [r7, #26]
 80050ee:	8b7b      	ldrh	r3, [r7, #26]
 80050f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80050f4:	837b      	strh	r3, [r7, #26]
 80050f6:	8b7b      	ldrh	r3, [r7, #26]
 80050f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80050fc:	837b      	strh	r3, [r7, #26]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	8b7b      	ldrh	r3, [r7, #26]
 800510a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]
 800511e:	e1a2      	b.n	8005466 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005136:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005166:	b29b      	uxth	r3, r3
 8005168:	461a      	mov	r2, r3
 800516a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800516c:	4413      	add	r3, r2
 800516e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	011a      	lsls	r2, r3, #4
 8005176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005178:	4413      	add	r3, r2
 800517a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	891b      	ldrh	r3, [r3, #8]
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	b29b      	uxth	r3, r3
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800518e:	801a      	strh	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	653b      	str	r3, [r7, #80]	; 0x50
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a0:	4413      	add	r3, r2
 80051a2:	653b      	str	r3, [r7, #80]	; 0x50
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	011a      	lsls	r2, r3, #4
 80051aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80051b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	895b      	ldrh	r3, [r3, #10]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 8091 	bne.w	80052f0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80051dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80051de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01b      	beq.n	800521e <USB_ActivateEndpoint+0x47e>
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	441a      	add	r2, r3
 8005208:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800520a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800520e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	b29b      	uxth	r3, r3
 800521c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	873b      	strh	r3, [r7, #56]	; 0x38
 800522c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <USB_ActivateEndpoint+0x4ce>
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	441a      	add	r2, r3
 8005258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800525a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005266:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800526a:	b29b      	uxth	r3, r3
 800526c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005286:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800528c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800528e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005290:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005294:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	441a      	add	r2, r3
 80052a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052cc:	867b      	strh	r3, [r7, #50]	; 0x32
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	441a      	add	r2, r3
 80052d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
 80052ee:	e0ba      	b.n	8005466 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005300:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01d      	beq.n	8005348 <USB_ActivateEndpoint+0x5a8>
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01d      	beq.n	80053a0 <USB_ActivateEndpoint+0x600>
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b29b      	uxth	r3, r3
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	441a      	add	r2, r3
 8005388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005398:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	78db      	ldrb	r3, [r3, #3]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d024      	beq.n	80053f2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053c6:	f083 0320 	eor.w	r3, r3, #32
 80053ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	441a      	add	r2, r3
 80053d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]
 80053f0:	e01d      	b.n	800542e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	b29b      	uxth	r3, r3
 8005400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005408:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005466:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800546a:	4618      	mov	r0, r3
 800546c:	376c      	adds	r7, #108	; 0x6c
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005474:	b480      	push	{r7}
 8005476:	b08d      	sub	sp, #52	; 0x34
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	7b1b      	ldrb	r3, [r3, #12]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 808e 	bne.w	80055a4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d044      	beq.n	800551a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	81bb      	strh	r3, [r7, #12]
 800549e:	89bb      	ldrh	r3, [r7, #12]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01b      	beq.n	80054e0 <USB_DeactivateEndpoint+0x6c>
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054be:	817b      	strh	r3, [r7, #10]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	441a      	add	r2, r3
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054dc:	b29b      	uxth	r3, r3
 80054de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f6:	813b      	strh	r3, [r7, #8]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	441a      	add	r2, r3
 8005502:	893b      	ldrh	r3, [r7, #8]
 8005504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800550c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005514:	b29b      	uxth	r3, r3
 8005516:	8013      	strh	r3, [r2, #0]
 8005518:	e192      	b.n	8005840 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	827b      	strh	r3, [r7, #18]
 8005528:	8a7b      	ldrh	r3, [r7, #18]
 800552a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d01b      	beq.n	800556a <USB_DeactivateEndpoint+0xf6>
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005548:	823b      	strh	r3, [r7, #16]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	441a      	add	r2, r3
 8005554:	8a3b      	ldrh	r3, [r7, #16]
 8005556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800555a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005566:	b29b      	uxth	r3, r3
 8005568:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	b29b      	uxth	r3, r3
 8005578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800557c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005580:	81fb      	strh	r3, [r7, #14]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	89fb      	ldrh	r3, [r7, #14]
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
 80055a2:	e14d      	b.n	8005840 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 80a5 	bne.w	80056f8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	843b      	strh	r3, [r7, #32]
 80055bc:	8c3b      	ldrh	r3, [r7, #32]
 80055be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d01b      	beq.n	80055fe <USB_DeactivateEndpoint+0x18a>
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055dc:	83fb      	strh	r3, [r7, #30]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	441a      	add	r2, r3
 80055e8:	8bfb      	ldrh	r3, [r7, #30]
 80055ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	83bb      	strh	r3, [r7, #28]
 800560c:	8bbb      	ldrh	r3, [r7, #28]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d01b      	beq.n	800564e <USB_DeactivateEndpoint+0x1da>
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	b29b      	uxth	r3, r3
 8005624:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562c:	837b      	strh	r3, [r7, #26]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	441a      	add	r2, r3
 8005638:	8b7b      	ldrh	r3, [r7, #26]
 800563a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005646:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800564a:	b29b      	uxth	r3, r3
 800564c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005664:	833b      	strh	r3, [r7, #24]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	8b3b      	ldrh	r3, [r7, #24]
 8005672:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005676:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800567a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800567e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005682:	b29b      	uxth	r3, r3
 8005684:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	b29b      	uxth	r3, r3
 8005694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569c:	82fb      	strh	r3, [r7, #22]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	441a      	add	r2, r3
 80056a8:	8afb      	ldrh	r3, [r7, #22]
 80056aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	881b      	ldrh	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	82bb      	strh	r3, [r7, #20]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	441a      	add	r2, r3
 80056e0:	8abb      	ldrh	r3, [r7, #20]
 80056e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	8013      	strh	r3, [r2, #0]
 80056f6:	e0a3      	b.n	8005840 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005706:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01b      	beq.n	8005748 <USB_DeactivateEndpoint+0x2d4>
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	441a      	add	r2, r3
 8005732:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005734:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005738:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800573c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005744:	b29b      	uxth	r3, r3
 8005746:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01b      	beq.n	8005798 <USB_DeactivateEndpoint+0x324>
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	853b      	strh	r3, [r7, #40]	; 0x28
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005794:	b29b      	uxth	r3, r3
 8005796:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ae:	84fb      	strh	r3, [r7, #38]	; 0x26
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	441a      	add	r2, r3
 80057f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005804:	b29b      	uxth	r3, r3
 8005806:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	847b      	strh	r3, [r7, #34]	; 0x22
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	441a      	add	r2, r3
 800582a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800582c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800583c:	b29b      	uxth	r3, r3
 800583e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3734      	adds	r7, #52	; 0x34
 8005846:	46bd      	mov	sp, r7
 8005848:	bc80      	pop	{r7}
 800584a:	4770      	bx	lr

0800584c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b0c4      	sub	sp, #272	; 0x110
 8005850:	af00      	add	r7, sp, #0
 8005852:	1d3b      	adds	r3, r7, #4
 8005854:	6018      	str	r0, [r3, #0]
 8005856:	463b      	mov	r3, r7
 8005858:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800585a:	463b      	mov	r3, r7
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b01      	cmp	r3, #1
 8005862:	f040 8557 	bne.w	8006314 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005866:	463b      	mov	r3, r7
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	429a      	cmp	r2, r3
 8005874:	d905      	bls.n	8005882 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005876:	463b      	mov	r3, r7
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005880:	e004      	b.n	800588c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800588c:	463b      	mov	r3, r7
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	7b1b      	ldrb	r3, [r3, #12]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d12c      	bne.n	80058f0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005896:	463b      	mov	r3, r7
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6959      	ldr	r1, [r3, #20]
 800589c:	463b      	mov	r3, r7
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	88da      	ldrh	r2, [r3, #6]
 80058a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1d38      	adds	r0, r7, #4
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	f001 fa2c 	bl	8006d08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058b0:	1d3b      	adds	r3, r7, #4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	1d3b      	adds	r3, r7, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058be:	b29b      	uxth	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4413      	add	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	463b      	mov	r3, r7
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	011a      	lsls	r2, r3, #4
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	f107 0310 	add.w	r3, r7, #16
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	801a      	strh	r2, [r3, #0]
 80058ec:	f000 bcdd 	b.w	80062aa <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058f0:	463b      	mov	r3, r7
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	78db      	ldrb	r3, [r3, #3]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	f040 8347 	bne.w	8005f8a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058fc:	463b      	mov	r3, r7
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	463b      	mov	r3, r7
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	f240 82eb 	bls.w	8005ee4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800590e:	1d3b      	adds	r3, r7, #4
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	463b      	mov	r3, r7
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005928:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800592c:	1d3b      	adds	r3, r7, #4
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	463b      	mov	r3, r7
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800593e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005946:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800594a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594e:	b29b      	uxth	r3, r3
 8005950:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005952:	463b      	mov	r3, r7
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595c:	1ad2      	subs	r2, r2, r3
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005964:	1d3b      	adds	r3, r7, #4
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	463b      	mov	r3, r7
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8159 	beq.w	8005c32 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
 8005986:	463b      	mov	r3, r7
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	785b      	ldrb	r3, [r3, #1]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d164      	bne.n	8005a5a <USB_EPStartXfer+0x20e>
 8005990:	1d3b      	adds	r3, r7, #4
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005996:	1d3b      	adds	r3, r7, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800599e:	b29b      	uxth	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	4413      	add	r3, r2
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	463b      	mov	r3, r7
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	011a      	lsls	r2, r3, #4
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	4413      	add	r3, r2
 80059b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d112      	bne.n	80059e8 <USB_EPStartXfer+0x19c>
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	801a      	strh	r2, [r3, #0]
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e054      	b.n	8005a92 <USB_EPStartXfer+0x246>
 80059e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ec:	2b3e      	cmp	r3, #62	; 0x3e
 80059ee:	d817      	bhi.n	8005a20 <USB_EPStartXfer+0x1d4>
 80059f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80059fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <USB_EPStartXfer+0x1c4>
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	029b      	lsls	r3, r3, #10
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e038      	b.n	8005a92 <USB_EPStartXfer+0x246>
 8005a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <USB_EPStartXfer+0x1f4>
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a56:	801a      	strh	r2, [r3, #0]
 8005a58:	e01b      	b.n	8005a92 <USB_EPStartXfer+0x246>
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d116      	bne.n	8005a92 <USB_EPStartXfer+0x246>
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	4413      	add	r3, r2
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	463b      	mov	r3, r7
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	011a      	lsls	r2, r3, #4
 8005a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a80:	4413      	add	r3, r2
 8005a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a86:	633b      	str	r3, [r7, #48]	; 0x30
 8005a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6959      	ldr	r1, [r3, #20]
 8005aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005aac:	1d38      	adds	r0, r7, #4
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	f001 f92a 	bl	8006d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005abe:	441a      	add	r2, r3
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ac6:	463b      	mov	r3, r7
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d909      	bls.n	8005aea <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005ad6:	463b      	mov	r3, r7
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a1a      	ldr	r2, [r3, #32]
 8005adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ae0:	1ad2      	subs	r2, r2, r3
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	621a      	str	r2, [r3, #32]
 8005ae8:	e008      	b.n	8005afc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2200      	movs	r2, #0
 8005afa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d164      	bne.n	8005bd0 <USB_EPStartXfer+0x384>
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	463b      	mov	r3, r7
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d112      	bne.n	8005b5e <USB_EPStartXfer+0x312>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e057      	b.n	8005c0e <USB_EPStartXfer+0x3c2>
 8005b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	d817      	bhi.n	8005b96 <USB_EPStartXfer+0x34a>
 8005b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <USB_EPStartXfer+0x33a>
 8005b7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e03b      	b.n	8005c0e <USB_EPStartXfer+0x3c2>
 8005b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USB_EPStartXfer+0x36a>
 8005bac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005bb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e01e      	b.n	8005c0e <USB_EPStartXfer+0x3c2>
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d119      	bne.n	8005c0e <USB_EPStartXfer+0x3c2>
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	4413      	add	r3, r2
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	011a      	lsls	r2, r3, #4
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c02:	623b      	str	r3, [r7, #32]
 8005c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6959      	ldr	r1, [r3, #20]
 8005c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c28:	1d38      	adds	r0, r7, #4
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	f001 f86c 	bl	8006d08 <USB_WritePMA>
 8005c30:	e33b      	b.n	80062aa <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d164      	bne.n	8005d06 <USB_EPStartXfer+0x4ba>
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c42:	1d3b      	adds	r3, r7, #4
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c50:	4413      	add	r3, r2
 8005c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	011a      	lsls	r2, r3, #4
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	4413      	add	r3, r2
 8005c60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d112      	bne.n	8005c94 <USB_EPStartXfer+0x448>
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e057      	b.n	8005d44 <USB_EPStartXfer+0x4f8>
 8005c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c98:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9a:	d817      	bhi.n	8005ccc <USB_EPStartXfer+0x480>
 8005c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <USB_EPStartXfer+0x470>
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	029b      	lsls	r3, r3, #10
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	e03b      	b.n	8005d44 <USB_EPStartXfer+0x4f8>
 8005ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <USB_EPStartXfer+0x4a0>
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	029b      	lsls	r3, r3, #10
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	e01e      	b.n	8005d44 <USB_EPStartXfer+0x4f8>
 8005d06:	463b      	mov	r3, r7
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	785b      	ldrb	r3, [r3, #1]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d119      	bne.n	8005d44 <USB_EPStartXfer+0x4f8>
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	657b      	str	r3, [r7, #84]	; 0x54
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d24:	4413      	add	r3, r2
 8005d26:	657b      	str	r3, [r7, #84]	; 0x54
 8005d28:	463b      	mov	r3, r7
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d32:	4413      	add	r3, r2
 8005d34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d38:	653b      	str	r3, [r7, #80]	; 0x50
 8005d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	891b      	ldrh	r3, [r3, #8]
 8005d4a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d4e:	463b      	mov	r3, r7
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6959      	ldr	r1, [r3, #20]
 8005d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d5e:	1d38      	adds	r0, r7, #4
 8005d60:	6800      	ldr	r0, [r0, #0]
 8005d62:	f000 ffd1 	bl	8006d08 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	441a      	add	r2, r3
 8005d72:	463b      	mov	r3, r7
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d78:	463b      	mov	r3, r7
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	463b      	mov	r3, r7
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d909      	bls.n	8005d9c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6a1a      	ldr	r2, [r3, #32]
 8005d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d92:	1ad2      	subs	r2, r2, r3
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	621a      	str	r2, [r3, #32]
 8005d9a:	e008      	b.n	8005dae <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d9c:	463b      	mov	r3, r7
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005da6:	463b      	mov	r3, r7
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44
 8005db4:	463b      	mov	r3, r7
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	785b      	ldrb	r3, [r3, #1]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d164      	bne.n	8005e88 <USB_EPStartXfer+0x63c>
 8005dbe:	1d3b      	adds	r3, r7, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dc4:	1d3b      	adds	r3, r7, #4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	4413      	add	r3, r2
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	011a      	lsls	r2, r3, #4
 8005dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de0:	4413      	add	r3, r2
 8005de2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d112      	bne.n	8005e16 <USB_EPStartXfer+0x5ca>
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	801a      	strh	r2, [r3, #0]
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e054      	b.n	8005ec0 <USB_EPStartXfer+0x674>
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e1c:	d817      	bhi.n	8005e4e <USB_EPStartXfer+0x602>
 8005e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e22:	085b      	lsrs	r3, r3, #1
 8005e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <USB_EPStartXfer+0x5f2>
 8005e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e38:	3301      	adds	r3, #1
 8005e3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	029b      	lsls	r3, r3, #10
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e038      	b.n	8005ec0 <USB_EPStartXfer+0x674>
 8005e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e5c:	f003 031f 	and.w	r3, r3, #31
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <USB_EPStartXfer+0x622>
 8005e64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	029b      	lsls	r3, r3, #10
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e01b      	b.n	8005ec0 <USB_EPStartXfer+0x674>
 8005e88:	463b      	mov	r3, r7
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	785b      	ldrb	r3, [r3, #1]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d116      	bne.n	8005ec0 <USB_EPStartXfer+0x674>
 8005e92:	1d3b      	adds	r3, r7, #4
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	4413      	add	r3, r2
 8005ea2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	011a      	lsls	r2, r3, #4
 8005eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eae:	4413      	add	r3, r2
 8005eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ec0:	463b      	mov	r3, r7
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	895b      	ldrh	r3, [r3, #10]
 8005ec6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eca:	463b      	mov	r3, r7
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6959      	ldr	r1, [r3, #20]
 8005ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005eda:	1d38      	adds	r0, r7, #4
 8005edc:	6800      	ldr	r0, [r0, #0]
 8005ede:	f000 ff13 	bl	8006d08 <USB_WritePMA>
 8005ee2:	e1e2      	b.n	80062aa <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	463b      	mov	r3, r7
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	463b      	mov	r3, r7
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	441a      	add	r2, r3
 8005f1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f32:	1d3b      	adds	r3, r7, #4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	663b      	str	r3, [r7, #96]	; 0x60
 8005f38:	1d3b      	adds	r3, r7, #4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	4413      	add	r3, r2
 8005f48:	663b      	str	r3, [r7, #96]	; 0x60
 8005f4a:	463b      	mov	r3, r7
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	011a      	lsls	r2, r3, #4
 8005f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f54:	4413      	add	r3, r2
 8005f56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f66:	463b      	mov	r3, r7
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	891b      	ldrh	r3, [r3, #8]
 8005f6c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f70:	463b      	mov	r3, r7
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6959      	ldr	r1, [r3, #20]
 8005f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005f80:	1d38      	adds	r0, r7, #4
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	f000 fec0 	bl	8006d08 <USB_WritePMA>
 8005f88:	e18f      	b.n	80062aa <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 808f 	beq.w	80060c4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fa6:	1d3b      	adds	r3, r7, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d164      	bne.n	8006080 <USB_EPStartXfer+0x834>
 8005fb6:	1d3b      	adds	r3, r7, #4
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	673b      	str	r3, [r7, #112]	; 0x70
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fca:	4413      	add	r3, r2
 8005fcc:	673b      	str	r3, [r7, #112]	; 0x70
 8005fce:	463b      	mov	r3, r7
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	011a      	lsls	r2, r3, #4
 8005fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d112      	bne.n	800600e <USB_EPStartXfer+0x7c2>
 8005fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ff6:	801a      	strh	r2, [r3, #0]
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006006:	b29a      	uxth	r2, r3
 8006008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	e054      	b.n	80060b8 <USB_EPStartXfer+0x86c>
 800600e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006012:	2b3e      	cmp	r3, #62	; 0x3e
 8006014:	d817      	bhi.n	8006046 <USB_EPStartXfer+0x7fa>
 8006016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d004      	beq.n	8006036 <USB_EPStartXfer+0x7ea>
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	3301      	adds	r3, #1
 8006032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800603a:	b29b      	uxth	r3, r3
 800603c:	029b      	lsls	r3, r3, #10
 800603e:	b29a      	uxth	r2, r3
 8006040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006042:	801a      	strh	r2, [r3, #0]
 8006044:	e038      	b.n	80060b8 <USB_EPStartXfer+0x86c>
 8006046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <USB_EPStartXfer+0x81a>
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	3b01      	subs	r3, #1
 8006062:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	b29b      	uxth	r3, r3
 800606c:	029b      	lsls	r3, r3, #10
 800606e:	b29b      	uxth	r3, r3
 8006070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006078:	b29a      	uxth	r2, r3
 800607a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e01b      	b.n	80060b8 <USB_EPStartXfer+0x86c>
 8006080:	463b      	mov	r3, r7
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d116      	bne.n	80060b8 <USB_EPStartXfer+0x86c>
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006092:	b29b      	uxth	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006098:	4413      	add	r3, r2
 800609a:	67bb      	str	r3, [r7, #120]	; 0x78
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	011a      	lsls	r2, r3, #4
 80060a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a6:	4413      	add	r3, r2
 80060a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060ac:	677b      	str	r3, [r7, #116]	; 0x74
 80060ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060b8:	463b      	mov	r3, r7
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	895b      	ldrh	r3, [r3, #10]
 80060be:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 80060c2:	e097      	b.n	80061f4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d168      	bne.n	80061a0 <USB_EPStartXfer+0x954>
 80060ce:	1d3b      	adds	r3, r7, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d6:	1d3b      	adds	r3, r7, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060de:	b29b      	uxth	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e6:	4413      	add	r3, r2
 80060e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060ec:	463b      	mov	r3, r7
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	011a      	lsls	r2, r3, #4
 80060f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060f8:	4413      	add	r3, r2
 80060fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d112      	bne.n	800612e <USB_EPStartXfer+0x8e2>
 8006108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006112:	b29a      	uxth	r2, r3
 8006114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e05d      	b.n	80061ea <USB_EPStartXfer+0x99e>
 800612e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006132:	2b3e      	cmp	r3, #62	; 0x3e
 8006134:	d817      	bhi.n	8006166 <USB_EPStartXfer+0x91a>
 8006136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <USB_EPStartXfer+0x90a>
 800614c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006156:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800615a:	b29b      	uxth	r3, r3
 800615c:	029b      	lsls	r3, r3, #10
 800615e:	b29a      	uxth	r2, r3
 8006160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	e041      	b.n	80061ea <USB_EPStartXfer+0x99e>
 8006166:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <USB_EPStartXfer+0x93a>
 800617c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006180:	3b01      	subs	r3, #1
 8006182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006186:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800618a:	b29b      	uxth	r3, r3
 800618c:	029b      	lsls	r3, r3, #10
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800619c:	801a      	strh	r2, [r3, #0]
 800619e:	e024      	b.n	80061ea <USB_EPStartXfer+0x99e>
 80061a0:	463b      	mov	r3, r7
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d11f      	bne.n	80061ea <USB_EPStartXfer+0x99e>
 80061aa:	1d3b      	adds	r3, r7, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061b2:	1d3b      	adds	r3, r7, #4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c2:	4413      	add	r3, r2
 80061c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	011a      	lsls	r2, r3, #4
 80061d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80061ea:	463b      	mov	r3, r7
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	891b      	ldrh	r3, [r3, #8]
 80061f0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80061f4:	463b      	mov	r3, r7
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6959      	ldr	r1, [r3, #20]
 80061fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006204:	1d38      	adds	r0, r7, #4
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	f000 fd7e 	bl	8006d08 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800620c:	463b      	mov	r3, r7
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d122      	bne.n	800625c <USB_EPStartXfer+0xa10>
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	463b      	mov	r3, r7
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006230:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006234:	1d3b      	adds	r3, r7, #4
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	463b      	mov	r3, r7
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006252:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006256:	b29b      	uxth	r3, r3
 8006258:	8013      	strh	r3, [r2, #0]
 800625a:	e026      	b.n	80062aa <USB_EPStartXfer+0xa5e>
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d121      	bne.n	80062aa <USB_EPStartXfer+0xa5e>
 8006266:	1d3b      	adds	r3, r7, #4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	463b      	mov	r3, r7
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	463b      	mov	r3, r7
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062aa:	1d3b      	adds	r3, r7, #4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	463b      	mov	r3, r7
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f107 020e 	add.w	r2, r7, #14
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c8:	8013      	strh	r3, [r2, #0]
 80062ca:	f107 030e 	add.w	r3, r7, #14
 80062ce:	f107 020e 	add.w	r2, r7, #14
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	f082 0210 	eor.w	r2, r2, #16
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	f107 030e 	add.w	r3, r7, #14
 80062de:	f107 020e 	add.w	r2, r7, #14
 80062e2:	8812      	ldrh	r2, [r2, #0]
 80062e4:	f082 0220 	eor.w	r2, r2, #32
 80062e8:	801a      	strh	r2, [r3, #0]
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	463b      	mov	r3, r7
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	441a      	add	r2, r3
 80062f8:	f107 030e 	add.w	r3, r7, #14
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006302:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630e:	b29b      	uxth	r3, r3
 8006310:	8013      	strh	r3, [r2, #0]
 8006312:	e3b5      	b.n	8006a80 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	7b1b      	ldrb	r3, [r3, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8090 	bne.w	8006440 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006320:	463b      	mov	r3, r7
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	429a      	cmp	r2, r3
 800632e:	d90e      	bls.n	800634e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006330:	463b      	mov	r3, r7
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800633a:	463b      	mov	r3, r7
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699a      	ldr	r2, [r3, #24]
 8006340:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	463b      	mov	r3, r7
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	619a      	str	r2, [r3, #24]
 800634c:	e008      	b.n	8006360 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800634e:	463b      	mov	r3, r7
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006358:	463b      	mov	r3, r7
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2200      	movs	r2, #0
 800635e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006378:	4413      	add	r3, r2
 800637a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800637e:	463b      	mov	r3, r7
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	011a      	lsls	r2, r3, #4
 8006386:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800638a:	4413      	add	r3, r2
 800638c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006390:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006394:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d116      	bne.n	80063ca <USB_EPStartXfer+0xb7e>
 800639c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063ae:	801a      	strh	r2, [r3, #0]
 80063b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	e32c      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
 80063ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063ce:	2b3e      	cmp	r3, #62	; 0x3e
 80063d0:	d818      	bhi.n	8006404 <USB_EPStartXfer+0xbb8>
 80063d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <USB_EPStartXfer+0xba6>
 80063e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	029b      	lsls	r3, r3, #10
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006400:	801a      	strh	r2, [r3, #0]
 8006402:	e30f      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
 8006404:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006408:	095b      	lsrs	r3, r3, #5
 800640a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800640e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <USB_EPStartXfer+0xbd8>
 800641a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800641e:	3b01      	subs	r3, #1
 8006420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006424:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006428:	b29b      	uxth	r3, r3
 800642a:	029b      	lsls	r3, r3, #10
 800642c:	b29b      	uxth	r3, r3
 800642e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006436:	b29a      	uxth	r2, r3
 8006438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800643c:	801a      	strh	r2, [r3, #0]
 800643e:	e2f1      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006440:	463b      	mov	r3, r7
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b02      	cmp	r3, #2
 8006448:	f040 818f 	bne.w	800676a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800644c:	463b      	mov	r3, r7
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d175      	bne.n	8006542 <USB_EPStartXfer+0xcf6>
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800645e:	1d3b      	adds	r3, r7, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	011a      	lsls	r2, r3, #4
 800647c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006480:	4413      	add	r3, r2
 8006482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648a:	463b      	mov	r3, r7
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d116      	bne.n	80064c2 <USB_EPStartXfer+0xc76>
 8006494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064a6:	801a      	strh	r2, [r3, #0]
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064be:	801a      	strh	r2, [r3, #0]
 80064c0:	e065      	b.n	800658e <USB_EPStartXfer+0xd42>
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b3e      	cmp	r3, #62	; 0x3e
 80064ca:	d81a      	bhi.n	8006502 <USB_EPStartXfer+0xcb6>
 80064cc:	463b      	mov	r3, r7
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <USB_EPStartXfer+0xca4>
 80064e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ea:	3301      	adds	r3, #1
 80064ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	029b      	lsls	r3, r3, #10
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e045      	b.n	800658e <USB_EPStartXfer+0xd42>
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800650e:	463b      	mov	r3, r7
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <USB_EPStartXfer+0xcda>
 800651c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006520:	3b01      	subs	r3, #1
 8006522:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006526:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800652a:	b29b      	uxth	r3, r3
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	b29b      	uxth	r3, r3
 8006530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006538:	b29a      	uxth	r2, r3
 800653a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e025      	b.n	800658e <USB_EPStartXfer+0xd42>
 8006542:	463b      	mov	r3, r7
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d120      	bne.n	800658e <USB_EPStartXfer+0xd42>
 800654c:	1d3b      	adds	r3, r7, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655c:	b29b      	uxth	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006564:	4413      	add	r3, r2
 8006566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656a:	463b      	mov	r3, r7
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006576:	4413      	add	r3, r2
 8006578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006580:	463b      	mov	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	1d3b      	adds	r3, r7, #4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006596:	463b      	mov	r3, r7
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d175      	bne.n	800668c <USB_EPStartXfer+0xe40>
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	461a      	mov	r2, r3
 80065b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065b8:	4413      	add	r3, r2
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	463b      	mov	r3, r7
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	011a      	lsls	r2, r3, #4
 80065c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d116      	bne.n	800660c <USB_EPStartXfer+0xdc0>
 80065de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f0:	801a      	strh	r2, [r3, #0]
 80065f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006602:	b29a      	uxth	r2, r3
 8006604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006608:	801a      	strh	r2, [r3, #0]
 800660a:	e061      	b.n	80066d0 <USB_EPStartXfer+0xe84>
 800660c:	463b      	mov	r3, r7
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b3e      	cmp	r3, #62	; 0x3e
 8006614:	d81a      	bhi.n	800664c <USB_EPStartXfer+0xe00>
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	085b      	lsrs	r3, r3, #1
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006622:	463b      	mov	r3, r7
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USB_EPStartXfer+0xdee>
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	3301      	adds	r3, #1
 8006636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	b29b      	uxth	r3, r3
 8006640:	029b      	lsls	r3, r3, #10
 8006642:	b29a      	uxth	r2, r3
 8006644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e041      	b.n	80066d0 <USB_EPStartXfer+0xe84>
 800664c:	463b      	mov	r3, r7
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	095b      	lsrs	r3, r3, #5
 8006654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006658:	463b      	mov	r3, r7
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2b00      	cmp	r3, #0
 8006664:	d104      	bne.n	8006670 <USB_EPStartXfer+0xe24>
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	3b01      	subs	r3, #1
 800666c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006674:	b29b      	uxth	r3, r3
 8006676:	029b      	lsls	r3, r3, #10
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e021      	b.n	80066d0 <USB_EPStartXfer+0xe84>
 800668c:	463b      	mov	r3, r7
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11c      	bne.n	80066d0 <USB_EPStartXfer+0xe84>
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066a6:	4413      	add	r3, r2
 80066a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066ac:	463b      	mov	r3, r7
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	011a      	lsls	r2, r3, #4
 80066b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066b8:	4413      	add	r3, r2
 80066ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80066c2:	463b      	mov	r3, r7
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066ce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066d0:	463b      	mov	r3, r7
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 81a4 	beq.w	8006a24 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066dc:	1d3b      	adds	r3, r7, #4
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	463b      	mov	r3, r7
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80066f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <USB_EPStartXfer+0xebc>
 80066fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006708:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8187 	bne.w	8006a24 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006716:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	f040 8180 	bne.w	8006a24 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006724:	1d3b      	adds	r3, r7, #4
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	463b      	mov	r3, r7
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006742:	1d3b      	adds	r3, r7, #4
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	463b      	mov	r3, r7
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	441a      	add	r2, r3
 8006750:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006764:	b29b      	uxth	r3, r3
 8006766:	8013      	strh	r3, [r2, #0]
 8006768:	e15c      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800676a:	463b      	mov	r3, r7
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	78db      	ldrb	r3, [r3, #3]
 8006770:	2b01      	cmp	r3, #1
 8006772:	f040 8155 	bne.w	8006a20 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006776:	463b      	mov	r3, r7
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	699a      	ldr	r2, [r3, #24]
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	d90e      	bls.n	80067a4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006786:	463b      	mov	r3, r7
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006790:	463b      	mov	r3, r7
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800679a:	1ad2      	subs	r2, r2, r3
 800679c:	463b      	mov	r3, r7
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	619a      	str	r2, [r3, #24]
 80067a2:	e008      	b.n	80067b6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067b6:	463b      	mov	r3, r7
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d16f      	bne.n	80068a0 <USB_EPStartXfer+0x1054>
 80067c0:	1d3b      	adds	r3, r7, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c8:	1d3b      	adds	r3, r7, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	461a      	mov	r2, r3
 80067d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067d8:	4413      	add	r3, r2
 80067da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	011a      	lsls	r2, r3, #4
 80067e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067ea:	4413      	add	r3, r2
 80067ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d116      	bne.n	800682a <USB_EPStartXfer+0xfde>
 80067fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006808:	b29a      	uxth	r2, r3
 800680a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e05f      	b.n	80068ea <USB_EPStartXfer+0x109e>
 800682a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800682e:	2b3e      	cmp	r3, #62	; 0x3e
 8006830:	d818      	bhi.n	8006864 <USB_EPStartXfer+0x1018>
 8006832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800683c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <USB_EPStartXfer+0x1006>
 8006848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800684c:	3301      	adds	r3, #1
 800684e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006856:	b29b      	uxth	r3, r3
 8006858:	029b      	lsls	r3, r3, #10
 800685a:	b29a      	uxth	r2, r3
 800685c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006860:	801a      	strh	r2, [r3, #0]
 8006862:	e042      	b.n	80068ea <USB_EPStartXfer+0x109e>
 8006864:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800686e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006872:	f003 031f 	and.w	r3, r3, #31
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <USB_EPStartXfer+0x1038>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	3b01      	subs	r3, #1
 8006880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006888:	b29b      	uxth	r3, r3
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800689c:	801a      	strh	r2, [r3, #0]
 800689e:	e024      	b.n	80068ea <USB_EPStartXfer+0x109e>
 80068a0:	463b      	mov	r3, r7
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d11f      	bne.n	80068ea <USB_EPStartXfer+0x109e>
 80068aa:	1d3b      	adds	r3, r7, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068c2:	4413      	add	r3, r2
 80068c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	011a      	lsls	r2, r3, #4
 80068d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80068de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e8:	801a      	strh	r2, [r3, #0]
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068f2:	463b      	mov	r3, r7
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d16f      	bne.n	80069dc <USB_EPStartXfer+0x1190>
 80068fc:	1d3b      	adds	r3, r7, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800690c:	b29b      	uxth	r3, r3
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006914:	4413      	add	r3, r2
 8006916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800691a:	463b      	mov	r3, r7
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	011a      	lsls	r2, r3, #4
 8006922:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006926:	4413      	add	r3, r2
 8006928:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800692c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d116      	bne.n	8006966 <USB_EPStartXfer+0x111a>
 8006938:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006944:	b29a      	uxth	r2, r3
 8006946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29a      	uxth	r2, r3
 800695e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006962:	801a      	strh	r2, [r3, #0]
 8006964:	e05e      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
 8006966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800696a:	2b3e      	cmp	r3, #62	; 0x3e
 800696c:	d818      	bhi.n	80069a0 <USB_EPStartXfer+0x1154>
 800696e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006972:	085b      	lsrs	r3, r3, #1
 8006974:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <USB_EPStartXfer+0x1142>
 8006984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006988:	3301      	adds	r3, #1
 800698a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800698e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29a      	uxth	r2, r3
 8006998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800699c:	801a      	strh	r2, [r3, #0]
 800699e:	e041      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
 80069a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069ae:	f003 031f 	and.w	r3, r3, #31
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USB_EPStartXfer+0x1174>
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	3b01      	subs	r3, #1
 80069bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80069c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e023      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d11e      	bne.n	8006a24 <USB_EPStartXfer+0x11d8>
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f6:	4413      	add	r3, r2
 80069f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069fc:	463b      	mov	r3, r7
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	011a      	lsls	r2, r3, #4
 8006a04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e001      	b.n	8006a24 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e02e      	b.n	8006a82 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a24:	1d3b      	adds	r3, r7, #4
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a46:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a4e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a56:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006a5a:	1d3b      	adds	r3, r7, #4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	463b      	mov	r3, r7
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	785b      	ldrb	r3, [r3, #1]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d020      	beq.n	8006ae0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	4413      	add	r3, r2
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ab4:	81bb      	strh	r3, [r7, #12]
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	f083 0310 	eor.w	r3, r3, #16
 8006abc:	81bb      	strh	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	89bb      	ldrh	r3, [r7, #12]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
 8006ade:	e01f      	b.n	8006b20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	81fb      	strh	r3, [r7, #14]
 8006af8:	89fb      	ldrh	r3, [r7, #14]
 8006afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006afe:	81fb      	strh	r3, [r7, #14]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr

08006b2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	7b1b      	ldrb	r3, [r3, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 809d 	bne.w	8006c7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d04c      	beq.n	8006be2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	823b      	strh	r3, [r7, #16]
 8006b56:	8a3b      	ldrh	r3, [r7, #16]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d01b      	beq.n	8006b98 <USB_EPClearStall+0x6c>
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b76:	81fb      	strh	r3, [r7, #14]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	441a      	add	r2, r3
 8006b82:	89fb      	ldrh	r3, [r7, #14]
 8006b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	78db      	ldrb	r3, [r3, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d06c      	beq.n	8006c7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	81bb      	strh	r3, [r7, #12]
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	f083 0320 	eor.w	r3, r3, #32
 8006bbe:	81bb      	strh	r3, [r7, #12]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	89bb      	ldrh	r3, [r7, #12]
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
 8006be0:	e04b      	b.n	8006c7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	82fb      	strh	r3, [r7, #22]
 8006bf0:	8afb      	ldrh	r3, [r7, #22]
 8006bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d01b      	beq.n	8006c32 <USB_EPClearStall+0x106>
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4413      	add	r3, r2
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c10:	82bb      	strh	r3, [r7, #20]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	441a      	add	r2, r3
 8006c1c:	8abb      	ldrh	r3, [r7, #20]
 8006c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	827b      	strh	r3, [r7, #18]
 8006c4a:	8a7b      	ldrh	r3, [r7, #18]
 8006c4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c50:	827b      	strh	r3, [r7, #18]
 8006c52:	8a7b      	ldrh	r3, [r7, #18]
 8006c54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c58:	827b      	strh	r3, [r7, #18]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	441a      	add	r2, r3
 8006c64:	8a7b      	ldrh	r3, [r7, #18]
 8006c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr

08006c86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	460b      	mov	r3, r1
 8006c90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c92:	78fb      	ldrb	r3, [r7, #3]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr

08006cf2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bc80      	pop	{r7}
 8006d06:	4770      	bx	lr

08006d08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b08d      	sub	sp, #52	; 0x34
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	4611      	mov	r1, r2
 8006d14:	461a      	mov	r2, r3
 8006d16:	460b      	mov	r3, r1
 8006d18:	80fb      	strh	r3, [r7, #6]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	3301      	adds	r3, #1
 8006d22:	085b      	lsrs	r3, r3, #1
 8006d24:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d2e:	88fb      	ldrh	r3, [r7, #6]
 8006d30:	005a      	lsls	r2, r3, #1
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d40:	e01e      	b.n	8006d80 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	3302      	adds	r3, #2
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	3301      	adds	r3, #1
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1dd      	bne.n	8006d42 <USB_WritePMA+0x3a>
  }
}
 8006d86:	bf00      	nop
 8006d88:	3734      	adds	r7, #52	; 0x34
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b08b      	sub	sp, #44	; 0x2c
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	460b      	mov	r3, r1
 8006da0:	80fb      	strh	r3, [r7, #6]
 8006da2:	4613      	mov	r3, r2
 8006da4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006da6:	88bb      	ldrh	r3, [r7, #4]
 8006da8:	085b      	lsrs	r3, r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	005a      	lsls	r2, r3, #1
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc8:	e01b      	b.n	8006e02 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3301      	adds	r3, #1
 8006df4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	3302      	adds	r3, #2
 8006dfa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e0      	bne.n	8006dca <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e08:	88bb      	ldrh	r3, [r7, #4]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	881b      	ldrh	r3, [r3, #0]
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	701a      	strb	r2, [r3, #0]
  }
}
 8006e24:	bf00      	nop
 8006e26:	372c      	adds	r7, #44	; 0x2c
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bc80      	pop	{r7}
 8006e2c:	4770      	bx	lr
	...

08006e30 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	2203      	movs	r2, #3
 8006e40:	2181      	movs	r1, #129	; 0x81
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fc99 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8006e4e:	2301      	movs	r3, #1
 8006e50:	2203      	movs	r2, #3
 8006e52:	2101      	movs	r1, #1
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 fc90 	bl	800877a <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006e5a:	2010      	movs	r0, #16
 8006e5c:	f001 fda2 	bl	80089a4 <USBD_static_malloc>
 8006e60:	4602      	mov	r2, r0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <USBD_HID_Init+0x68>)
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fd74 	bl	800895c <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	e005      	b.n	8006e8e <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	2200      	movs	r2, #0
 8006e8a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	2000042d 	.word	0x2000042d

08006e9c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006eae:	2301      	movs	r3, #1
 8006eb0:	4a06      	ldr	r2, [pc, #24]	; (8006ecc <USBD_HID_DataOut+0x30>)
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	f7fb ffad 	bl	8002e12 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8006eb8:	4b04      	ldr	r3, [pc, #16]	; (8006ecc <USBD_HID_DataOut+0x30>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fa fc99 	bl	80017f4 <SET_LEDS_Callback>

	return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	2000042d 	.word	0x2000042d

08006ed0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006edc:	2181      	movs	r1, #129	; 0x81
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f001 fc71 	bl	80087c6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d009      	beq.n	8006f08 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f001 fd5e 	bl	80089bc <USBD_static_free>
    pdev->pClassData = NULL;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b088      	sub	sp, #32
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f24:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006f26:	2300      	movs	r3, #0
 8006f28:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d045      	beq.n	8006fce <USBD_HID_Setup+0xba>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	f040 80d3 	bne.w	80070ee <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	3b02      	subs	r3, #2
 8006f4e:	2b09      	cmp	r3, #9
 8006f50:	d835      	bhi.n	8006fbe <USBD_HID_Setup+0xaa>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USBD_HID_Setup+0x44>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006faf 	.word	0x08006faf
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006fbf 	.word	0x08006fbf
 8006f64:	08006fbf 	.word	0x08006fbf
 8006f68:	08006fbf 	.word	0x08006fbf
 8006f6c:	08006fbf 	.word	0x08006fbf
 8006f70:	08006fbf 	.word	0x08006fbf
 8006f74:	08006fbf 	.word	0x08006fbf
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006f81 	.word	0x08006f81
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	885b      	ldrh	r3, [r3, #2]
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	461a      	mov	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	601a      	str	r2, [r3, #0]
          break;
 8006f8c:	e01e      	b.n	8006fcc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2201      	movs	r2, #1
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f937 	bl	8008208 <USBD_CtlSendData>
          break;
 8006f9a:	e017      	b.n	8006fcc <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	885b      	ldrh	r3, [r3, #2]
 8006fa0:	0a1b      	lsrs	r3, r3, #8
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	605a      	str	r2, [r3, #4]
          break;
 8006fac:	e00e      	b.n	8006fcc <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f001 f926 	bl	8008208 <USBD_CtlSendData>
          break;
 8006fbc:	e006      	b.n	8006fcc <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f8b7 	bl	8008134 <USBD_CtlError>
          ret = USBD_FAIL;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fca:	bf00      	nop
      }
      break;
 8006fcc:	e096      	b.n	80070fc <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b0b      	cmp	r3, #11
 8006fd4:	f200 8083 	bhi.w	80070de <USBD_HID_Setup+0x1ca>
 8006fd8:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <USBD_HID_Setup+0xcc>)
 8006fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fde:	bf00      	nop
 8006fe0:	08007011 	.word	0x08007011
 8006fe4:	080070df 	.word	0x080070df
 8006fe8:	080070df 	.word	0x080070df
 8006fec:	080070df 	.word	0x080070df
 8006ff0:	080070df 	.word	0x080070df
 8006ff4:	080070df 	.word	0x080070df
 8006ff8:	08007039 	.word	0x08007039
 8006ffc:	080070df 	.word	0x080070df
 8007000:	080070df 	.word	0x080070df
 8007004:	080070df 	.word	0x080070df
 8007008:	08007091 	.word	0x08007091
 800700c:	080070b9 	.word	0x080070b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007016:	2b03      	cmp	r3, #3
 8007018:	d107      	bne.n	800702a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800701a:	f107 030e 	add.w	r3, r7, #14
 800701e:	2202      	movs	r2, #2
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f8f0 	bl	8008208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007028:	e060      	b.n	80070ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f881 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 8007032:	2302      	movs	r3, #2
 8007034:	75fb      	strb	r3, [r7, #23]
          break;
 8007036:	e059      	b.n	80070ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	885b      	ldrh	r3, [r3, #2]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b22      	cmp	r3, #34	; 0x22
 8007042:	d108      	bne.n	8007056 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	88db      	ldrh	r3, [r3, #6]
 8007048:	2b73      	cmp	r3, #115	; 0x73
 800704a:	bf28      	it	cs
 800704c:	2373      	movcs	r3, #115	; 0x73
 800704e:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8007050:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <USBD_HID_Setup+0x1f4>)
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	e015      	b.n	8007082 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	2b21      	cmp	r3, #33	; 0x21
 8007060:	d108      	bne.n	8007074 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007062:	4b2a      	ldr	r3, [pc, #168]	; (800710c <USBD_HID_Setup+0x1f8>)
 8007064:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	2b09      	cmp	r3, #9
 800706c:	bf28      	it	cs
 800706e:	2309      	movcs	r3, #9
 8007070:	83fb      	strh	r3, [r7, #30]
 8007072:	e006      	b.n	8007082 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f001 f85c 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 800707c:	2302      	movs	r3, #2
 800707e:	75fb      	strb	r3, [r7, #23]
            break;
 8007080:	e034      	b.n	80070ec <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007082:	8bfb      	ldrh	r3, [r7, #30]
 8007084:	461a      	mov	r2, r3
 8007086:	69b9      	ldr	r1, [r7, #24]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f8bd 	bl	8008208 <USBD_CtlSendData>
          break;
 800708e:	e02d      	b.n	80070ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007096:	2b03      	cmp	r3, #3
 8007098:	d107      	bne.n	80070aa <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	3308      	adds	r3, #8
 800709e:	2201      	movs	r2, #1
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 f8b0 	bl	8008208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070a8:	e020      	b.n	80070ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 f841 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 80070b2:	2302      	movs	r3, #2
 80070b4:	75fb      	strb	r3, [r7, #23]
          break;
 80070b6:	e019      	b.n	80070ec <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d106      	bne.n	80070d0 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	885b      	ldrh	r3, [r3, #2]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070ce:	e00d      	b.n	80070ec <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f001 f82e 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	75fb      	strb	r3, [r7, #23]
          break;
 80070dc:	e006      	b.n	80070ec <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f827 	bl	8008134 <USBD_CtlError>
          ret = USBD_FAIL;
 80070e6:	2302      	movs	r3, #2
 80070e8:	75fb      	strb	r3, [r7, #23]
          break;
 80070ea:	bf00      	nop
      }
      break;
 80070ec:	e006      	b.n	80070fc <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f81f 	bl	8008134 <USBD_CtlError>
      ret = USBD_FAIL;
 80070f6:	2302      	movs	r3, #2
 80070f8:	75fb      	strb	r3, [r7, #23]
      break;
 80070fa:	bf00      	nop
  }

  return ret;
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3720      	adds	r7, #32
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200000e4 	.word	0x200000e4
 800710c:	200000cc 	.word	0x200000cc

08007110 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007124:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712c:	2b03      	cmp	r3, #3
 800712e:	d10c      	bne.n	800714a <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	7b1b      	ldrb	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d108      	bne.n	800714a <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2201      	movs	r2, #1
 800713c:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	2181      	movs	r1, #129	; 0x81
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f001 fbe6 	bl	8008916 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2229      	movs	r2, #41	; 0x29
 8007160:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	; (8007170 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	bc80      	pop	{r7}
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	20000048 	.word	0x20000048

08007174 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2229      	movs	r2, #41	; 0x29
 8007180:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007182:	4b03      	ldr	r3, [pc, #12]	; (8007190 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007184:	4618      	mov	r0, r3
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20000074 	.word	0x20000074

08007194 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2229      	movs	r2, #41	; 0x29
 80071a0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80071a2:	4b03      	ldr	r3, [pc, #12]	; (80071b0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	200000a0 	.word	0x200000a0

080071b4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 80071c0:	f7fa f8f6 	bl	80013b0 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ca:	2200      	movs	r2, #0
 80071cc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	220a      	movs	r2, #10
 80071e4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80071e6:	4b03      	ldr	r3, [pc, #12]	; (80071f4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	200000d8 	.word	0x200000d8

080071f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	e01a      	b.n	8007246 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	79fa      	ldrb	r2, [r7, #7]
 800723c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f001 fa38 	bl	80086b4 <USBD_LL_Init>

  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
 800726e:	e001      	b.n	8007274 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007270:	2302      	movs	r3, #2
 8007272:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fa5b 	bl	8008744 <USBD_LL_Start>

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00c      	beq.n	80072e0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	78fa      	ldrb	r2, [r7, #3]
 80072d0:	4611      	mov	r1, r2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	4798      	blx	r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	4611      	mov	r1, r2
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3

  return USBD_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 feca 	bl	80080bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007344:	f003 031f 	and.w	r3, r3, #31
 8007348:	2b01      	cmp	r3, #1
 800734a:	d00c      	beq.n	8007366 <USBD_LL_SetupStage+0x56>
 800734c:	2b01      	cmp	r3, #1
 800734e:	d302      	bcc.n	8007356 <USBD_LL_SetupStage+0x46>
 8007350:	2b02      	cmp	r3, #2
 8007352:	d010      	beq.n	8007376 <USBD_LL_SetupStage+0x66>
 8007354:	e017      	b.n	8007386 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9ca 	bl	80076f8 <USBD_StdDevReq>
      break;
 8007364:	e01a      	b.n	800739c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800736c:	4619      	mov	r1, r3
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa2c 	bl	80077cc <USBD_StdItfReq>
      break;
 8007374:	e012      	b.n	800739c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fa6a 	bl	8007858 <USBD_StdEPReq>
      break;
 8007384:	e00a      	b.n	800739c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800738c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007390:	b2db      	uxtb	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 fa35 	bl	8008804 <USBD_LL_StallEP>
      break;
 800739a:	bf00      	nop
  }

  return USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b086      	sub	sp, #24
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	60f8      	str	r0, [r7, #12]
 80073ae:	460b      	mov	r3, r1
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d14b      	bne.n	8007452 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d134      	bne.n	8007436 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	68da      	ldr	r2, [r3, #12]
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d919      	bls.n	800740c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	68da      	ldr	r2, [r3, #12]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d203      	bcs.n	80073fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	e002      	b.n	8007400 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073fe:	b29b      	uxth	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 ff2d 	bl	8008264 <USBD_CtlContinueRx>
 800740a:	e038      	b.n	800747e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800741e:	2b03      	cmp	r3, #3
 8007420:	d105      	bne.n	800742e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 ff2a 	bl	8008288 <USBD_CtlSendStatus>
 8007434:	e023      	b.n	800747e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800743c:	2b05      	cmp	r3, #5
 800743e:	d11e      	bne.n	800747e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007448:	2100      	movs	r1, #0
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f001 f9da 	bl	8008804 <USBD_LL_StallEP>
 8007450:	e015      	b.n	800747e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00d      	beq.n	800747a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007464:	2b03      	cmp	r3, #3
 8007466:	d108      	bne.n	800747a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	7afa      	ldrb	r2, [r7, #11]
 8007472:	4611      	mov	r1, r2
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	4798      	blx	r3
 8007478:	e001      	b.n	800747e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800747a:	2302      	movs	r3, #2
 800747c:	e000      	b.n	8007480 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	460b      	mov	r3, r1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d17f      	bne.n	800759c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3314      	adds	r3, #20
 80074a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d15c      	bne.n	8007566 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d915      	bls.n	80074e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	68da      	ldr	r2, [r3, #12]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	1ad2      	subs	r2, r2, r3
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 feb5 	bl	8008240 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d6:	2300      	movs	r3, #0
 80074d8:	2200      	movs	r2, #0
 80074da:	2100      	movs	r1, #0
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 fa3d 	bl	800895c <USBD_LL_PrepareReceive>
 80074e2:	e04e      	b.n	8007582 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	6912      	ldr	r2, [r2, #16]
 80074ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80074f0:	fb02 f201 	mul.w	r2, r2, r1
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11c      	bne.n	8007534 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007502:	429a      	cmp	r2, r3
 8007504:	d316      	bcc.n	8007534 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007510:	429a      	cmp	r2, r3
 8007512:	d20f      	bcs.n	8007534 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007514:	2200      	movs	r2, #0
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 fe91 	bl	8008240 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007526:	2300      	movs	r3, #0
 8007528:	2200      	movs	r2, #0
 800752a:	2100      	movs	r1, #0
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f001 fa15 	bl	800895c <USBD_LL_PrepareReceive>
 8007532:	e026      	b.n	8007582 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007546:	2b03      	cmp	r3, #3
 8007548:	d105      	bne.n	8007556 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007556:	2180      	movs	r1, #128	; 0x80
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 f953 	bl	8008804 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 fea5 	bl	80082ae <USBD_CtlReceiveStatus>
 8007564:	e00d      	b.n	8007582 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756c:	2b04      	cmp	r3, #4
 800756e:	d004      	beq.n	800757a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800757a:	2180      	movs	r1, #128	; 0x80
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f001 f941 	bl	8008804 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007588:	2b01      	cmp	r3, #1
 800758a:	d11d      	bne.n	80075c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fe83 	bl	8007298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800759a:	e015      	b.n	80075c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d108      	bne.n	80075c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	7afa      	ldrb	r2, [r7, #11]
 80075bc:	4611      	mov	r1, r2
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	4798      	blx	r3
 80075c2:	e001      	b.n	80075c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e000      	b.n	80075ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075da:	2340      	movs	r3, #64	; 0x40
 80075dc:	2200      	movs	r2, #0
 80075de:	2100      	movs	r1, #0
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 f8ca 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2240      	movs	r2, #64	; 0x40
 80075f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075f6:	2340      	movs	r3, #64	; 0x40
 80075f8:	2200      	movs	r2, #0
 80075fa:	2180      	movs	r1, #128	; 0x80
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f001 f8bc 	bl	800877a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2240      	movs	r2, #64	; 0x40
 800760c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6852      	ldr	r2, [r2, #4]
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	4611      	mov	r1, r2
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
  }

  return USBD_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	78fa      	ldrb	r2, [r7, #3]
 8007664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr

08007672 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2204      	movs	r2, #4
 800768a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	d105      	bne.n	80076b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d10b      	bne.n	80076ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770e:	2b20      	cmp	r3, #32
 8007710:	d004      	beq.n	800771c <USBD_StdDevReq+0x24>
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d002      	beq.n	800771c <USBD_StdDevReq+0x24>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <USBD_StdDevReq+0x34>
 800771a:	e04c      	b.n	80077b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
      break;
 800772a:	e049      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b09      	cmp	r3, #9
 8007732:	d83a      	bhi.n	80077aa <USBD_StdDevReq+0xb2>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <USBD_StdDevReq+0x44>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800778d 	.word	0x0800778d
 8007740:	080077a1 	.word	0x080077a1
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007797 	.word	0x08007797
 800774c:	080077ab 	.word	0x080077ab
 8007750:	0800776f 	.word	0x0800776f
 8007754:	08007765 	.word	0x08007765
 8007758:	080077ab 	.word	0x080077ab
 800775c:	08007783 	.word	0x08007783
 8007760:	08007779 	.word	0x08007779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9d4 	bl	8007b14 <USBD_GetDescriptor>
          break;
 800776c:	e022      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb37 	bl	8007de4 <USBD_SetAddress>
          break;
 8007776:	e01d      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb74 	bl	8007e68 <USBD_SetConfig>
          break;
 8007780:	e018      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fbfd 	bl	8007f84 <USBD_GetConfig>
          break;
 800778a:	e013      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc2c 	bl	8007fec <USBD_GetStatus>
          break;
 8007794:	e00e      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc5a 	bl	8008052 <USBD_SetFeature>
          break;
 800779e:	e009      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc69 	bl	800807a <USBD_ClrFeature>
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fcc1 	bl	8008134 <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcbb 	bl	8008134 <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d003      	beq.n	80077ee <USBD_StdItfReq+0x22>
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d001      	beq.n	80077ee <USBD_StdItfReq+0x22>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d12a      	bne.n	8007844 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d81d      	bhi.n	8007836 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d813      	bhi.n	800782c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USBD_StdItfReq+0x74>
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd2f 	bl	8008288 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800782a:	e009      	b.n	8007840 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fc80 	bl	8008134 <USBD_CtlError>
          break;
 8007834:	e004      	b.n	8007840 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fc7b 	bl	8008134 <USBD_CtlError>
          break;
 800783e:	e000      	b.n	8007842 <USBD_StdItfReq+0x76>
          break;
 8007840:	bf00      	nop
      }
      break;
 8007842:	e004      	b.n	800784e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc74 	bl	8008134 <USBD_CtlError>
      break;
 800784c:	bf00      	nop
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007874:	2b20      	cmp	r3, #32
 8007876:	d004      	beq.n	8007882 <USBD_StdEPReq+0x2a>
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0x2a>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <USBD_StdEPReq+0x3a>
 8007880:	e13d      	b.n	8007afe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      break;
 8007890:	e13a      	b.n	8007b08 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789a:	2b20      	cmp	r3, #32
 800789c:	d10a      	bne.n	80078b4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	e12a      	b.n	8007b0a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d03e      	beq.n	800793a <USBD_StdEPReq+0xe2>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d002      	beq.n	80078c6 <USBD_StdEPReq+0x6e>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d070      	beq.n	80079a6 <USBD_StdEPReq+0x14e>
 80078c4:	e115      	b.n	8007af2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d002      	beq.n	80078d6 <USBD_StdEPReq+0x7e>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d015      	beq.n	8007900 <USBD_StdEPReq+0xa8>
 80078d4:	e02b      	b.n	800792e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <USBD_StdEPReq+0x9e>
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d009      	beq.n	80078f6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 ff8c 	bl	8008804 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078ec:	2180      	movs	r1, #128	; 0x80
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 ff88 	bl	8008804 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f4:	e020      	b.n	8007938 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc1b 	bl	8008134 <USBD_CtlError>
              break;
 80078fe:	e01b      	b.n	8007938 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	885b      	ldrh	r3, [r3, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10e      	bne.n	8007926 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <USBD_StdEPReq+0xce>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d008      	beq.n	8007926 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	88db      	ldrh	r3, [r3, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 ff6f 	bl	8008804 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fcae 	bl	8008288 <USBD_CtlSendStatus>

              break;
 800792c:	e004      	b.n	8007938 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbff 	bl	8008134 <USBD_CtlError>
              break;
 8007936:	bf00      	nop
          }
          break;
 8007938:	e0e0      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0xf2>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d015      	beq.n	8007974 <USBD_StdEPReq+0x11c>
 8007948:	e026      	b.n	8007998 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <USBD_StdEPReq+0x112>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d009      	beq.n	800796a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 ff52 	bl	8008804 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 ff4e 	bl	8008804 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e01c      	b.n	80079a4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbe1 	bl	8008134 <USBD_CtlError>
              break;
 8007972:	e017      	b.n	80079a4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d112      	bne.n	80079a2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 ff59 	bl	8008842 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc79 	bl	8008288 <USBD_CtlSendStatus>
              }
              break;
 8007996:	e004      	b.n	80079a2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fbca 	bl	8008134 <USBD_CtlError>
              break;
 80079a0:	e000      	b.n	80079a4 <USBD_StdEPReq+0x14c>
              break;
 80079a2:	bf00      	nop
          }
          break;
 80079a4:	e0aa      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_StdEPReq+0x15e>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d032      	beq.n	8007a1a <USBD_StdEPReq+0x1c2>
 80079b4:	e097      	b.n	8007ae6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <USBD_StdEPReq+0x174>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d004      	beq.n	80079cc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fbb5 	bl	8008134 <USBD_CtlError>
                break;
 80079ca:	e091      	b.n	8007af0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0b      	bge.n	80079ec <USBD_StdEPReq+0x194>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3310      	adds	r3, #16
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	e00b      	b.n	8007a04 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fbf8 	bl	8008208 <USBD_CtlSendData>
              break;
 8007a18:	e06a      	b.n	8007af0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da11      	bge.n	8007a46 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	3318      	adds	r3, #24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d117      	bne.n	8007a6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb78 	bl	8008134 <USBD_CtlError>
                  break;
 8007a44:	e054      	b.n	8007af0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb65 	bl	8008134 <USBD_CtlError>
                  break;
 8007a6a:	e041      	b.n	8007af0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0b      	bge.n	8007a8c <USBD_StdEPReq+0x234>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	3310      	adds	r3, #16
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	e00b      	b.n	8007aa4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <USBD_StdEPReq+0x25a>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d103      	bne.n	8007aba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e00e      	b.n	8007ad8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fede 	bl	8008880 <USBD_LL_IsStallEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e002      	b.n	8007ad8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb92 	bl	8008208 <USBD_CtlSendData>
              break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb23 	bl	8008134 <USBD_CtlError>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e004      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb1d 	bl	8008134 <USBD_CtlError>
          break;
 8007afa:	bf00      	nop
      }
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb17 	bl	8008134 <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
  }

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	f200 8128 	bhi.w	8007d8a <USBD_GetDescriptor+0x276>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_GetDescriptor+0x2c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007d8b 	.word	0x08007d8b
 8007b50:	08007d8b 	.word	0x08007d8b
 8007b54:	08007d2b 	.word	0x08007d2b
 8007b58:	08007d57 	.word	0x08007d57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
      break;
 8007b72:	e112      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f107 0208 	add.w	r2, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b96:	e100      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	2202      	movs	r2, #2
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e0f2      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	f200 80ac 	bhi.w	8007d18 <USBD_GetDescriptor+0x204>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBD_GetDescriptor+0xb4>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007c15 	.word	0x08007c15
 8007bd0:	08007c49 	.word	0x08007c49
 8007bd4:	08007c7d 	.word	0x08007c7d
 8007bd8:	08007cb1 	.word	0x08007cb1
 8007bdc:	08007ce5 	.word	0x08007ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e091      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa94 	bl	8008134 <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e089      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e077      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa7a 	bl	8008134 <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e06f      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6a:	e05d      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa60 	bl	8008134 <USBD_CtlError>
            err++;
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	3301      	adds	r3, #1
 8007c78:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7a:	e055      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9e:	e043      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa46 	bl	8008134 <USBD_CtlError>
            err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
          break;
 8007cae:	e03b      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd2:	e029      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa2c 	bl	8008134 <USBD_CtlError>
            err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce2:	e021      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d06:	e00f      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa12 	bl	8008134 <USBD_CtlError>
            err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
          break;
 8007d16:	e007      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa0a 	bl	8008134 <USBD_CtlError>
          err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d26:	e038      	b.n	8007d9a <USBD_GetDescriptor+0x286>
 8007d28:	e037      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d44:	e029      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9f3 	bl	8008134 <USBD_CtlError>
        err++;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	3301      	adds	r3, #1
 8007d52:	72fb      	strb	r3, [r7, #11]
      break;
 8007d54:	e021      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7c1b      	ldrb	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4798      	blx	r3
 8007d6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	2207      	movs	r2, #7
 8007d76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d78:	e00f      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9d9 	bl	8008134 <USBD_CtlError>
        err++;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	3301      	adds	r3, #1
 8007d86:	72fb      	strb	r3, [r7, #11]
      break;
 8007d88:	e007      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9d1 	bl	8008134 <USBD_CtlError>
      err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	bf00      	nop
  }

  if (err != 0U)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11c      	bne.n	8007dda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007da0:	893b      	ldrh	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88da      	ldrh	r2, [r3, #6]
 8007db2:	893b      	ldrh	r3, [r7, #8]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bf28      	it	cs
 8007db8:	4613      	movcs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa1f 	bl	8008208 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa58 	bl	8008288 <USBD_CtlSendStatus>
 8007dd8:	e000      	b.n	8007ddc <USBD_GetDescriptor+0x2c8>
    return;
 8007dda:	bf00      	nop
    }
  }
}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop

08007de4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d130      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	88db      	ldrh	r3, [r3, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12c      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b7f      	cmp	r3, #127	; 0x7f
 8007e04:	d828      	bhi.n	8007e58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	885b      	ldrh	r3, [r3, #2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d104      	bne.n	8007e26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f988 	bl	8008134 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e01c      	b.n	8007e60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fd50 	bl	80088d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa25 	bl	8008288 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	e008      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	e003      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f96a 	bl	8008134 <USBD_CtlError>
  }
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	4b41      	ldr	r3, [pc, #260]	; (8007f80 <USBD_SetConfig+0x118>)
 8007e7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e7c:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <USBD_SetConfig+0x118>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d904      	bls.n	8007e8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f954 	bl	8008134 <USBD_CtlError>
 8007e8c:	e075      	b.n	8007f7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d002      	beq.n	8007e9e <USBD_SetConfig+0x36>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d023      	beq.n	8007ee4 <USBD_SetConfig+0x7c>
 8007e9c:	e062      	b.n	8007f64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e9e:	4b38      	ldr	r3, [pc, #224]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01a      	beq.n	8007edc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ea6:	4b36      	ldr	r3, [pc, #216]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007eb8:	4b31      	ldr	r3, [pc, #196]	; (8007f80 <USBD_SetConfig+0x118>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff f9f4 	bl	80072ac <USBD_SetClassConfig>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d104      	bne.n	8007ed4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f931 	bl	8008134 <USBD_CtlError>
            return;
 8007ed2:	e052      	b.n	8007f7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9d7 	bl	8008288 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eda:	e04e      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9d3 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007ee2:	e04a      	b.n	8007f7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ee4:	4b26      	ldr	r3, [pc, #152]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d112      	bne.n	8007f12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ef4:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007efe:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff f9f0 	bl	80072ea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9bc 	bl	8008288 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f10:	e033      	b.n	8007f7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f12:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d01d      	beq.n	8007f5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f9de 	bl	80072ea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f2e:	4b14      	ldr	r3, [pc, #80]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f38:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff f9b4 	bl	80072ac <USBD_SetClassConfig>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d104      	bne.n	8007f54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f8f1 	bl	8008134 <USBD_CtlError>
            return;
 8007f52:	e012      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f997 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007f5a:	e00e      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f993 	bl	8008288 <USBD_CtlSendStatus>
        break;
 8007f62:	e00a      	b.n	8007f7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8e4 	bl	8008134 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff f9b9 	bl	80072ea <USBD_ClrClassConfig>
        break;
 8007f78:	bf00      	nop
    }
  }
}
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	2000042e 	.word	0x2000042e

08007f84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d004      	beq.n	8007fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8cb 	bl	8008134 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f9e:	e021      	b.n	8007fe4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	db17      	blt.n	8007fda <USBD_GetConfig+0x56>
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	dd02      	ble.n	8007fb4 <USBD_GetConfig+0x30>
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d00b      	beq.n	8007fca <USBD_GetConfig+0x46>
 8007fb2:	e012      	b.n	8007fda <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f920 	bl	8008208 <USBD_CtlSendData>
        break;
 8007fc8:	e00c      	b.n	8007fe4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f918 	bl	8008208 <USBD_CtlSendData>
        break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8a9 	bl	8008134 <USBD_CtlError>
        break;
 8007fe2:	bf00      	nop
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d81e      	bhi.n	8008040 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d004      	beq.n	8008014 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f891 	bl	8008134 <USBD_CtlError>
        break;
 8008012:	e01a      	b.n	800804a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f043 0202 	orr.w	r2, r3, #2
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	330c      	adds	r3, #12
 8008034:	2202      	movs	r2, #2
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f8e5 	bl	8008208 <USBD_CtlSendData>
      break;
 800803e:	e004      	b.n	800804a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f876 	bl	8008134 <USBD_CtlError>
      break;
 8008048:	bf00      	nop
  }
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d106      	bne.n	8008072 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f90b 	bl	8008288 <USBD_CtlSendStatus>
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	3b01      	subs	r3, #1
 800808c:	2b02      	cmp	r3, #2
 800808e:	d80b      	bhi.n	80080a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10c      	bne.n	80080b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f8f1 	bl	8008288 <USBD_CtlSendStatus>
      }
      break;
 80080a6:	e004      	b.n	80080b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f842 	bl	8008134 <USBD_CtlError>
      break;
 80080b0:	e000      	b.n	80080b4 <USBD_ClrFeature+0x3a>
      break;
 80080b2:	bf00      	nop
  }
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785a      	ldrb	r2, [r3, #1]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	3302      	adds	r3, #2
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	3303      	adds	r3, #3
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4413      	add	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3304      	adds	r3, #4
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3305      	adds	r3, #5
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	4413      	add	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3306      	adds	r3, #6
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29a      	uxth	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3307      	adds	r3, #7
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	4413      	add	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	80da      	strh	r2, [r3, #6]

}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fb5f 	bl	8008804 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fb5b 	bl	8008804 <USBD_LL_StallEP>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d032      	beq.n	80081d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f834 	bl	80081da <USBD_GetLen>
 8008172:	4603      	mov	r3, r0
 8008174:	3301      	adds	r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	75fa      	strb	r2, [r7, #23]
 8008186:	461a      	mov	r2, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4413      	add	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7812      	ldrb	r2, [r2, #0]
 8008190:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	75fa      	strb	r2, [r7, #23]
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	2203      	movs	r2, #3
 80081a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081a2:	e012      	b.n	80081ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	60fa      	str	r2, [r7, #12]
 80081aa:	7dfa      	ldrb	r2, [r7, #23]
 80081ac:	1c51      	adds	r1, r2, #1
 80081ae:	75f9      	strb	r1, [r7, #23]
 80081b0:	4611      	mov	r1, r2
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	440a      	add	r2, r1
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	75fa      	strb	r2, [r7, #23]
 80081c0:	461a      	mov	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e8      	bne.n	80081a4 <USBD_GetString+0x4e>
    }
  }
}
 80081d2:	bf00      	nop
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081e6:	e005      	b.n	80081f4 <USBD_GetLen+0x1a>
  {
    len++;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	3301      	adds	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3301      	adds	r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f5      	bne.n	80081e8 <USBD_GetLen+0xe>
  }

  return len;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2202      	movs	r2, #2
 800821a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800821e:	88fa      	ldrh	r2, [r7, #6]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	2100      	movs	r1, #0
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fb70 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fb5e 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	2100      	movs	r1, #0
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fb6f 	bl	800895c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2204      	movs	r2, #4
 8008294:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008298:	2300      	movs	r3, #0
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 fb39 	bl	8008916 <USBD_LL_Transmit>

  return USBD_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b082      	sub	sp, #8
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2205      	movs	r2, #5
 80082ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082be:	2300      	movs	r3, #0
 80082c0:	2200      	movs	r2, #0
 80082c2:	2100      	movs	r1, #0
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fb49 	bl	800895c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082d8:	2200      	movs	r2, #0
 80082da:	490e      	ldr	r1, [pc, #56]	; (8008314 <MX_USB_DEVICE_Init+0x40>)
 80082dc:	480e      	ldr	r0, [pc, #56]	; (8008318 <MX_USB_DEVICE_Init+0x44>)
 80082de:	f7fe ff8b 	bl	80071f8 <USBD_Init>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082e8:	f7f9 f935 	bl	8001556 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80082ec:	490b      	ldr	r1, [pc, #44]	; (800831c <MX_USB_DEVICE_Init+0x48>)
 80082ee:	480a      	ldr	r0, [pc, #40]	; (8008318 <MX_USB_DEVICE_Init+0x44>)
 80082f0:	f7fe ffad 	bl	800724e <USBD_RegisterClass>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082fa:	f7f9 f92c 	bl	8001556 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082fe:	4806      	ldr	r0, [pc, #24]	; (8008318 <MX_USB_DEVICE_Init+0x44>)
 8008300:	f7fe ffbe 	bl	8007280 <USBD_Start>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800830a:	f7f9 f924 	bl	8001556 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800830e:	bf00      	nop
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000158 	.word	0x20000158
 8008318:	20000740 	.word	0x20000740
 800831c:	20000010 	.word	0x20000010

08008320 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	6039      	str	r1, [r7, #0]
 800832a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2212      	movs	r2, #18
 8008330:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008332:	4b03      	ldr	r3, [pc, #12]	; (8008340 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20000174 	.word	0x20000174

08008344 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	2204      	movs	r2, #4
 8008354:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008356:	4b03      	ldr	r3, [pc, #12]	; (8008364 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008358:	4618      	mov	r0, r3
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000188 	.word	0x20000188

08008368 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
 800837e:	4808      	ldr	r0, [pc, #32]	; (80083a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008380:	f7ff fee9 	bl	8008156 <USBD_GetString>
 8008384:	e004      	b.n	8008390 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	4904      	ldr	r1, [pc, #16]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
 800838a:	4805      	ldr	r0, [pc, #20]	; (80083a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800838c:	f7ff fee3 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000a04 	.word	0x20000a04
 80083a0:	08008ac0 	.word	0x08008ac0

080083a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083b0:	683a      	ldr	r2, [r7, #0]
 80083b2:	4904      	ldr	r1, [pc, #16]	; (80083c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083b4:	4804      	ldr	r0, [pc, #16]	; (80083c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083b6:	f7ff fece 	bl	8008156 <USBD_GetString>
  return USBD_StrDesc;
 80083ba:	4b02      	ldr	r3, [pc, #8]	; (80083c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20000a04 	.word	0x20000a04
 80083c8:	08008ad4 	.word	0x08008ad4

080083cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	4603      	mov	r3, r0
 80083d4:	6039      	str	r1, [r7, #0]
 80083d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	221a      	movs	r2, #26
 80083dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083de:	f000 f843 	bl	8008468 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083e2:	4b02      	ldr	r3, [pc, #8]	; (80083ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	2000018c 	.word	0x2000018c

080083f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	6039      	str	r1, [r7, #0]
 80083fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d105      	bne.n	800840e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4907      	ldr	r1, [pc, #28]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008406:	4808      	ldr	r0, [pc, #32]	; (8008428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008408:	f7ff fea5 	bl	8008156 <USBD_GetString>
 800840c:	e004      	b.n	8008418 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4904      	ldr	r1, [pc, #16]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008412:	4805      	ldr	r0, [pc, #20]	; (8008428 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008414:	f7ff fe9f 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	20000a04 	.word	0x20000a04
 8008428:	08008ae8 	.word	0x08008ae8

0800842c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b082      	sub	sp, #8
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	6039      	str	r1, [r7, #0]
 8008436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d105      	bne.n	800844a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4907      	ldr	r1, [pc, #28]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008442:	4808      	ldr	r0, [pc, #32]	; (8008464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008444:	f7ff fe87 	bl	8008156 <USBD_GetString>
 8008448:	e004      	b.n	8008454 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4904      	ldr	r1, [pc, #16]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800844e:	4805      	ldr	r0, [pc, #20]	; (8008464 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008450:	f7ff fe81 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000a04 	.word	0x20000a04
 8008464:	08008af4 	.word	0x08008af4

08008468 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <Get_SerialNum+0x44>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008474:	4b0e      	ldr	r3, [pc, #56]	; (80084b0 <Get_SerialNum+0x48>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800847a:	4b0e      	ldr	r3, [pc, #56]	; (80084b4 <Get_SerialNum+0x4c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4413      	add	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d009      	beq.n	80084a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800848e:	2208      	movs	r2, #8
 8008490:	4909      	ldr	r1, [pc, #36]	; (80084b8 <Get_SerialNum+0x50>)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f814 	bl	80084c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008498:	2204      	movs	r2, #4
 800849a:	4908      	ldr	r1, [pc, #32]	; (80084bc <Get_SerialNum+0x54>)
 800849c:	68b8      	ldr	r0, [r7, #8]
 800849e:	f000 f80f 	bl	80084c0 <IntToUnicode>
  }
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	1ffff7e8 	.word	0x1ffff7e8
 80084b0:	1ffff7ec 	.word	0x1ffff7ec
 80084b4:	1ffff7f0 	.word	0x1ffff7f0
 80084b8:	2000018e 	.word	0x2000018e
 80084bc:	2000019e 	.word	0x2000019e

080084c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084d2:	2300      	movs	r3, #0
 80084d4:	75fb      	strb	r3, [r7, #23]
 80084d6:	e027      	b.n	8008528 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	2b09      	cmp	r3, #9
 80084de:	d80b      	bhi.n	80084f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	0f1b      	lsrs	r3, r3, #28
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
 80084e8:	005b      	lsls	r3, r3, #1
 80084ea:	4619      	mov	r1, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	440b      	add	r3, r1
 80084f0:	3230      	adds	r2, #48	; 0x30
 80084f2:	b2d2      	uxtb	r2, r2
 80084f4:	701a      	strb	r2, [r3, #0]
 80084f6:	e00a      	b.n	800850e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	0f1b      	lsrs	r3, r3, #28
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	7dfb      	ldrb	r3, [r7, #23]
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	4619      	mov	r1, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	440b      	add	r3, r1
 8008508:	3237      	adds	r2, #55	; 0x37
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	011b      	lsls	r3, r3, #4
 8008512:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	3301      	adds	r3, #1
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4413      	add	r3, r2
 800851e:	2200      	movs	r2, #0
 8008520:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008522:	7dfb      	ldrb	r3, [r7, #23]
 8008524:	3301      	adds	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
 8008528:	7dfa      	ldrb	r2, [r7, #23]
 800852a:	79fb      	ldrb	r3, [r7, #7]
 800852c:	429a      	cmp	r2, r3
 800852e:	d3d3      	bcc.n	80084d8 <IntToUnicode+0x18>
  }
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
	...

0800853c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a0d      	ldr	r2, [pc, #52]	; (8008580 <HAL_PCD_MspInit+0x44>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d113      	bne.n	8008576 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <HAL_PCD_MspInit+0x48>)
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	4a0c      	ldr	r2, [pc, #48]	; (8008584 <HAL_PCD_MspInit+0x48>)
 8008554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008558:	61d3      	str	r3, [r2, #28]
 800855a:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <HAL_PCD_MspInit+0x48>)
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	2014      	movs	r0, #20
 800856c:	f7f9 fd1f 	bl	8001fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008570:	2014      	movs	r0, #20
 8008572:	f7f9 fd38 	bl	8001fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40005c00 	.word	0x40005c00
 8008584:	40021000 	.word	0x40021000

08008588 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800859c:	4619      	mov	r1, r3
 800859e:	4610      	mov	r0, r2
 80085a0:	f7fe feb6 	bl	8007310 <USBD_LL_SetupStage>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	6879      	ldr	r1, [r7, #4]
 80085c2:	4613      	mov	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	440b      	add	r3, r1
 80085cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	4619      	mov	r1, r3
 80085d6:	f7fe fee6 	bl	80073a6 <USBD_LL_DataOutStage>
}
 80085da:	bf00      	nop
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80085f4:	78fa      	ldrb	r2, [r7, #3]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	440b      	add	r3, r1
 8008602:	333c      	adds	r3, #60	; 0x3c
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	4619      	mov	r1, r3
 800860a:	f7fe ff3d 	bl	8007488 <USBD_LL_DataInStage>
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008624:	4618      	mov	r0, r3
 8008626:	f7ff f84d 	bl	80076c4 <USBD_LL_SOF>
}
 800862a:	bf00      	nop
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800863a:	2301      	movs	r3, #1
 800863c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d001      	beq.n	800864a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008646:	f7f8 ff86 	bl	8001556 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008650:	7bfa      	ldrb	r2, [r7, #15]
 8008652:	4611      	mov	r1, r2
 8008654:	4618      	mov	r0, r3
 8008656:	f7fe fffd 	bl	8007654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe ffb6 	bl	80075d2 <USBD_LL_Reset>
}
 8008666:	bf00      	nop
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}

0800866e <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800866e:	b580      	push	{r7, lr}
 8008670:	b082      	sub	sp, #8
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe fff8 	bl	8007672 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8008682:	2001      	movs	r0, #1
 8008684:	f7f9 f8e8 	bl	8001858 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8008698:	2000      	movs	r0, #0
 800869a:	f7f9 f8dd 	bl	8001858 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe fff8 	bl	800769a <USBD_LL_Resume>
}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086bc:	4a1f      	ldr	r2, [pc, #124]	; (800873c <USBD_LL_Init+0x88>)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <USBD_LL_Init+0x88>)
 80086c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80086cc:	4b1b      	ldr	r3, [pc, #108]	; (800873c <USBD_LL_Init+0x88>)
 80086ce:	4a1c      	ldr	r2, [pc, #112]	; (8008740 <USBD_LL_Init+0x8c>)
 80086d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086d2:	4b1a      	ldr	r3, [pc, #104]	; (800873c <USBD_LL_Init+0x88>)
 80086d4:	2208      	movs	r2, #8
 80086d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086d8:	4b18      	ldr	r3, [pc, #96]	; (800873c <USBD_LL_Init+0x88>)
 80086da:	2202      	movs	r2, #2
 80086dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086de:	4b17      	ldr	r3, [pc, #92]	; (800873c <USBD_LL_Init+0x88>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086e4:	4b15      	ldr	r3, [pc, #84]	; (800873c <USBD_LL_Init+0x88>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <USBD_LL_Init+0x88>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80086f0:	4812      	ldr	r0, [pc, #72]	; (800873c <USBD_LL_Init+0x88>)
 80086f2:	f7fa f835 	bl	8002760 <HAL_PCD_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80086fc:	f7f8 ff2b 	bl	8001556 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008706:	2318      	movs	r3, #24
 8008708:	2200      	movs	r2, #0
 800870a:	2100      	movs	r1, #0
 800870c:	f7fb fb52 	bl	8003db4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008716:	2358      	movs	r3, #88	; 0x58
 8008718:	2200      	movs	r2, #0
 800871a:	2180      	movs	r1, #128	; 0x80
 800871c:	f7fb fb4a 	bl	8003db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800872a:	2200      	movs	r2, #0
 800872c:	2181      	movs	r1, #129	; 0x81
 800872e:	f7fb fb41 	bl	8003db4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000c04 	.word	0x20000c04
 8008740:	40005c00 	.word	0x40005c00

08008744 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800875a:	4618      	mov	r0, r3
 800875c:	f7fa f90b 	bl	8002976 <HAL_PCD_Start>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f93c 	bl	80089e4 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008770:	7bbb      	ldrb	r3, [r7, #14]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
 8008788:	4603      	mov	r3, r0
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	460b      	mov	r3, r1
 800878e:	70bb      	strb	r3, [r7, #2]
 8008790:	4613      	mov	r3, r2
 8008792:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087a2:	78bb      	ldrb	r3, [r7, #2]
 80087a4:	883a      	ldrh	r2, [r7, #0]
 80087a6:	78f9      	ldrb	r1, [r7, #3]
 80087a8:	f7fa fa85 	bl	8002cb6 <HAL_PCD_EP_Open>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f916 	bl	80089e4 <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d6:	2300      	movs	r3, #0
 80087d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087e0:	78fa      	ldrb	r2, [r7, #3]
 80087e2:	4611      	mov	r1, r2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fa facc 	bl	8002d82 <HAL_PCD_EP_Close>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f8f7 	bl	80089e4 <USBD_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fa fb75 	bl	8002f12 <HAL_PCD_EP_SetStall>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f8d8 	bl	80089e4 <USBD_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008838:	7bbb      	ldrb	r3, [r7, #14]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4611      	mov	r1, r2
 8008860:	4618      	mov	r0, r3
 8008862:	f7fa fbb6 	bl	8002fd2 <HAL_PCD_EP_ClrStall>
 8008866:	4603      	mov	r3, r0
 8008868:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f8b9 	bl	80089e4 <USBD_Get_USB_Status>
 8008872:	4603      	mov	r3, r0
 8008874:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008876:	7bbb      	ldrb	r3, [r7, #14]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008892:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008898:	2b00      	cmp	r3, #0
 800889a:	da0c      	bge.n	80088b6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	440b      	add	r3, r1
 80088b0:	3302      	adds	r3, #2
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	e00b      	b.n	80088ce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088bc:	68f9      	ldr	r1, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	440b      	add	r3, r1
 80088c8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80088cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bc80      	pop	{r7}
 80088d6:	4770      	bx	lr

080088d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f2:	78fa      	ldrb	r2, [r7, #3]
 80088f4:	4611      	mov	r1, r2
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fa f9b8 	bl	8002c6c <HAL_PCD_SetAddress>
 80088fc:	4603      	mov	r3, r0
 80088fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 f86e 	bl	80089e4 <USBD_Get_USB_Status>
 8008908:	4603      	mov	r3, r0
 800890a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890c:	7bbb      	ldrb	r3, [r7, #14]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b086      	sub	sp, #24
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	461a      	mov	r2, r3
 8008922:	460b      	mov	r3, r1
 8008924:	72fb      	strb	r3, [r7, #11]
 8008926:	4613      	mov	r3, r2
 8008928:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008938:	893b      	ldrh	r3, [r7, #8]
 800893a:	7af9      	ldrb	r1, [r7, #11]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	f7fa faa5 	bl	8002e8c <HAL_PCD_EP_Transmit>
 8008942:	4603      	mov	r3, r0
 8008944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f84b 	bl	80089e4 <USBD_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008952:	7dbb      	ldrb	r3, [r7, #22]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3718      	adds	r7, #24
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	607a      	str	r2, [r7, #4]
 8008966:	461a      	mov	r2, r3
 8008968:	460b      	mov	r3, r1
 800896a:	72fb      	strb	r3, [r7, #11]
 800896c:	4613      	mov	r3, r2
 800896e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800897e:	893b      	ldrh	r3, [r7, #8]
 8008980:	7af9      	ldrb	r1, [r7, #11]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	f7fa fa45 	bl	8002e12 <HAL_PCD_EP_Receive>
 8008988:	4603      	mov	r3, r0
 800898a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f828 	bl	80089e4 <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008998:	7dbb      	ldrb	r3, [r7, #22]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089ac:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <USBD_static_malloc+0x14>)
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr
 80089b8:	20000430 	.word	0x20000430

080089bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]

}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	4603      	mov	r3, r0
 80089ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d817      	bhi.n	8008a28 <USBD_Get_USB_Status+0x44>
 80089f8:	a201      	add	r2, pc, #4	; (adr r2, 8008a00 <USBD_Get_USB_Status+0x1c>)
 80089fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fe:	bf00      	nop
 8008a00:	08008a11 	.word	0x08008a11
 8008a04:	08008a17 	.word	0x08008a17
 8008a08:	08008a1d 	.word	0x08008a1d
 8008a0c:	08008a23 	.word	0x08008a23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
    break;
 8008a14:	e00b      	b.n	8008a2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a16:	2302      	movs	r3, #2
 8008a18:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1a:	e008      	b.n	8008a2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a20:	e005      	b.n	8008a2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a22:	2302      	movs	r3, #2
 8008a24:	73fb      	strb	r3, [r7, #15]
    break;
 8008a26:	e002      	b.n	8008a2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a28:	2302      	movs	r3, #2
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	bf00      	nop
  }
  return usb_status;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bc80      	pop	{r7}
 8008a38:	4770      	bx	lr
 8008a3a:	bf00      	nop

08008a3c <__libc_init_array>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	2500      	movs	r5, #0
 8008a40:	4e0c      	ldr	r6, [pc, #48]	; (8008a74 <__libc_init_array+0x38>)
 8008a42:	4c0d      	ldr	r4, [pc, #52]	; (8008a78 <__libc_init_array+0x3c>)
 8008a44:	1ba4      	subs	r4, r4, r6
 8008a46:	10a4      	asrs	r4, r4, #2
 8008a48:	42a5      	cmp	r5, r4
 8008a4a:	d109      	bne.n	8008a60 <__libc_init_array+0x24>
 8008a4c:	f000 f822 	bl	8008a94 <_init>
 8008a50:	2500      	movs	r5, #0
 8008a52:	4e0a      	ldr	r6, [pc, #40]	; (8008a7c <__libc_init_array+0x40>)
 8008a54:	4c0a      	ldr	r4, [pc, #40]	; (8008a80 <__libc_init_array+0x44>)
 8008a56:	1ba4      	subs	r4, r4, r6
 8008a58:	10a4      	asrs	r4, r4, #2
 8008a5a:	42a5      	cmp	r5, r4
 8008a5c:	d105      	bne.n	8008a6a <__libc_init_array+0x2e>
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
 8008a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a64:	4798      	blx	r3
 8008a66:	3501      	adds	r5, #1
 8008a68:	e7ee      	b.n	8008a48 <__libc_init_array+0xc>
 8008a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a6e:	4798      	blx	r3
 8008a70:	3501      	adds	r5, #1
 8008a72:	e7f2      	b.n	8008a5a <__libc_init_array+0x1e>
 8008a74:	08008c14 	.word	0x08008c14
 8008a78:	08008c14 	.word	0x08008c14
 8008a7c:	08008c14 	.word	0x08008c14
 8008a80:	08008c18 	.word	0x08008c18

08008a84 <memset>:
 8008a84:	4603      	mov	r3, r0
 8008a86:	4402      	add	r2, r0
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d100      	bne.n	8008a8e <memset+0xa>
 8008a8c:	4770      	bx	lr
 8008a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a92:	e7f9      	b.n	8008a88 <memset+0x4>

08008a94 <_init>:
 8008a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a96:	bf00      	nop
 8008a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a9a:	bc08      	pop	{r3}
 8008a9c:	469e      	mov	lr, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_fini>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr
