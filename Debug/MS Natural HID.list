
MS Natural HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ab4  08008ab4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  08008ab4  08008ab4  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ab4  08008ab4  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  08008abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000990  200001a8  08008c64  000201a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b38  08008c64  00020b38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018172  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d2e  00000000  00000000  00038343  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003c078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001150  00000000  00000000  0003d380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba2c  00000000  00000000  0003e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013939  00000000  00000000  00059efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009092f  00000000  00000000  0006d835  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c28  00000000  00000000  000fe1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001a8 	.word	0x200001a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08008934 	.word	0x08008934

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ac 	.word	0x200001ac
 8000148:	08008934 	.word	0x08008934

0800014c <EEE_erase>:
#include "main.h"
#include "gpio.h"
#include "eee.h"

void EEE_erase(uint8_t page)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000156:	2200      	movs	r2, #0
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	4811      	ldr	r0, [pc, #68]	; (80001a4 <EEE_erase+0x58>)
 800015e:	f002 fa1e 	bl	800259e <HAL_GPIO_WritePin>

	HAL_FLASH_Unlock();
 8000162:	f001 ff1b 	bl	8001f9c <HAL_FLASH_Unlock>
   /* Fill EraseInit structure*/
   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000166:	4b10      	ldr	r3, [pc, #64]	; (80001a8 <EEE_erase+0x5c>)
 8000168:	2200      	movs	r2, #0
 800016a:	601a      	str	r2, [r3, #0]
   EraseInitStruct.PageAddress = PAGE_START(page);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000172:	331c      	adds	r3, #28
 8000174:	02db      	lsls	r3, r3, #11
 8000176:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <EEE_erase+0x5c>)
 8000178:	6093      	str	r3, [r2, #8]
   EraseInitStruct.NbPages     = PAGES_PRO_PROGRAM;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <EEE_erase+0x5c>)
 800017c:	2202      	movs	r2, #2
 800017e:	60da      	str	r2, [r3, #12]

   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000180:	f107 030c 	add.w	r3, r7, #12
 8000184:	4619      	mov	r1, r3
 8000186:	4808      	ldr	r0, [pc, #32]	; (80001a8 <EEE_erase+0x5c>)
 8000188:	f001 fff0 	bl	800216c <HAL_FLASHEx_Erase>
   {
	 /*Error occurred while page erase.*/
	  // TODO process error //return HAL_FLASH_GetError ();
   }
	HAL_FLASH_Lock();
 800018c:	f001 ff2c 	bl	8001fe8 <HAL_FLASH_Lock>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000196:	4803      	ldr	r0, [pc, #12]	; (80001a4 <EEE_erase+0x58>)
 8000198:	f002 fa01 	bl	800259e <HAL_GPIO_WritePin>
}
 800019c:	bf00      	nop
 800019e:	3710      	adds	r7, #16
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	40011000 	.word	0x40011000
 80001a8:	200001c4 	.word	0x200001c4

080001ac <EEE_write>:

void EEE_write(uint8_t page, uint16_t pos, uint32_t data)
{
 80001ac:	b590      	push	{r4, r7, lr}
 80001ae:	b083      	sub	sp, #12
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	4603      	mov	r3, r0
 80001b4:	603a      	str	r2, [r7, #0]
 80001b6:	71fb      	strb	r3, [r7, #7]
 80001b8:	460b      	mov	r3, r1
 80001ba:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <EEE_write+0x58>)
 80001c4:	f002 f9eb 	bl	800259e <HAL_GPIO_WritePin>
	HAL_FLASH_Unlock();
 80001c8:	f001 fee8 	bl	8001f9c <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, PAGE_START(page) + (uint32_t)pos*sizeof(data), data) != HAL_OK)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80001d2:	331c      	adds	r3, #28
 80001d4:	025a      	lsls	r2, r3, #9
 80001d6:	88bb      	ldrh	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	0099      	lsls	r1, r3, #2
 80001dc:	683b      	ldr	r3, [r7, #0]
 80001de:	f04f 0400 	mov.w	r4, #0
 80001e2:	461a      	mov	r2, r3
 80001e4:	4623      	mov	r3, r4
 80001e6:	2002      	movs	r0, #2
 80001e8:	f001 fe68 	bl	8001ebc <HAL_FLASH_Program>
	{
	/* Error occurred while writing data in Flash memory*/
	 // TODO check error. and lock flash return HAL_FLASH_GetError ();
	}
	HAL_FLASH_Lock();
 80001ec:	f001 fefc 	bl	8001fe8 <HAL_FLASH_Lock>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80001f0:	2201      	movs	r2, #1
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4803      	ldr	r0, [pc, #12]	; (8000204 <EEE_write+0x58>)
 80001f8:	f002 f9d1 	bl	800259e <HAL_GPIO_WritePin>
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	bd90      	pop	{r4, r7, pc}
 8000204:	40011000 	.word	0x40011000

08000208 <EEE_read>:

uint32_t EEE_read(uint8_t page, uint16_t pos)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	460a      	mov	r2, r1
 8000212:	71fb      	strb	r3, [r7, #7]
 8000214:	4613      	mov	r3, r2
 8000216:	80bb      	strh	r3, [r7, #4]
	uint32_t data;
	data = *(__IO uint32_t *)(PAGE_START(page) + (uint32_t)pos*sizeof(data));
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800021e:	331c      	adds	r3, #28
 8000220:	025a      	lsls	r2, r3, #9
 8000222:	88bb      	ldrh	r3, [r7, #4]
 8000224:	4413      	add	r3, r2
 8000226:	009b      	lsls	r3, r3, #2
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	60fb      	str	r3, [r7, #12]
	return data;
 800022c:	68fb      	ldr	r3, [r7, #12]
}
 800022e:	4618      	mov	r0, r3
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024c:	4b50      	ldr	r3, [pc, #320]	; (8000390 <MX_GPIO_Init+0x158>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a4f      	ldr	r2, [pc, #316]	; (8000390 <MX_GPIO_Init+0x158>)
 8000252:	f043 0310 	orr.w	r3, r3, #16
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b4d      	ldr	r3, [pc, #308]	; (8000390 <MX_GPIO_Init+0x158>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0310 	and.w	r3, r3, #16
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b4a      	ldr	r3, [pc, #296]	; (8000390 <MX_GPIO_Init+0x158>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a49      	ldr	r2, [pc, #292]	; (8000390 <MX_GPIO_Init+0x158>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b47      	ldr	r3, [pc, #284]	; (8000390 <MX_GPIO_Init+0x158>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60bb      	str	r3, [r7, #8]
 800027a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b44      	ldr	r3, [pc, #272]	; (8000390 <MX_GPIO_Init+0x158>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a43      	ldr	r2, [pc, #268]	; (8000390 <MX_GPIO_Init+0x158>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b41      	ldr	r3, [pc, #260]	; (8000390 <MX_GPIO_Init+0x158>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	607b      	str	r3, [r7, #4]
 8000292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b3e      	ldr	r3, [pc, #248]	; (8000390 <MX_GPIO_Init+0x158>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a3d      	ldr	r2, [pc, #244]	; (8000390 <MX_GPIO_Init+0x158>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b3b      	ldr	r3, [pc, #236]	; (8000390 <MX_GPIO_Init+0x158>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	603b      	str	r3, [r7, #0]
 80002aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b2:	4838      	ldr	r0, [pc, #224]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002b4:	f002 f973 	bl	800259e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, GPIO_PIN_RESET);
 80002b8:	2200      	movs	r2, #0
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4836      	ldr	r0, [pc, #216]	; (8000398 <MX_GPIO_Init+0x160>)
 80002c0:	f002 f96d 	bl	800259e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4619      	mov	r1, r3
 80002dc:	482d      	ldr	r0, [pc, #180]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002de:	f001 ffed 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80002e2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002e8:	2303      	movs	r3, #3
 80002ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	4619      	mov	r1, r3
 80002f2:	4828      	ldr	r0, [pc, #160]	; (8000394 <MX_GPIO_Init+0x15c>)
 80002f4:	f001 ffe2 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80002f8:	f240 13ff 	movw	r3, #511	; 0x1ff
 80002fc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002fe:	2303      	movs	r3, #3
 8000300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	4823      	ldr	r0, [pc, #140]	; (8000398 <MX_GPIO_Init+0x160>)
 800030a:	f001 ffd7 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800030e:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000312:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000314:	2303      	movs	r3, #3
 8000316:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	481f      	ldr	r0, [pc, #124]	; (800039c <MX_GPIO_Init+0x164>)
 8000320:	f001 ffcc 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_DP_PULL_Pin;
 8000324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_DP_PULL_GPIO_Port, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4816      	ldr	r0, [pc, #88]	; (8000398 <MX_GPIO_Init+0x160>)
 800033e:	f001 ffbd 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_CLK_Pin;
 8000342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_GPIO_Init+0x168>)
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	4811      	ldr	r0, [pc, #68]	; (800039c <MX_GPIO_Init+0x164>)
 8000358:	f001 ffb0 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PS2_DATA_Pin;
 800035c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	480a      	ldr	r0, [pc, #40]	; (800039c <MX_GPIO_Init+0x164>)
 8000372:	f001 ffa3 	bl	80022bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2101      	movs	r1, #1
 800037a:	2017      	movs	r0, #23
 800037c:	f001 fd67 	bl	8001e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000380:	2017      	movs	r0, #23
 8000382:	f001 fd80 	bl	8001e86 <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3720      	adds	r7, #32
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40011000 	.word	0x40011000
 8000398:	40010800 	.word	0x40010800
 800039c:	40010c00 	.word	0x40010c00
 80003a0:	10210000 	.word	0x10210000

080003a4 <data_low>:

/* USER CODE BEGIN 2 */

void data_low(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_DATA_GPIO_Port, PS2_DATA_Pin, GPIO_PIN_RESET);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <data_low+0x44>)
 80003b2:	f002 f8f4 	bl	800259e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b6:	463b      	mov	r3, r7
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 80003c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 80003d4:	463b      	mov	r3, r7
 80003d6:	4619      	mov	r1, r3
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <data_low+0x44>)
 80003da:	f001 ff6f 	bl	80022bc <HAL_GPIO_Init>
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40010c00 	.word	0x40010c00

080003ec <clock_low>:

void clock_low(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PS2_CLK_GPIO_Port, PS2_CLK_Pin, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <clock_low+0x44>)
 80003fa:	f002 f8d0 	bl	800259e <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fe:	463b      	mov	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800040a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800040e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000414:	2301      	movs	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2302      	movs	r3, #2
 800041a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800041c:	463b      	mov	r3, r7
 800041e:	4619      	mov	r1, r3
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <clock_low+0x44>)
 8000422:	f001 ff4b 	bl	80022bc <HAL_GPIO_Init>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010c00 	.word	0x40010c00

08000434 <data_release>:

void data_release(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	463b      	mov	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_DATA_Pin;
 8000446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800044a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000450:	2301      	movs	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_DATA_GPIO_Port, &GPIO_InitStruct);
 8000454:	463b      	mov	r3, r7
 8000456:	4619      	mov	r1, r3
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <data_release+0x34>)
 800045a:	f001 ff2f 	bl	80022bc <HAL_GPIO_Init>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010c00 	.word	0x40010c00

0800046c <clock_release>:

void clock_release(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	463b      	mov	r3, r7
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]
 800047a:	609a      	str	r2, [r3, #8]
 800047c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = PS2_CLK_Pin;
 800047e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000482:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <clock_release+0x34>)
 8000486:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	2301      	movs	r3, #1
 800048a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(PS2_CLK_GPIO_Port, &GPIO_InitStruct);
 800048c:	463b      	mov	r3, r7
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <clock_release+0x38>)
 8000492:	f001 ff13 	bl	80022bc <HAL_GPIO_Init>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	10210000 	.word	0x10210000
 80004a4:	40010c00 	.word	0x40010c00

080004a8 <matrix_scan>:
 */



void matrix_scan(uint8_t code)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
        E0_7E_E0,
        E0_7E_E0_F0,
    } state = INIT;


    is_modified = 0;
 80004b2:	4bb5      	ldr	r3, [pc, #724]	; (8000788 <matrix_scan+0x2e0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

    // 'pseudo break code' hack
    if (matrix_is_on(ROW(PAUSE), COL(PAUSE))) {
 80004b8:	2106      	movs	r1, #6
 80004ba:	201f      	movs	r0, #31
 80004bc:	f000 f98c 	bl	80007d8 <matrix_is_on>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <matrix_scan+0x24>
        matrix_break(PAUSE);
 80004c6:	20fe      	movs	r0, #254	; 0xfe
 80004c8:	f000 f9f4 	bl	80008b4 <matrix_break>
    }

	if (code == 0)
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 817c 	beq.w	80007cc <matrix_scan+0x324>
		return;

	switch (state) {
 80004d4:	4bad      	ldr	r3, [pc, #692]	; (800078c <matrix_scan+0x2e4>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b0d      	cmp	r3, #13
 80004da:	f200 8172 	bhi.w	80007c2 <matrix_scan+0x31a>
 80004de:	a201      	add	r2, pc, #4	; (adr r2, 80004e4 <matrix_scan+0x3c>)
 80004e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e4:	0800051d 	.word	0x0800051d
 80004e8:	08000619 	.word	0x08000619
 80004ec:	0800059d 	.word	0x0800059d
 80004f0:	08000669 	.word	0x08000669
 80004f4:	080006cd 	.word	0x080006cd
 80004f8:	080006e5 	.word	0x080006e5
 80004fc:	080006fd 	.word	0x080006fd
 8000500:	08000715 	.word	0x08000715
 8000504:	0800072d 	.word	0x0800072d
 8000508:	08000745 	.word	0x08000745
 800050c:	0800075d 	.word	0x0800075d
 8000510:	0800077b 	.word	0x0800077b
 8000514:	08000799 	.word	0x08000799
 8000518:	080007af 	.word	0x080007af
		case INIT:
			switch (code) {
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	2b84      	cmp	r3, #132	; 0x84
 8000520:	d01f      	beq.n	8000562 <matrix_scan+0xba>
 8000522:	2b84      	cmp	r3, #132	; 0x84
 8000524:	dc04      	bgt.n	8000530 <matrix_scan+0x88>
 8000526:	2b00      	cmp	r3, #0
 8000528:	d022      	beq.n	8000570 <matrix_scan+0xc8>
 800052a:	2b83      	cmp	r3, #131	; 0x83
 800052c:	d012      	beq.n	8000554 <matrix_scan+0xac>
 800052e:	e025      	b.n	800057c <matrix_scan+0xd4>
 8000530:	2be1      	cmp	r3, #225	; 0xe1
 8000532:	d00b      	beq.n	800054c <matrix_scan+0xa4>
 8000534:	2bf0      	cmp	r3, #240	; 0xf0
 8000536:	d005      	beq.n	8000544 <matrix_scan+0x9c>
 8000538:	2be0      	cmp	r3, #224	; 0xe0
 800053a:	d11f      	bne.n	800057c <matrix_scan+0xd4>
				case 0xE0:
					state = E0;
 800053c:	4b93      	ldr	r3, [pc, #588]	; (800078c <matrix_scan+0x2e4>)
 800053e:	2202      	movs	r2, #2
 8000540:	701a      	strb	r2, [r3, #0]
					break;
 8000542:	e02a      	b.n	800059a <matrix_scan+0xf2>
				case 0xF0:
					state = F0;
 8000544:	4b91      	ldr	r3, [pc, #580]	; (800078c <matrix_scan+0x2e4>)
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
					break;
 800054a:	e026      	b.n	800059a <matrix_scan+0xf2>
				case 0xE1:
					state = E1;
 800054c:	4b8f      	ldr	r3, [pc, #572]	; (800078c <matrix_scan+0x2e4>)
 800054e:	2204      	movs	r2, #4
 8000550:	701a      	strb	r2, [r3, #0]
					break;
 8000552:	e022      	b.n	800059a <matrix_scan+0xf2>
				case 0x83:  // F7
					matrix_make(F7);
 8000554:	2083      	movs	r0, #131	; 0x83
 8000556:	f000 f95b 	bl	8000810 <matrix_make>
					state = INIT;
 800055a:	4b8c      	ldr	r3, [pc, #560]	; (800078c <matrix_scan+0x2e4>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
					break;
 8000560:	e01b      	b.n	800059a <matrix_scan+0xf2>
				case 0x84:  // Alt'd PrintScreen
					matrix_make(PRINT_SCREEN);
 8000562:	20fc      	movs	r0, #252	; 0xfc
 8000564:	f000 f954 	bl	8000810 <matrix_make>
					state = INIT;
 8000568:	4b88      	ldr	r3, [pc, #544]	; (800078c <matrix_scan+0x2e4>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
					break;
 800056e:	e014      	b.n	800059a <matrix_scan+0xf2>
				case 0x00:  // Overrun [3]p.25
					matrix_clear();
 8000570:	f000 f9f4 	bl	800095c <matrix_clear>
					state = INIT;
 8000574:	4b85      	ldr	r3, [pc, #532]	; (800078c <matrix_scan+0x2e4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
					break;
 800057a:	e00e      	b.n	800059a <matrix_scan+0xf2>
				default:    // normal key make
					if (code < 0x80) {
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db04      	blt.n	800058e <matrix_scan+0xe6>
						matrix_make(code);
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f942 	bl	8000810 <matrix_make>
 800058c:	e001      	b.n	8000592 <matrix_scan+0xea>
					} else {
						matrix_clear();
 800058e:	f000 f9e5 	bl	800095c <matrix_clear>
					}
					state = INIT;
 8000592:	4b7e      	ldr	r3, [pc, #504]	; (800078c <matrix_scan+0x2e4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000598:	e116      	b.n	80007c8 <matrix_scan+0x320>
 800059a:	e115      	b.n	80007c8 <matrix_scan+0x320>
		case E0:    // E0-Prefixed
			switch (code) {
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	2b59      	cmp	r3, #89	; 0x59
 80005a0:	d00d      	beq.n	80005be <matrix_scan+0x116>
 80005a2:	2b59      	cmp	r3, #89	; 0x59
 80005a4:	dc04      	bgt.n	80005b0 <matrix_scan+0x108>
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d01c      	beq.n	80005e4 <matrix_scan+0x13c>
 80005aa:	2b12      	cmp	r3, #18
 80005ac:	d007      	beq.n	80005be <matrix_scan+0x116>
 80005ae:	e020      	b.n	80005f2 <matrix_scan+0x14a>
 80005b0:	2b83      	cmp	r3, #131	; 0x83
 80005b2:	d010      	beq.n	80005d6 <matrix_scan+0x12e>
 80005b4:	2bf0      	cmp	r3, #240	; 0xf0
 80005b6:	d00a      	beq.n	80005ce <matrix_scan+0x126>
 80005b8:	2b7e      	cmp	r3, #126	; 0x7e
 80005ba:	d004      	beq.n	80005c6 <matrix_scan+0x11e>
 80005bc:	e019      	b.n	80005f2 <matrix_scan+0x14a>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 80005be:	4b73      	ldr	r3, [pc, #460]	; (800078c <matrix_scan+0x2e4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
					break;
 80005c4:	e027      	b.n	8000616 <matrix_scan+0x16e>
				case 0x7E:  // Control'd Pause
					state = E0_7E;
 80005c6:	4b71      	ldr	r3, [pc, #452]	; (800078c <matrix_scan+0x2e4>)
 80005c8:	220b      	movs	r2, #11
 80005ca:	701a      	strb	r2, [r3, #0]
					break;
 80005cc:	e023      	b.n	8000616 <matrix_scan+0x16e>
				case 0xF0:
					state = E0_F0;
 80005ce:	4b6f      	ldr	r3, [pc, #444]	; (800078c <matrix_scan+0x2e4>)
 80005d0:	2203      	movs	r2, #3
 80005d2:	701a      	strb	r2, [r3, #0]
					break;
 80005d4:	e01f      	b.n	8000616 <matrix_scan+0x16e>
				case 0x83:
					matrix_make(F7);
 80005d6:	2083      	movs	r0, #131	; 0x83
 80005d8:	f000 f91a 	bl	8000810 <matrix_make>
					state = INIT;
 80005dc:	4b6b      	ldr	r3, [pc, #428]	; (800078c <matrix_scan+0x2e4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
					break;
 80005e2:	e018      	b.n	8000616 <matrix_scan+0x16e>
				case 0x03:
					matrix_make(F5);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f913 	bl	8000810 <matrix_make>
					state = INIT;
 80005ea:	4b68      	ldr	r3, [pc, #416]	; (800078c <matrix_scan+0x2e4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
					break;
 80005f0:	e011      	b.n	8000616 <matrix_scan+0x16e>
				default:
					if (code < 0x80) {
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db07      	blt.n	800060a <matrix_scan+0x162>
						matrix_make(code|0x80);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f904 	bl	8000810 <matrix_make>
 8000608:	e001      	b.n	800060e <matrix_scan+0x166>
					} else {
						matrix_clear();
 800060a:	f000 f9a7 	bl	800095c <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 800060e:	4b5f      	ldr	r3, [pc, #380]	; (800078c <matrix_scan+0x2e4>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000614:	e0d8      	b.n	80007c8 <matrix_scan+0x320>
 8000616:	e0d7      	b.n	80007c8 <matrix_scan+0x320>
		case F0:    // Break code
			switch (code) {
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b84      	cmp	r3, #132	; 0x84
 800061c:	d00a      	beq.n	8000634 <matrix_scan+0x18c>
 800061e:	2bf0      	cmp	r3, #240	; 0xf0
 8000620:	d00f      	beq.n	8000642 <matrix_scan+0x19a>
 8000622:	2b83      	cmp	r3, #131	; 0x83
 8000624:	d110      	bne.n	8000648 <matrix_scan+0x1a0>
				case 0x83:  // F7
					matrix_break(F7);
 8000626:	2083      	movs	r0, #131	; 0x83
 8000628:	f000 f944 	bl	80008b4 <matrix_break>
					state = INIT;
 800062c:	4b57      	ldr	r3, [pc, #348]	; (800078c <matrix_scan+0x2e4>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
					break;
 8000632:	e018      	b.n	8000666 <matrix_scan+0x1be>
				case 0x84:  // Alt'd PrintScreen
					matrix_break(PRINT_SCREEN);
 8000634:	20fc      	movs	r0, #252	; 0xfc
 8000636:	f000 f93d 	bl	80008b4 <matrix_break>
					state = INIT;
 800063a:	4b54      	ldr	r3, [pc, #336]	; (800078c <matrix_scan+0x2e4>)
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
					break;
 8000640:	e011      	b.n	8000666 <matrix_scan+0x1be>
				case 0xF0:
					matrix_clear();
 8000642:	f000 f98b 	bl	800095c <matrix_clear>
					//clear_keyboard();
					break;
 8000646:	e00e      	b.n	8000666 <matrix_scan+0x1be>
				default:
				if (code < 0x80) {
 8000648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064c:	2b00      	cmp	r3, #0
 800064e:	db04      	blt.n	800065a <matrix_scan+0x1b2>
					matrix_break(code);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f92e 	bl	80008b4 <matrix_break>
 8000658:	e001      	b.n	800065e <matrix_scan+0x1b6>
				} else {
					matrix_clear();
 800065a:	f000 f97f 	bl	800095c <matrix_clear>
					//clear_keyboard();
				}
				state = INIT;
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <matrix_scan+0x2e4>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000664:	e0b0      	b.n	80007c8 <matrix_scan+0x320>
 8000666:	e0af      	b.n	80007c8 <matrix_scan+0x320>
		case E0_F0: // Break code of E0-prefixed
			switch (code) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b12      	cmp	r3, #18
 800066c:	d009      	beq.n	8000682 <matrix_scan+0x1da>
 800066e:	2b12      	cmp	r3, #18
 8000670:	dc02      	bgt.n	8000678 <matrix_scan+0x1d0>
 8000672:	2b03      	cmp	r3, #3
 8000674:	d010      	beq.n	8000698 <matrix_scan+0x1f0>
 8000676:	e016      	b.n	80006a6 <matrix_scan+0x1fe>
 8000678:	2b59      	cmp	r3, #89	; 0x59
 800067a:	d002      	beq.n	8000682 <matrix_scan+0x1da>
 800067c:	2b83      	cmp	r3, #131	; 0x83
 800067e:	d004      	beq.n	800068a <matrix_scan+0x1e2>
 8000680:	e011      	b.n	80006a6 <matrix_scan+0x1fe>
				case 0x12:  // to be ignored
				case 0x59:  // to be ignored
					state = INIT;
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <matrix_scan+0x2e4>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
					break;
 8000688:	e01f      	b.n	80006ca <matrix_scan+0x222>
				case 0x83:  // F7
					matrix_break(F7);
 800068a:	2083      	movs	r0, #131	; 0x83
 800068c:	f000 f912 	bl	80008b4 <matrix_break>
					state = INIT;
 8000690:	4b3e      	ldr	r3, [pc, #248]	; (800078c <matrix_scan+0x2e4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
					break;
 8000696:	e018      	b.n	80006ca <matrix_scan+0x222>
				case 0x03:  // F5
					matrix_break(F5);
 8000698:	2003      	movs	r0, #3
 800069a:	f000 f90b 	bl	80008b4 <matrix_break>
					state = INIT;
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <matrix_scan+0x2e4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
					break;
 80006a4:	e011      	b.n	80006ca <matrix_scan+0x222>
				default:
					if (code < 0x80) {
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db07      	blt.n	80006be <matrix_scan+0x216>
						matrix_break(code|0x80);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f8fc 	bl	80008b4 <matrix_break>
 80006bc:	e001      	b.n	80006c2 <matrix_scan+0x21a>
					} else {
						matrix_clear();
 80006be:	f000 f94d 	bl	800095c <matrix_clear>
						//clear_keyboard();
					}
					state = INIT;
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <matrix_scan+0x2e4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006c8:	e07e      	b.n	80007c8 <matrix_scan+0x320>
 80006ca:	e07d      	b.n	80007c8 <matrix_scan+0x320>
		// following are states of Pause
		case E1:
			switch (code) {
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b14      	cmp	r3, #20
 80006d0:	d104      	bne.n	80006dc <matrix_scan+0x234>
				case 0x14:
					state = E1_14;
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <matrix_scan+0x2e4>)
 80006d4:	2205      	movs	r2, #5
 80006d6:	701a      	strb	r2, [r3, #0]
					break;
 80006d8:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80006da:	e075      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 80006dc:	4b2b      	ldr	r3, [pc, #172]	; (800078c <matrix_scan+0x2e4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	e071      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14:
			switch (code) {
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b77      	cmp	r3, #119	; 0x77
 80006e8:	d104      	bne.n	80006f4 <matrix_scan+0x24c>
				case 0x77:
					state = E1_14_77;
 80006ea:	4b28      	ldr	r3, [pc, #160]	; (800078c <matrix_scan+0x2e4>)
 80006ec:	2206      	movs	r2, #6
 80006ee:	701a      	strb	r2, [r3, #0]
					break;
 80006f0:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 80006f2:	e069      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <matrix_scan+0x2e4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
			break;
 80006fa:	e065      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77:
			switch (code) {
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	2be1      	cmp	r3, #225	; 0xe1
 8000700:	d104      	bne.n	800070c <matrix_scan+0x264>
				case 0xE1:
					state = E1_14_77_E1;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <matrix_scan+0x2e4>)
 8000704:	2207      	movs	r2, #7
 8000706:	701a      	strb	r2, [r3, #0]
					break;
 8000708:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800070a:	e05d      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <matrix_scan+0x2e4>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
			break;
 8000712:	e059      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1:
			switch (code) {
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2bf0      	cmp	r3, #240	; 0xf0
 8000718:	d104      	bne.n	8000724 <matrix_scan+0x27c>
				case 0xF0:
					state = E1_14_77_E1_F0;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <matrix_scan+0x2e4>)
 800071c:	2208      	movs	r2, #8
 800071e:	701a      	strb	r2, [r3, #0]
					break;
 8000720:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000722:	e051      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <matrix_scan+0x2e4>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
			break;
 800072a:	e04d      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0:
			switch (code) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b14      	cmp	r3, #20
 8000730:	d104      	bne.n	800073c <matrix_scan+0x294>
				case 0x14:
					state = E1_14_77_E1_F0_14;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <matrix_scan+0x2e4>)
 8000734:	2209      	movs	r2, #9
 8000736:	701a      	strb	r2, [r3, #0]
					break;
 8000738:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 800073a:	e045      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <matrix_scan+0x2e4>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
			break;
 8000742:	e041      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14:
			switch (code) {
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	2bf0      	cmp	r3, #240	; 0xf0
 8000748:	d104      	bne.n	8000754 <matrix_scan+0x2ac>
				case 0xF0:
					state = E1_14_77_E1_F0_14_F0;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <matrix_scan+0x2e4>)
 800074c:	220a      	movs	r2, #10
 800074e:	701a      	strb	r2, [r3, #0]
					break;
 8000750:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000752:	e039      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <matrix_scan+0x2e4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
			break;
 800075a:	e035      	b.n	80007c8 <matrix_scan+0x320>
		case E1_14_77_E1_F0_14_F0:
			switch (code) {
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b77      	cmp	r3, #119	; 0x77
 8000760:	d107      	bne.n	8000772 <matrix_scan+0x2ca>
				case 0x77:
					matrix_make(PAUSE);
 8000762:	20fe      	movs	r0, #254	; 0xfe
 8000764:	f000 f854 	bl	8000810 <matrix_make>
					state = INIT;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <matrix_scan+0x2e4>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
					break;
 800076e:	bf00      	nop
				default:
					state = INIT;
			}
			break;
 8000770:	e02a      	b.n	80007c8 <matrix_scan+0x320>
					state = INIT;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <matrix_scan+0x2e4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
			break;
 8000778:	e026      	b.n	80007c8 <matrix_scan+0x320>
		// Following are states of Control'd Pause
		case E0_7E:
			if (code == 0xE0)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2be0      	cmp	r3, #224	; 0xe0
 800077e:	d107      	bne.n	8000790 <matrix_scan+0x2e8>
				state = E0_7E_E0;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <matrix_scan+0x2e4>)
 8000782:	220c      	movs	r2, #12
 8000784:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 8000786:	e01f      	b.n	80007c8 <matrix_scan+0x320>
 8000788:	200001f4 	.word	0x200001f4
 800078c:	200001f5 	.word	0x200001f5
				state = INIT;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <matrix_scan+0x32c>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
			break;
 8000796:	e017      	b.n	80007c8 <matrix_scan+0x320>
		case E0_7E_E0:
			if (code == 0xF0)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	2bf0      	cmp	r3, #240	; 0xf0
 800079c:	d103      	bne.n	80007a6 <matrix_scan+0x2fe>
				state = E0_7E_E0_F0;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <matrix_scan+0x32c>)
 80007a0:	220d      	movs	r2, #13
 80007a2:	701a      	strb	r2, [r3, #0]
			else
				state = INIT;
			break;
 80007a4:	e010      	b.n	80007c8 <matrix_scan+0x320>
				state = INIT;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <matrix_scan+0x32c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
			break;
 80007ac:	e00c      	b.n	80007c8 <matrix_scan+0x320>
		case E0_7E_E0_F0:
			if (code == 0x7E)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b7e      	cmp	r3, #126	; 0x7e
 80007b2:	d102      	bne.n	80007ba <matrix_scan+0x312>
				matrix_make(PAUSE);
 80007b4:	20fe      	movs	r0, #254	; 0xfe
 80007b6:	f000 f82b 	bl	8000810 <matrix_make>
			state = INIT;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <matrix_scan+0x32c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
			break;
 80007c0:	e002      	b.n	80007c8 <matrix_scan+0x320>
		default:
			state = INIT;
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <matrix_scan+0x32c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
	}


    // TODO: request RESEND when error occurs?
    return;
 80007c8:	bf00      	nop
 80007ca:	e000      	b.n	80007ce <matrix_scan+0x326>
		return;
 80007cc:	bf00      	nop
}
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200001f5 	.word	0x200001f5

080007d8 <matrix_is_on>:
}



uint8_t matrix_is_on(uint8_t row, uint8_t col)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	4613      	mov	r3, r2
 80007e6:	71bb      	strb	r3, [r7, #6]
    return (matrix[row] & (1<<col));
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <matrix_is_on+0x34>)
 80007ec:	5cd3      	ldrb	r3, [r2, r3]
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	4013      	ands	r3, r2
 80007fc:	b25b      	sxtb	r3, r3
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	200001d4 	.word	0x200001d4

08000810 <matrix_make>:
}



void matrix_make(uint8_t code)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    if (!matrix_is_on(ROW(code), COL(code))) {
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	b2da      	uxtb	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4619      	mov	r1, r3
 800082a:	4610      	mov	r0, r2
 800082c:	f7ff ffd4 	bl	80007d8 <matrix_is_on>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d135      	bne.n	80008a2 <matrix_make+0x92>
	    matrix[ROW(code)] |= 1<<COL(code);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <matrix_make+0x9c>)
 8000840:	5c9b      	ldrb	r3, [r3, r2]
 8000842:	b25a      	sxtb	r2, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	2101      	movs	r1, #1
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b259      	sxtb	r1, r3
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	08db      	lsrs	r3, r3, #3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	461a      	mov	r2, r3
 800085e:	b2c9      	uxtb	r1, r1
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <matrix_make+0x9c>)
 8000862:	5499      	strb	r1, [r3, r2]
	    is_modified = 1;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <matrix_make+0xa0>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	08db      	lsrs	r3, r3, #3
 800086e:	b2da      	uxtb	r2, r3
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	4610      	mov	r0, r2
 800087c:	f000 faf4 	bl	8000e68 <keymap_key_to_keycode>
 8000880:	4603      	mov	r3, r0
 8000882:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	2bf0      	cmp	r3, #240	; 0xf0
 8000888:	d902      	bls.n	8000890 <matrix_make+0x80>
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	2bf4      	cmp	r3, #244	; 0xf4
 800088e:	d904      	bls.n	800089a <matrix_make+0x8a>
	    	prog_push_code(code, 1);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2101      	movs	r1, #1
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f8a7 	bl	80009e8 <prog_push_code>
		register_code(keycode);
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 faf9 	bl	8000e94 <register_code>
    }

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001d4 	.word	0x200001d4
 80008b0:	200001f4 	.word	0x200001f4

080008b4 <matrix_break>:

void matrix_break(uint8_t code)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
    if (matrix_is_on(ROW(code), COL(code))) {
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4619      	mov	r1, r3
 80008ce:	4610      	mov	r0, r2
 80008d0:	f7ff ff82 	bl	80007d8 <matrix_is_on>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d037      	beq.n	800094a <matrix_break+0x96>
        matrix[ROW(code)] &= ~(1<<COL(code));
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <matrix_break+0xa0>)
 80008e4:	5c9b      	ldrb	r3, [r3, r2]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	2101      	movs	r1, #1
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	4013      	ands	r3, r2
 80008fc:	b259      	sxtb	r1, r3
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	b2c9      	uxtb	r1, r1
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <matrix_break+0xa0>)
 800090a:	5499      	strb	r1, [r3, r2]
        is_modified = 1;
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <matrix_break+0xa4>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
		uint8_t keycode = keymap_key_to_keycode(ROW(code),COL(code));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	b2da      	uxtb	r2, r3
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4619      	mov	r1, r3
 8000922:	4610      	mov	r0, r2
 8000924:	f000 faa0 	bl	8000e68 <keymap_key_to_keycode>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
		if (!IS_PROG(keycode))
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	2bf0      	cmp	r3, #240	; 0xf0
 8000930:	d902      	bls.n	8000938 <matrix_break+0x84>
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2bf4      	cmp	r3, #244	; 0xf4
 8000936:	d904      	bls.n	8000942 <matrix_break+0x8e>
	    	prog_push_code(code, 0);
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f000 f853 	bl	80009e8 <prog_push_code>
		unregister_code(keycode);
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fb77 	bl	8001038 <unregister_code>
    }
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001d4 	.word	0x200001d4
 8000958:	200001f4 	.word	0x200001f4

0800095c <matrix_clear>:

void matrix_clear(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
    for (uint8_t i=0; i < MATRIX_ROWS; i++) matrix[i] = 0x00;
 8000962:	2300      	movs	r3, #0
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e006      	b.n	8000976 <matrix_clear+0x1a>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <matrix_clear+0x2c>)
 800096c:	2100      	movs	r1, #0
 800096e:	54d1      	strb	r1, [r2, r3]
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	3301      	adds	r3, #1
 8000974:	71fb      	strb	r3, [r7, #7]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b1f      	cmp	r3, #31
 800097a:	d9f5      	bls.n	8000968 <matrix_clear+0xc>
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200001d4 	.word	0x200001d4

0800098c <is_prog_error>:

static uint8_t current_code = 0;
static uint16_t current_pos = 0;
static uint32_t last_prog_time = 0;

uint8_t is_prog_error(void) { return prog_error; }
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
 8000990:	4b02      	ldr	r3, [pc, #8]	; (800099c <is_prog_error+0x10>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	200001f8 	.word	0x200001f8

080009a0 <is_disco_time>:
uint8_t is_prog_in_progress(void) { return programming_in_progress; }
uint8_t is_prog_long_pressed(void) { return (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)); }

uint8_t is_disco_time(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <is_disco_time+0x3c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d009      	beq.n	80009c0 <is_disco_time+0x20>
 80009ac:	f001 f94c 	bl	8001c48 <HAL_GetTick>
 80009b0:	4602      	mov	r2, r0
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <is_disco_time+0x3c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009bc:	4293      	cmp	r3, r2
 80009be:	d807      	bhi.n	80009d0 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <is_disco_time+0x40>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d103      	bne.n	80009d0 <is_disco_time+0x30>
			(programming_in_progress||prog_is_running));
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <is_disco_time+0x44>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <is_disco_time+0x34>
	return ((key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer))) ||
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <is_disco_time+0x36>
 80009d4:	2300      	movs	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001fc 	.word	0x200001fc
 80009e0:	200001f6 	.word	0x200001f6
 80009e4:	200001f7 	.word	0x200001f7

080009e8 <prog_push_code>:
 * 8 last bits -> code
 *
 * All written inverted (so empty flash 0xffff -> transforms to 0x0000, which means no code last code)
 */
void prog_push_code(uint8_t code, uint8_t make)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint32_t packet = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
	if (!programming_in_progress)
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <prog_push_code+0xbc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d048      	beq.n	8000a96 <prog_push_code+0xae>
		return;
	if (current_pos > PROG_MAX_POS - PROG_STEPS_TO_ERROR)
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <prog_push_code+0xc0>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	f5b3 7ffb 	cmp.w	r3, #502	; 0x1f6
 8000a0c:	d902      	bls.n	8000a14 <prog_push_code+0x2c>
		prog_error = 1;
 8000a0e:	4b27      	ldr	r3, [pc, #156]	; (8000aac <prog_push_code+0xc4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	701a      	strb	r2, [r3, #0]
	if (current_pos == PROG_MAX_POS)
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <prog_push_code+0xc0>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a1c:	d03d      	beq.n	8000a9a <prog_push_code+0xb2>
		return;
	if (last_prog_time)
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <prog_push_code+0xc8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d011      	beq.n	8000a4a <prog_push_code+0x62>
	{
		packet = HAL_GetTick() - last_prog_time;
 8000a26:	f001 f90f 	bl	8001c48 <HAL_GetTick>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <prog_push_code+0xc8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	60fb      	str	r3, [r7, #12]
		if (packet >= (1 << 23))
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000a3a:	d302      	bcc.n	8000a42 <prog_push_code+0x5a>
			packet = ~0;
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	60fb      	str	r3, [r7, #12]
		packet = (packet >> PROG_TIME_MULT) << 9; // divide 64 and shift time to the right
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	099b      	lsrs	r3, r3, #6
 8000a46:	025b      	lsls	r3, r3, #9
 8000a48:	60fb      	str	r3, [r7, #12]
	}
	if (packet == 0)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <prog_push_code+0x6e>
		packet = (1<<9);
 8000a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a54:	60fb      	str	r3, [r7, #12]
	last_prog_time = HAL_GetTick();
 8000a56:	f001 f8f7 	bl	8001c48 <HAL_GetTick>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <prog_push_code+0xc8>)
 8000a5e:	601a      	str	r2, [r3, #0]
	if (make)
 8000a60:	79bb      	ldrb	r3, [r7, #6]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <prog_push_code+0x86>
		packet |= (1<<8);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	60fb      	str	r3, [r7, #12]
	packet |= code;
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
	EEE_write(current_code - KP_START, current_pos++, ~packet);
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <prog_push_code+0xcc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	330f      	adds	r3, #15
 8000a7c:	b2d8      	uxtb	r0, r3
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <prog_push_code+0xc0>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	b291      	uxth	r1, r2
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <prog_push_code+0xc0>)
 8000a88:	8011      	strh	r1, [r2, #0]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	43d2      	mvns	r2, r2
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f7ff fb8c 	bl	80001ac <EEE_write>
 8000a94:	e002      	b.n	8000a9c <prog_push_code+0xb4>
		return;
 8000a96:	bf00      	nop
 8000a98:	e000      	b.n	8000a9c <prog_push_code+0xb4>
		return;
 8000a9a:	bf00      	nop
}
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200001f6 	.word	0x200001f6
 8000aa8:	20000206 	.word	0x20000206
 8000aac:	200001f8 	.word	0x200001f8
 8000ab0:	20000208 	.word	0x20000208
 8000ab4:	20000204 	.word	0x20000204

08000ab8 <prog_pop_code>:


void prog_pop_code(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	uint32_t packet;
	if (!prog_is_running)
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <prog_pop_code+0xc0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d052      	beq.n	8000b6c <prog_pop_code+0xb4>
		return;
	if (next_time < HAL_GetTick())
 8000ac6:	f001 f8bf 	bl	8001c48 <HAL_GetTick>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <prog_pop_code+0xc4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d94e      	bls.n	8000b72 <prog_pop_code+0xba>
	{
		if ((packet = ~EEE_read(current_code - KP_START, current_pos++)))
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <prog_pop_code+0xc8>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	330f      	adds	r3, #15
 8000ada:	b2d8      	uxtb	r0, r3
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <prog_pop_code+0xcc>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	1c5a      	adds	r2, r3, #1
 8000ae2:	b291      	uxth	r1, r2
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <prog_pop_code+0xcc>)
 8000ae6:	8011      	strh	r1, [r2, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f7ff fb8d 	bl	8000208 <EEE_read>
 8000aee:	4603      	mov	r3, r0
 8000af0:	43db      	mvns	r3, r3
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d02d      	beq.n	8000b56 <prog_pop_code+0x9e>
		{
			if (packet & (1<<8))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d005      	beq.n	8000b10 <prog_pop_code+0x58>
				matrix_make((uint8_t)(packet & 0xFF));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fe81 	bl	8000810 <matrix_make>
 8000b0e:	e004      	b.n	8000b1a <prog_pop_code+0x62>
			else
				matrix_break((uint8_t)(packet & 0xFF));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fecd 	bl	80008b4 <matrix_break>

			if (current_pos < PROG_MAX_POS)
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <prog_pop_code+0xcc>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b22:	d218      	bcs.n	8000b56 <prog_pop_code+0x9e>
			{
				packet = ~EEE_read(current_code - KP_START, current_pos);
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <prog_pop_code+0xc8>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	330f      	adds	r3, #15
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <prog_pop_code+0xcc>)
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	4610      	mov	r0, r2
 8000b34:	f7ff fb68 	bl	8000208 <EEE_read>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	607b      	str	r3, [r7, #4]
				next_time = HAL_GetTick() + ((packet>>9)<<PROG_TIME_MULT);
 8000b3e:	f001 f883 	bl	8001c48 <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0a5b      	lsrs	r3, r3, #9
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	; (8000b7c <prog_pop_code+0xc4>)
 8000b4e:	6013      	str	r3, [r2, #0]
				if (packet)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10c      	bne.n	8000b70 <prog_pop_code+0xb8>
					return; // completed successfully, wait next step
			}
		}

		prog_is_running = 0;
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <prog_pop_code+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
		current_pos = 0;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <prog_pop_code+0xcc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	801a      	strh	r2, [r3, #0]
		next_time = 0;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <prog_pop_code+0xc4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
		return;
 8000b68:	bf00      	nop
 8000b6a:	e002      	b.n	8000b72 <prog_pop_code+0xba>
		return;
 8000b6c:	bf00      	nop
 8000b6e:	e000      	b.n	8000b72 <prog_pop_code+0xba>
					return; // completed successfully, wait next step
 8000b70:	bf00      	nop
	}

}
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001f7 	.word	0x200001f7
 8000b7c:	20000200 	.word	0x20000200
 8000b80:	20000204 	.word	0x20000204
 8000b84:	20000206 	.word	0x20000206

08000b88 <reset_prog>:

void reset_prog(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	current_pos = 0;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <reset_prog+0x24>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	801a      	strh	r2, [r3, #0]
	last_prog_time = 0;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <reset_prog+0x28>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
	prog_error = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <reset_prog+0x2c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
	next_time = 0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <reset_prog+0x30>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000206 	.word	0x20000206
 8000bb0:	20000208 	.word	0x20000208
 8000bb4:	200001f8 	.word	0x200001f8
 8000bb8:	20000200 	.word	0x20000200

08000bbc <prog_pressed>:

void prog_pressed(uint8_t code)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	if (key_timer)
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <prog_pressed+0x44>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d111      	bne.n	8000bf2 <prog_pressed+0x36>
		return; // another prog key pressed!
	// TODO detect if we are in programming or program is running, and compare code
	if (programming_in_progress && (code != current_code))
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <prog_pressed+0x48>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d004      	beq.n	8000be0 <prog_pressed+0x24>
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <prog_pressed+0x4c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d10a      	bne.n	8000bf6 <prog_pressed+0x3a>
		return; // ignore key_press from over keys
	current_code = code; // remember this code!
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <prog_pressed+0x4c>)
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	7013      	strb	r3, [r2, #0]
	key_timer = HAL_GetTick();
 8000be6:	f001 f82f 	bl	8001c48 <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <prog_pressed+0x44>)
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e002      	b.n	8000bf8 <prog_pressed+0x3c>
		return; // another prog key pressed!
 8000bf2:	bf00      	nop
 8000bf4:	e000      	b.n	8000bf8 <prog_pressed+0x3c>
		return; // ignore key_press from over keys
 8000bf6:	bf00      	nop
}
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200001fc 	.word	0x200001fc
 8000c04:	200001f6 	.word	0x200001f6
 8000c08:	20000204 	.word	0x20000204

08000c0c <prog_released>:

void prog_released(uint8_t code)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	if (code != current_code)
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <prog_released+0x7c>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d12f      	bne.n	8000c80 <prog_released+0x74>
		return; // we are in programming, ignore other prog buttons
	if (key_timer && (PROG_LONG_PRESS < (HAL_GetTick() - key_timer)))
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <prog_released+0x80>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d013      	beq.n	8000c50 <prog_released+0x44>
 8000c28:	f001 f80e 	bl	8001c48 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <prog_released+0x80>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d909      	bls.n	8000c50 <prog_released+0x44>
	{
		// key pressed long, start programming
		programming_in_progress = 1;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <prog_released+0x84>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		EEE_erase(code - KP_START);
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	330f      	adds	r3, #15
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fa7f 	bl	800014c <EEE_erase>
 8000c4e:	e013      	b.n	8000c78 <prog_released+0x6c>
	}
	else
	{
		// key pressed short, stop programming or do some nice things
		if (programming_in_progress)
 8000c50:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <prog_released+0x84>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <prog_released+0x54>
		{
			programming_in_progress = 0;
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <prog_released+0x84>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e00b      	b.n	8000c78 <prog_released+0x6c>
		}
		else
		{
			reset_prog();
 8000c60:	f7ff ff92 	bl	8000b88 <reset_prog>
			prog_is_running = !prog_is_running;
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <prog_released+0x88>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <prog_released+0x88>)
 8000c76:	701a      	strb	r2, [r3, #0]
		}
	}
	key_timer = 0;
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <prog_released+0x80>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e000      	b.n	8000c82 <prog_released+0x76>
		return; // we are in programming, ignore other prog buttons
 8000c80:	bf00      	nop
}
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000204 	.word	0x20000204
 8000c8c:	200001fc 	.word	0x200001fc
 8000c90:	200001f6 	.word	0x200001f6
 8000c94:	200001f7 	.word	0x200001f7

08000c98 <send_system>:
	uint8_t  report_id;
	uint16_t usage;
} __attribute__ ((packed))  report_extra_t;

static void send_system(uint16_t data)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <send_system+0x4c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d017      	beq.n	8000cdc <send_system+0x44>
	last_data = data;
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <send_system+0x4c>)
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	733b      	strb	r3, [r7, #12]
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_SYSTEM,
		.usage = data
	};
	while(!ready_to_send);
 8000cbc:	bf00      	nop
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <send_system+0x50>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0fb      	beq.n	8000cbe <send_system+0x26>
	ready_to_send = 0;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <send_system+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <send_system+0x54>)
 8000cd6:	f006 f96b 	bl	8006fb0 <USBD_HID_SendReport>
 8000cda:	e000      	b.n	8000cde <send_system+0x46>
	if (data == last_data) return;
 8000cdc:	bf00      	nop
}
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000210 	.word	0x20000210
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000388 	.word	0x20000388

08000cf0 <send_consumer>:

static void send_consumer(uint16_t data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	static uint16_t last_data = 0;
	if (data == last_data) return;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <send_consumer+0x4c>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	88fa      	ldrh	r2, [r7, #6]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d017      	beq.n	8000d34 <send_consumer+0x44>
	last_data = data;
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <send_consumer+0x4c>)
 8000d06:	88fb      	ldrh	r3, [r7, #6]
 8000d08:	8013      	strh	r3, [r2, #0]

	report_extra_t report = {
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	733b      	strb	r3, [r7, #12]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	f8a7 300d 	strh.w	r3, [r7, #13]
		.report_id = REPORT_ID_CONSUMER,
		.usage = data
	};
	while(!ready_to_send);
 8000d14:	bf00      	nop
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <send_consumer+0x50>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0fb      	beq.n	8000d16 <send_consumer+0x26>
	ready_to_send = 0;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <send_consumer+0x50>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
	USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&report, sizeof (report_extra_t));
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <send_consumer+0x54>)
 8000d2e:	f006 f93f 	bl	8006fb0 <USBD_HID_SendReport>
 8000d32:	e000      	b.n	8000d36 <send_consumer+0x46>
	if (data == last_data) return;
 8000d34:	bf00      	nop
}
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000212 	.word	0x20000212
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000388 	.word	0x20000388

08000d48 <add_mods>:


void add_mods(uint8_t amods) { mods |= amods; }
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <add_mods+0x24>)
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <add_mods+0x24>)
 8000d5e:	701a      	strb	r2, [r3, #0]
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	2000020c 	.word	0x2000020c

08000d70 <del_mods>:
void del_mods(uint8_t amods) { mods &= ~amods; }
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	b25a      	sxtb	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <del_mods+0x2c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b25b      	sxtb	r3, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <del_mods+0x2c>)
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	2000020c 	.word	0x2000020c

08000da0 <add_key_byte>:


static inline void add_key_byte(uint8_t code)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
    int8_t i = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	73fb      	strb	r3, [r7, #15]
    int8_t empty = -1;
 8000dae:	23ff      	movs	r3, #255	; 0xff
 8000db0:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000db2:	e01b      	b.n	8000dec <add_key_byte+0x4c>
        if (keyboard_report.keys[i] == code) {
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	4a19      	ldr	r2, [pc, #100]	; (8000e20 <add_key_byte+0x80>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	78db      	ldrb	r3, [r3, #3]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d018      	beq.n	8000df6 <add_key_byte+0x56>
            break;
        }
        if (empty == -1 && keyboard_report.keys[i] == 0) {
 8000dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d108      	bne.n	8000de0 <add_key_byte+0x40>
 8000dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <add_key_byte+0x80>)
 8000dd4:	4413      	add	r3, r2
 8000dd6:	78db      	ldrb	r3, [r3, #3]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <add_key_byte+0x40>
            empty = i;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	73bb      	strb	r3, [r7, #14]
    for (; i < REPORT_KEYS; i++) {
 8000de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	2b05      	cmp	r3, #5
 8000df2:	dddf      	ble.n	8000db4 <add_key_byte+0x14>
 8000df4:	e000      	b.n	8000df8 <add_key_byte+0x58>
            break;
 8000df6:	bf00      	nop
        }
    }
    if (i == REPORT_KEYS) {
 8000df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d10a      	bne.n	8000e16 <add_key_byte+0x76>
        if (empty != -1) {
 8000e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d005      	beq.n	8000e16 <add_key_byte+0x76>
            keyboard_report.keys[empty] = code;
 8000e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <add_key_byte+0x80>)
 8000e10:	4413      	add	r3, r2
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	70da      	strb	r2, [r3, #3]
        }
    }
}
 8000e16:	bf00      	nop
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	2000023c 	.word	0x2000023c

08000e24 <del_key_byte>:

static inline void del_key_byte(uint8_t code)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e00e      	b.n	8000e52 <del_key_byte+0x2e>
        if (keyboard_report.keys[i] == code) {
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <del_key_byte+0x40>)
 8000e38:	4413      	add	r3, r2
 8000e3a:	78db      	ldrb	r3, [r3, #3]
 8000e3c:	79fa      	ldrb	r2, [r7, #7]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d104      	bne.n	8000e4c <del_key_byte+0x28>
            keyboard_report.keys[i] = 0;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <del_key_byte+0x40>)
 8000e46:	4413      	add	r3, r2
 8000e48:	2200      	movs	r2, #0
 8000e4a:	70da      	strb	r2, [r3, #3]
    for (uint8_t i = 0; i < REPORT_KEYS; i++) {
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d9ed      	bls.n	8000e34 <del_key_byte+0x10>
        }
    }
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000023c 	.word	0x2000023c

08000e68 <keymap_key_to_keycode>:
}



uint8_t keymap_key_to_keycode(uint8_t row, uint8_t col)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
	return keymaps[0][row][col];
 8000e78:	79fa      	ldrb	r2, [r7, #7]
 8000e7a:	79bb      	ldrb	r3, [r7, #6]
 8000e7c:	4904      	ldr	r1, [pc, #16]	; (8000e90 <keymap_key_to_keycode+0x28>)
 8000e7e:	00d2      	lsls	r2, r2, #3
 8000e80:	440a      	add	r2, r1
 8000e82:	4413      	add	r3, r2
 8000e84:	781b      	ldrb	r3, [r3, #0]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	080089a4 	.word	0x080089a4

08000e94 <register_code>:


void register_code(uint8_t code)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80c5 	beq.w	8001030 <register_code+0x19c>
        return;
    }
    else if IS_PROG(code)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2bf0      	cmp	r3, #240	; 0xf0
 8000eaa:	d906      	bls.n	8000eba <register_code+0x26>
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2bf4      	cmp	r3, #244	; 0xf4
 8000eb0:	d803      	bhi.n	8000eba <register_code+0x26>
	{
    	prog_pressed(code);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe81 	bl	8000bbc <prog_pressed>
	}

    if (code == KC_LOGOFF)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8000ebe:	d108      	bne.n	8000ed2 <register_code+0x3e>
    {
    	add_mods(MOD_BIT(KC_LGUI));
 8000ec0:	2008      	movs	r0, #8
 8000ec2:	f7ff ff41 	bl	8000d48 <add_mods>
    	add_key_byte(KC_L);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f7ff ff6a 	bl	8000da0 <add_key_byte>
	    send_keyboard_report();
 8000ecc:	f000 f9fe 	bl	80012cc <send_keyboard_report>
 8000ed0:	e0af      	b.n	8001032 <register_code+0x19e>
    }
    else if IS_KEY(code)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d909      	bls.n	8000eec <register_code+0x58>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2ba4      	cmp	r3, #164	; 0xa4
 8000edc:	d806      	bhi.n	8000eec <register_code+0x58>
    {
	    add_key_byte(code);
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <add_key_byte>
	    send_keyboard_report();
 8000ee6:	f000 f9f1 	bl	80012cc <send_keyboard_report>
 8000eea:	e0a2      	b.n	8001032 <register_code+0x19e>
    }
    else if IS_MOD(code) {
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2bdf      	cmp	r3, #223	; 0xdf
 8000ef0:	d90f      	bls.n	8000f12 <register_code+0x7e>
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2be7      	cmp	r3, #231	; 0xe7
 8000ef6:	d80c      	bhi.n	8000f12 <register_code+0x7e>
        add_mods(MOD_BIT(code));
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	2201      	movs	r2, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff1e 	bl	8000d48 <add_mods>
        send_keyboard_report();
 8000f0c:	f000 f9de 	bl	80012cc <send_keyboard_report>
 8000f10:	e08f      	b.n	8001032 <register_code+0x19e>
    }
    else if IS_SYSTEM(code) {
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2ba4      	cmp	r3, #164	; 0xa4
 8000f16:	d916      	bls.n	8000f46 <register_code+0xb2>
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2ba7      	cmp	r3, #167	; 0xa7
 8000f1c:	d813      	bhi.n	8000f46 <register_code+0xb2>
		send_system(KEYCODE2SYSTEM(code));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	2ba5      	cmp	r3, #165	; 0xa5
 8000f22:	d00b      	beq.n	8000f3c <register_code+0xa8>
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2ba6      	cmp	r3, #166	; 0xa6
 8000f28:	d006      	beq.n	8000f38 <register_code+0xa4>
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	2ba7      	cmp	r3, #167	; 0xa7
 8000f2e:	d101      	bne.n	8000f34 <register_code+0xa0>
 8000f30:	2383      	movs	r3, #131	; 0x83
 8000f32:	e004      	b.n	8000f3e <register_code+0xaa>
 8000f34:	2300      	movs	r3, #0
 8000f36:	e002      	b.n	8000f3e <register_code+0xaa>
 8000f38:	2382      	movs	r3, #130	; 0x82
 8000f3a:	e000      	b.n	8000f3e <register_code+0xaa>
 8000f3c:	2381      	movs	r3, #129	; 0x81
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff feaa 	bl	8000c98 <send_system>
 8000f44:	e075      	b.n	8001032 <register_code+0x19e>
	}
    else if IS_CONSUMER(code) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2ba7      	cmp	r3, #167	; 0xa7
 8000f4a:	d972      	bls.n	8001032 <register_code+0x19e>
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2bba      	cmp	r3, #186	; 0xba
 8000f50:	d86f      	bhi.n	8001032 <register_code+0x19e>
        send_consumer(KEYCODE2CONSUMER(code));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	2ba8      	cmp	r3, #168	; 0xa8
 8000f56:	d066      	beq.n	8001026 <register_code+0x192>
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	2ba9      	cmp	r3, #169	; 0xa9
 8000f5c:	d061      	beq.n	8001022 <register_code+0x18e>
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2baa      	cmp	r3, #170	; 0xaa
 8000f62:	d05c      	beq.n	800101e <register_code+0x18a>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2bab      	cmp	r3, #171	; 0xab
 8000f68:	d057      	beq.n	800101a <register_code+0x186>
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2bac      	cmp	r3, #172	; 0xac
 8000f6e:	d052      	beq.n	8001016 <register_code+0x182>
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2bad      	cmp	r3, #173	; 0xad
 8000f74:	d04d      	beq.n	8001012 <register_code+0x17e>
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2bb0      	cmp	r3, #176	; 0xb0
 8000f7a:	d048      	beq.n	800100e <register_code+0x17a>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2bae      	cmp	r3, #174	; 0xae
 8000f80:	d043      	beq.n	800100a <register_code+0x176>
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2baf      	cmp	r3, #175	; 0xaf
 8000f86:	d03d      	beq.n	8001004 <register_code+0x170>
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2bb1      	cmp	r3, #177	; 0xb1
 8000f8c:	d037      	beq.n	8000ffe <register_code+0x16a>
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2bb2      	cmp	r3, #178	; 0xb2
 8000f92:	d031      	beq.n	8000ff8 <register_code+0x164>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2bb3      	cmp	r3, #179	; 0xb3
 8000f98:	d02b      	beq.n	8000ff2 <register_code+0x15e>
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2bb4      	cmp	r3, #180	; 0xb4
 8000f9e:	d025      	beq.n	8000fec <register_code+0x158>
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2bb5      	cmp	r3, #181	; 0xb5
 8000fa4:	d01f      	beq.n	8000fe6 <register_code+0x152>
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2bb6      	cmp	r3, #182	; 0xb6
 8000faa:	d019      	beq.n	8000fe0 <register_code+0x14c>
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2bb7      	cmp	r3, #183	; 0xb7
 8000fb0:	d013      	beq.n	8000fda <register_code+0x146>
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2bb8      	cmp	r3, #184	; 0xb8
 8000fb6:	d00d      	beq.n	8000fd4 <register_code+0x140>
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2bb9      	cmp	r3, #185	; 0xb9
 8000fbc:	d007      	beq.n	8000fce <register_code+0x13a>
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2bba      	cmp	r3, #186	; 0xba
 8000fc2:	d102      	bne.n	8000fca <register_code+0x136>
 8000fc4:	f240 232a 	movw	r3, #554	; 0x22a
 8000fc8:	e02e      	b.n	8001028 <register_code+0x194>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e02c      	b.n	8001028 <register_code+0x194>
 8000fce:	f240 2327 	movw	r3, #551	; 0x227
 8000fd2:	e029      	b.n	8001028 <register_code+0x194>
 8000fd4:	f240 2326 	movw	r3, #550	; 0x226
 8000fd8:	e026      	b.n	8001028 <register_code+0x194>
 8000fda:	f240 2325 	movw	r3, #549	; 0x225
 8000fde:	e023      	b.n	8001028 <register_code+0x194>
 8000fe0:	f44f 7309 	mov.w	r3, #548	; 0x224
 8000fe4:	e020      	b.n	8001028 <register_code+0x194>
 8000fe6:	f240 2323 	movw	r3, #547	; 0x223
 8000fea:	e01d      	b.n	8001028 <register_code+0x194>
 8000fec:	f240 2321 	movw	r3, #545	; 0x221
 8000ff0:	e01a      	b.n	8001028 <register_code+0x194>
 8000ff2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000ff6:	e017      	b.n	8001028 <register_code+0x194>
 8000ff8:	f44f 73c9 	mov.w	r3, #402	; 0x192
 8000ffc:	e014      	b.n	8001028 <register_code+0x194>
 8000ffe:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 8001002:	e011      	b.n	8001028 <register_code+0x194>
 8001004:	f240 1383 	movw	r3, #387	; 0x183
 8001008:	e00e      	b.n	8001028 <register_code+0x194>
 800100a:	23cd      	movs	r3, #205	; 0xcd
 800100c:	e00c      	b.n	8001028 <register_code+0x194>
 800100e:	23cc      	movs	r3, #204	; 0xcc
 8001010:	e00a      	b.n	8001028 <register_code+0x194>
 8001012:	23b7      	movs	r3, #183	; 0xb7
 8001014:	e008      	b.n	8001028 <register_code+0x194>
 8001016:	23b6      	movs	r3, #182	; 0xb6
 8001018:	e006      	b.n	8001028 <register_code+0x194>
 800101a:	23b5      	movs	r3, #181	; 0xb5
 800101c:	e004      	b.n	8001028 <register_code+0x194>
 800101e:	23ea      	movs	r3, #234	; 0xea
 8001020:	e002      	b.n	8001028 <register_code+0x194>
 8001022:	23e9      	movs	r3, #233	; 0xe9
 8001024:	e000      	b.n	8001028 <register_code+0x194>
 8001026:	23e2      	movs	r3, #226	; 0xe2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fe61 	bl	8000cf0 <send_consumer>
 800102e:	e000      	b.n	8001032 <register_code+0x19e>
        return;
 8001030:	bf00      	nop
    }
}
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <unregister_code>:

void unregister_code(uint8_t code)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
    if (code == KC_NO) {
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d049      	beq.n	80010dc <unregister_code+0xa4>
        return;
    }
    else if IS_PROG(code)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2bf0      	cmp	r3, #240	; 0xf0
 800104c:	d906      	bls.n	800105c <unregister_code+0x24>
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2bf4      	cmp	r3, #244	; 0xf4
 8001052:	d803      	bhi.n	800105c <unregister_code+0x24>
	{
    	prog_released(code);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fdd8 	bl	8000c0c <prog_released>
	}

    if (code == KC_LOGOFF)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2bf0      	cmp	r3, #240	; 0xf0
 8001060:	d108      	bne.n	8001074 <unregister_code+0x3c>
    {
    	del_mods(MOD_BIT(KC_LGUI));
 8001062:	2008      	movs	r0, #8
 8001064:	f7ff fe84 	bl	8000d70 <del_mods>
    	del_key_byte(KC_L);
 8001068:	200f      	movs	r0, #15
 800106a:	f7ff fedb 	bl	8000e24 <del_key_byte>
    	send_keyboard_report();
 800106e:	f000 f92d 	bl	80012cc <send_keyboard_report>
 8001072:	e034      	b.n	80010de <unregister_code+0xa6>
    }
    else if IS_KEY(code) {
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	2b03      	cmp	r3, #3
 8001078:	d909      	bls.n	800108e <unregister_code+0x56>
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2ba4      	cmp	r3, #164	; 0xa4
 800107e:	d806      	bhi.n	800108e <unregister_code+0x56>
        del_key_byte(code);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fece 	bl	8000e24 <del_key_byte>
        send_keyboard_report();
 8001088:	f000 f920 	bl	80012cc <send_keyboard_report>
 800108c:	e027      	b.n	80010de <unregister_code+0xa6>
    }
    else if IS_MOD(code) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2bdf      	cmp	r3, #223	; 0xdf
 8001092:	d90f      	bls.n	80010b4 <unregister_code+0x7c>
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2be7      	cmp	r3, #231	; 0xe7
 8001098:	d80c      	bhi.n	80010b4 <unregister_code+0x7c>
        del_mods(MOD_BIT(code));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	2201      	movs	r2, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fe61 	bl	8000d70 <del_mods>
        send_keyboard_report();
 80010ae:	f000 f90d 	bl	80012cc <send_keyboard_report>
 80010b2:	e014      	b.n	80010de <unregister_code+0xa6>
    }
    else if IS_SYSTEM(code) {
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2ba4      	cmp	r3, #164	; 0xa4
 80010b8:	d906      	bls.n	80010c8 <unregister_code+0x90>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2ba7      	cmp	r3, #167	; 0xa7
 80010be:	d803      	bhi.n	80010c8 <unregister_code+0x90>
	    send_system(0);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fde9 	bl	8000c98 <send_system>
 80010c6:	e00a      	b.n	80010de <unregister_code+0xa6>
    }
    else if IS_CONSUMER(code) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2ba7      	cmp	r3, #167	; 0xa7
 80010cc:	d907      	bls.n	80010de <unregister_code+0xa6>
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2bba      	cmp	r3, #186	; 0xba
 80010d2:	d804      	bhi.n	80010de <unregister_code+0xa6>
    	send_consumer(0);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fe0b 	bl	8000cf0 <send_consumer>
 80010da:	e000      	b.n	80010de <unregister_code+0xa6>
        return;
 80010dc:	bf00      	nop
	}
}
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <process_keyboard_USB>:
void kbuf_clear(void);
/*********************/


void process_keyboard_USB(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
#define cnt_max (250)
	static uint32_t blink_time = 0;
	static uint8_t blinking = 0;
	static uint8_t last_blink = 0;
	static uint16_t cnt = cnt_max;
	if (kbuf_head != kbuf_tail)
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <process_keyboard_USB+0x140>)
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <process_keyboard_USB+0x144>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d031      	beq.n	8001158 <process_keyboard_USB+0x74>
	{
		if (ready_to_send)
 80010f4:	4b4d      	ldr	r3, [pc, #308]	; (800122c <process_keyboard_USB+0x148>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d020      	beq.n	800113e <process_keyboard_USB+0x5a>
		{
			ready_to_send = 0;
 80010fc:	4b4b      	ldr	r3, [pc, #300]	; (800122c <process_keyboard_USB+0x148>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			cnt = cnt_max;
 8001102:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <process_keyboard_USB+0x14c>)
 8001104:	22fa      	movs	r2, #250	; 0xfa
 8001106:	801a      	strh	r2, [r3, #0]
			// TODO send this data!
			USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&kbuf[kbuf_tail], sizeof (report_keyboard_t));
 8001108:	4b47      	ldr	r3, [pc, #284]	; (8001228 <process_keyboard_USB+0x144>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4413      	add	r3, r2
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <process_keyboard_USB+0x150>)
 8001116:	4413      	add	r3, r2
 8001118:	2209      	movs	r2, #9
 800111a:	4619      	mov	r1, r3
 800111c:	4846      	ldr	r0, [pc, #280]	; (8001238 <process_keyboard_USB+0x154>)
 800111e:	f005 ff47 	bl	8006fb0 <USBD_HID_SendReport>
	        kbuf_tail = (kbuf_tail + 1) % KBUF_SIZE;
 8001122:	4b41      	ldr	r3, [pc, #260]	; (8001228 <process_keyboard_USB+0x144>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	425a      	negs	r2, r3
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	f002 020f 	and.w	r2, r2, #15
 8001132:	bf58      	it	pl
 8001134:	4253      	negpl	r3, r2
 8001136:	b2da      	uxtb	r2, r3
 8001138:	4b3b      	ldr	r3, [pc, #236]	; (8001228 <process_keyboard_USB+0x144>)
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	e00c      	b.n	8001158 <process_keyboard_USB+0x74>
		}
		else if (--cnt == 0) // timeout, just push this data
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <process_keyboard_USB+0x14c>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	3b01      	subs	r3, #1
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <process_keyboard_USB+0x14c>)
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	4b39      	ldr	r3, [pc, #228]	; (8001230 <process_keyboard_USB+0x14c>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <process_keyboard_USB+0x74>
			ready_to_send = 1;
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <process_keyboard_USB+0x148>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
	}

	if (is_disco_time())
 8001158:	f7ff fc22 	bl	80009a0 <is_disco_time>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d04d      	beq.n	80011fe <process_keyboard_USB+0x11a>
	{
		if (!blinking)
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <process_keyboard_USB+0x158>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d107      	bne.n	800117a <process_keyboard_USB+0x96>
		{
			blinking = 1;
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <process_keyboard_USB+0x158>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
			blink_time = HAL_GetTick();
 8001170:	f000 fd6a 	bl	8001c48 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <process_keyboard_USB+0x15c>)
 8001178:	601a      	str	r2, [r3, #0]
		}

		if (((HAL_GetTick() - blink_time)&(1<<8))&&last_blink)
 800117a:	f000 fd65 	bl	8001c48 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <process_keyboard_USB+0x15c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118a:	2b00      	cmp	r3, #0
 800118c:	d016      	beq.n	80011bc <process_keyboard_USB+0xd8>
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <process_keyboard_USB+0x160>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d012      	beq.n	80011bc <process_keyboard_USB+0xd8>
		{
			last_blink = 0;
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <process_keyboard_USB+0x160>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <process_keyboard_USB+0x164>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 80011a2:	f7ff fbf3 	bl	800098c <is_prog_error>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <process_keyboard_USB+0xd0>
				leds_PS2(PS2_LED_CAPS_LOCK|PS2_LED_NUM_LOCK);
 80011ac:	2006      	movs	r0, #6
 80011ae:	f000 fab5 	bl	800171c <leds_PS2>
			if (is_prog_error())
 80011b2:	e034      	b.n	800121e <process_keyboard_USB+0x13a>
			else
				leds_PS2(PS2_LED_CAPS_LOCK);
 80011b4:	2004      	movs	r0, #4
 80011b6:	f000 fab1 	bl	800171c <leds_PS2>
			if (is_prog_error())
 80011ba:	e030      	b.n	800121e <process_keyboard_USB+0x13a>
		}
		else if ((!((HAL_GetTick() - blink_time)&(1<<8)))&&(!last_blink))
 80011bc:	f000 fd44 	bl	8001c48 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <process_keyboard_USB+0x15c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d126      	bne.n	800121e <process_keyboard_USB+0x13a>
 80011d0:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <process_keyboard_USB+0x160>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d122      	bne.n	800121e <process_keyboard_USB+0x13a>
		{
			last_blink = 1;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <process_keyboard_USB+0x160>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
			leds_updated = 1;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <process_keyboard_USB+0x164>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
			if (is_prog_error())
 80011e4:	f7ff fbd2 	bl	800098c <is_prog_error>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <process_keyboard_USB+0x112>
				leds_PS2(0);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 fa94 	bl	800171c <leds_PS2>
	{
		blinking = 0;
		leds_updated = 1;
		leds_PS2(leds_data);
	}
}
 80011f4:	e013      	b.n	800121e <process_keyboard_USB+0x13a>
				leds_PS2(PS2_LED_NUM_LOCK);
 80011f6:	2002      	movs	r0, #2
 80011f8:	f000 fa90 	bl	800171c <leds_PS2>
}
 80011fc:	e00f      	b.n	800121e <process_keyboard_USB+0x13a>
	else if (blinking)
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <process_keyboard_USB+0x158>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00b      	beq.n	800121e <process_keyboard_USB+0x13a>
		blinking = 0;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <process_keyboard_USB+0x158>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
		leds_updated = 1;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <process_keyboard_USB+0x164>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		leds_PS2(leds_data);
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <process_keyboard_USB+0x168>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fa80 	bl	800171c <leds_PS2>
}
 800121c:	e7ff      	b.n	800121e <process_keyboard_USB+0x13a>
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000020d 	.word	0x2000020d
 8001228:	2000020e 	.word	0x2000020e
 800122c:	20000000 	.word	0x20000000
 8001230:	20000002 	.word	0x20000002
 8001234:	20000248 	.word	0x20000248
 8001238:	20000388 	.word	0x20000388
 800123c:	20000214 	.word	0x20000214
 8001240:	20000218 	.word	0x20000218
 8001244:	2000021c 	.word	0x2000021c
 8001248:	200002d9 	.word	0x200002d9
 800124c:	200002d8 	.word	0x200002d8

08001250 <USB_HID_buffer_sent_Callback>:

void USB_HID_buffer_sent_Callback(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	ready_to_send = 1;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <USB_HID_buffer_sent_Callback+0x14>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000

08001268 <kbuf_push>:

/********************************/
/* buffer for Keyboard */

void kbuf_push(report_keyboard_t *report)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
    uint8_t next = (kbuf_head + 1) % KBUF_SIZE;
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <kbuf_push+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	425a      	negs	r2, r3
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	f002 020f 	and.w	r2, r2, #15
 8001280:	bf58      	it	pl
 8001282:	4253      	negpl	r3, r2
 8001284:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != kbuf_tail) {
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <kbuf_push+0x5c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	7bfa      	ldrb	r2, [r7, #15]
 800128c:	429a      	cmp	r2, r3
 800128e:	d011      	beq.n	80012b4 <kbuf_push+0x4c>
        kbuf[kbuf_head] =*report;
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <kbuf_push+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <kbuf_push+0x60>)
 8001298:	460b      	mov	r3, r1
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	4413      	add	r3, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6810      	ldr	r0, [r2, #0]
 80012a4:	6851      	ldr	r1, [r2, #4]
 80012a6:	6018      	str	r0, [r3, #0]
 80012a8:	6059      	str	r1, [r3, #4]
 80012aa:	7a12      	ldrb	r2, [r2, #8]
 80012ac:	721a      	strb	r2, [r3, #8]
        kbuf_head = next;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <kbuf_push+0x58>)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	7013      	strb	r3, [r2, #0]
    }
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2000020d 	.word	0x2000020d
 80012c4:	2000020e 	.word	0x2000020e
 80012c8:	20000248 	.word	0x20000248

080012cc <send_keyboard_report>:
void kbuf_clear(void)
{
    kbuf_head = kbuf_tail = 0;
}

void send_keyboard_report(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	keyboard_report.report_id = 1;
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <send_keyboard_report+0x1c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	keyboard_report.mods = mods;
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <send_keyboard_report+0x20>)
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <send_keyboard_report+0x1c>)
 80012dc:	705a      	strb	r2, [r3, #1]
	kbuf_push(&keyboard_report);
 80012de:	4802      	ldr	r0, [pc, #8]	; (80012e8 <send_keyboard_report+0x1c>)
 80012e0:	f7ff ffc2 	bl	8001268 <kbuf_push>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000023c 	.word	0x2000023c
 80012ec:	2000020c 	.word	0x2000020c

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f4:	f000 fc50 	bl	8001b98 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f822 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7fe ff9c 	bl	8000238 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001300:	f006 ff38 	bl	8008174 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001304:	f000 fbb4 	bl	8001a70 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001308:	480b      	ldr	r0, [pc, #44]	; (8001338 <main+0x48>)
 800130a:	f003 f9d5 	bl	80046b8 <HAL_TIM_Base_Start>
  _delay_ms(250); // USB re-enumeration
 800130e:	20fa      	movs	r0, #250	; 0xfa
 8001310:	f000 fb6e 	bl	80019f0 <_delay_ms>
  HAL_GPIO_WritePin(USB_DP_PULL_GPIO_Port, USB_DP_PULL_Pin, 1); // enable pull-up
 8001314:	2201      	movs	r2, #1
 8001316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131a:	4808      	ldr	r0, [pc, #32]	; (800133c <main+0x4c>)
 800131c:	f001 f93f 	bl	800259e <HAL_GPIO_WritePin>
  reset_us_counter();
 8001320:	f000 fb84 	bl	8001a2c <reset_us_counter>
  init_PS2();
 8001324:	f000 f96c 	bl	8001600 <init_PS2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001328:	f000 fa54 	bl	80017d4 <process_PS2>
	  process_keyboard_USB(); // check if we can send data over USB
 800132c:	f7ff feda 	bl	80010e4 <process_keyboard_USB>
	  _delay_ms(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f000 fb5d 	bl	80019f0 <_delay_ms>
	  process_PS2(); // check if new data from keyboard, or LEDs should be updated on keyboard
 8001336:	e7f7      	b.n	8001328 <main+0x38>
 8001338:	2000031c 	.word	0x2000031c
 800133c:	40010800 	.word	0x40010800

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b094      	sub	sp, #80	; 0x50
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800134a:	2228      	movs	r2, #40	; 0x28
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f007 fae8 	bl	8008924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001370:	2301      	movs	r3, #1
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137e:	2301      	movs	r3, #1
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800138c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001390:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fc9e 	bl	8003cd8 <HAL_RCC_OscConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013a2:	f000 f828 	bl	80013f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a6:	230f      	movs	r3, #15
 80013a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2101      	movs	r1, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 ff08 	bl	80041d8 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ce:	f000 f812 	bl	80013f6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013d2:	2310      	movs	r3, #16
 80013d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013da:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 f864 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ea:	f000 f804 	bl	80013f6 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3750      	adds	r7, #80	; 0x50
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fa:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x6>
	...

08001400 <HAL_GPIO_EXTI_Callback>:
uint8_t buf_has_data(void);
void buf_clear(void);
/******************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
	static uint8_t parity = 0;
	static uint8_t data = 0;
	if (GPIO_Pin == PS2_CLK_Pin)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001410:	f040 80e6 	bne.w	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
	{
		if (sendMode)
 8001414:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d060      	beq.n	80014de <HAL_GPIO_EXTI_Callback+0xde>
		{
			/** we are sending! **/

			if (sendMode == 1)
 800141c:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d109      	bne.n	8001438 <HAL_GPIO_EXTI_Callback+0x38>
			{
				// ignore first interrupt, we are signaling to device
				sendMode = 2;
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001426:	2202      	movs	r2, #2
 8001428:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 800142a:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
				return;
 8001436:	e0d3      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

			if (bitNr <= 7)
 8001438:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800143a:	f993 3000 	ldrsb.w	r3, [r3]
 800143e:	2b07      	cmp	r3, #7
 8001440:	dc1b      	bgt.n	800147a <HAL_GPIO_EXTI_Callback+0x7a>
			{
				// shift out the bits, LSB first
				if (outputData & (1<<bitNr)) {
 8001442:	4b6c      	ldr	r3, [pc, #432]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800144a:	f993 3000 	ldrsb.w	r3, [r3]
 800144e:	fa42 f303 	asr.w	r3, r2, r3
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00c      	beq.n	8001474 <HAL_GPIO_EXTI_Callback+0x74>
					parity = !parity;
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	461a      	mov	r2, r3
 800146a:	4b61      	ldr	r3, [pc, #388]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800146c:	701a      	strb	r2, [r3, #0]
					data_release();
 800146e:	f7fe ffe1 	bl	8000434 <data_release>
 8001472:	e02a      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>
				} else {
					data_low();
 8001474:	f7fe ff96 	bl	80003a4 <data_low>
 8001478:	e027      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>
				}
			}
			else if (bitNr == 8)
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800147c:	f993 3000 	ldrsb.w	r3, [r3]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d109      	bne.n	8001498 <HAL_GPIO_EXTI_Callback+0x98>
			{
				// send parity
				if (!parity)
 8001484:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <HAL_GPIO_EXTI_Callback+0x92>
					data_release();
 800148c:	f7fe ffd2 	bl	8000434 <data_release>
 8001490:	e01b      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>
				else
					data_low();
 8001492:	f7fe ff87 	bl	80003a4 <data_low>
 8001496:	e018      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>

			}
			else if (bitNr == 9)
 8001498:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800149a:	f993 3000 	ldrsb.w	r3, [r3]
 800149e:	2b09      	cmp	r3, #9
 80014a0:	d102      	bne.n	80014a8 <HAL_GPIO_EXTI_Callback+0xa8>
			{
				// send stop bit
				data_release();
 80014a2:	f7fe ffc7 	bl	8000434 <data_release>
 80014a6:	e010      	b.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>
			}
			else if ( bitNr == 10 )
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014aa:	f993 3000 	ldrsb.w	r3, [r3]
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d10b      	bne.n	80014ca <HAL_GPIO_EXTI_Callback+0xca>
			{
				data_release();
 80014b2:	f7fe ffbf 	bl	8000434 <data_release>
				sendMode = 0;
 80014b6:	4b4c      	ldr	r3, [pc, #304]	; (80015e8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
				// do I need to check ACK? Don't think so =>
				// we are receiving clock already, so device is alive
				parity = 0;
 80014bc:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
				bitNr = 0;
 80014c2:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	701a      	strb	r2, [r3, #0]
				return;
 80014c8:	e08a      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
			}
			bitNr++;
 80014ca:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014cc:	f993 3000 	ldrsb.w	r3, [r3]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	3301      	adds	r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	4b44      	ldr	r3, [pc, #272]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014da:	701a      	strb	r2, [r3, #0]
			return;
 80014dc:	e080      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
		}
		else
		{
			/** We are receiving! **/

			if (!check_us_counter(200)) // from last received bit is more than 200us! Probably new data.
 80014de:	20c8      	movs	r0, #200	; 0xc8
 80014e0:	f000 fab0 	bl	8001a44 <check_us_counter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_EXTI_Callback+0xf0>
			{
				bitNr = 0;
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
			}
			reset_us_counter();
 80014f0:	f000 fa9c 	bl	8001a2c <reset_us_counter>
			if (bitNr == 0)
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80014f6:	f993 3000 	ldrsb.w	r3, [r3]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_GPIO_EXTI_Callback+0x11c>
			{
				// receiving START bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 80014fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001502:	483d      	ldr	r0, [pc, #244]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001504:	f001 f834 	bl	8002570 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d167      	bne.n	80015de <HAL_GPIO_EXTI_Callback+0x1de>
					return; // it should be start bit! If not, just ignore it
				data = 0;
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
				parity = 0;
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e056      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr <= 8)
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 800151e:	f993 3000 	ldrsb.w	r3, [r3]
 8001522:	2b08      	cmp	r3, #8
 8001524:	dc1f      	bgt.n	8001566 <HAL_GPIO_EXTI_Callback+0x166>
			{
				// shift in data bits
				data >>= 1; // LSB received first
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001530:	701a      	strb	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001536:	4830      	ldr	r0, [pc, #192]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001538:	f001 f81a 	bl	8002570 <HAL_GPIO_ReadPin>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d043      	beq.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
				{
					data |= 0x80;
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 800154e:	701a      	strb	r2, [r3, #0]
					parity = !parity;
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	bf0c      	ite	eq
 8001558:	2301      	moveq	r3, #1
 800155a:	2300      	movne	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e031      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
				}

			}
			else if (bitNr == 9)
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001568:	f993 3000 	ldrsb.w	r3, [r3]
 800156c:	2b09      	cmp	r3, #9
 800156e:	d112      	bne.n	8001596 <HAL_GPIO_EXTI_Callback+0x196>
			{
				// receive parity bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin))
 8001570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001574:	4820      	ldr	r0, [pc, #128]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001576:	f000 fffb 	bl	8002570 <HAL_GPIO_ReadPin>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d024      	beq.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
					parity = !parity;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461a      	mov	r2, r3
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001592:	701a      	strb	r2, [r3, #0]
 8001594:	e019      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
			}
			else if (bitNr == 10)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001598:	f993 3000 	ldrsb.w	r3, [r3]
 800159c:	2b0a      	cmp	r3, #10
 800159e:	d114      	bne.n	80015ca <HAL_GPIO_EXTI_Callback+0x1ca>
			{
				// receive STOP bit
				if (HAL_GPIO_ReadPin(PS2_DATA_GPIO_Port, PS2_DATA_Pin) && (parity))
 80015a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80015a6:	f000 ffe3 	bl	8002570 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_GPIO_EXTI_Callback+0x1c2>
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <HAL_GPIO_EXTI_Callback+0x1c2>
					buf_push(data); // STOP bit issued, no parity errors
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_GPIO_EXTI_Callback+0x1fc>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 f93d 	bl	800183c <buf_push>
				bitNr = 0;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
				return;
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
			}

		}
		bitNr++;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015cc:	f993 3000 	ldrsb.w	r3, [r3]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_GPIO_EXTI_Callback+0x1ec>)
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_EXTI_Callback+0x1e0>
					return; // it should be start bit! If not, just ignore it
 80015de:	bf00      	nop
	}
}
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2000021d 	.word	0x2000021d
 80015ec:	2000021f 	.word	0x2000021f
 80015f0:	20000223 	.word	0x20000223
 80015f4:	2000021e 	.word	0x2000021e
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	20000224 	.word	0x20000224

08001600 <init_PS2>:

/**
 * @brief RESETs keyboard, checks for ACK, waits 2.5sec
 */
void init_PS2(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
	for(;;)
	{
		send_PS2(PS2_RESET);
 8001606:	20ff      	movs	r0, #255	; 0xff
 8001608:	f000 f820 	bl	800164c <send_PS2>
		if (PS2_ACK == wait_response_PS2())
 800160c:	f000 f8c4 	bl	8001798 <wait_response_PS2>
 8001610:	4603      	mov	r3, r0
 8001612:	2bfa      	cmp	r3, #250	; 0xfa
 8001614:	d004      	beq.n	8001620 <init_PS2+0x20>
			break;
		_delay_ms(1000);
 8001616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161a:	f000 f9e9 	bl	80019f0 <_delay_ms>
		send_PS2(PS2_RESET);
 800161e:	e7f2      	b.n	8001606 <init_PS2+0x6>
			break;
 8001620:	bf00      	nop
	}
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001622:	2364      	movs	r3, #100	; 0x64
 8001624:	71fb      	strb	r3, [r7, #7]
 8001626:	e007      	b.n	8001638 <init_PS2+0x38>
	{
		if (PS2_SELF_TESTED == wait_response_PS2())
 8001628:	f000 f8b6 	bl	8001798 <wait_response_PS2>
 800162c:	4603      	mov	r3, r0
 800162e:	2baa      	cmp	r3, #170	; 0xaa
 8001630:	d006      	beq.n	8001640 <init_PS2+0x40>
	for (uint8_t i = 100; i > 0; i--) // wait 2.5 sec (100*25ms) or SELF-TEST from keyboard
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	3b01      	subs	r3, #1
 8001636:	71fb      	strb	r3, [r7, #7]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f4      	bne.n	8001628 <init_PS2+0x28>
			break;
	}
}
 800163e:	e000      	b.n	8001642 <init_PS2+0x42>
			break;
 8001640:	bf00      	nop
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <send_PS2>:
/**
 * @brief issues send sequence, sets signaling bit
 * @param data: BYTE to be sent
 */
void send_PS2(uint8_t data)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	sendMode = 1;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <send_PS2+0x3c>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
	clock_low();
 800165c:	f7fe fec6 	bl	80003ec <clock_low>
	bitNr = 0;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <send_PS2+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
	outputData = data;
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <send_PS2+0x44>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	7013      	strb	r3, [r2, #0]
	_delay_us(100);
 800166c:	2064      	movs	r0, #100	; 0x64
 800166e:	f000 f9ca 	bl	8001a06 <_delay_us>

	data_low();
 8001672:	f7fe fe97 	bl	80003a4 <data_low>
	_delay_us(10);
 8001676:	200a      	movs	r0, #10
 8001678:	f000 f9c5 	bl	8001a06 <_delay_us>
	clock_release();
 800167c:	f7fe fef6 	bl	800046c <clock_release>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000021d 	.word	0x2000021d
 800168c:	2000021f 	.word	0x2000021f
 8001690:	2000021e 	.word	0x2000021e

08001694 <SET_LEDS_Callback>:

void SET_LEDS_Callback(uint8_t usb_led)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
	// Interestingly, USB HID not always receives the LED status
	// Second USB keyboard receives update always
	// Maybe Prio? Have reduced tick prio, doesn't help
	// Maybe Endpoint problem? No Idea.
	uint8_t data = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_CAPS_LOCK)
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <SET_LEDS_Callback+0x20>
		data |= PS2_LED_CAPS_LOCK;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_NUM_LOCK)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <SET_LEDS_Callback+0x32>
		data |= PS2_LED_NUM_LOCK;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	73fb      	strb	r3, [r7, #15]
	if (usb_led & USB_LED_SCROLL_LOCK)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <SET_LEDS_Callback+0x44>
		data |= PS2_LED_SCROLL_LOCK;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
	leds_updated = 1;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SET_LEDS_Callback+0x5c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	leds_data = data;
 80016de:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <SET_LEDS_Callback+0x60>)
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	7013      	strb	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	200002d9 	.word	0x200002d9
 80016f4:	200002d8 	.word	0x200002d8

080016f8 <USBD_Sleep_Callback>:

void USBD_Sleep_Callback(uint8_t enter_exit)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	// high if enters in sleep
	sleep = enter_exit + 1;
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	3301      	adds	r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <USBD_Sleep_Callback+0x20>)
 800170a:	701a      	strb	r2, [r3, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000220 	.word	0x20000220

0800171c <leds_PS2>:
/**
 * @brief send LED state to keyboard
 * @param led: LEDs state (in PS2 format)
 * */
void leds_PS2(uint8_t led)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	if (!leds_updated)
 8001726:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <leds_PS2+0x78>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d029      	beq.n	8001782 <leds_PS2+0x66>
		return;
	if (buf_has_data())
 800172e:	f000 f8d9 	bl	80018e4 <buf_has_data>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d126      	bne.n	8001786 <leds_PS2+0x6a>
		return; // do nothing if buffer is not clear - user input is more important!
	leds_updated = 0;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <leds_PS2+0x78>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 5; i > 0; i--){
 800173e:	2305      	movs	r3, #5
 8001740:	73fb      	strb	r3, [r7, #15]
 8001742:	e01a      	b.n	800177a <leds_PS2+0x5e>
		send_PS2(PS2_SET_LED);
 8001744:	20ed      	movs	r0, #237	; 0xed
 8001746:	f7ff ff81 	bl	800164c <send_PS2>
		if ( wait_response_PS2() != PS2_ACK ) // no ACK, try again
 800174a:	f000 f825 	bl	8001798 <wait_response_PS2>
 800174e:	4603      	mov	r3, r0
 8001750:	2bfa      	cmp	r3, #250	; 0xfa
 8001752:	d003      	beq.n	800175c <leds_PS2+0x40>
		{
			_delay_ms(20);
 8001754:	2014      	movs	r0, #20
 8001756:	f000 f94b 	bl	80019f0 <_delay_ms>
			continue;
 800175a:	e00b      	b.n	8001774 <leds_PS2+0x58>
		}
		send_PS2(led);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff74 	bl	800164c <send_PS2>
		if ( wait_response_PS2() == PS2_ACK )
 8001764:	f000 f818 	bl	8001798 <wait_response_PS2>
 8001768:	4603      	mov	r3, r0
 800176a:	2bfa      	cmp	r3, #250	; 0xfa
 800176c:	d00d      	beq.n	800178a <leds_PS2+0x6e>
		{
			return;
		}
		_delay_ms(20); // no ACK, try again
 800176e:	2014      	movs	r0, #20
 8001770:	f000 f93e 	bl	80019f0 <_delay_ms>
	for (uint8_t i = 5; i > 0; i--){
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	3b01      	subs	r3, #1
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e1      	bne.n	8001744 <leds_PS2+0x28>
 8001780:	e004      	b.n	800178c <leds_PS2+0x70>
		return;
 8001782:	bf00      	nop
 8001784:	e002      	b.n	800178c <leds_PS2+0x70>
		return; // do nothing if buffer is not clear - user input is more important!
 8001786:	bf00      	nop
 8001788:	e000      	b.n	800178c <leds_PS2+0x70>
			return;
 800178a:	bf00      	nop
	}
}
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002d9 	.word	0x200002d9

08001798 <wait_response_PS2>:
/**
 * @brief used together with send, waits response for 25ms
 * @retval returns received byte or 0
 */
uint8_t wait_response_PS2(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	// Command may take 25ms/20ms at most([5]p.46, [3]p.21)
	for(uint8_t i = 25; i > 0; i--)
 800179e:	2319      	movs	r3, #25
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	e00a      	b.n	80017ba <wait_response_PS2+0x22>
	{
		if (buf_has_data())
 80017a4:	f000 f89e 	bl	80018e4 <buf_has_data>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <wait_response_PS2+0x2a>
			break;
		_delay_ms(1);
 80017ae:	2001      	movs	r0, #1
 80017b0:	f000 f91e 	bl	80019f0 <_delay_ms>
	for(uint8_t i = 25; i > 0; i--)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1f1      	bne.n	80017a4 <wait_response_PS2+0xc>
 80017c0:	e000      	b.n	80017c4 <wait_response_PS2+0x2c>
			break;
 80017c2:	bf00      	nop
	}
	return buf_pop(); // returns 0 in case of time overflow
 80017c4:	f000 f864 	bl	8001890 <buf_pop>
 80017c8:	4603      	mov	r3, r0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <process_PS2>:

/**
 * @brief if any data in buffer, or new LEDs, process it
 */
void process_PS2(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	if (sleep)
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <process_PS2+0x5c>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d012      	beq.n	8001806 <process_PS2+0x32>
	{
		leds_updated = 1;
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <process_PS2+0x60>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
		if (sleep == 2) // we are entering sleep
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <process_PS2+0x5c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d103      	bne.n	80017f6 <process_PS2+0x22>
		{
			leds_PS2(0);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7ff ff94 	bl	800171c <leds_PS2>
 80017f4:	e004      	b.n	8001800 <process_PS2+0x2c>
		}
		else // we are exiting sleep
		{
			leds_PS2(leds_data);
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <process_PS2+0x64>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff8e 	bl	800171c <leds_PS2>
		}
		sleep = 0;
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <process_PS2+0x5c>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
	}
	if (buf_has_data())
 8001806:	f000 f86d 	bl	80018e4 <buf_has_data>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <process_PS2+0x4a>
		matrix_scan(buf_pop());
 8001810:	f000 f83e 	bl	8001890 <buf_pop>
 8001814:	4603      	mov	r3, r0
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fe46 	bl	80004a8 <matrix_scan>
 800181c:	e004      	b.n	8001828 <process_PS2+0x54>
	else
		leds_PS2(leds_data);
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <process_PS2+0x64>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff7a 	bl	800171c <leds_PS2>
	prog_pop_code();
 8001828:	f7ff f946 	bl	8000ab8 <prog_pop_code>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000220 	.word	0x20000220
 8001834:	200002d9 	.word	0x200002d9
 8001838:	200002d8 	.word	0x200002d8

0800183c <buf_push>:

/********************************/
/* buffer for PS2 */

void buf_push(uint8_t data)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    uint8_t next = (pbuf_head + 1) % PBUF_SIZE;
 8001846:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <buf_push+0x48>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	425a      	negs	r2, r3
 800184e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001852:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001856:	bf58      	it	pl
 8001858:	4253      	negpl	r3, r2
 800185a:	73fb      	strb	r3, [r7, #15]
    // don't add new values if buffer is already full
    if (next != pbuf_tail) {
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <buf_push+0x4c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	429a      	cmp	r2, r3
 8001864:	d008      	beq.n	8001878 <buf_push+0x3c>
        pbuf[pbuf_head] = data;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <buf_push+0x48>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <buf_push+0x50>)
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	5453      	strb	r3, [r2, r1]
        pbuf_head = next;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <buf_push+0x48>)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	7013      	strb	r3, [r2, #0]
    }
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000221 	.word	0x20000221
 8001888:	20000222 	.word	0x20000222
 800188c:	200002dc 	.word	0x200002dc

08001890 <buf_pop>:

uint8_t buf_pop(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
    uint8_t val = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	71fb      	strb	r3, [r7, #7]
    // if buffer is empty, return 0
    if (pbuf_head != pbuf_tail) {
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <buf_pop+0x48>)
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <buf_pop+0x4c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d012      	beq.n	80018cc <buf_pop+0x3c>
        val = pbuf[pbuf_tail];
 80018a6:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <buf_pop+0x4c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <buf_pop+0x50>)
 80018ae:	5c9b      	ldrb	r3, [r3, r2]
 80018b0:	71fb      	strb	r3, [r7, #7]
        pbuf_tail = (pbuf_tail + 1) % PBUF_SIZE;
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <buf_pop+0x4c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	425a      	negs	r2, r3
 80018ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018be:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80018c2:	bf58      	it	pl
 80018c4:	4253      	negpl	r3, r2
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <buf_pop+0x4c>)
 80018ca:	701a      	strb	r2, [r3, #0]
    }
    return val;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	20000221 	.word	0x20000221
 80018dc:	20000222 	.word	0x20000222
 80018e0:	200002dc 	.word	0x200002dc

080018e4 <buf_has_data>:

uint8_t buf_has_data(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
    return (pbuf_head != pbuf_tail);
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <buf_has_data+0x20>)
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <buf_has_data+0x24>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000221 	.word	0x20000221
 8001908:	20000222 	.word	0x20000222

0800190c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_MspInit+0x5c>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_MspInit+0x5c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_MspInit+0x5c>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_MspInit+0x5c>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	4a0e      	ldr	r2, [pc, #56]	; (8001968 <HAL_MspInit+0x5c>)
 8001930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001934:	61d3      	str	r3, [r2, #28]
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_MspInit+0x5c>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_MspInit+0x60>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_MspInit+0x60>)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f935 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019c6:	f000 ff4c 	bl	8002862 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000084c 	.word	0x2000084c

080019d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019dc:	f000 fdf8 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <_delay_ms>:
#include "tim.h"

/* USER CODE BEGIN 0 */

void _delay_ms(uint32_t u32_Delay)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	HAL_Delay(u32_Delay);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f92f 	bl	8001c5c <HAL_Delay>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_delay_us>:

void _delay_us (uint16_t u16_us)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	80fb      	strh	r3, [r7, #6]
	reset_us_counter();  // set the counter value a 0
 8001a10:	f000 f80c 	bl	8001a2c <reset_us_counter>
	while (check_us_counter(u16_us));  // wait for the counter to reach the us input in the parameter
 8001a14:	bf00      	nop
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f813 	bl	8001a44 <check_us_counter>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f8      	bne.n	8001a16 <_delay_us+0x10>
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <reset_us_counter>:

inline void reset_us_counter(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <reset_us_counter+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	2000031c 	.word	0x2000031c

08001a44 <check_us_counter>:

inline uint8_t check_us_counter(uint16_t u16_us)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	return ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < u16_us);
 8001a4e:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <check_us_counter+0x28>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	bf8c      	ite	hi
 8001a5c:	2301      	movhi	r3, #1
 8001a5e:	2300      	movls	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	2000031c 	.word	0x2000031c

08001a70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <MX_TIM1_Init+0x9c>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001a94:	222f      	movs	r2, #47	; 0x2f
 8001a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab8:	4813      	ldr	r0, [pc, #76]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001aba:	f002 fdad 	bl	8004618 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f7ff fc97 	bl	80013f6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ace:	f107 0308 	add.w	r3, r7, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001ad6:	f002 fe39 	bl	800474c <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ae0:	f7ff fc89 	bl	80013f6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <MX_TIM1_Init+0x98>)
 8001af2:	f002 ffdb 	bl	8004aac <HAL_TIMEx_MasterConfigSynchronization>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001afc:	f7ff fc7b 	bl	80013f6 <Error_Handler>
  }

}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000031c 	.word	0x2000031c
 8001b0c:	40012c00 	.word	0x40012c00

08001b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_TIM_Base_MspInit+0x34>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d10b      	bne.n	8001b3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b2c:	6193      	str	r3, [r2, #24]
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_TIM_Base_MspInit+0x38>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	3714      	adds	r7, #20
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	40021000 	.word	0x40021000

08001b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b4c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b4e:	e003      	b.n	8001b58 <LoopCopyDataInit>

08001b50 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b52:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b54:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b56:	3104      	adds	r1, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b58:	480a      	ldr	r0, [pc, #40]	; (8001b84 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b5c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b60:	d3f6      	bcc.n	8001b50 <CopyDataInit>
  ldr r2, =_sbss
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b64:	e002      	b.n	8001b6c <LoopFillZerobss>

08001b66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b68:	f842 3b04 	str.w	r3, [r2], #4

08001b6c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001b6e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b70:	d3f9      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b72:	f7ff ff37 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f006 feb1 	bl	80088dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b7a:	f7ff fbb9 	bl	80012f0 <main>
  bx lr
 8001b7e:	4770      	bx	lr
  ldr r3, =_sidata
 8001b80:	08008abc 	.word	0x08008abc
  ldr r0, =_sdata
 8001b84:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001b88:	200001a8 	.word	0x200001a8
  ldr r2, =_sbss
 8001b8c:	200001a8 	.word	0x200001a8
  ldr r3, = _ebss
 8001b90:	20000b38 	.word	0x20000b38

08001b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b94:	e7fe      	b.n	8001b94 <ADC1_2_IRQHandler>
	...

08001b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_Init+0x28>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_Init+0x28>)
 8001ba2:	f043 0310 	orr.w	r3, r3, #16
 8001ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba8:	2003      	movs	r0, #3
 8001baa:	f000 f945 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 f808 	bl	8001bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb4:	f7ff feaa 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_InitTick+0x54>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_InitTick+0x58>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 f95d 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00e      	b.n	8001c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d80a      	bhi.n	8001c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f925 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c04:	4a06      	ldr	r2, [pc, #24]	; (8001c20 <HAL_InitTick+0x5c>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_IncTick+0x1c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <HAL_IncTick+0x20>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <HAL_IncTick+0x20>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	2000000c 	.word	0x2000000c
 8001c44:	20000364 	.word	0x20000364

08001c48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b02      	ldr	r3, [pc, #8]	; (8001c58 <HAL_GetTick+0x10>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	20000364 	.word	0x20000364

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff fff0 	bl	8001c48 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_Delay+0x40>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffe0 	bl	8001c48 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000000c 	.word	0x2000000c

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4906      	ldr	r1, [pc, #24]	; (8001d38 <__NVIC_EnableIRQ+0x34>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff90 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff2d 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff42 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff35 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ed6:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <HAL_FLASH_Program+0xd8>)
 8001ed8:	7e1b      	ldrb	r3, [r3, #24]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_FLASH_Program+0x26>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e054      	b.n	8001f8c <HAL_FLASH_Program+0xd0>
 8001ee2:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <HAL_FLASH_Program+0xd8>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ee8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eec:	f000 f8a8 	bl	8002040 <FLASH_WaitForLastOperation>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d144      	bne.n	8001f84 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d102      	bne.n	8001f06 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001f00:	2301      	movs	r3, #1
 8001f02:	757b      	strb	r3, [r7, #21]
 8001f04:	e007      	b.n	8001f16 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d102      	bne.n	8001f12 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	757b      	strb	r3, [r7, #21]
 8001f10:	e001      	b.n	8001f16 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001f12:	2304      	movs	r3, #4
 8001f14:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	75bb      	strb	r3, [r7, #22]
 8001f1a:	e02d      	b.n	8001f78 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001f1c:	7dbb      	ldrb	r3, [r7, #22]
 8001f1e:	005a      	lsls	r2, r3, #1
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	eb02 0c03 	add.w	ip, r2, r3
 8001f26:	7dbb      	ldrb	r3, [r7, #22]
 8001f28:	0119      	lsls	r1, r3, #4
 8001f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f2e:	f1c1 0620 	rsb	r6, r1, #32
 8001f32:	f1a1 0020 	sub.w	r0, r1, #32
 8001f36:	fa22 f401 	lsr.w	r4, r2, r1
 8001f3a:	fa03 f606 	lsl.w	r6, r3, r6
 8001f3e:	4334      	orrs	r4, r6
 8001f40:	fa23 f000 	lsr.w	r0, r3, r0
 8001f44:	4304      	orrs	r4, r0
 8001f46:	fa23 f501 	lsr.w	r5, r3, r1
 8001f4a:	b2a3      	uxth	r3, r4
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4660      	mov	r0, ip
 8001f50:	f000 f85a 	bl	8002008 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001f54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f58:	f000 f872 	bl	8002040 <FLASH_WaitForLastOperation>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001f60:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_FLASH_Program+0xdc>)
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <HAL_FLASH_Program+0xdc>)
 8001f66:	f023 0301 	bic.w	r3, r3, #1
 8001f6a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001f72:	7dbb      	ldrb	r3, [r7, #22]
 8001f74:	3301      	adds	r3, #1
 8001f76:	75bb      	strb	r3, [r7, #22]
 8001f78:	7dba      	ldrb	r2, [r7, #22]
 8001f7a:	7d7b      	ldrb	r3, [r7, #21]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d3cd      	bcc.n	8001f1c <HAL_FLASH_Program+0x60>
 8001f80:	e000      	b.n	8001f84 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001f82:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_FLASH_Program+0xd8>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	761a      	strb	r2, [r3, #24]

  return status;
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f94:	20000368 	.word	0x20000368
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_FLASH_Unlock+0x44>)
 8001fb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fb8:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <HAL_FLASH_Unlock+0x48>)
 8001fbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_FLASH_Unlock+0x40>)
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	45670123 	.word	0x45670123
 8001fe4:	cdef89ab 	.word	0xcdef89ab

08001fe8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_FLASH_Lock+0x1c>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_FLASH_Lock+0x1c>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000

08002008 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002014:	4b08      	ldr	r3, [pc, #32]	; (8002038 <FLASH_Program_HalfWord+0x30>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <FLASH_Program_HalfWord+0x34>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <FLASH_Program_HalfWord+0x34>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	801a      	strh	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000368 	.word	0x20000368
 800203c:	40022000 	.word	0x40022000

08002040 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff fdfe 	bl	8001c48 <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800204e:	e010      	b.n	8002072 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d00c      	beq.n	8002072 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d007      	beq.n	800206e <FLASH_WaitForLastOperation+0x2e>
 800205e:	f7ff fdf3 	bl	8001c48 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d201      	bcs.n	8002072 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e025      	b.n	80020be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1e8      	bne.n	8002050 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d002      	beq.n	8002090 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800208a:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 800208c:	2220      	movs	r2, #32
 800208e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <FLASH_WaitForLastOperation+0x88>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80020b4:	f000 f80a 	bl	80020cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40022000 	.word	0x40022000

080020cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <FLASH_SetErrorCode+0x98>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 80020ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f043 0310 	orr.w	r3, r3, #16
 80020f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80020f6:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <FLASH_SetErrorCode+0x98>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002102:	4b19      	ldr	r3, [pc, #100]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	4a17      	ldr	r2, [pc, #92]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 800210c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <FLASH_SetErrorCode+0x98>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00b      	beq.n	800213a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <FLASH_SetErrorCode+0x9c>)
 800212c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <FLASH_SetErrorCode+0x98>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <FLASH_SetErrorCode+0x98>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f240 1201 	movw	r2, #257	; 0x101
 8002140:	4293      	cmp	r3, r2
 8002142:	d106      	bne.n	8002152 <FLASH_SetErrorCode+0x86>
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <FLASH_SetErrorCode+0x98>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <FLASH_SetErrorCode+0x98>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	61d3      	str	r3, [r2, #28]
}  
 8002150:	e002      	b.n	8002158 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002152:	4a04      	ldr	r2, [pc, #16]	; (8002164 <FLASH_SetErrorCode+0x98>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	60d3      	str	r3, [r2, #12]
}  
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	20000368 	.word	0x20000368

0800216c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_FLASHEx_Erase+0xd0>)
 8002180:	7e1b      	ldrb	r3, [r3, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_FLASHEx_Erase+0x1e>
 8002186:	2302      	movs	r3, #2
 8002188:	e053      	b.n	8002232 <HAL_FLASHEx_Erase+0xc6>
 800218a:	4b2c      	ldr	r3, [pc, #176]	; (800223c <HAL_FLASHEx_Erase+0xd0>)
 800218c:	2201      	movs	r2, #1
 800218e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d116      	bne.n	80021c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002198:	f24c 3050 	movw	r0, #50000	; 0xc350
 800219c:	f7ff ff50 	bl	8002040 <FLASH_WaitForLastOperation>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d141      	bne.n	800222a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f000 f84c 	bl	8002244 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b0:	f7ff ff46 	bl	8002040 <FLASH_WaitForLastOperation>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80021b8:	4b21      	ldr	r3, [pc, #132]	; (8002240 <HAL_FLASHEx_Erase+0xd4>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a20      	ldr	r2, [pc, #128]	; (8002240 <HAL_FLASHEx_Erase+0xd4>)
 80021be:	f023 0304 	bic.w	r3, r3, #4
 80021c2:	6113      	str	r3, [r2, #16]
 80021c4:	e031      	b.n	800222a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021ca:	f7ff ff39 	bl	8002040 <FLASH_WaitForLastOperation>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d12a      	bne.n	800222a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	e019      	b.n	8002218 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f000 f849 	bl	800227c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021ee:	f7ff ff27 	bl	8002040 <FLASH_WaitForLastOperation>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021f6:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_FLASHEx_Erase+0xd4>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	4a11      	ldr	r2, [pc, #68]	; (8002240 <HAL_FLASHEx_Erase+0xd4>)
 80021fc:	f023 0302 	bic.w	r3, r3, #2
 8002200:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	601a      	str	r2, [r3, #0]
            break;
 800220e:	e00c      	b.n	800222a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002216:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	029a      	lsls	r2, r3, #10
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d3dc      	bcc.n	80021e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <HAL_FLASHEx_Erase+0xd0>)
 800222c:	2200      	movs	r2, #0
 800222e:	761a      	strb	r2, [r3, #24]

  return status;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000368 	.word	0x20000368
 8002240:	40022000 	.word	0x40022000

08002244 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <FLASH_MassErase+0x30>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <FLASH_MassErase+0x34>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <FLASH_MassErase+0x34>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <FLASH_MassErase+0x34>)
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <FLASH_MassErase+0x34>)
 8002264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002268:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr
 8002274:	20000368 	.word	0x20000368
 8002278:	40022000 	.word	0x40022000

0800227c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <FLASH_PageErase+0x38>)
 8002286:	2200      	movs	r2, #0
 8002288:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <FLASH_PageErase+0x3c>)
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <FLASH_PageErase+0x3c>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002296:	4a08      	ldr	r2, [pc, #32]	; (80022b8 <FLASH_PageErase+0x3c>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <FLASH_PageErase+0x3c>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a05      	ldr	r2, [pc, #20]	; (80022b8 <FLASH_PageErase+0x3c>)
 80022a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000368 	.word	0x20000368
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b08b      	sub	sp, #44	; 0x2c
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022ca:	2300      	movs	r3, #0
 80022cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ce:	e127      	b.n	8002520 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d0:	2201      	movs	r2, #1
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8116 	bne.w	800251a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d034      	beq.n	8002360 <HAL_GPIO_Init+0xa4>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d80d      	bhi.n	8002316 <HAL_GPIO_Init+0x5a>
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d02b      	beq.n	8002356 <HAL_GPIO_Init+0x9a>
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d804      	bhi.n	800230c <HAL_GPIO_Init+0x50>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d031      	beq.n	800236a <HAL_GPIO_Init+0xae>
 8002306:	2b01      	cmp	r3, #1
 8002308:	d01c      	beq.n	8002344 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230a:	e048      	b.n	800239e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800230c:	2b03      	cmp	r3, #3
 800230e:	d043      	beq.n	8002398 <HAL_GPIO_Init+0xdc>
 8002310:	2b11      	cmp	r3, #17
 8002312:	d01b      	beq.n	800234c <HAL_GPIO_Init+0x90>
          break;
 8002314:	e043      	b.n	800239e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002316:	4a89      	ldr	r2, [pc, #548]	; (800253c <HAL_GPIO_Init+0x280>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d026      	beq.n	800236a <HAL_GPIO_Init+0xae>
 800231c:	4a87      	ldr	r2, [pc, #540]	; (800253c <HAL_GPIO_Init+0x280>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d806      	bhi.n	8002330 <HAL_GPIO_Init+0x74>
 8002322:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_GPIO_Init+0x284>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d020      	beq.n	800236a <HAL_GPIO_Init+0xae>
 8002328:	4a86      	ldr	r2, [pc, #536]	; (8002544 <HAL_GPIO_Init+0x288>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01d      	beq.n	800236a <HAL_GPIO_Init+0xae>
          break;
 800232e:	e036      	b.n	800239e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002330:	4a85      	ldr	r2, [pc, #532]	; (8002548 <HAL_GPIO_Init+0x28c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d019      	beq.n	800236a <HAL_GPIO_Init+0xae>
 8002336:	4a85      	ldr	r2, [pc, #532]	; (800254c <HAL_GPIO_Init+0x290>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d016      	beq.n	800236a <HAL_GPIO_Init+0xae>
 800233c:	4a84      	ldr	r2, [pc, #528]	; (8002550 <HAL_GPIO_Init+0x294>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_GPIO_Init+0xae>
          break;
 8002342:	e02c      	b.n	800239e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e028      	b.n	800239e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	3304      	adds	r3, #4
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e023      	b.n	800239e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	3308      	adds	r3, #8
 800235c:	623b      	str	r3, [r7, #32]
          break;
 800235e:	e01e      	b.n	800239e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	330c      	adds	r3, #12
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e019      	b.n	800239e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002372:	2304      	movs	r3, #4
 8002374:	623b      	str	r3, [r7, #32]
          break;
 8002376:	e012      	b.n	800239e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d105      	bne.n	800238c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002380:	2308      	movs	r3, #8
 8002382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	611a      	str	r2, [r3, #16]
          break;
 800238a:	e008      	b.n	800239e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800238c:	2308      	movs	r3, #8
 800238e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	615a      	str	r2, [r3, #20]
          break;
 8002396:	e002      	b.n	800239e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
          break;
 800239c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2bff      	cmp	r3, #255	; 0xff
 80023a2:	d801      	bhi.n	80023a8 <HAL_GPIO_Init+0xec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	e001      	b.n	80023ac <HAL_GPIO_Init+0xf0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2bff      	cmp	r3, #255	; 0xff
 80023b2:	d802      	bhi.n	80023ba <HAL_GPIO_Init+0xfe>
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_Init+0x104>
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3b08      	subs	r3, #8
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	210f      	movs	r1, #15
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	401a      	ands	r2, r3
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8096 	beq.w	800251a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023ee:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_GPIO_Init+0x298>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_GPIO_Init+0x298>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6193      	str	r3, [r2, #24]
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_GPIO_Init+0x298>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002406:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_GPIO_Init+0x29c>)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	3302      	adds	r3, #2
 800240e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002412:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4013      	ands	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a4b      	ldr	r2, [pc, #300]	; (800255c <HAL_GPIO_Init+0x2a0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d013      	beq.n	800245a <HAL_GPIO_Init+0x19e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_GPIO_Init+0x2a4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x19a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x2a8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x196>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2ac>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x192>
 800244a:	2303      	movs	r3, #3
 800244c:	e006      	b.n	800245c <HAL_GPIO_Init+0x1a0>
 800244e:	2304      	movs	r3, #4
 8002450:	e004      	b.n	800245c <HAL_GPIO_Init+0x1a0>
 8002452:	2302      	movs	r3, #2
 8002454:	e002      	b.n	800245c <HAL_GPIO_Init+0x1a0>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_GPIO_Init+0x1a0>
 800245a:	2300      	movs	r3, #0
 800245c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800245e:	f002 0203 	and.w	r2, r2, #3
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	4093      	lsls	r3, r2
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800246c:	493a      	ldr	r1, [pc, #232]	; (8002558 <HAL_GPIO_Init+0x29c>)
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3302      	adds	r3, #2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d006      	beq.n	8002494 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002486:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4938      	ldr	r1, [pc, #224]	; (800256c <HAL_GPIO_Init+0x2b0>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
 8002492:	e006      	b.n	80024a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	43db      	mvns	r3, r3
 800249c:	4933      	ldr	r1, [pc, #204]	; (800256c <HAL_GPIO_Init+0x2b0>)
 800249e:	4013      	ands	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d006      	beq.n	80024bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	492e      	ldr	r1, [pc, #184]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	e006      	b.n	80024ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024bc:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	4929      	ldr	r1, [pc, #164]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4924      	ldr	r1, [pc, #144]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
 80024e2:	e006      	b.n	80024f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024e4:	4b21      	ldr	r3, [pc, #132]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	43db      	mvns	r3, r3
 80024ec:	491f      	ldr	r1, [pc, #124]	; (800256c <HAL_GPIO_Init+0x2b0>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	491a      	ldr	r1, [pc, #104]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	60cb      	str	r3, [r1, #12]
 800250a:	e006      	b.n	800251a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_GPIO_Init+0x2b0>)
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	43db      	mvns	r3, r3
 8002514:	4915      	ldr	r1, [pc, #84]	; (800256c <HAL_GPIO_Init+0x2b0>)
 8002516:	4013      	ands	r3, r2
 8002518:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3301      	adds	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f aed0 	bne.w	80022d0 <HAL_GPIO_Init+0x14>
  }
}
 8002530:	bf00      	nop
 8002532:	372c      	adds	r7, #44	; 0x2c
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	10210000 	.word	0x10210000
 8002540:	10110000 	.word	0x10110000
 8002544:	10120000 	.word	0x10120000
 8002548:	10310000 	.word	0x10310000
 800254c:	10320000 	.word	0x10320000
 8002550:	10220000 	.word	0x10220000
 8002554:	40021000 	.word	0x40021000
 8002558:	40010000 	.word	0x40010000
 800255c:	40010800 	.word	0x40010800
 8002560:	40010c00 	.word	0x40010c00
 8002564:	40011000 	.word	0x40011000
 8002568:	40011400 	.word	0x40011400
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	807b      	strh	r3, [r7, #2]
 80025aa:	4613      	mov	r3, r2
 80025ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ae:	787b      	ldrb	r3, [r7, #1]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b4:	887a      	ldrh	r2, [r7, #2]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025ba:	e003      	b.n	80025c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025bc:	887b      	ldrh	r3, [r7, #2]
 80025be:	041a      	lsls	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ff06 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40010400 	.word	0x40010400

08002600 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af06      	add	r7, sp, #24
 8002606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0fd      	b.n	800280e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f005 fed8 	bl	80083dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fabb 	bl	8004bb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	687e      	ldr	r6, [r7, #4]
 8002646:	466d      	mov	r5, sp
 8002648:	f106 0410 	add.w	r4, r6, #16
 800264c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800264e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	1d33      	adds	r3, r6, #4
 8002656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002658:	6838      	ldr	r0, [r7, #0]
 800265a:	f002 fa85 	bl	8004b68 <USB_CoreInit>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0ce      	b.n	800280e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fab6 	bl	8004be8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e04c      	b.n	800271c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	3301      	adds	r3, #1
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	b298      	uxth	r0, r3
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3336      	adds	r3, #54	; 0x36
 80026c0:	4602      	mov	r2, r0
 80026c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	440b      	add	r3, r1
 80026d4:	3303      	adds	r3, #3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	440b      	add	r3, r1
 80026e8:	3338      	adds	r3, #56	; 0x38
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	333c      	adds	r3, #60	; 0x3c
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	3301      	adds	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d3ad      	bcc.n	8002682 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e044      	b.n	80027b6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	440b      	add	r3, r1
 800273a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002758:	7bfa      	ldrb	r2, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	3301      	adds	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3b5      	bcc.n	800272c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	603b      	str	r3, [r7, #0]
 80027c6:	687e      	ldr	r6, [r7, #4]
 80027c8:	466d      	mov	r5, sp
 80027ca:	f106 0410 	add.w	r4, r6, #16
 80027ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	602b      	str	r3, [r5, #0]
 80027d6:	1d33      	adds	r3, r6, #4
 80027d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	f002 fa10 	bl	8004c00 <USB_DevInit>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e00d      	b.n	800280e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f9aa 	bl	8006b60 <USB_DevDisconnect>

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002816 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b082      	sub	sp, #8
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_PCD_Start+0x16>
 8002828:	2302      	movs	r3, #2
 800282a:	e016      	b.n	800285a <HAL_PCD_Start+0x44>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f002 f9a5 	bl	8004b88 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800283e:	2101      	movs	r1, #1
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f006 f814 	bl	800886e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f97e 	bl	8006b4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b088      	sub	sp, #32
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f004 f980 	bl	8006b74 <USB_ReadInterrupts>
 8002874:	4603      	mov	r3, r0
 8002876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800287a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287e:	d102      	bne.n	8002886 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 fb4a 	bl	8002f1a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 f972 	bl	8006b74 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d112      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ae:	b292      	uxth	r2, r2
 80028b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f005 fe0c 	bl	80084d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028ba:	2100      	movs	r1, #0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f925 	bl	8002b0c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 f954 	bl	8006b74 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d6:	d10b      	bne.n	80028f0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028ea:	b292      	uxth	r2, r2
 80028ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 f93d 	bl	8006b74 <USB_ReadInterrupts>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002904:	d10b      	bne.n	800291e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800290e:	b29a      	uxth	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002918:	b292      	uxth	r2, r2
 800291a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f004 f926 	bl	8006b74 <USB_ReadInterrupts>
 8002928:	4603      	mov	r3, r0
 800292a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d126      	bne.n	8002982 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	b292      	uxth	r2, r2
 8002948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002954:	b29a      	uxth	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0208 	bic.w	r2, r2, #8
 800295e:	b292      	uxth	r2, r2
 8002960:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f005 fde3 	bl	8008530 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002972:	b29a      	uxth	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800297c:	b292      	uxth	r2, r2
 800297e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f004 f8f4 	bl	8006b74 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002996:	f040 8084 	bne.w	8002aa2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800299a:	2300      	movs	r3, #0
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e011      	b.n	80029c4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	7ffb      	ldrb	r3, [r7, #31]
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	441a      	add	r2, r3
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
 80029ae:	8812      	ldrh	r2, [r2, #0]
 80029b0:	b292      	uxth	r2, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	f107 0120 	add.w	r1, r7, #32
 80029b8:	440b      	add	r3, r1
 80029ba:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	3301      	adds	r3, #1
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	7ffb      	ldrb	r3, [r7, #31]
 80029c6:	2b07      	cmp	r3, #7
 80029c8:	d9ea      	bls.n	80029a0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 0201 	orr.w	r2, r2, #1
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0201 	bic.w	r2, r2, #1
 80029f4:	b292      	uxth	r2, r2
 80029f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80029fa:	bf00      	nop
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f6      	beq.n	80029fc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a20:	b292      	uxth	r2, r2
 8002a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	77fb      	strb	r3, [r7, #31]
 8002a2a:	e010      	b.n	8002a4e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a2c:	7ffb      	ldrb	r3, [r7, #31]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4611      	mov	r1, r2
 8002a34:	7ffa      	ldrb	r2, [r7, #31]
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	440a      	add	r2, r1
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	f107 0120 	add.w	r1, r7, #32
 8002a40:	440b      	add	r3, r1
 8002a42:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002a46:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002a48:	7ffb      	ldrb	r3, [r7, #31]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	77fb      	strb	r3, [r7, #31]
 8002a4e:	7ffb      	ldrb	r3, [r7, #31]
 8002a50:	2b07      	cmp	r3, #7
 8002a52:	d9eb      	bls.n	8002a2c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0208 	orr.w	r2, r2, #8
 8002a66:	b292      	uxth	r2, r2
 8002a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0204 	orr.w	r2, r2, #4
 8002a96:	b292      	uxth	r2, r2
 8002a98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f005 fd36 	bl	800850e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f864 	bl	8006b74 <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ab6:	d10e      	bne.n	8002ad6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aca:	b292      	uxth	r2, r2
 8002acc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f005 fcf0 	bl	80084b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f84a 	bl	8006b74 <USB_ReadInterrupts>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d10b      	bne.n	8002b04 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afe:	b292      	uxth	r2, r2
 8002b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d101      	bne.n	8002b26 <HAL_PCD_SetAddress+0x1a>
 8002b22:	2302      	movs	r3, #2
 8002b24:	e013      	b.n	8002b4e <HAL_PCD_SetAddress+0x42>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fff1 	bl	8006b26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	4608      	mov	r0, r1
 8002b60:	4611      	mov	r1, r2
 8002b62:	461a      	mov	r2, r3
 8002b64:	4603      	mov	r3, r0
 8002b66:	70fb      	strb	r3, [r7, #3]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	803b      	strh	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	da0e      	bge.n	8002b9a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	705a      	strb	r2, [r3, #1]
 8002b98:	e00e      	b.n	8002bb8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	f003 0207 	and.w	r2, r3, #7
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bc4:	883a      	ldrh	r2, [r7, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	78ba      	ldrb	r2, [r7, #2]
 8002bce:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	785b      	ldrb	r3, [r3, #1]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002be2:	78bb      	ldrb	r3, [r7, #2]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_PCD_EP_Open+0xa6>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e00e      	b.n	8002c1a <HAL_PCD_EP_Open+0xc4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68f9      	ldr	r1, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f002 f818 	bl	8004c40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c18:	7afb      	ldrb	r3, [r7, #11]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	da0e      	bge.n	8002c54 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	705a      	strb	r2, [r3, #1]
 8002c52:	e00e      	b.n	8002c72 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 0207 	and.w	r2, r3, #7
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_PCD_EP_Close+0x6a>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e00e      	b.n	8002caa <HAL_PCD_EP_Close+0x88>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f002 fb3a 	bl	8005314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	f003 0207 	and.w	r2, r3, #7
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cfe:	7afb      	ldrb	r3, [r7, #11]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d106      	bne.n	8002d16 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 fcec 	bl	80056ec <USB_EPStartXfer>
 8002d14:	e005      	b.n	8002d22 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f002 fce5 	bl	80056ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	7afb      	ldrb	r3, [r7, #11]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2201      	movs	r2, #1
 8002d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d78:	7afb      	ldrb	r3, [r7, #11]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d84:	7afb      	ldrb	r3, [r7, #11]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6979      	ldr	r1, [r7, #20]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 fca9 	bl	80056ec <USB_EPStartXfer>
 8002d9a:	e005      	b.n	8002da8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f002 fca2 	bl	80056ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	f003 0207 	and.w	r2, r3, #7
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d901      	bls.n	8002dd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e04c      	b.n	8002e6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	da0e      	bge.n	8002df6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	705a      	strb	r2, [r3, #1]
 8002df4:	e00c      	b.n	8002e10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_PCD_EP_SetStall+0x7e>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e01c      	b.n	8002e6a <HAL_PCD_EP_SetStall+0xb8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68f9      	ldr	r1, [r7, #12]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fd74 	bl	800692c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f003 fe99 	bl	8006b92 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d901      	bls.n	8002e90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e040      	b.n	8002f12 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da0e      	bge.n	8002eb6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	705a      	strb	r2, [r3, #1]
 8002eb4:	e00e      	b.n	8002ed4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 0207 	and.w	r2, r3, #7
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eda:	78fb      	ldrb	r3, [r7, #3]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_PCD_EP_ClrStall+0x82>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	e00e      	b.n	8002f12 <HAL_PCD_EP_ClrStall+0xa0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68f9      	ldr	r1, [r7, #12]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fd62 	bl	80069cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08e      	sub	sp, #56	; 0x38
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f22:	e2df      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002f3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8158 	bne.w	80031f4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f46:	f003 0310 	and.w	r3, r3, #16
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d152      	bne.n	8002ff4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	81fb      	strh	r3, [r7, #14]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	89fb      	ldrh	r3, [r7, #14]
 8002f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3328      	adds	r3, #40	; 0x28
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	441a      	add	r2, r3
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f005 fa64 	bl	8008482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 828e 	beq.w	80034e4 <PCD_EP_ISR_Handler+0x5ca>
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 8289 	bne.w	80034e4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ff2:	e277      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003004:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300a:	2b00      	cmp	r3, #0
 800300c:	d034      	beq.n	8003078 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	3306      	adds	r3, #6
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800304c:	b29b      	uxth	r3, r3
 800304e:	f003 fdef 	bl	8006c30 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	b29a      	uxth	r2, r3
 800305a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800305e:	4013      	ands	r3, r2
 8003060:	823b      	strh	r3, [r7, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	8a3a      	ldrh	r2, [r7, #16]
 8003068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800306c:	b292      	uxth	r2, r2
 800306e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f005 f9d9 	bl	8008428 <HAL_PCD_SetupStageCallback>
 8003076:	e235      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003078:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800307c:	2b00      	cmp	r3, #0
 800307e:	f280 8231 	bge.w	80034e4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29a      	uxth	r2, r3
 800308a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800308e:	4013      	ands	r3, r2
 8003090:	83bb      	strh	r3, [r7, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	8bba      	ldrh	r2, [r7, #28]
 8003098:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800309c:	b292      	uxth	r2, r2
 800309e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	461a      	mov	r2, r3
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	3306      	adds	r3, #6
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d019      	beq.n	8003108 <PCD_EP_ISR_Handler+0x1ee>
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e2:	6959      	ldr	r1, [r3, #20]
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f003 fd9f 	bl	8006c30 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	441a      	add	r2, r3
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003100:	2100      	movs	r1, #0
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f005 f9a2 	bl	800844c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	4413      	add	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d112      	bne.n	8003156 <PCD_EP_ISR_Handler+0x23c>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313a:	b29a      	uxth	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314e:	b29a      	uxth	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	e02f      	b.n	80031b6 <PCD_EP_ISR_Handler+0x29c>
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b3e      	cmp	r3, #62	; 0x3e
 800315c:	d813      	bhi.n	8003186 <PCD_EP_ISR_Handler+0x26c>
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	085b      	lsrs	r3, r3, #1
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
 8003166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <PCD_EP_ISR_Handler+0x25e>
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	3301      	adds	r3, #1
 8003176:	633b      	str	r3, [r7, #48]	; 0x30
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	b29b      	uxth	r3, r3
 800317c:	029b      	lsls	r3, r3, #10
 800317e:	b29a      	uxth	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	801a      	strh	r2, [r3, #0]
 8003184:	e017      	b.n	80031b6 <PCD_EP_ISR_Handler+0x29c>
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <PCD_EP_ISR_Handler+0x286>
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	3b01      	subs	r3, #1
 800319e:	633b      	str	r3, [r7, #48]	; 0x30
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	029b      	lsls	r3, r3, #10
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	881b      	ldrh	r3, [r3, #0]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c6:	827b      	strh	r3, [r7, #18]
 80031c8:	8a7b      	ldrh	r3, [r7, #18]
 80031ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031ce:	827b      	strh	r3, [r7, #18]
 80031d0:	8a7b      	ldrh	r3, [r7, #18]
 80031d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031d6:	827b      	strh	r3, [r7, #18]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	8a7b      	ldrh	r3, [r7, #18]
 80031de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	8013      	strh	r3, [r2, #0]
 80031f2:	e177      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003206:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800320a:	2b00      	cmp	r3, #0
 800320c:	f280 80ea 	bge.w	80033e4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29a      	uxth	r2, r3
 8003222:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003226:	4013      	ands	r3, r2
 8003228:	853b      	strh	r3, [r7, #40]	; 0x28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800323a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003242:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	7b1b      	ldrb	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d122      	bne.n	80032a6 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003268:	b29b      	uxth	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	4413      	add	r3, r2
 8003274:	3306      	adds	r3, #6
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003288:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800328a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8087 	beq.w	80033a0 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	88da      	ldrh	r2, [r3, #6]
 800329e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032a0:	f003 fcc6 	bl	8006c30 <USB_ReadPMA>
 80032a4:	e07c      	b.n	80033a0 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	78db      	ldrb	r3, [r3, #3]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d108      	bne.n	80032c0 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80032ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80032b0:	461a      	mov	r2, r3
 80032b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f923 	bl	8003500 <HAL_PCD_EP_DB_Receive>
 80032ba:	4603      	mov	r3, r0
 80032bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80032be:	e06f      	b.n	80033a0 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	847b      	strh	r3, [r7, #34]	; 0x22
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	441a      	add	r2, r3
 80032ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d021      	beq.n	800335e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	3302      	adds	r3, #2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003342:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003344:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003346:	2b00      	cmp	r3, #0
 8003348:	d02a      	beq.n	80033a0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6959      	ldr	r1, [r3, #20]
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	891a      	ldrh	r2, [r3, #8]
 8003356:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003358:	f003 fc6a 	bl	8006c30 <USB_ReadPMA>
 800335c:	e020      	b.n	80033a0 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	3306      	adds	r3, #6
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003388:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800338a:	2b00      	cmp	r3, #0
 800338c:	d008      	beq.n	80033a0 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	6959      	ldr	r1, [r3, #20]
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	895a      	ldrh	r2, [r3, #10]
 800339a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800339c:	f003 fc48 	bl	8006c30 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033a6:	441a      	add	r2, r3
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	695a      	ldr	r2, [r3, #20]
 80033b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033b2:	441a      	add	r2, r3
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d004      	beq.n	80033ca <PCD_EP_ISR_Handler+0x4b0>
 80033c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d206      	bcs.n	80033d8 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f005 f83b 	bl	800844c <HAL_PCD_DataOutStageCallback>
 80033d6:	e005      	b.n	80033e4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033de:	4618      	mov	r0, r3
 80033e0:	f002 f984 	bl	80056ec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80033e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d07a      	beq.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80033ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341c:	843b      	strh	r3, [r7, #32]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	8c3b      	ldrh	r3, [r7, #32]
 800342e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003436:	b29b      	uxth	r3, r3
 8003438:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d108      	bne.n	8003454 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003446:	2b02      	cmp	r3, #2
 8003448:	d146      	bne.n	80034d8 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800344a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003450:	2b00      	cmp	r3, #0
 8003452:	d141      	bne.n	80034d8 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800345c:	b29b      	uxth	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4413      	add	r3, r2
 8003468:	3302      	adds	r3, #2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	8bfb      	ldrh	r3, [r7, #30]
 8003484:	429a      	cmp	r2, r3
 8003486:	d906      	bls.n	8003496 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	1ad2      	subs	r2, r2, r3
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	619a      	str	r2, [r3, #24]
 8003494:	e002      	b.n	800349c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f004 ffe9 	bl	8008482 <HAL_PCD_DataInStageCallback>
 80034b0:	e018      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	8bfb      	ldrh	r3, [r7, #30]
 80034b8:	441a      	add	r2, r3
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	441a      	add	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 f90b 	bl	80056ec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80034d6:	e005      	b.n	80034e4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80034d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034da:	461a      	mov	r2, r3
 80034dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f91b 	bl	800371a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	b21b      	sxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f6ff ad17 	blt.w	8002f24 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3738      	adds	r7, #56	; 0x38
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d07e      	beq.n	8003616 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	3302      	adds	r3, #2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003540:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	8b7b      	ldrh	r3, [r7, #26]
 8003548:	429a      	cmp	r2, r3
 800354a:	d306      	bcc.n	800355a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	1ad2      	subs	r2, r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	619a      	str	r2, [r3, #24]
 8003558:	e002      	b.n	8003560 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d123      	bne.n	80035b0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	833b      	strh	r3, [r7, #24]
 8003584:	8b3b      	ldrh	r3, [r7, #24]
 8003586:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800358a:	833b      	strh	r3, [r7, #24]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	441a      	add	r2, r3
 800359a:	8b3b      	ldrh	r3, [r7, #24]
 800359c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d01f      	beq.n	80035fa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	82fb      	strh	r3, [r7, #22]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	8afb      	ldrh	r3, [r7, #22]
 80035e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80035fa:	8b7b      	ldrh	r3, [r7, #26]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8087 	beq.w	8003710 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	6959      	ldr	r1, [r3, #20]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	891a      	ldrh	r2, [r3, #8]
 800360e:	8b7b      	ldrh	r3, [r7, #26]
 8003610:	f003 fb0e 	bl	8006c30 <USB_ReadPMA>
 8003614:	e07c      	b.n	8003710 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361e:	b29b      	uxth	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	3306      	adds	r3, #6
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	8b7b      	ldrh	r3, [r7, #26]
 8003646:	429a      	cmp	r2, r3
 8003648:	d306      	bcc.n	8003658 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	8b7b      	ldrh	r3, [r7, #26]
 8003650:	1ad2      	subs	r2, r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	619a      	str	r2, [r3, #24]
 8003656:	e002      	b.n	800365e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d123      	bne.n	80036ae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003680:	83fb      	strh	r3, [r7, #30]
 8003682:	8bfb      	ldrh	r3, [r7, #30]
 8003684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003688:	83fb      	strh	r3, [r7, #30]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	441a      	add	r2, r3
 8003698:	8bfb      	ldrh	r3, [r7, #30]
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d11f      	bne.n	80036f8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	83bb      	strh	r3, [r7, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	441a      	add	r2, r3
 80036e2:	8bbb      	ldrh	r3, [r7, #28]
 80036e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80036f8:	8b7b      	ldrh	r3, [r7, #26]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	6959      	ldr	r1, [r3, #20]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	895a      	ldrh	r2, [r3, #10]
 800370a:	8b7b      	ldrh	r3, [r7, #26]
 800370c:	f003 fa90 	bl	8006c30 <USB_ReadPMA>
    }
  }

  return count;
 8003710:	8b7b      	ldrh	r3, [r7, #26]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b092      	sub	sp, #72	; 0x48
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	4613      	mov	r3, r2
 8003726:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8132 	beq.w	8003998 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	3302      	adds	r3, #2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800375c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003764:	429a      	cmp	r2, r3
 8003766:	d906      	bls.n	8003776 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	619a      	str	r2, [r3, #24]
 8003774:	e002      	b.n	800377c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d12c      	bne.n	80037de <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f004 fe79 	bl	8008482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 822f 	beq.w	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	827b      	strh	r3, [r7, #18]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	8a7b      	ldrh	r3, [r7, #18]
 80037c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d8:	b29b      	uxth	r3, r3
 80037da:	8013      	strh	r3, [r2, #0]
 80037dc:	e20d      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01f      	beq.n	8003828 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800381c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	b29b      	uxth	r3, r3
 8003826:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800382e:	2b01      	cmp	r3, #1
 8003830:	f040 81e3 	bne.w	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800383a:	441a      	add	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003846:	441a      	add	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6a1a      	ldr	r2, [r3, #32]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d309      	bcc.n	800386c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	621a      	str	r2, [r3, #32]
 800386a:	e014      	b.n	8003896 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003874:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003876:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003880:	e009      	b.n	8003896 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d155      	bne.n	800394a <HAL_PCD_EP_DB_Transmit+0x230>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	461a      	mov	r2, r3
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	011a      	lsls	r2, r3, #4
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d112      	bne.n	80038f2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	801a      	strh	r2, [r3, #0]
 80038f0:	e047      	b.n	8003982 <HAL_PCD_EP_DB_Transmit+0x268>
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	2b3e      	cmp	r3, #62	; 0x3e
 80038f6:	d811      	bhi.n	800391c <HAL_PCD_EP_DB_Transmit+0x202>
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	3301      	adds	r3, #1
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	b29b      	uxth	r3, r3
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	b29a      	uxth	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	e032      	b.n	8003982 <HAL_PCD_EP_DB_Transmit+0x268>
 800391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	f003 031f 	and.w	r3, r3, #31
 8003928:	2b00      	cmp	r3, #0
 800392a:	d102      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0x218>
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	b29b      	uxth	r3, r3
 8003936:	029b      	lsls	r3, r3, #10
 8003938:	b29b      	uxth	r3, r3
 800393a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800393e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003942:	b29a      	uxth	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e01b      	b.n	8003982 <HAL_PCD_EP_DB_Transmit+0x268>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	785b      	ldrb	r3, [r3, #1]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d117      	bne.n	8003982 <HAL_PCD_EP_DB_Transmit+0x268>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	623b      	str	r3, [r7, #32]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	4413      	add	r3, r2
 8003968:	623b      	str	r3, [r7, #32]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	4413      	add	r3, r2
 8003974:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003978:	61fb      	str	r3, [r7, #28]
 800397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800397c:	b29a      	uxth	r2, r3
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6959      	ldr	r1, [r3, #20]
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	891a      	ldrh	r2, [r3, #8]
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	b29b      	uxth	r3, r3
 8003992:	f003 f909 	bl	8006ba8 <USB_WritePMA>
 8003996:	e130      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	4413      	add	r3, r2
 80039ac:	3306      	adds	r3, #6
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d306      	bcc.n	80039da <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	699a      	ldr	r2, [r3, #24]
 80039d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80039d2:	1ad2      	subs	r2, r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	619a      	str	r2, [r3, #24]
 80039d8:	e002      	b.n	80039e0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d12c      	bne.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f004 fd47 	bl	8008482 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039f4:	88fb      	ldrh	r3, [r7, #6]
 80039f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f040 80fd 	bne.w	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	8013      	strh	r3, [r2, #0]
 8003a40:	e0db      	b.n	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11f      	bne.n	8003a8c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f040 80b1 	bne.w	8003bfa <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	695a      	ldr	r2, [r3, #20]
 8003a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a9e:	441a      	add	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003aaa:	441a      	add	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6a1a      	ldr	r2, [r3, #32]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d309      	bcc.n	8003ad0 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	1ad2      	subs	r2, r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	621a      	str	r2, [r3, #32]
 8003ace:	e014      	b.n	8003afa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8003ad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ae4:	e009      	b.n	8003afa <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	785b      	ldrb	r3, [r3, #1]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d155      	bne.n	8003bb4 <HAL_PCD_EP_DB_Transmit+0x49a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1c:	4413      	add	r3, r2
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	011a      	lsls	r2, r3, #4
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	4413      	add	r3, r2
 8003b2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d112      	bne.n	8003b5c <HAL_PCD_EP_DB_Transmit+0x442>
 8003b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e044      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b60:	d811      	bhi.n	8003b86 <HAL_PCD_EP_DB_Transmit+0x46c>
 8003b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b74:	3301      	adds	r3, #1
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	e02f      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	f003 031f 	and.w	r3, r3, #31
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <HAL_PCD_EP_DB_Transmit+0x482>
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb0:	801a      	strh	r2, [r3, #0]
 8003bb2:	e018      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d114      	bne.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bca:	4413      	add	r3, r2
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	011a      	lsls	r2, r3, #4
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	6959      	ldr	r1, [r3, #20]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	895a      	ldrh	r2, [r3, #10]
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	f002 ffd7 	bl	8006ba8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c14:	823b      	strh	r3, [r7, #16]
 8003c16:	8a3b      	ldrh	r3, [r7, #16]
 8003c18:	f083 0310 	eor.w	r3, r3, #16
 8003c1c:	823b      	strh	r3, [r7, #16]
 8003c1e:	8a3b      	ldrh	r3, [r7, #16]
 8003c20:	f083 0320 	eor.w	r3, r3, #32
 8003c24:	823b      	strh	r3, [r7, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	441a      	add	r2, r3
 8003c34:	8a3b      	ldrh	r3, [r7, #16]
 8003c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3748      	adds	r7, #72	; 0x48
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	817b      	strh	r3, [r7, #10]
 8003c62:	4613      	mov	r3, r2
 8003c64:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c66:	897b      	ldrh	r3, [r7, #10]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e009      	b.n	8003c9e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c8a:	897a      	ldrh	r2, [r7, #10]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c9e:	893b      	ldrh	r3, [r7, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d107      	bne.n	8003cb4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	80da      	strh	r2, [r3, #6]
 8003cb2:	e00b      	b.n	8003ccc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0c1b      	lsrs	r3, r3, #16
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	371c      	adds	r7, #28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e26c      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8087 	beq.w	8003e06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf8:	4b92      	ldr	r3, [pc, #584]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d00c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d04:	4b8f      	ldr	r3, [pc, #572]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d112      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
 8003d10:	4b8c      	ldr	r3, [pc, #560]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1e:	4b89      	ldr	r3, [pc, #548]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d06c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x12c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d168      	bne.n	8003e04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e246      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x76>
 8003d40:	4b80      	ldr	r3, [pc, #512]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a7f      	ldr	r2, [pc, #508]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e02e      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x98>
 8003d56:	4b7b      	ldr	r3, [pc, #492]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7a      	ldr	r2, [pc, #488]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b78      	ldr	r3, [pc, #480]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a77      	ldr	r2, [pc, #476]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0xbc>
 8003d7a:	4b72      	ldr	r3, [pc, #456]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6e      	ldr	r2, [pc, #440]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xd4>
 8003d94:	4b6b      	ldr	r3, [pc, #428]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6a      	ldr	r2, [pc, #424]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b68      	ldr	r3, [pc, #416]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a67      	ldr	r2, [pc, #412]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fd ff48 	bl	8001c48 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd ff44 	bl	8001c48 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1fa      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b5d      	ldr	r3, [pc, #372]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe4>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fd ff34 	bl	8001c48 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd ff30 	bl	8001c48 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1e6      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x10c>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d063      	beq.n	8003eda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e12:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e1e:	4b49      	ldr	r3, [pc, #292]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
 8003e2a:	4b46      	ldr	r3, [pc, #280]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1ba      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b3d      	ldr	r3, [pc, #244]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4939      	ldr	r1, [pc, #228]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e03a      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d020      	beq.n	8003eae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e72:	f7fd fee9 	bl	8001c48 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e78:	e008      	b.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fd fee5 	bl	8001c48 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e19b      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b2a      	ldr	r3, [pc, #168]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4927      	ldr	r1, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
 8003eac:	e015      	b.n	8003eda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fec8 	bl	8001c48 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fec4 	bl	8001c48 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e17a      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	4b1d      	ldr	r3, [pc, #116]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03a      	beq.n	8003f5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d019      	beq.n	8003f22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fd fea8 	bl	8001c48 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fd fea4 	bl	8001c48 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e15a      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f1a:	2001      	movs	r0, #1
 8003f1c:	f000 faa8 	bl	8004470 <RCC_Delay>
 8003f20:	e01c      	b.n	8003f5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCC_OscConfig+0x274>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fd fe8e 	bl	8001c48 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f30:	f7fd fe8a 	bl	8001c48 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d908      	bls.n	8003f50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e140      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	42420000 	.word	0x42420000
 8003f4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f50:	4b9e      	ldr	r3, [pc, #632]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1e9      	bne.n	8003f30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80a6 	beq.w	80040b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f6e:	4b97      	ldr	r3, [pc, #604]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7a:	4b94      	ldr	r3, [pc, #592]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	4a93      	ldr	r2, [pc, #588]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f84:	61d3      	str	r3, [r2, #28]
 8003f86:	4b91      	ldr	r3, [pc, #580]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f92:	2301      	movs	r3, #1
 8003f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f96:	4b8e      	ldr	r3, [pc, #568]	; (80041d0 <HAL_RCC_OscConfig+0x4f8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d118      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fa2:	4b8b      	ldr	r3, [pc, #556]	; (80041d0 <HAL_RCC_OscConfig+0x4f8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a8a      	ldr	r2, [pc, #552]	; (80041d0 <HAL_RCC_OscConfig+0x4f8>)
 8003fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fae:	f7fd fe4b 	bl	8001c48 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb6:	f7fd fe47 	bl	8001c48 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b64      	cmp	r3, #100	; 0x64
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0fd      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc8:	4b81      	ldr	r3, [pc, #516]	; (80041d0 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x312>
 8003fdc:	4b7b      	ldr	r3, [pc, #492]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4a7a      	ldr	r2, [pc, #488]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6213      	str	r3, [r2, #32]
 8003fe8:	e02d      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x334>
 8003ff2:	4b76      	ldr	r3, [pc, #472]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a75      	ldr	r2, [pc, #468]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4a72      	ldr	r2, [pc, #456]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004004:	f023 0304 	bic.w	r3, r3, #4
 8004008:	6213      	str	r3, [r2, #32]
 800400a:	e01c      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x356>
 8004014:	4b6d      	ldr	r3, [pc, #436]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a6c      	ldr	r2, [pc, #432]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a69      	ldr	r2, [pc, #420]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6213      	str	r3, [r2, #32]
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x36e>
 800402e:	4b67      	ldr	r3, [pc, #412]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a66      	ldr	r2, [pc, #408]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004034:	f023 0301 	bic.w	r3, r3, #1
 8004038:	6213      	str	r3, [r2, #32]
 800403a:	4b64      	ldr	r3, [pc, #400]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4a63      	ldr	r2, [pc, #396]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004040:	f023 0304 	bic.w	r3, r3, #4
 8004044:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d015      	beq.n	800407a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fd fdfb 	bl	8001c48 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	e00a      	b.n	800406c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004056:	f7fd fdf7 	bl	8001c48 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f241 3288 	movw	r2, #5000	; 0x1388
 8004064:	4293      	cmp	r3, r2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e0ab      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	4b57      	ldr	r3, [pc, #348]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ee      	beq.n	8004056 <HAL_RCC_OscConfig+0x37e>
 8004078:	e014      	b.n	80040a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800407a:	f7fd fde5 	bl	8001c48 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fd fde1 	bl	8001c48 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e095      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004098:	4b4c      	ldr	r3, [pc, #304]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ee      	bne.n	8004082 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040aa:	4b48      	ldr	r3, [pc, #288]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a47      	ldr	r2, [pc, #284]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 8081 	beq.w	80041c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c0:	4b42      	ldr	r3, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d061      	beq.n	8004190 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d146      	bne.n	8004162 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <HAL_RCC_OscConfig+0x4fc>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fd fdb5 	bl	8001c48 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e2:	f7fd fdb1 	bl	8001c48 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e067      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040f4:	4b35      	ldr	r3, [pc, #212]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d108      	bne.n	800411c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	492d      	ldr	r1, [pc, #180]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800411c:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a19      	ldr	r1, [r3, #32]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412c:	430b      	orrs	r3, r1
 800412e:	4927      	ldr	r1, [pc, #156]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCC_OscConfig+0x4fc>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd fd85 	bl	8001c48 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fd fd81 	bl	8001c48 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e037      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0f0      	beq.n	8004142 <HAL_RCC_OscConfig+0x46a>
 8004160:	e02f      	b.n	80041c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_RCC_OscConfig+0x4fc>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fd fd6e 	bl	8001c48 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004170:	f7fd fd6a 	bl	8001c48 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e020      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x498>
 800418e:	e018      	b.n	80041c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e013      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_OscConfig+0x4f4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d106      	bne.n	80041be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d001      	beq.n	80041c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40007000 	.word	0x40007000
 80041d4:	42420060 	.word	0x42420060

080041d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0d0      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4965      	ldr	r1, [pc, #404]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b8      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004234:	4b59      	ldr	r3, [pc, #356]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a58      	ldr	r2, [pc, #352]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800423e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	4a52      	ldr	r2, [pc, #328]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004256:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	494d      	ldr	r1, [pc, #308]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004266:	4313      	orrs	r3, r2
 8004268:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d040      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d115      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07f      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e073      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06b      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4936      	ldr	r1, [pc, #216]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042c8:	f7fd fcbe 	bl	8001c48 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fd fcba 	bl	8001c48 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e053      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d210      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 0207 	bic.w	r2, r3, #7
 800430e:	4922      	ldr	r1, [pc, #136]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e032      	b.n	800438e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4916      	ldr	r1, [pc, #88]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4601      	mov	r1, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	4a0a      	ldr	r2, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x1c8>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1cc>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1d0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fc1c 	bl	8001bc4 <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40022000 	.word	0x40022000
 800439c:	40021000 	.word	0x40021000
 80043a0:	08008aa4 	.word	0x08008aa4
 80043a4:	20000004 	.word	0x20000004
 80043a8:	20000008 	.word	0x20000008

080043ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	b490      	push	{r4, r7}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043b2:	4b2a      	ldr	r3, [pc, #168]	; (800445c <HAL_RCC_GetSysClockFreq+0xb0>)
 80043b4:	1d3c      	adds	r4, r7, #4
 80043b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	2300      	movs	r3, #0
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043d6:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x40>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x46>
 80043ea:	e02d      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <HAL_RCC_GetSysClockFreq+0xbc>)
 80043ee:	623b      	str	r3, [r7, #32]
      break;
 80043f0:	e02d      	b.n	800444e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043fe:	4413      	add	r3, r2
 8004400:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004404:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004410:	4b14      	ldr	r3, [pc, #80]	; (8004464 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	0c5b      	lsrs	r3, r3, #17
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800441e:	4413      	add	r3, r2
 8004420:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004424:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <HAL_RCC_GetSysClockFreq+0xbc>)
 800442a:	fb02 f203 	mul.w	r2, r2, r3
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e004      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <HAL_RCC_GetSysClockFreq+0xc0>)
 800443c:	fb02 f303 	mul.w	r3, r2, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	623b      	str	r3, [r7, #32]
      break;
 8004446:	e002      	b.n	800444e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b07      	ldr	r3, [pc, #28]	; (8004468 <HAL_RCC_GetSysClockFreq+0xbc>)
 800444a:	623b      	str	r3, [r7, #32]
      break;
 800444c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444e:	6a3b      	ldr	r3, [r7, #32]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bc90      	pop	{r4, r7}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	0800894c 	.word	0x0800894c
 8004460:	0800895c 	.word	0x0800895c
 8004464:	40021000 	.word	0x40021000
 8004468:	007a1200 	.word	0x007a1200
 800446c:	003d0900 	.word	0x003d0900

08004470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <RCC_Delay+0x34>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <RCC_Delay+0x38>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a5b      	lsrs	r3, r3, #9
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800448c:	bf00      	nop
  }
  while (Delay --);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	1e5a      	subs	r2, r3, #1
 8004492:	60fa      	str	r2, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f9      	bne.n	800448c <RCC_Delay+0x1c>
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000004 	.word	0x20000004
 80044a8:	10624dd3 	.word	0x10624dd3

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d07d      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80044c8:	2300      	movs	r3, #0
 80044ca:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044cc:	4b4f      	ldr	r3, [pc, #316]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044d8:	4b4c      	ldr	r3, [pc, #304]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4a4b      	ldr	r2, [pc, #300]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e2:	61d3      	str	r3, [r2, #28]
 80044e4:	4b49      	ldr	r3, [pc, #292]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b46      	ldr	r3, [pc, #280]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d118      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004500:	4b43      	ldr	r3, [pc, #268]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a42      	ldr	r2, [pc, #264]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450c:	f7fd fb9c 	bl	8001c48 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fd fb98 	bl	8001c48 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e06d      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b3a      	ldr	r3, [pc, #232]	; (8004610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004532:	4b36      	ldr	r3, [pc, #216]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d02e      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d027      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004550:	4b2e      	ldr	r3, [pc, #184]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004558:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455a:	4b2e      	ldr	r3, [pc, #184]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800455c:	2201      	movs	r2, #1
 800455e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd fb67 	bl	8001c48 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	e00a      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd fb63 	bl	8001c48 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e036      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0ee      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045a0:	4b1a      	ldr	r3, [pc, #104]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4917      	ldr	r1, [pc, #92]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d105      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b8:	4b14      	ldr	r3, [pc, #80]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d008      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045d0:	4b0e      	ldr	r3, [pc, #56]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	490b      	ldr	r1, [pc, #44]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d008      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045ee:	4b07      	ldr	r3, [pc, #28]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4904      	ldr	r1, [pc, #16]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	40021000 	.word	0x40021000
 8004610:	40007000 	.word	0x40007000
 8004614:	42420440 	.word	0x42420440

08004618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e041      	b.n	80046ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fd fa66 	bl	8001b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f000 f930 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d001      	beq.n	80046d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIM_Base_Start+0x88>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_TIM_Base_Start+0x48>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d009      	beq.n	8004700 <HAL_TIM_Base_Start+0x48>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_TIM_Base_Start+0x8c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIM_Base_Start+0x48>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_TIM_Base_Start+0x90>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d111      	bne.n	8004724 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b06      	cmp	r3, #6
 8004710:	d010      	beq.n	8004734 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	e007      	b.n	8004734 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800

0800474c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIM_ConfigClockSource+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e0a6      	b.n	80048b2 <HAL_TIM_ConfigClockSource+0x166>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b40      	cmp	r3, #64	; 0x40
 800479a:	d067      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x120>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d80b      	bhi.n	80047b8 <HAL_TIM_ConfigClockSource+0x6c>
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d073      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d802      	bhi.n	80047ae <HAL_TIM_ConfigClockSource+0x62>
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d06f      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047ac:	e078      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d06c      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
 80047b2:	2b30      	cmp	r3, #48	; 0x30
 80047b4:	d06a      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80047b6:	e073      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047b8:	2b70      	cmp	r3, #112	; 0x70
 80047ba:	d00d      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0x8c>
 80047bc:	2b70      	cmp	r3, #112	; 0x70
 80047be:	d804      	bhi.n	80047ca <HAL_TIM_ConfigClockSource+0x7e>
 80047c0:	2b50      	cmp	r3, #80	; 0x50
 80047c2:	d033      	beq.n	800482c <HAL_TIM_ConfigClockSource+0xe0>
 80047c4:	2b60      	cmp	r3, #96	; 0x60
 80047c6:	d041      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80047c8:	e06a      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ce:	d066      	beq.n	800489e <HAL_TIM_ConfigClockSource+0x152>
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d017      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80047d6:	e063      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f000 f941 	bl	8004a6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	609a      	str	r2, [r3, #8]
      break;
 8004804:	e04c      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f000 f92a 	bl	8004a6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004828:	609a      	str	r2, [r3, #8]
      break;
 800482a:	e039      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	461a      	mov	r2, r3
 800483a:	f000 f8a1 	bl	8004980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2150      	movs	r1, #80	; 0x50
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f8f8 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 800484a:	e029      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f8bf 	bl	80049dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2160      	movs	r1, #96	; 0x60
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f8e8 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 800486a:	e019      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f000 f881 	bl	8004980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2140      	movs	r1, #64	; 0x40
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f8d8 	bl	8004a3a <TIM_ITRx_SetConfig>
      break;
 800488a:	e009      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f000 f8cf 	bl	8004a3a <TIM_ITRx_SetConfig>
        break;
 800489c:	e000      	b.n	80048a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800489e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a29      	ldr	r2, [pc, #164]	; (8004974 <TIM_Base_SetConfig+0xb8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00b      	beq.n	80048ec <TIM_Base_SetConfig+0x30>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d007      	beq.n	80048ec <TIM_Base_SetConfig+0x30>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a26      	ldr	r2, [pc, #152]	; (8004978 <TIM_Base_SetConfig+0xbc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_Base_SetConfig+0x30>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a25      	ldr	r2, [pc, #148]	; (800497c <TIM_Base_SetConfig+0xc0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d108      	bne.n	80048fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1c      	ldr	r2, [pc, #112]	; (8004974 <TIM_Base_SetConfig+0xb8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00b      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490c:	d007      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <TIM_Base_SetConfig+0xbc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d003      	beq.n	800491e <TIM_Base_SetConfig+0x62>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a18      	ldr	r2, [pc, #96]	; (800497c <TIM_Base_SetConfig+0xc0>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d108      	bne.n	8004930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a07      	ldr	r2, [pc, #28]	; (8004974 <TIM_Base_SetConfig+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d103      	bne.n	8004964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	615a      	str	r2, [r3, #20]
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40000400 	.word	0x40000400
 800497c:	40000800 	.word	0x40000800

08004980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f023 030a 	bic.w	r3, r3, #10
 80049bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f023 0210 	bic.w	r2, r3, #16
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	031b      	lsls	r3, r3, #12
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	621a      	str	r2, [r3, #32]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr

08004a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b085      	sub	sp, #20
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f043 0307 	orr.w	r3, r3, #7
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	021a      	lsls	r2, r3, #8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	609a      	str	r2, [r3, #8]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e046      	b.n	8004b52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b10:	d009      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a12      	ldr	r2, [pc, #72]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d10c      	bne.n	8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800

08004b68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b68:	b084      	sub	sp, #16
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	f107 0014 	add.w	r0, r7, #20
 8004b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	b004      	add	sp, #16
 8004b86:	4770      	bx	lr

08004b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bbc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004bc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bc80      	pop	{r7}
 8004be6:	4770      	bx	lr

08004be8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c00:	b084      	sub	sp, #16
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f107 0014 	add.w	r0, r7, #20
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	b004      	add	sp, #16
 8004c3e:	4770      	bx	lr

08004c40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b09b      	sub	sp, #108	; 0x6c
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d81f      	bhi.n	8004cb2 <USB_ActivateEndpoint+0x72>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <USB_ActivateEndpoint+0x38>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cbb 	.word	0x08004cbb
 8004c84:	08004c97 	.word	0x08004c97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004c94:	e012      	b.n	8004cbc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004ca2:	e00b      	b.n	8004cbc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004ca4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cb0:	e004      	b.n	8004cbc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004cb8:	e000      	b.n	8004cbc <USB_ActivateEndpoint+0x7c>
      break;
 8004cba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	7b1b      	ldrb	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f040 8149 	bne.w	8004fc0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8084 	beq.w	8004e40 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	011a      	lsls	r2, r3, #4
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	88db      	ldrh	r3, [r3, #6]
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	81fb      	strh	r3, [r7, #14]
 8004d7a:	89fb      	ldrh	r3, [r7, #14]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <USB_ActivateEndpoint+0x17c>
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	81bb      	strh	r3, [r7, #12]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	89bb      	ldrh	r3, [r7, #12]
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	78db      	ldrb	r3, [r3, #3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d020      	beq.n	8004e06 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dda:	813b      	strh	r3, [r7, #8]
 8004ddc:	893b      	ldrh	r3, [r7, #8]
 8004dde:	f083 0320 	eor.w	r3, r3, #32
 8004de2:	813b      	strh	r3, [r7, #8]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	441a      	add	r2, r3
 8004dee:	893b      	ldrh	r3, [r7, #8]
 8004df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	8013      	strh	r3, [r2, #0]
 8004e04:	e27f      	b.n	8005306 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e1c:	817b      	strh	r3, [r7, #10]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	441a      	add	r2, r3
 8004e28:	897b      	ldrh	r3, [r7, #10]
 8004e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	8013      	strh	r3, [r2, #0]
 8004e3e:	e262      	b.n	8005306 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	4413      	add	r3, r2
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	011a      	lsls	r2, r3, #4
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	88db      	ldrh	r3, [r3, #6]
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	4413      	add	r3, r2
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	011a      	lsls	r2, r3, #4
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	4413      	add	r3, r2
 8004e92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d112      	bne.n	8004ec6 <USB_ActivateEndpoint+0x286>
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	881b      	ldrh	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e02f      	b.n	8004f26 <USB_ActivateEndpoint+0x2e6>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	2b3e      	cmp	r3, #62	; 0x3e
 8004ecc:	d813      	bhi.n	8004ef6 <USB_ActivateEndpoint+0x2b6>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <USB_ActivateEndpoint+0x2a8>
 8004ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ee8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e017      	b.n	8004f26 <USB_ActivateEndpoint+0x2e6>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	663b      	str	r3, [r7, #96]	; 0x60
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <USB_ActivateEndpoint+0x2d0>
 8004f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	83fb      	strh	r3, [r7, #30]
 8004f34:	8bfb      	ldrh	r3, [r7, #30]
 8004f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d01b      	beq.n	8004f76 <USB_ActivateEndpoint+0x336>
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	83bb      	strh	r3, [r7, #28]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	441a      	add	r2, r3
 8004f60:	8bbb      	ldrh	r3, [r7, #28]
 8004f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8c:	837b      	strh	r3, [r7, #26]
 8004f8e:	8b7b      	ldrh	r3, [r7, #26]
 8004f90:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f94:	837b      	strh	r3, [r7, #26]
 8004f96:	8b7b      	ldrh	r3, [r7, #26]
 8004f98:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f9c:	837b      	strh	r3, [r7, #26]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	441a      	add	r2, r3
 8004fa8:	8b7b      	ldrh	r3, [r7, #26]
 8004faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	8013      	strh	r3, [r2, #0]
 8004fbe:	e1a2      	b.n	8005306 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800500c:	4413      	add	r3, r2
 800500e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	011a      	lsls	r2, r3, #4
 8005016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005018:	4413      	add	r3, r2
 800501a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800501e:	657b      	str	r3, [r7, #84]	; 0x54
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	891b      	ldrh	r3, [r3, #8]
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	b29b      	uxth	r3, r3
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	653b      	str	r3, [r7, #80]	; 0x50
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800503a:	b29b      	uxth	r3, r3
 800503c:	461a      	mov	r2, r3
 800503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005040:	4413      	add	r3, r2
 8005042:	653b      	str	r3, [r7, #80]	; 0x50
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	011a      	lsls	r2, r3, #4
 800504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504c:	4413      	add	r3, r2
 800504e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	895b      	ldrh	r3, [r3, #10]
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005062:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 8091 	bne.w	8005190 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	881b      	ldrh	r3, [r3, #0]
 800507a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800507c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800507e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d01b      	beq.n	80050be <USB_ActivateEndpoint+0x47e>
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80050cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01b      	beq.n	800510e <USB_ActivateEndpoint+0x4ce>
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	881b      	ldrh	r3, [r3, #0]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005106:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800510a:	b29b      	uxth	r3, r3
 800510c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005124:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005126:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005128:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800512c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800512e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005130:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005134:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	441a      	add	r2, r3
 8005140:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800514a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800514e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005152:	b29b      	uxth	r3, r3
 8005154:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516c:	867b      	strh	r3, [r7, #50]	; 0x32
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	441a      	add	r2, r3
 8005178:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800517a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800517e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	b29b      	uxth	r3, r3
 800518c:	8013      	strh	r3, [r2, #0]
 800518e:	e0ba      	b.n	8005306 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80051a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01d      	beq.n	80051e8 <USB_ActivateEndpoint+0x5a8>
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	441a      	add	r2, r3
 80051d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80051d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80051f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01d      	beq.n	8005240 <USB_ActivateEndpoint+0x600>
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	441a      	add	r2, r3
 8005228:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800522c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800523c:	b29b      	uxth	r3, r3
 800523e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	78db      	ldrb	r3, [r3, #3]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d024      	beq.n	8005292 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800525a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005266:	f083 0320 	eor.w	r3, r3, #32
 800526a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	441a      	add	r2, r3
 8005278:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800527c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800528c:	b29b      	uxth	r3, r3
 800528e:	8013      	strh	r3, [r2, #0]
 8005290:	e01d      	b.n	80052ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	881b      	ldrh	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800530a:	4618      	mov	r0, r3
 800530c:	376c      	adds	r7, #108	; 0x6c
 800530e:	46bd      	mov	sp, r7
 8005310:	bc80      	pop	{r7}
 8005312:	4770      	bx	lr

08005314 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005314:	b480      	push	{r7}
 8005316:	b08d      	sub	sp, #52	; 0x34
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	7b1b      	ldrb	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 808e 	bne.w	8005444 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d044      	beq.n	80053ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	81bb      	strh	r3, [r7, #12]
 800533e:	89bb      	ldrh	r3, [r7, #12]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <USB_DeactivateEndpoint+0x6c>
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	817b      	strh	r3, [r7, #10]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	897b      	ldrh	r3, [r7, #10]
 800536c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005378:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800537c:	b29b      	uxth	r3, r3
 800537e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005396:	813b      	strh	r3, [r7, #8]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	893b      	ldrh	r3, [r7, #8]
 80053a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8013      	strh	r3, [r2, #0]
 80053b8:	e192      	b.n	80056e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	827b      	strh	r3, [r7, #18]
 80053c8:	8a7b      	ldrh	r3, [r7, #18]
 80053ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01b      	beq.n	800540a <USB_DeactivateEndpoint+0xf6>
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	b29b      	uxth	r3, r3
 80053e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e8:	823b      	strh	r3, [r7, #16]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	441a      	add	r2, r3
 80053f4:	8a3b      	ldrh	r3, [r7, #16]
 80053f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005406:	b29b      	uxth	r3, r3
 8005408:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	81fb      	strh	r3, [r7, #14]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	441a      	add	r2, r3
 800542c:	89fb      	ldrh	r3, [r7, #14]
 800542e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	b29b      	uxth	r3, r3
 8005440:	8013      	strh	r3, [r2, #0]
 8005442:	e14d      	b.n	80056e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f040 80a5 	bne.w	8005598 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	843b      	strh	r3, [r7, #32]
 800545c:	8c3b      	ldrh	r3, [r7, #32]
 800545e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01b      	beq.n	800549e <USB_DeactivateEndpoint+0x18a>
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	83fb      	strh	r3, [r7, #30]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	8bfb      	ldrh	r3, [r7, #30]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	83bb      	strh	r3, [r7, #28]
 80054ac:	8bbb      	ldrh	r3, [r7, #28]
 80054ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01b      	beq.n	80054ee <USB_DeactivateEndpoint+0x1da>
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054cc:	837b      	strh	r3, [r7, #26]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8b7b      	ldrh	r3, [r7, #26]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	833b      	strh	r3, [r7, #24]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	8b3b      	ldrh	r3, [r7, #24]
 8005512:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005516:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005522:	b29b      	uxth	r3, r3
 8005524:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	881b      	ldrh	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	82fb      	strh	r3, [r7, #22]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	441a      	add	r2, r3
 8005548:	8afb      	ldrh	r3, [r7, #22]
 800554a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800555a:	b29b      	uxth	r3, r3
 800555c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	82bb      	strh	r3, [r7, #20]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	441a      	add	r2, r3
 8005580:	8abb      	ldrh	r3, [r7, #20]
 8005582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800558a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005592:	b29b      	uxth	r3, r3
 8005594:	8013      	strh	r3, [r2, #0]
 8005596:	e0a3      	b.n	80056e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <USB_DeactivateEndpoint+0x2d4>
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <USB_DeactivateEndpoint+0x324>
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	881b      	ldrh	r3, [r3, #0]
 800560c:	b29b      	uxth	r3, r3
 800560e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	853b      	strh	r3, [r7, #40]	; 0x28
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005630:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005634:	b29b      	uxth	r3, r3
 8005636:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	441a      	add	r2, r3
 800565a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800565c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	b29b      	uxth	r3, r3
 800566e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005686:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	441a      	add	r2, r3
 8005692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800569c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	847b      	strh	r3, [r7, #34]	; 0x22
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	441a      	add	r2, r3
 80056ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3734      	adds	r7, #52	; 0x34
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b0c4      	sub	sp, #272	; 0x110
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	6018      	str	r0, [r3, #0]
 80056f6:	463b      	mov	r3, r7
 80056f8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 8557 	bne.w	80061b4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	463b      	mov	r3, r7
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d905      	bls.n	8005722 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005720:	e004      	b.n	800572c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005722:	463b      	mov	r3, r7
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800572c:	463b      	mov	r3, r7
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	7b1b      	ldrb	r3, [r3, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d12c      	bne.n	8005790 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005736:	463b      	mov	r3, r7
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6959      	ldr	r1, [r3, #20]
 800573c:	463b      	mov	r3, r7
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	88da      	ldrh	r2, [r3, #6]
 8005742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005746:	b29b      	uxth	r3, r3
 8005748:	1d38      	adds	r0, r7, #4
 800574a:	6800      	ldr	r0, [r0, #0]
 800574c:	f001 fa2c 	bl	8006ba8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800575e:	b29b      	uxth	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	463b      	mov	r3, r7
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	011a      	lsls	r2, r3, #4
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005778:	f107 0310 	add.w	r3, r7, #16
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005782:	b29a      	uxth	r2, r3
 8005784:	f107 0310 	add.w	r3, r7, #16
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	f000 bcdd 	b.w	800614a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	78db      	ldrb	r3, [r3, #3]
 8005796:	2b02      	cmp	r3, #2
 8005798:	f040 8347 	bne.w	8005e2a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800579c:	463b      	mov	r3, r7
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	463b      	mov	r3, r7
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	f240 82eb 	bls.w	8005d84 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80057ae:	1d3b      	adds	r3, r7, #4
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	463b      	mov	r3, r7
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4413      	add	r3, r2
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80057cc:	1d3b      	adds	r3, r7, #4
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	463b      	mov	r3, r7
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80057de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057f2:	463b      	mov	r3, r7
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1a      	ldr	r2, [r3, #32]
 80057f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057fc:	1ad2      	subs	r2, r2, r3
 80057fe:	463b      	mov	r3, r7
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	463b      	mov	r3, r7
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8159 	beq.w	8005ad2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	637b      	str	r3, [r7, #52]	; 0x34
 8005826:	463b      	mov	r3, r7
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d164      	bne.n	80058fa <USB_EPStartXfer+0x20e>
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583e:	b29b      	uxth	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	4413      	add	r3, r2
 8005846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005848:	463b      	mov	r3, r7
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	011a      	lsls	r2, r3, #4
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	4413      	add	r3, r2
 8005854:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005858:	62bb      	str	r3, [r7, #40]	; 0x28
 800585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d112      	bne.n	8005888 <USB_EPStartXfer+0x19c>
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800586c:	b29a      	uxth	r2, r3
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	b29b      	uxth	r3, r3
 8005878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800587c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005880:	b29a      	uxth	r2, r3
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e054      	b.n	8005932 <USB_EPStartXfer+0x246>
 8005888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800588c:	2b3e      	cmp	r3, #62	; 0x3e
 800588e:	d817      	bhi.n	80058c0 <USB_EPStartXfer+0x1d4>
 8005890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800589a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <USB_EPStartXfer+0x1c4>
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	029b      	lsls	r3, r3, #10
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e038      	b.n	8005932 <USB_EPStartXfer+0x246>
 80058c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <USB_EPStartXfer+0x1f4>
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	3b01      	subs	r3, #1
 80058dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	029b      	lsls	r3, r3, #10
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	e01b      	b.n	8005932 <USB_EPStartXfer+0x246>
 80058fa:	463b      	mov	r3, r7
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d116      	bne.n	8005932 <USB_EPStartXfer+0x246>
 8005904:	1d3b      	adds	r3, r7, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	4413      	add	r3, r2
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	463b      	mov	r3, r7
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005920:	4413      	add	r3, r2
 8005922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
 8005928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800592c:	b29a      	uxth	r2, r3
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005932:	463b      	mov	r3, r7
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	895b      	ldrh	r3, [r3, #10]
 8005938:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593c:	463b      	mov	r3, r7
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6959      	ldr	r1, [r3, #20]
 8005942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005946:	b29b      	uxth	r3, r3
 8005948:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800594c:	1d38      	adds	r0, r7, #4
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	f001 f92a 	bl	8006ba8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005954:	463b      	mov	r3, r7
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800595e:	441a      	add	r2, r3
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005966:	463b      	mov	r3, r7
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6a1a      	ldr	r2, [r3, #32]
 800596c:	463b      	mov	r3, r7
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	429a      	cmp	r2, r3
 8005974:	d909      	bls.n	800598a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6a1a      	ldr	r2, [r3, #32]
 800597c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	463b      	mov	r3, r7
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	621a      	str	r2, [r3, #32]
 8005988:	e008      	b.n	800599c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800598a:	463b      	mov	r3, r7
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005994:	463b      	mov	r3, r7
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800599c:	463b      	mov	r3, r7
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	785b      	ldrb	r3, [r3, #1]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d164      	bne.n	8005a70 <USB_EPStartXfer+0x384>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	463b      	mov	r3, r7
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	011a      	lsls	r2, r3, #4
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059ce:	61bb      	str	r3, [r7, #24]
 80059d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d112      	bne.n	80059fe <USB_EPStartXfer+0x312>
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	b29b      	uxth	r3, r3
 80059de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	801a      	strh	r2, [r3, #0]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e057      	b.n	8005aae <USB_EPStartXfer+0x3c2>
 80059fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a02:	2b3e      	cmp	r3, #62	; 0x3e
 8005a04:	d817      	bhi.n	8005a36 <USB_EPStartXfer+0x34a>
 8005a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d004      	beq.n	8005a26 <USB_EPStartXfer+0x33a>
 8005a1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a20:	3301      	adds	r3, #1
 8005a22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	029b      	lsls	r3, r3, #10
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e03b      	b.n	8005aae <USB_EPStartXfer+0x3c2>
 8005a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <USB_EPStartXfer+0x36a>
 8005a4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a50:	3b01      	subs	r3, #1
 8005a52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	e01e      	b.n	8005aae <USB_EPStartXfer+0x3c2>
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d119      	bne.n	8005aae <USB_EPStartXfer+0x3c2>
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	1d3b      	adds	r3, r7, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	4413      	add	r3, r2
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	011a      	lsls	r2, r3, #4
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005aae:	463b      	mov	r3, r7
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	891b      	ldrh	r3, [r3, #8]
 8005ab4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab8:	463b      	mov	r3, r7
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6959      	ldr	r1, [r3, #20]
 8005abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005ac8:	1d38      	adds	r0, r7, #4
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	f001 f86c 	bl	8006ba8 <USB_WritePMA>
 8005ad0:	e33b      	b.n	800614a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d164      	bne.n	8005ba6 <USB_EPStartXfer+0x4ba>
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae2:	1d3b      	adds	r3, r7, #4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	4413      	add	r3, r2
 8005af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005af4:	463b      	mov	r3, r7
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	011a      	lsls	r2, r3, #4
 8005afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afe:	4413      	add	r3, r2
 8005b00:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b04:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d112      	bne.n	8005b34 <USB_EPStartXfer+0x448>
 8005b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b30:	801a      	strh	r2, [r3, #0]
 8005b32:	e057      	b.n	8005be4 <USB_EPStartXfer+0x4f8>
 8005b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b38:	2b3e      	cmp	r3, #62	; 0x3e
 8005b3a:	d817      	bhi.n	8005b6c <USB_EPStartXfer+0x480>
 8005b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b40:	085b      	lsrs	r3, r3, #1
 8005b42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d004      	beq.n	8005b5c <USB_EPStartXfer+0x470>
 8005b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b56:	3301      	adds	r3, #1
 8005b58:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	029b      	lsls	r3, r3, #10
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	e03b      	b.n	8005be4 <USB_EPStartXfer+0x4f8>
 8005b6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d104      	bne.n	8005b8c <USB_EPStartXfer+0x4a0>
 8005b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	e01e      	b.n	8005be4 <USB_EPStartXfer+0x4f8>
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d119      	bne.n	8005be4 <USB_EPStartXfer+0x4f8>
 8005bb0:	1d3b      	adds	r3, r7, #4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8005bb6:	1d3b      	adds	r3, r7, #4
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc4:	4413      	add	r3, r2
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc8:	463b      	mov	r3, r7
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	011a      	lsls	r2, r3, #4
 8005bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005bd8:	653b      	str	r3, [r7, #80]	; 0x50
 8005bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	891b      	ldrh	r3, [r3, #8]
 8005bea:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6959      	ldr	r1, [r3, #20]
 8005bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005bfe:	1d38      	adds	r0, r7, #4
 8005c00:	6800      	ldr	r0, [r0, #0]
 8005c02:	f000 ffd1 	bl	8006ba8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005c06:	463b      	mov	r3, r7
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c10:	441a      	add	r2, r3
 8005c12:	463b      	mov	r3, r7
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	463b      	mov	r3, r7
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d909      	bls.n	8005c3c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005c28:	463b      	mov	r3, r7
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c32:	1ad2      	subs	r2, r2, r3
 8005c34:	463b      	mov	r3, r7
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	621a      	str	r2, [r3, #32]
 8005c3a:	e008      	b.n	8005c4e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005c46:	463b      	mov	r3, r7
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c4e:	1d3b      	adds	r3, r7, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
 8005c54:	463b      	mov	r3, r7
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	785b      	ldrb	r3, [r3, #1]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d164      	bne.n	8005d28 <USB_EPStartXfer+0x63c>
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c64:	1d3b      	adds	r3, r7, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c72:	4413      	add	r3, r2
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	011a      	lsls	r2, r3, #4
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c80:	4413      	add	r3, r2
 8005c82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d112      	bne.n	8005cb6 <USB_EPStartXfer+0x5ca>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e054      	b.n	8005d60 <USB_EPStartXfer+0x674>
 8005cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cba:	2b3e      	cmp	r3, #62	; 0x3e
 8005cbc:	d817      	bhi.n	8005cee <USB_EPStartXfer+0x602>
 8005cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cc2:	085b      	lsrs	r3, r3, #1
 8005cc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <USB_EPStartXfer+0x5f2>
 8005cd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	029b      	lsls	r3, r3, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	e038      	b.n	8005d60 <USB_EPStartXfer+0x674>
 8005cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cfc:	f003 031f 	and.w	r3, r3, #31
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d104      	bne.n	8005d0e <USB_EPStartXfer+0x622>
 8005d04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	801a      	strh	r2, [r3, #0]
 8005d26:	e01b      	b.n	8005d60 <USB_EPStartXfer+0x674>
 8005d28:	463b      	mov	r3, r7
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d116      	bne.n	8005d60 <USB_EPStartXfer+0x674>
 8005d32:	1d3b      	adds	r3, r7, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d40:	4413      	add	r3, r2
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4e:	4413      	add	r3, r2
 8005d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005d60:	463b      	mov	r3, r7
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	895b      	ldrh	r3, [r3, #10]
 8005d66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6959      	ldr	r1, [r3, #20]
 8005d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005d7a:	1d38      	adds	r0, r7, #4
 8005d7c:	6800      	ldr	r0, [r0, #0]
 8005d7e:	f000 ff13 	bl	8006ba8 <USB_WritePMA>
 8005d82:	e1e2      	b.n	800614a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005d84:	463b      	mov	r3, r7
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005d8e:	1d3b      	adds	r3, r7, #4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	463b      	mov	r3, r7
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005dac:	1d3b      	adds	r3, r7, #4
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	463b      	mov	r3, r7
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005dd2:	1d3b      	adds	r3, r7, #4
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd8:	1d3b      	adds	r3, r7, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de6:	4413      	add	r3, r2
 8005de8:	663b      	str	r3, [r7, #96]	; 0x60
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e04:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e06:	463b      	mov	r3, r7
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	891b      	ldrh	r3, [r3, #8]
 8005e0c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e10:	463b      	mov	r3, r7
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6959      	ldr	r1, [r3, #20]
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e20:	1d38      	adds	r0, r7, #4
 8005e22:	6800      	ldr	r0, [r0, #0]
 8005e24:	f000 fec0 	bl	8006ba8 <USB_WritePMA>
 8005e28:	e18f      	b.n	800614a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	463b      	mov	r3, r7
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 808f 	beq.w	8005f64 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e46:	1d3b      	adds	r3, r7, #4
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d164      	bne.n	8005f20 <USB_EPStartXfer+0x834>
 8005e56:	1d3b      	adds	r3, r7, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	461a      	mov	r2, r3
 8005e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e6a:	4413      	add	r3, r2
 8005e6c:	673b      	str	r3, [r7, #112]	; 0x70
 8005e6e:	463b      	mov	r3, r7
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d112      	bne.n	8005eae <USB_EPStartXfer+0x7c2>
 8005e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	e054      	b.n	8005f58 <USB_EPStartXfer+0x86c>
 8005eae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb2:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb4:	d817      	bhi.n	8005ee6 <USB_EPStartXfer+0x7fa>
 8005eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d004      	beq.n	8005ed6 <USB_EPStartXfer+0x7ea>
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	029b      	lsls	r3, r3, #10
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	801a      	strh	r2, [r3, #0]
 8005ee4:	e038      	b.n	8005f58 <USB_EPStartXfer+0x86c>
 8005ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d104      	bne.n	8005f06 <USB_EPStartXfer+0x81a>
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	3b01      	subs	r3, #1
 8005f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	e01b      	b.n	8005f58 <USB_EPStartXfer+0x86c>
 8005f20:	463b      	mov	r3, r7
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	785b      	ldrb	r3, [r3, #1]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d116      	bne.n	8005f58 <USB_EPStartXfer+0x86c>
 8005f2a:	1d3b      	adds	r3, r7, #4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f38:	4413      	add	r3, r2
 8005f3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	011a      	lsls	r2, r3, #4
 8005f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f46:	4413      	add	r3, r2
 8005f48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005f58:	463b      	mov	r3, r7
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	895b      	ldrh	r3, [r3, #10]
 8005f5e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005f62:	e097      	b.n	8006094 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f64:	463b      	mov	r3, r7
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	785b      	ldrb	r3, [r3, #1]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d168      	bne.n	8006040 <USB_EPStartXfer+0x954>
 8005f6e:	1d3b      	adds	r3, r7, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f76:	1d3b      	adds	r3, r7, #4
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	461a      	mov	r2, r3
 8005f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f86:	4413      	add	r3, r2
 8005f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	011a      	lsls	r2, r3, #4
 8005f94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d112      	bne.n	8005fce <USB_EPStartXfer+0x8e2>
 8005fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e05d      	b.n	800608a <USB_EPStartXfer+0x99e>
 8005fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005fd4:	d817      	bhi.n	8006006 <USB_EPStartXfer+0x91a>
 8005fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fe4:	f003 0301 	and.w	r3, r3, #1
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <USB_EPStartXfer+0x90a>
 8005fec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005ff6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e041      	b.n	800608a <USB_EPStartXfer+0x99e>
 8006006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2b00      	cmp	r3, #0
 800601a:	d104      	bne.n	8006026 <USB_EPStartXfer+0x93a>
 800601c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006020:	3b01      	subs	r3, #1
 8006022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006026:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800602a:	b29b      	uxth	r3, r3
 800602c:	029b      	lsls	r3, r3, #10
 800602e:	b29b      	uxth	r3, r3
 8006030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006038:	b29a      	uxth	r2, r3
 800603a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	e024      	b.n	800608a <USB_EPStartXfer+0x99e>
 8006040:	463b      	mov	r3, r7
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d11f      	bne.n	800608a <USB_EPStartXfer+0x99e>
 800604a:	1d3b      	adds	r3, r7, #4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006062:	4413      	add	r3, r2
 8006064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006068:	463b      	mov	r3, r7
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	011a      	lsls	r2, r3, #4
 8006070:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006074:	4413      	add	r3, r2
 8006076:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800607a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800607e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006088:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800608a:	463b      	mov	r3, r7
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	891b      	ldrh	r3, [r3, #8]
 8006090:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006094:	463b      	mov	r3, r7
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6959      	ldr	r1, [r3, #20]
 800609a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80060a4:	1d38      	adds	r0, r7, #4
 80060a6:	6800      	ldr	r0, [r0, #0]
 80060a8:	f000 fd7e 	bl	8006ba8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80060ac:	463b      	mov	r3, r7
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	785b      	ldrb	r3, [r3, #1]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d122      	bne.n	80060fc <USB_EPStartXfer+0xa10>
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	463b      	mov	r3, r7
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80060d4:	1d3b      	adds	r3, r7, #4
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	463b      	mov	r3, r7
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80060e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	8013      	strh	r3, [r2, #0]
 80060fa:	e026      	b.n	800614a <USB_EPStartXfer+0xa5e>
 80060fc:	463b      	mov	r3, r7
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	785b      	ldrb	r3, [r3, #1]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d121      	bne.n	800614a <USB_EPStartXfer+0xa5e>
 8006106:	1d3b      	adds	r3, r7, #4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	463b      	mov	r3, r7
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006124:	1d3b      	adds	r3, r7, #4
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	463b      	mov	r3, r7
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	441a      	add	r2, r3
 8006132:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006146:	b29b      	uxth	r3, r3
 8006148:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	463b      	mov	r3, r7
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f107 020e 	add.w	r2, r7, #14
 8006160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006168:	8013      	strh	r3, [r2, #0]
 800616a:	f107 030e 	add.w	r3, r7, #14
 800616e:	f107 020e 	add.w	r2, r7, #14
 8006172:	8812      	ldrh	r2, [r2, #0]
 8006174:	f082 0210 	eor.w	r2, r2, #16
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	f107 030e 	add.w	r3, r7, #14
 800617e:	f107 020e 	add.w	r2, r7, #14
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	f082 0220 	eor.w	r2, r2, #32
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	463b      	mov	r3, r7
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	441a      	add	r2, r3
 8006198:	f107 030e 	add.w	r3, r7, #14
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]
 80061b2:	e3b5      	b.n	8006920 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80061b4:	463b      	mov	r3, r7
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	7b1b      	ldrb	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f040 8090 	bne.w	80062e0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80061c0:	463b      	mov	r3, r7
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	463b      	mov	r3, r7
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d90e      	bls.n	80061ee <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80061d0:	463b      	mov	r3, r7
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80061da:	463b      	mov	r3, r7
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061e4:	1ad2      	subs	r2, r2, r3
 80061e6:	463b      	mov	r3, r7
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	619a      	str	r2, [r3, #24]
 80061ec:	e008      	b.n	8006200 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80061ee:	463b      	mov	r3, r7
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80061f8:	463b      	mov	r3, r7
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2200      	movs	r2, #0
 80061fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006210:	b29b      	uxth	r3, r3
 8006212:	461a      	mov	r2, r3
 8006214:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006218:	4413      	add	r3, r2
 800621a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800621e:	463b      	mov	r3, r7
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	011a      	lsls	r2, r3, #4
 8006226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800622a:	4413      	add	r3, r2
 800622c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d116      	bne.n	800626a <USB_EPStartXfer+0xb7e>
 800623c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006248:	b29a      	uxth	r2, r3
 800624a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	b29b      	uxth	r3, r3
 8006258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800625c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006260:	b29a      	uxth	r2, r3
 8006262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006266:	801a      	strh	r2, [r3, #0]
 8006268:	e32c      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
 800626a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626e:	2b3e      	cmp	r3, #62	; 0x3e
 8006270:	d818      	bhi.n	80062a4 <USB_EPStartXfer+0xbb8>
 8006272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800627c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <USB_EPStartXfer+0xba6>
 8006288:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800628c:	3301      	adds	r3, #1
 800628e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006296:	b29b      	uxth	r3, r3
 8006298:	029b      	lsls	r3, r3, #10
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e30f      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
 80062a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <USB_EPStartXfer+0xbd8>
 80062ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062be:	3b01      	subs	r3, #1
 80062c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	029b      	lsls	r3, r3, #10
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062dc:	801a      	strh	r2, [r3, #0]
 80062de:	e2f1      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80062e0:	463b      	mov	r3, r7
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	78db      	ldrb	r3, [r3, #3]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	f040 818f 	bne.w	800660a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80062ec:	463b      	mov	r3, r7
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d175      	bne.n	80063e2 <USB_EPStartXfer+0xcf6>
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800630e:	4413      	add	r3, r2
 8006310:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	011a      	lsls	r2, r3, #4
 800631c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006320:	4413      	add	r3, r2
 8006322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006326:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d116      	bne.n	8006362 <USB_EPStartXfer+0xc76>
 8006334:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006338:	881b      	ldrh	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006340:	b29a      	uxth	r2, r3
 8006342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006358:	b29a      	uxth	r2, r3
 800635a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	e065      	b.n	800642e <USB_EPStartXfer+0xd42>
 8006362:	463b      	mov	r3, r7
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b3e      	cmp	r3, #62	; 0x3e
 800636a:	d81a      	bhi.n	80063a2 <USB_EPStartXfer+0xcb6>
 800636c:	463b      	mov	r3, r7
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <USB_EPStartXfer+0xca4>
 8006386:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800638a:	3301      	adds	r3, #1
 800638c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006394:	b29b      	uxth	r3, r3
 8006396:	029b      	lsls	r3, r3, #10
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639e:	801a      	strh	r2, [r3, #0]
 80063a0:	e045      	b.n	800642e <USB_EPStartXfer+0xd42>
 80063a2:	463b      	mov	r3, r7
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d104      	bne.n	80063c6 <USB_EPStartXfer+0xcda>
 80063bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063c0:	3b01      	subs	r3, #1
 80063c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	029b      	lsls	r3, r3, #10
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063de:	801a      	strh	r2, [r3, #0]
 80063e0:	e025      	b.n	800642e <USB_EPStartXfer+0xd42>
 80063e2:	463b      	mov	r3, r7
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d120      	bne.n	800642e <USB_EPStartXfer+0xd42>
 80063ec:	1d3b      	adds	r3, r7, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063f4:	1d3b      	adds	r3, r7, #4
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	461a      	mov	r2, r3
 8006400:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006404:	4413      	add	r3, r2
 8006406:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	011a      	lsls	r2, r3, #4
 8006412:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006416:	4413      	add	r3, r2
 8006418:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800641c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006420:	463b      	mov	r3, r7
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	1d3b      	adds	r3, r7, #4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006436:	463b      	mov	r3, r7
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d175      	bne.n	800652c <USB_EPStartXfer+0xe40>
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006450:	b29b      	uxth	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006458:	4413      	add	r3, r2
 800645a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800645e:	463b      	mov	r3, r7
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	011a      	lsls	r2, r3, #4
 8006466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800646a:	4413      	add	r3, r2
 800646c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006474:	463b      	mov	r3, r7
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d116      	bne.n	80064ac <USB_EPStartXfer+0xdc0>
 800647e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	b29b      	uxth	r3, r3
 800649a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800649e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	e061      	b.n	8006570 <USB_EPStartXfer+0xe84>
 80064ac:	463b      	mov	r3, r7
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b3e      	cmp	r3, #62	; 0x3e
 80064b4:	d81a      	bhi.n	80064ec <USB_EPStartXfer+0xe00>
 80064b6:	463b      	mov	r3, r7
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <USB_EPStartXfer+0xdee>
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d4:	3301      	adds	r3, #1
 80064d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	b29b      	uxth	r3, r3
 80064e0:	029b      	lsls	r3, r3, #10
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e8:	801a      	strh	r2, [r3, #0]
 80064ea:	e041      	b.n	8006570 <USB_EPStartXfer+0xe84>
 80064ec:	463b      	mov	r3, r7
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064f8:	463b      	mov	r3, r7
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2b00      	cmp	r3, #0
 8006504:	d104      	bne.n	8006510 <USB_EPStartXfer+0xe24>
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650a:	3b01      	subs	r3, #1
 800650c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006514:	b29b      	uxth	r3, r3
 8006516:	029b      	lsls	r3, r3, #10
 8006518:	b29b      	uxth	r3, r3
 800651a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800651e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006522:	b29a      	uxth	r2, r3
 8006524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	e021      	b.n	8006570 <USB_EPStartXfer+0xe84>
 800652c:	463b      	mov	r3, r7
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d11c      	bne.n	8006570 <USB_EPStartXfer+0xe84>
 8006536:	1d3b      	adds	r3, r7, #4
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653e:	b29b      	uxth	r3, r3
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006546:	4413      	add	r3, r2
 8006548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800654c:	463b      	mov	r3, r7
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	011a      	lsls	r2, r3, #4
 8006554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006558:	4413      	add	r3, r2
 800655a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800655e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006562:	463b      	mov	r3, r7
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800656e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 81a4 	beq.w	80068c4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800657c:	1d3b      	adds	r3, r7, #4
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	463b      	mov	r3, r7
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006590:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <USB_EPStartXfer+0xebc>
 800659c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065a8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 8187 	bne.w	80068c4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065b6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 8180 	bne.w	80068c4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80065c4:	1d3b      	adds	r3, r7, #4
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	463b      	mov	r3, r7
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	881b      	ldrh	r3, [r3, #0]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065de:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	463b      	mov	r3, r7
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80065f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006604:	b29b      	uxth	r3, r3
 8006606:	8013      	strh	r3, [r2, #0]
 8006608:	e15c      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800660a:	463b      	mov	r3, r7
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	78db      	ldrb	r3, [r3, #3]
 8006610:	2b01      	cmp	r3, #1
 8006612:	f040 8155 	bne.w	80068c0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006616:	463b      	mov	r3, r7
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	429a      	cmp	r2, r3
 8006624:	d90e      	bls.n	8006644 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8006626:	463b      	mov	r3, r7
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006630:	463b      	mov	r3, r7
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800663a:	1ad2      	subs	r2, r2, r3
 800663c:	463b      	mov	r3, r7
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	619a      	str	r2, [r3, #24]
 8006642:	e008      	b.n	8006656 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8006644:	463b      	mov	r3, r7
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800664e:	463b      	mov	r3, r7
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2200      	movs	r2, #0
 8006654:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006656:	463b      	mov	r3, r7
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d16f      	bne.n	8006740 <USB_EPStartXfer+0x1054>
 8006660:	1d3b      	adds	r3, r7, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006668:	1d3b      	adds	r3, r7, #4
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006678:	4413      	add	r3, r2
 800667a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800667e:	463b      	mov	r3, r7
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	011a      	lsls	r2, r3, #4
 8006686:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800668a:	4413      	add	r3, r2
 800668c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <USB_EPStartXfer+0xfde>
 800669c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80066c6:	801a      	strh	r2, [r3, #0]
 80066c8:	e05f      	b.n	800678a <USB_EPStartXfer+0x109e>
 80066ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ce:	2b3e      	cmp	r3, #62	; 0x3e
 80066d0:	d818      	bhi.n	8006704 <USB_EPStartXfer+0x1018>
 80066d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <USB_EPStartXfer+0x1006>
 80066e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ec:	3301      	adds	r3, #1
 80066ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e042      	b.n	800678a <USB_EPStartXfer+0x109e>
 8006704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <USB_EPStartXfer+0x1038>
 800671a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800671e:	3b01      	subs	r3, #1
 8006720:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006728:	b29b      	uxth	r3, r3
 800672a:	029b      	lsls	r3, r3, #10
 800672c:	b29b      	uxth	r3, r3
 800672e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006736:	b29a      	uxth	r2, r3
 8006738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800673c:	801a      	strh	r2, [r3, #0]
 800673e:	e024      	b.n	800678a <USB_EPStartXfer+0x109e>
 8006740:	463b      	mov	r3, r7
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d11f      	bne.n	800678a <USB_EPStartXfer+0x109e>
 800674a:	1d3b      	adds	r3, r7, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800675a:	b29b      	uxth	r3, r3
 800675c:	461a      	mov	r2, r3
 800675e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006762:	4413      	add	r3, r2
 8006764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006768:	463b      	mov	r3, r7
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	011a      	lsls	r2, r3, #4
 8006770:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006774:	4413      	add	r3, r2
 8006776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800677a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	1d3b      	adds	r3, r7, #4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006792:	463b      	mov	r3, r7
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d16f      	bne.n	800687c <USB_EPStartXfer+0x1190>
 800679c:	1d3b      	adds	r3, r7, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067a4:	1d3b      	adds	r3, r7, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067b4:	4413      	add	r3, r2
 80067b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ba:	463b      	mov	r3, r7
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	011a      	lsls	r2, r3, #4
 80067c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80067d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d116      	bne.n	8006806 <USB_EPStartXfer+0x111a>
 80067d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067ea:	801a      	strh	r2, [r3, #0]
 80067ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e05e      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
 8006806:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800680a:	2b3e      	cmp	r3, #62	; 0x3e
 800680c:	d818      	bhi.n	8006840 <USB_EPStartXfer+0x1154>
 800680e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d004      	beq.n	800682e <USB_EPStartXfer+0x1142>
 8006824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006828:	3301      	adds	r3, #1
 800682a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800682e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006832:	b29b      	uxth	r3, r3
 8006834:	029b      	lsls	r3, r3, #10
 8006836:	b29a      	uxth	r2, r3
 8006838:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	e041      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
 8006840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006844:	095b      	lsrs	r3, r3, #5
 8006846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800684a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b00      	cmp	r3, #0
 8006854:	d104      	bne.n	8006860 <USB_EPStartXfer+0x1174>
 8006856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685a:	3b01      	subs	r3, #1
 800685c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006864:	b29b      	uxth	r3, r3
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	b29b      	uxth	r3, r3
 800686a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800686e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006872:	b29a      	uxth	r2, r3
 8006874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006878:	801a      	strh	r2, [r3, #0]
 800687a:	e023      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
 800687c:	463b      	mov	r3, r7
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	785b      	ldrb	r3, [r3, #1]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d11e      	bne.n	80068c4 <USB_EPStartXfer+0x11d8>
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688e:	b29b      	uxth	r3, r3
 8006890:	461a      	mov	r2, r3
 8006892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006896:	4413      	add	r3, r2
 8006898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800689c:	463b      	mov	r3, r7
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	011a      	lsls	r2, r3, #4
 80068a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068bc:	801a      	strh	r2, [r3, #0]
 80068be:	e001      	b.n	80068c4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e02e      	b.n	8006922 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	463b      	mov	r3, r7
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068e2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80068f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80068fa:	1d3b      	adds	r3, r7, #4
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	463b      	mov	r3, r7
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800690c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691c:	b29b      	uxth	r3, r3
 800691e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	785b      	ldrb	r3, [r3, #1]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	81bb      	strh	r3, [r7, #12]
 8006956:	89bb      	ldrh	r3, [r7, #12]
 8006958:	f083 0310 	eor.w	r3, r3, #16
 800695c:	81bb      	strh	r3, [r7, #12]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	441a      	add	r2, r3
 8006968:	89bb      	ldrh	r3, [r7, #12]
 800696a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800696e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697a:	b29b      	uxth	r3, r3
 800697c:	8013      	strh	r3, [r2, #0]
 800697e:	e01f      	b.n	80069c0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29b      	uxth	r3, r3
 800698e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	81fb      	strh	r3, [r7, #14]
 8006998:	89fb      	ldrh	r3, [r7, #14]
 800699a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800699e:	81fb      	strh	r3, [r7, #14]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	89fb      	ldrh	r3, [r7, #14]
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	7b1b      	ldrb	r3, [r3, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f040 809d 	bne.w	8006b1a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	785b      	ldrb	r3, [r3, #1]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d04c      	beq.n	8006a82 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	823b      	strh	r3, [r7, #16]
 80069f6:	8a3b      	ldrh	r3, [r7, #16]
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01b      	beq.n	8006a38 <USB_EPClearStall+0x6c>
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	881b      	ldrh	r3, [r3, #0]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a16:	81fb      	strh	r3, [r7, #14]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	441a      	add	r2, r3
 8006a22:	89fb      	ldrh	r3, [r7, #14]
 8006a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d06c      	beq.n	8006b1a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a56:	81bb      	strh	r3, [r7, #12]
 8006a58:	89bb      	ldrh	r3, [r7, #12]
 8006a5a:	f083 0320 	eor.w	r3, r3, #32
 8006a5e:	81bb      	strh	r3, [r7, #12]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	441a      	add	r2, r3
 8006a6a:	89bb      	ldrh	r3, [r7, #12]
 8006a6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	8013      	strh	r3, [r2, #0]
 8006a80:	e04b      	b.n	8006b1a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	82fb      	strh	r3, [r7, #22]
 8006a90:	8afb      	ldrh	r3, [r7, #22]
 8006a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01b      	beq.n	8006ad2 <USB_EPClearStall+0x106>
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	82bb      	strh	r3, [r7, #20]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	441a      	add	r2, r3
 8006abc:	8abb      	ldrh	r3, [r7, #20]
 8006abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae8:	827b      	strh	r3, [r7, #18]
 8006aea:	8a7b      	ldrh	r3, [r7, #18]
 8006aec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006af0:	827b      	strh	r3, [r7, #18]
 8006af2:	8a7b      	ldrh	r3, [r7, #18]
 8006af4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006af8:	827b      	strh	r3, [r7, #18]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	8a7b      	ldrh	r3, [r7, #18]
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr

08006b26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2280      	movs	r2, #128	; 0x80
 8006b3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr

08006b60 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b08d      	sub	sp, #52	; 0x34
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	80fb      	strh	r3, [r7, #6]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bbe:	88bb      	ldrh	r3, [r7, #4]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	005a      	lsls	r2, r3, #1
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bda:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006be0:	e01e      	b.n	8006c20 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	3301      	adds	r3, #1
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	3302      	adds	r3, #2
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	3301      	adds	r3, #1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1dd      	bne.n	8006be2 <USB_WritePMA+0x3a>
  }
}
 8006c26:	bf00      	nop
 8006c28:	3734      	adds	r7, #52	; 0x34
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b08b      	sub	sp, #44	; 0x2c
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	460b      	mov	r3, r1
 8006c40:	80fb      	strh	r3, [r7, #6]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c46:	88bb      	ldrh	r3, [r7, #4]
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	005a      	lsls	r2, r3, #1
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c62:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	627b      	str	r3, [r7, #36]	; 0x24
 8006c68:	e01b      	b.n	8006ca2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	3302      	adds	r3, #2
 8006c76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	3301      	adds	r3, #1
 8006c84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	0a1b      	lsrs	r3, r3, #8
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	3302      	adds	r3, #2
 8006c9a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e0      	bne.n	8006c6a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006ca8:	88bb      	ldrh	r3, [r7, #4]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d007      	beq.n	8006cc4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	701a      	strb	r2, [r3, #0]
  }
}
 8006cc4:	bf00      	nop
 8006cc6:	372c      	adds	r7, #44	; 0x2c
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bc80      	pop	{r7}
 8006ccc:	4770      	bx	lr
	...

08006cd0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006cdc:	2308      	movs	r3, #8
 8006cde:	2203      	movs	r2, #3
 8006ce0:	2181      	movs	r1, #129	; 0x81
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 fc99 	bl	800861a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, HID_EPOUT_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT_SIZE);
 8006cee:	2301      	movs	r3, #1
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f001 fc90 	bl	800861a <USBD_LL_OpenEP>


  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006cfa:	2010      	movs	r0, #16
 8006cfc:	f001 fda2 	bl	8008844 <USBD_static_malloc>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  //set EP_OUT 1 prepared to received the data
  USBD_LL_PrepareReceive(pdev, HID_EPOUT_ADDR, &rx_buf, 1);
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4a0b      	ldr	r2, [pc, #44]	; (8006d38 <USBD_HID_Init+0x68>)
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fd74 	bl	80087fc <USBD_LL_PrepareReceive>

  if (pdev->pClassData == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <USBD_HID_Init+0x52>
  {
    return USBD_FAIL;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e005      	b.n	8006d2e <USBD_HID_Init+0x5e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	2200      	movs	r2, #0
 8006d2a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000225 	.word	0x20000225

08006d3c <USBD_HID_DataOut>:

static uint8_t USBD_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]

	HAL_PCD_EP_Receive(pdev->pData, HID_EPOUT_ADDR, &rx_buf, 1);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006d4e:	2301      	movs	r3, #1
 8006d50:	4a06      	ldr	r2, [pc, #24]	; (8006d6c <USBD_HID_DataOut+0x30>)
 8006d52:	2101      	movs	r1, #1
 8006d54:	f7fb ffad 	bl	8002cb2 <HAL_PCD_EP_Receive>

	// getting info about HID LEDs here!
	SET_LEDS_Callback(rx_buf);
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <USBD_HID_DataOut+0x30>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fa fc99 	bl	8001694 <SET_LEDS_Callback>

	return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20000225 	.word	0x20000225

08006d70 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d7c:	2181      	movs	r1, #129	; 0x81
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f001 fc71 	bl	8008666 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d009      	beq.n	8006da8 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fd5e 	bl	800885c <USBD_static_free>
    pdev->pClassData = NULL;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d045      	beq.n	8006e6e <USBD_HID_Setup+0xba>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	f040 80d3 	bne.w	8006f8e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	3b02      	subs	r3, #2
 8006dee:	2b09      	cmp	r3, #9
 8006df0:	d835      	bhi.n	8006e5e <USBD_HID_Setup+0xaa>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_HID_Setup+0x44>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e4f 	.word	0x08006e4f
 8006dfc:	08006e2f 	.word	0x08006e2f
 8006e00:	08006e5f 	.word	0x08006e5f
 8006e04:	08006e5f 	.word	0x08006e5f
 8006e08:	08006e5f 	.word	0x08006e5f
 8006e0c:	08006e5f 	.word	0x08006e5f
 8006e10:	08006e5f 	.word	0x08006e5f
 8006e14:	08006e5f 	.word	0x08006e5f
 8006e18:	08006e3d 	.word	0x08006e3d
 8006e1c:	08006e21 	.word	0x08006e21
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	885b      	ldrh	r3, [r3, #2]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	601a      	str	r2, [r3, #0]
          break;
 8006e2c:	e01e      	b.n	8006e6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	2201      	movs	r2, #1
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 f937 	bl	80080a8 <USBD_CtlSendData>
          break;
 8006e3a:	e017      	b.n	8006e6c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	885b      	ldrh	r3, [r3, #2]
 8006e40:	0a1b      	lsrs	r3, r3, #8
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	605a      	str	r2, [r3, #4]
          break;
 8006e4c:	e00e      	b.n	8006e6c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2201      	movs	r2, #1
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f926 	bl	80080a8 <USBD_CtlSendData>
          break;
 8006e5c:	e006      	b.n	8006e6c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f8b7 	bl	8007fd4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	75fb      	strb	r3, [r7, #23]
          break;
 8006e6a:	bf00      	nop
      }
      break;
 8006e6c:	e096      	b.n	8006f9c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b0b      	cmp	r3, #11
 8006e74:	f200 8083 	bhi.w	8006f7e <USBD_HID_Setup+0x1ca>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <USBD_HID_Setup+0xcc>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006f7f 	.word	0x08006f7f
 8006e88:	08006f7f 	.word	0x08006f7f
 8006e8c:	08006f7f 	.word	0x08006f7f
 8006e90:	08006f7f 	.word	0x08006f7f
 8006e94:	08006f7f 	.word	0x08006f7f
 8006e98:	08006ed9 	.word	0x08006ed9
 8006e9c:	08006f7f 	.word	0x08006f7f
 8006ea0:	08006f7f 	.word	0x08006f7f
 8006ea4:	08006f7f 	.word	0x08006f7f
 8006ea8:	08006f31 	.word	0x08006f31
 8006eac:	08006f59 	.word	0x08006f59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d107      	bne.n	8006eca <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006eba:	f107 030e 	add.w	r3, r7, #14
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 f8f0 	bl	80080a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ec8:	e060      	b.n	8006f8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 f881 	bl	8007fd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed6:	e059      	b.n	8006f8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	885b      	ldrh	r3, [r3, #2]
 8006edc:	0a1b      	lsrs	r3, r3, #8
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	2b22      	cmp	r3, #34	; 0x22
 8006ee2:	d108      	bne.n	8006ef6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_KBD_REPORT_DESC_SIZE, req->wLength);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	88db      	ldrh	r3, [r3, #6]
 8006ee8:	2b73      	cmp	r3, #115	; 0x73
 8006eea:	bf28      	it	cs
 8006eec:	2373      	movcs	r3, #115	; 0x73
 8006eee:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_KBD_ReportDesc;
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <USBD_HID_Setup+0x1f4>)
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	e015      	b.n	8006f22 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	885b      	ldrh	r3, [r3, #2]
 8006efa:	0a1b      	lsrs	r3, r3, #8
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b21      	cmp	r3, #33	; 0x21
 8006f00:	d108      	bne.n	8006f14 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006f02:	4b2a      	ldr	r3, [pc, #168]	; (8006fac <USBD_HID_Setup+0x1f8>)
 8006f04:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	2b09      	cmp	r3, #9
 8006f0c:	bf28      	it	cs
 8006f0e:	2309      	movcs	r3, #9
 8006f10:	83fb      	strh	r3, [r7, #30]
 8006f12:	e006      	b.n	8006f22 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 f85c 	bl	8007fd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	75fb      	strb	r3, [r7, #23]
            break;
 8006f20:	e034      	b.n	8006f8c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006f22:	8bfb      	ldrh	r3, [r7, #30]
 8006f24:	461a      	mov	r2, r3
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f8bd 	bl	80080a8 <USBD_CtlSendData>
          break;
 8006f2e:	e02d      	b.n	8006f8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d107      	bne.n	8006f4a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 f8b0 	bl	80080a8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f48:	e020      	b.n	8006f8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f841 	bl	8007fd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	75fb      	strb	r3, [r7, #23]
          break;
 8006f56:	e019      	b.n	8006f8c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d106      	bne.n	8006f70 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	461a      	mov	r2, r3
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f6e:	e00d      	b.n	8006f8c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f001 f82e 	bl	8007fd4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f78:	2302      	movs	r3, #2
 8006f7a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7c:	e006      	b.n	8006f8c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 f827 	bl	8007fd4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f86:	2302      	movs	r3, #2
 8006f88:	75fb      	strb	r3, [r7, #23]
          break;
 8006f8a:	bf00      	nop
      }
      break;
 8006f8c:	e006      	b.n	8006f9c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f81f 	bl	8007fd4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f96:	2302      	movs	r3, #2
 8006f98:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9a:	bf00      	nop
  }

  return ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3720      	adds	r7, #32
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	200000e4 	.word	0x200000e4
 8006fac:	200000cc 	.word	0x200000cc

08006fb0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	2b03      	cmp	r3, #3
 8006fce:	d10c      	bne.n	8006fea <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	7b1b      	ldrb	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d108      	bne.n	8006fea <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	2181      	movs	r1, #129	; 0x81
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f001 fbe6 	bl	80087b6 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2229      	movs	r2, #41	; 0x29
 8007000:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	20000048 	.word	0x20000048

08007014 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2229      	movs	r2, #41	; 0x29
 8007020:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007022:	4b03      	ldr	r3, [pc, #12]	; (8007030 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000074 	.word	0x20000074

08007034 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2229      	movs	r2, #41	; 0x29
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200000a0 	.word	0x200000a0

08007054 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  USB_HID_buffer_sent_Callback();
 8007060:	f7fa f8f6 	bl	8001250 <USB_HID_buffer_sent_Callback>
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	2200      	movs	r2, #0
 800706c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220a      	movs	r2, #10
 8007084:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	200000d8 	.word	0x200000d8

08007098 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80070ac:	2302      	movs	r3, #2
 80070ae:	e01a      	b.n	80070e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	79fa      	ldrb	r2, [r7, #7]
 80070dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f001 fa38 	bl	8008554 <USBD_LL_Init>

  return USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
 800710e:	e001      	b.n	8007114 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007110:	2302      	movs	r3, #2
 8007112:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 fa5b 	bl	80085e4 <USBD_LL_Start>

  return USBD_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007158:	2302      	movs	r3, #2
 800715a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00c      	beq.n	8007180 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007180:	7bfb      	ldrb	r3, [r7, #15]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3

  return USBD_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071c0:	6839      	ldr	r1, [r7, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 feca 	bl	8007f5c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2201      	movs	r2, #1
 80071cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d00c      	beq.n	8007206 <USBD_LL_SetupStage+0x56>
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d302      	bcc.n	80071f6 <USBD_LL_SetupStage+0x46>
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d010      	beq.n	8007216 <USBD_LL_SetupStage+0x66>
 80071f4:	e017      	b.n	8007226 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f9ca 	bl	8007598 <USBD_StdDevReq>
      break;
 8007204:	e01a      	b.n	800723c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa2c 	bl	800766c <USBD_StdItfReq>
      break;
 8007214:	e012      	b.n	800723c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa6a 	bl	80076f8 <USBD_StdEPReq>
      break;
 8007224:	e00a      	b.n	800723c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800722c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007230:	b2db      	uxtb	r3, r3
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 fa35 	bl	80086a4 <USBD_LL_StallEP>
      break;
 800723a:	bf00      	nop
  }

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	460b      	mov	r3, r1
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007254:	7afb      	ldrb	r3, [r7, #11]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d14b      	bne.n	80072f2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007260:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007268:	2b03      	cmp	r3, #3
 800726a:	d134      	bne.n	80072d6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d919      	bls.n	80072ac <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800728e:	429a      	cmp	r2, r3
 8007290:	d203      	bcs.n	800729a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007296:	b29b      	uxth	r3, r3
 8007298:	e002      	b.n	80072a0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 ff2d 	bl	8008104 <USBD_CtlContinueRx>
 80072aa:	e038      	b.n	800731e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d105      	bne.n	80072ce <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 ff2a 	bl	8008128 <USBD_CtlSendStatus>
 80072d4:	e023      	b.n	800731e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072dc:	2b05      	cmp	r3, #5
 80072de:	d11e      	bne.n	800731e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072e8:	2100      	movs	r1, #0
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f001 f9da 	bl	80086a4 <USBD_LL_StallEP>
 80072f0:	e015      	b.n	800731e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00d      	beq.n	800731a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007304:	2b03      	cmp	r3, #3
 8007306:	d108      	bne.n	800731a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	7afa      	ldrb	r2, [r7, #11]
 8007312:	4611      	mov	r1, r2
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	4798      	blx	r3
 8007318:	e001      	b.n	800731e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800731a:	2302      	movs	r3, #2
 800731c:	e000      	b.n	8007320 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3718      	adds	r7, #24
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	460b      	mov	r3, r1
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d17f      	bne.n	800743c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3314      	adds	r3, #20
 8007340:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007348:	2b02      	cmp	r3, #2
 800734a:	d15c      	bne.n	8007406 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	429a      	cmp	r2, r3
 8007356:	d915      	bls.n	8007384 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	1ad2      	subs	r2, r2, r3
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 feb5 	bl	80080e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007376:	2300      	movs	r3, #0
 8007378:	2200      	movs	r2, #0
 800737a:	2100      	movs	r1, #0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f001 fa3d 	bl	80087fc <USBD_LL_PrepareReceive>
 8007382:	e04e      	b.n	8007422 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	6912      	ldr	r2, [r2, #16]
 800738c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007390:	fb02 f201 	mul.w	r2, r2, r1
 8007394:	1a9b      	subs	r3, r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d11c      	bne.n	80073d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d316      	bcc.n	80073d4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d20f      	bcs.n	80073d4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fe91 	bl	80080e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f001 fa15 	bl	80087fc <USBD_LL_PrepareReceive>
 80073d2:	e026      	b.n	8007422 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00a      	beq.n	80073f6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d105      	bne.n	80073f6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073f6:	2180      	movs	r1, #128	; 0x80
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f001 f953 	bl	80086a4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fea5 	bl	800814e <USBD_CtlReceiveStatus>
 8007404:	e00d      	b.n	8007422 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800740c:	2b04      	cmp	r3, #4
 800740e:	d004      	beq.n	800741a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 f941 	bl	80086a4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007428:	2b01      	cmp	r3, #1
 800742a:	d11d      	bne.n	8007468 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7ff fe83 	bl	8007138 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800743a:	e015      	b.n	8007468 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800744e:	2b03      	cmp	r3, #3
 8007450:	d108      	bne.n	8007464 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007458:	695b      	ldr	r3, [r3, #20]
 800745a:	7afa      	ldrb	r2, [r7, #11]
 800745c:	4611      	mov	r1, r2
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	4798      	blx	r3
 8007462:	e001      	b.n	8007468 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007464:	2302      	movs	r3, #2
 8007466:	e000      	b.n	800746a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b082      	sub	sp, #8
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	2200      	movs	r2, #0
 800747e:	2100      	movs	r1, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f8ca 	bl	800861a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2240      	movs	r2, #64	; 0x40
 8007492:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007496:	2340      	movs	r3, #64	; 0x40
 8007498:	2200      	movs	r2, #0
 800749a:	2180      	movs	r1, #128	; 0x80
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f001 f8bc 	bl	800861a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2240      	movs	r2, #64	; 0x40
 80074ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	b2d2      	uxtb	r2, r2
 80074e4:	4611      	mov	r1, r2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	4798      	blx	r3
  }

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2204      	movs	r2, #4
 800752a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr

0800753a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007548:	2b04      	cmp	r3, #4
 800754a:	d105      	bne.n	8007558 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007572:	2b03      	cmp	r3, #3
 8007574:	d10b      	bne.n	800758e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d004      	beq.n	80075bc <USBD_StdDevReq+0x24>
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d002      	beq.n	80075bc <USBD_StdDevReq+0x24>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d008      	beq.n	80075cc <USBD_StdDevReq+0x34>
 80075ba:	e04c      	b.n	8007656 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4798      	blx	r3
      break;
 80075ca:	e049      	b.n	8007660 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	2b09      	cmp	r3, #9
 80075d2:	d83a      	bhi.n	800764a <USBD_StdDevReq+0xb2>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <USBD_StdDevReq+0x44>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	0800762d 	.word	0x0800762d
 80075e0:	08007641 	.word	0x08007641
 80075e4:	0800764b 	.word	0x0800764b
 80075e8:	08007637 	.word	0x08007637
 80075ec:	0800764b 	.word	0x0800764b
 80075f0:	0800760f 	.word	0x0800760f
 80075f4:	08007605 	.word	0x08007605
 80075f8:	0800764b 	.word	0x0800764b
 80075fc:	08007623 	.word	0x08007623
 8007600:	08007619 	.word	0x08007619
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9d4 	bl	80079b4 <USBD_GetDescriptor>
          break;
 800760c:	e022      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fb37 	bl	8007c84 <USBD_SetAddress>
          break;
 8007616:	e01d      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fb74 	bl	8007d08 <USBD_SetConfig>
          break;
 8007620:	e018      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbfd 	bl	8007e24 <USBD_GetConfig>
          break;
 800762a:	e013      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fc2c 	bl	8007e8c <USBD_GetStatus>
          break;
 8007634:	e00e      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007636:	6839      	ldr	r1, [r7, #0]
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 fc5a 	bl	8007ef2 <USBD_SetFeature>
          break;
 800763e:	e009      	b.n	8007654 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fc69 	bl	8007f1a <USBD_ClrFeature>
          break;
 8007648:	e004      	b.n	8007654 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800764a:	6839      	ldr	r1, [r7, #0]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fcc1 	bl	8007fd4 <USBD_CtlError>
          break;
 8007652:	bf00      	nop
      }
      break;
 8007654:	e004      	b.n	8007660 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fcbb 	bl	8007fd4 <USBD_CtlError>
      break;
 800765e:	bf00      	nop
  }

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop

0800766c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007682:	2b20      	cmp	r3, #32
 8007684:	d003      	beq.n	800768e <USBD_StdItfReq+0x22>
 8007686:	2b40      	cmp	r3, #64	; 0x40
 8007688:	d001      	beq.n	800768e <USBD_StdItfReq+0x22>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d12a      	bne.n	80076e4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007694:	3b01      	subs	r3, #1
 8007696:	2b02      	cmp	r3, #2
 8007698:	d81d      	bhi.n	80076d6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	889b      	ldrh	r3, [r3, #4]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d813      	bhi.n	80076cc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	6839      	ldr	r1, [r7, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	88db      	ldrh	r3, [r3, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d110      	bne.n	80076e0 <USBD_StdItfReq+0x74>
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fd2f 	bl	8008128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076ca:	e009      	b.n	80076e0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc80 	bl	8007fd4 <USBD_CtlError>
          break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc7b 	bl	8007fd4 <USBD_CtlError>
          break;
 80076de:	e000      	b.n	80076e2 <USBD_StdItfReq+0x76>
          break;
 80076e0:	bf00      	nop
      }
      break;
 80076e2:	e004      	b.n	80076ee <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc74 	bl	8007fd4 <USBD_CtlError>
      break;
 80076ec:	bf00      	nop
  }

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	889b      	ldrh	r3, [r3, #4]
 800770a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007714:	2b20      	cmp	r3, #32
 8007716:	d004      	beq.n	8007722 <USBD_StdEPReq+0x2a>
 8007718:	2b40      	cmp	r3, #64	; 0x40
 800771a:	d002      	beq.n	8007722 <USBD_StdEPReq+0x2a>
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <USBD_StdEPReq+0x3a>
 8007720:	e13d      	b.n	800799e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	4798      	blx	r3
      break;
 8007730:	e13a      	b.n	80079a8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800773a:	2b20      	cmp	r3, #32
 800773c:	d10a      	bne.n	8007754 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	e12a      	b.n	80079aa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d03e      	beq.n	80077da <USBD_StdEPReq+0xe2>
 800775c:	2b03      	cmp	r3, #3
 800775e:	d002      	beq.n	8007766 <USBD_StdEPReq+0x6e>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d070      	beq.n	8007846 <USBD_StdEPReq+0x14e>
 8007764:	e115      	b.n	8007992 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	2b02      	cmp	r3, #2
 800776e:	d002      	beq.n	8007776 <USBD_StdEPReq+0x7e>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d015      	beq.n	80077a0 <USBD_StdEPReq+0xa8>
 8007774:	e02b      	b.n	80077ce <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00c      	beq.n	8007796 <USBD_StdEPReq+0x9e>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d009      	beq.n	8007796 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 ff8c 	bl	80086a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800778c:	2180      	movs	r1, #128	; 0x80
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 ff88 	bl	80086a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007794:	e020      	b.n	80077d8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc1b 	bl	8007fd4 <USBD_CtlError>
              break;
 800779e:	e01b      	b.n	80077d8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	885b      	ldrh	r3, [r3, #2]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10e      	bne.n	80077c6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <USBD_StdEPReq+0xce>
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d008      	beq.n	80077c6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	88db      	ldrh	r3, [r3, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ff6f 	bl	80086a4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fcae 	bl	8008128 <USBD_CtlSendStatus>

              break;
 80077cc:	e004      	b.n	80077d8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fbff 	bl	8007fd4 <USBD_CtlError>
              break;
 80077d6:	bf00      	nop
          }
          break;
 80077d8:	e0e0      	b.n	800799c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d002      	beq.n	80077ea <USBD_StdEPReq+0xf2>
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d015      	beq.n	8007814 <USBD_StdEPReq+0x11c>
 80077e8:	e026      	b.n	8007838 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00c      	beq.n	800780a <USBD_StdEPReq+0x112>
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	2b80      	cmp	r3, #128	; 0x80
 80077f4:	d009      	beq.n	800780a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 ff52 	bl	80086a4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007800:	2180      	movs	r1, #128	; 0x80
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 ff4e 	bl	80086a4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007808:	e01c      	b.n	8007844 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbe1 	bl	8007fd4 <USBD_CtlError>
              break;
 8007812:	e017      	b.n	8007844 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	885b      	ldrh	r3, [r3, #2]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d112      	bne.n	8007842 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	2b00      	cmp	r3, #0
 8007824:	d004      	beq.n	8007830 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	4619      	mov	r1, r3
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 ff59 	bl	80086e2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fc79 	bl	8008128 <USBD_CtlSendStatus>
              }
              break;
 8007836:	e004      	b.n	8007842 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fbca 	bl	8007fd4 <USBD_CtlError>
              break;
 8007840:	e000      	b.n	8007844 <USBD_StdEPReq+0x14c>
              break;
 8007842:	bf00      	nop
          }
          break;
 8007844:	e0aa      	b.n	800799c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	2b02      	cmp	r3, #2
 800784e:	d002      	beq.n	8007856 <USBD_StdEPReq+0x15e>
 8007850:	2b03      	cmp	r3, #3
 8007852:	d032      	beq.n	80078ba <USBD_StdEPReq+0x1c2>
 8007854:	e097      	b.n	8007986 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <USBD_StdEPReq+0x174>
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b80      	cmp	r3, #128	; 0x80
 8007860:	d004      	beq.n	800786c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbb5 	bl	8007fd4 <USBD_CtlError>
                break;
 800786a:	e091      	b.n	8007990 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da0b      	bge.n	800788c <USBD_StdEPReq+0x194>
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	3310      	adds	r3, #16
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	3304      	adds	r3, #4
 800788a:	e00b      	b.n	80078a4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007892:	4613      	mov	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	4413      	add	r3, r2
 80078a2:	3304      	adds	r3, #4
 80078a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2202      	movs	r2, #2
 80078b0:	4619      	mov	r1, r3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fbf8 	bl	80080a8 <USBD_CtlSendData>
              break;
 80078b8:	e06a      	b.n	8007990 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	da11      	bge.n	80078e6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	f003 020f 	and.w	r2, r3, #15
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	3318      	adds	r3, #24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d117      	bne.n	800790c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fb78 	bl	8007fd4 <USBD_CtlError>
                  break;
 80078e4:	e054      	b.n	8007990 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078e6:	7bbb      	ldrb	r3, [r7, #14]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb65 	bl	8007fd4 <USBD_CtlError>
                  break;
 800790a:	e041      	b.n	8007990 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800790c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007910:	2b00      	cmp	r3, #0
 8007912:	da0b      	bge.n	800792c <USBD_StdEPReq+0x234>
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	3310      	adds	r3, #16
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	4413      	add	r3, r2
 8007928:	3304      	adds	r3, #4
 800792a:	e00b      	b.n	8007944 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	4413      	add	r3, r2
 8007942:	3304      	adds	r3, #4
 8007944:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <USBD_StdEPReq+0x25a>
 800794c:	7bbb      	ldrb	r3, [r7, #14]
 800794e:	2b80      	cmp	r3, #128	; 0x80
 8007950:	d103      	bne.n	800795a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e00e      	b.n	8007978 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fede 	bl	8008720 <USBD_LL_IsStallEP>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2201      	movs	r2, #1
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	e002      	b.n	8007978 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fb92 	bl	80080a8 <USBD_CtlSendData>
              break;
 8007984:	e004      	b.n	8007990 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fb23 	bl	8007fd4 <USBD_CtlError>
              break;
 800798e:	bf00      	nop
          }
          break;
 8007990:	e004      	b.n	800799c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fb1d 	bl	8007fd4 <USBD_CtlError>
          break;
 800799a:	bf00      	nop
      }
      break;
 800799c:	e004      	b.n	80079a8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fb17 	bl	8007fd4 <USBD_CtlError>
      break;
 80079a6:	bf00      	nop
  }

  return ret;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	2b06      	cmp	r3, #6
 80079d6:	f200 8128 	bhi.w	8007c2a <USBD_GetDescriptor+0x276>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <USBD_GetDescriptor+0x2c>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	08007a15 	.word	0x08007a15
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007c2b 	.word	0x08007c2b
 80079f0:	08007c2b 	.word	0x08007c2b
 80079f4:	08007bcb 	.word	0x08007bcb
 80079f8:	08007bf7 	.word	0x08007bf7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
      break;
 8007a12:	e112      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7c1b      	ldrb	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10d      	bne.n	8007a38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f107 0208 	add.w	r2, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	2202      	movs	r2, #2
 8007a34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a36:	e100      	b.n	8007c3a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e0f2      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	885b      	ldrh	r3, [r3, #2]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	f200 80ac 	bhi.w	8007bb8 <USBD_GetDescriptor+0x204>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBD_GetDescriptor+0xb4>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007ae9 	.word	0x08007ae9
 8007a74:	08007b1d 	.word	0x08007b1d
 8007a78:	08007b51 	.word	0x08007b51
 8007a7c:	08007b85 	.word	0x08007b85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e091      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fa94 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e089      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 0108 	add.w	r1, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad6:	e077      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa7a 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae6:	e06f      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	7c12      	ldrb	r2, [r2, #16]
 8007b00:	f107 0108 	add.w	r1, r7, #8
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
 8007b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b0a:	e05d      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa60 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	3301      	adds	r3, #1
 8007b18:	72fb      	strb	r3, [r7, #11]
          break;
 8007b1a:	e055      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7c12      	ldrb	r2, [r2, #16]
 8007b34:	f107 0108 	add.w	r1, r7, #8
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
 8007b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3e:	e043      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa46 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4e:	e03b      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b72:	e029      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa2c 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	72fb      	strb	r3, [r7, #11]
          break;
 8007b82:	e021      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7c12      	ldrb	r2, [r2, #16]
 8007b9c:	f107 0108 	add.w	r1, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba6:	e00f      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa12 	bl	8007fd4 <USBD_CtlError>
            err++;
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb6:	e007      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa0a 	bl	8007fd4 <USBD_CtlError>
          err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bc6:	e038      	b.n	8007c3a <USBD_GetDescriptor+0x286>
 8007bc8:	e037      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7c1b      	ldrb	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f107 0208 	add.w	r2, r7, #8
 8007bde:	4610      	mov	r0, r2
 8007be0:	4798      	blx	r3
 8007be2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007be4:	e029      	b.n	8007c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f9f3 	bl	8007fd4 <USBD_CtlError>
        err++;
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8007bf4:	e021      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7c1b      	ldrb	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4798      	blx	r3
 8007c0e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	2207      	movs	r2, #7
 8007c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c18:	e00f      	b.n	8007c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f9d9 	bl	8007fd4 <USBD_CtlError>
        err++;
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	3301      	adds	r3, #1
 8007c26:	72fb      	strb	r3, [r7, #11]
      break;
 8007c28:	e007      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f9d1 	bl	8007fd4 <USBD_CtlError>
      err++;
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	3301      	adds	r3, #1
 8007c36:	72fb      	strb	r3, [r7, #11]
      break;
 8007c38:	bf00      	nop
  }

  if (err != 0U)
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11c      	bne.n	8007c7a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d011      	beq.n	8007c6a <USBD_GetDescriptor+0x2b6>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88db      	ldrh	r3, [r3, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00d      	beq.n	8007c6a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	88da      	ldrh	r2, [r3, #6]
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bf28      	it	cs
 8007c58:	4613      	movcs	r3, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa1f 	bl	80080a8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	88db      	ldrh	r3, [r3, #6]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa58 	bl	8008128 <USBD_CtlSendStatus>
 8007c78:	e000      	b.n	8007c7c <USBD_GetDescriptor+0x2c8>
    return;
 8007c7a:	bf00      	nop
    }
  }
}
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop

08007c84 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	889b      	ldrh	r3, [r3, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d130      	bne.n	8007cf8 <USBD_SetAddress+0x74>
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	88db      	ldrh	r3, [r3, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d12c      	bne.n	8007cf8 <USBD_SetAddress+0x74>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	885b      	ldrh	r3, [r3, #2]
 8007ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca4:	d828      	bhi.n	8007cf8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	885b      	ldrh	r3, [r3, #2]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d104      	bne.n	8007cc6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f988 	bl	8007fd4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc4:	e01c      	b.n	8007d00 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7bfa      	ldrb	r2, [r7, #15]
 8007cca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fd50 	bl	8008778 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa25 	bl	8008128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d004      	beq.n	8007cee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	e008      	b.n	8007d00 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf6:	e003      	b.n	8007d00 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f96a 	bl	8007fd4 <USBD_CtlError>
  }
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	b2da      	uxtb	r2, r3
 8007d18:	4b41      	ldr	r3, [pc, #260]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d1c:	4b40      	ldr	r3, [pc, #256]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d904      	bls.n	8007d2e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f954 	bl	8007fd4 <USBD_CtlError>
 8007d2c:	e075      	b.n	8007e1a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d002      	beq.n	8007d3e <USBD_SetConfig+0x36>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d023      	beq.n	8007d84 <USBD_SetConfig+0x7c>
 8007d3c:	e062      	b.n	8007e04 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d3e:	4b38      	ldr	r3, [pc, #224]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d01a      	beq.n	8007d7c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d46:	4b36      	ldr	r3, [pc, #216]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d58:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff f9f4 	bl	800714c <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d104      	bne.n	8007d74 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f931 	bl	8007fd4 <USBD_CtlError>
            return;
 8007d72:	e052      	b.n	8007e1a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9d7 	bl	8008128 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d7a:	e04e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9d3 	bl	8008128 <USBD_CtlSendStatus>
        break;
 8007d82:	e04a      	b.n	8007e1a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d84:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d112      	bne.n	8007db2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d94:	4b22      	ldr	r3, [pc, #136]	; (8007e20 <USBD_SetConfig+0x118>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <USBD_SetConfig+0x118>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f9f0 	bl	800718a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f9bc 	bl	8008128 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007db0:	e033      	b.n	8007e1a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007db2:	4b1b      	ldr	r3, [pc, #108]	; (8007e20 <USBD_SetConfig+0x118>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d01d      	beq.n	8007dfc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7ff f9de 	bl	800718a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <USBD_SetConfig+0x118>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff f9b4 	bl	800714c <USBD_SetClassConfig>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d104      	bne.n	8007df4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8f1 	bl	8007fd4 <USBD_CtlError>
            return;
 8007df2:	e012      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f997 	bl	8008128 <USBD_CtlSendStatus>
        break;
 8007dfa:	e00e      	b.n	8007e1a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f993 	bl	8008128 <USBD_CtlSendStatus>
        break;
 8007e02:	e00a      	b.n	8007e1a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8e4 	bl	8007fd4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <USBD_SetConfig+0x118>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff f9b9 	bl	800718a <USBD_ClrClassConfig>
        break;
 8007e18:	bf00      	nop
    }
  }
}
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	20000226 	.word	0x20000226

08007e24 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d004      	beq.n	8007e40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f8cb 	bl	8007fd4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e3e:	e021      	b.n	8007e84 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	db17      	blt.n	8007e7a <USBD_GetConfig+0x56>
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	dd02      	ble.n	8007e54 <USBD_GetConfig+0x30>
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d00b      	beq.n	8007e6a <USBD_GetConfig+0x46>
 8007e52:	e012      	b.n	8007e7a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f920 	bl	80080a8 <USBD_CtlSendData>
        break;
 8007e68:	e00c      	b.n	8007e84 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4619      	mov	r1, r3
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f918 	bl	80080a8 <USBD_CtlSendData>
        break;
 8007e78:	e004      	b.n	8007e84 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007e7a:	6839      	ldr	r1, [r7, #0]
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f8a9 	bl	8007fd4 <USBD_CtlError>
        break;
 8007e82:	bf00      	nop
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d81e      	bhi.n	8007ee0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	88db      	ldrh	r3, [r3, #6]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d004      	beq.n	8007eb4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f891 	bl	8007fd4 <USBD_CtlError>
        break;
 8007eb2:	e01a      	b.n	8007eea <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f043 0202 	orr.w	r2, r3, #2
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	330c      	adds	r3, #12
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f8e5 	bl	80080a8 <USBD_CtlSendData>
      break;
 8007ede:	e004      	b.n	8007eea <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f876 	bl	8007fd4 <USBD_CtlError>
      break;
 8007ee8:	bf00      	nop
  }
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d106      	bne.n	8007f12 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f90b 	bl	8008128 <USBD_CtlSendStatus>
  }
}
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d80b      	bhi.n	8007f48 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	885b      	ldrh	r3, [r3, #2]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d10c      	bne.n	8007f52 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f8f1 	bl	8008128 <USBD_CtlSendStatus>
      }
      break;
 8007f46:	e004      	b.n	8007f52 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f842 	bl	8007fd4 <USBD_CtlError>
      break;
 8007f50:	e000      	b.n	8007f54 <USBD_ClrFeature+0x3a>
      break;
 8007f52:	bf00      	nop
  }
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781a      	ldrb	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	785a      	ldrb	r2, [r3, #1]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	3303      	adds	r3, #3
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	3304      	adds	r3, #4
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	3305      	adds	r3, #5
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	021b      	lsls	r3, r3, #8
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	4413      	add	r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	3306      	adds	r3, #6
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	3307      	adds	r3, #7
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	80da      	strh	r2, [r3, #6]

}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bc80      	pop	{r7}
 8007fd2:	4770      	bx	lr

08007fd4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fb5f 	bl	80086a4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fb5b 	bl	80086a4 <USBD_LL_StallEP>
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d032      	beq.n	8008072 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 f834 	bl	800807a <USBD_GetLen>
 8008012:	4603      	mov	r3, r0
 8008014:	3301      	adds	r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	005b      	lsls	r3, r3, #1
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	75fa      	strb	r2, [r7, #23]
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	75fa      	strb	r2, [r7, #23]
 8008038:	461a      	mov	r2, r3
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	2203      	movs	r2, #3
 8008040:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008042:	e012      	b.n	800806a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	60fa      	str	r2, [r7, #12]
 800804a:	7dfa      	ldrb	r2, [r7, #23]
 800804c:	1c51      	adds	r1, r2, #1
 800804e:	75f9      	strb	r1, [r7, #23]
 8008050:	4611      	mov	r1, r2
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	440a      	add	r2, r1
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	75fa      	strb	r2, [r7, #23]
 8008060:	461a      	mov	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e8      	bne.n	8008044 <USBD_GetString+0x4e>
    }
  }
}
 8008072:	bf00      	nop
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008086:	e005      	b.n	8008094 <USBD_GetLen+0x1a>
  {
    len++;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	3301      	adds	r3, #1
 800808c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3301      	adds	r3, #1
 8008092:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1f5      	bne.n	8008088 <USBD_GetLen+0xe>
  }

  return len;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4613      	mov	r3, r2
 80080b4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2202      	movs	r2, #2
 80080ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080be:	88fa      	ldrh	r2, [r7, #6]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080c4:	88fa      	ldrh	r2, [r7, #6]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	2100      	movs	r1, #0
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 fb70 	bl	80087b6 <USBD_LL_Transmit>

  return USBD_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080ee:	88fb      	ldrh	r3, [r7, #6]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	2100      	movs	r1, #0
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 fb5e 	bl	80087b6 <USBD_LL_Transmit>

  return USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008112:	88fb      	ldrh	r3, [r7, #6]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	2100      	movs	r1, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fb6f 	bl	80087fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2204      	movs	r2, #4
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fb39 	bl	80087b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2205      	movs	r2, #5
 800815a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb49 	bl	80087fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008178:	2200      	movs	r2, #0
 800817a:	490e      	ldr	r1, [pc, #56]	; (80081b4 <MX_USB_DEVICE_Init+0x40>)
 800817c:	480e      	ldr	r0, [pc, #56]	; (80081b8 <MX_USB_DEVICE_Init+0x44>)
 800817e:	f7fe ff8b 	bl	8007098 <USBD_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008188:	f7f9 f935 	bl	80013f6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800818c:	490b      	ldr	r1, [pc, #44]	; (80081bc <MX_USB_DEVICE_Init+0x48>)
 800818e:	480a      	ldr	r0, [pc, #40]	; (80081b8 <MX_USB_DEVICE_Init+0x44>)
 8008190:	f7fe ffad 	bl	80070ee <USBD_RegisterClass>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800819a:	f7f9 f92c 	bl	80013f6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800819e:	4806      	ldr	r0, [pc, #24]	; (80081b8 <MX_USB_DEVICE_Init+0x44>)
 80081a0:	f7fe ffbe 	bl	8007120 <USBD_Start>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80081aa:	f7f9 f924 	bl	80013f6 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000158 	.word	0x20000158
 80081b8:	20000388 	.word	0x20000388
 80081bc:	20000010 	.word	0x20000010

080081c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4603      	mov	r3, r0
 80081c8:	6039      	str	r1, [r7, #0]
 80081ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2212      	movs	r2, #18
 80081d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000174 	.word	0x20000174

080081e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	4603      	mov	r3, r0
 80081ec:	6039      	str	r1, [r7, #0]
 80081ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2204      	movs	r2, #4
 80081f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20000188 	.word	0x20000188

08008208 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	6039      	str	r1, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008214:	79fb      	ldrb	r3, [r7, #7]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d105      	bne.n	8008226 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800821a:	683a      	ldr	r2, [r7, #0]
 800821c:	4907      	ldr	r1, [pc, #28]	; (800823c <USBD_FS_ProductStrDescriptor+0x34>)
 800821e:	4808      	ldr	r0, [pc, #32]	; (8008240 <USBD_FS_ProductStrDescriptor+0x38>)
 8008220:	f7ff fee9 	bl	8007ff6 <USBD_GetString>
 8008224:	e004      	b.n	8008230 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	4904      	ldr	r1, [pc, #16]	; (800823c <USBD_FS_ProductStrDescriptor+0x34>)
 800822a:	4805      	ldr	r0, [pc, #20]	; (8008240 <USBD_FS_ProductStrDescriptor+0x38>)
 800822c:	f7ff fee3 	bl	8007ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008230:	4b02      	ldr	r3, [pc, #8]	; (800823c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	2000064c 	.word	0x2000064c
 8008240:	08008960 	.word	0x08008960

08008244 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	4904      	ldr	r1, [pc, #16]	; (8008264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008254:	4804      	ldr	r0, [pc, #16]	; (8008268 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008256:	f7ff fece 	bl	8007ff6 <USBD_GetString>
  return USBD_StrDesc;
 800825a:	4b02      	ldr	r3, [pc, #8]	; (8008264 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	2000064c 	.word	0x2000064c
 8008268:	08008974 	.word	0x08008974

0800826c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	4603      	mov	r3, r0
 8008274:	6039      	str	r1, [r7, #0]
 8008276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	221a      	movs	r2, #26
 800827c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800827e:	f000 f843 	bl	8008308 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008282:	4b02      	ldr	r3, [pc, #8]	; (800828c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008284:	4618      	mov	r0, r3
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	2000018c 	.word	0x2000018c

08008290 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800829c:	79fb      	ldrb	r3, [r7, #7]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d105      	bne.n	80082ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	4907      	ldr	r1, [pc, #28]	; (80082c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082a6:	4808      	ldr	r0, [pc, #32]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082a8:	f7ff fea5 	bl	8007ff6 <USBD_GetString>
 80082ac:	e004      	b.n	80082b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	4904      	ldr	r1, [pc, #16]	; (80082c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80082b2:	4805      	ldr	r0, [pc, #20]	; (80082c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80082b4:	f7ff fe9f 	bl	8007ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082b8:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3708      	adds	r7, #8
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	2000064c 	.word	0x2000064c
 80082c8:	08008988 	.word	0x08008988

080082cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d105      	bne.n	80082ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4907      	ldr	r1, [pc, #28]	; (8008300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082e2:	4808      	ldr	r0, [pc, #32]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082e4:	f7ff fe87 	bl	8007ff6 <USBD_GetString>
 80082e8:	e004      	b.n	80082f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	4904      	ldr	r1, [pc, #16]	; (8008300 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082ee:	4805      	ldr	r0, [pc, #20]	; (8008304 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082f0:	f7ff fe81 	bl	8007ff6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082f4:	4b02      	ldr	r3, [pc, #8]	; (8008300 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	2000064c 	.word	0x2000064c
 8008304:	08008994 	.word	0x08008994

08008308 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800830e:	4b0f      	ldr	r3, [pc, #60]	; (800834c <Get_SerialNum+0x44>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008314:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <Get_SerialNum+0x48>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <Get_SerialNum+0x4c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4413      	add	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800832e:	2208      	movs	r2, #8
 8008330:	4909      	ldr	r1, [pc, #36]	; (8008358 <Get_SerialNum+0x50>)
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f000 f814 	bl	8008360 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008338:	2204      	movs	r2, #4
 800833a:	4908      	ldr	r1, [pc, #32]	; (800835c <Get_SerialNum+0x54>)
 800833c:	68b8      	ldr	r0, [r7, #8]
 800833e:	f000 f80f 	bl	8008360 <IntToUnicode>
  }
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	1ffff7e8 	.word	0x1ffff7e8
 8008350:	1ffff7ec 	.word	0x1ffff7ec
 8008354:	1ffff7f0 	.word	0x1ffff7f0
 8008358:	2000018e 	.word	0x2000018e
 800835c:	2000019e 	.word	0x2000019e

08008360 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]
 8008376:	e027      	b.n	80083c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	0f1b      	lsrs	r3, r3, #28
 800837c:	2b09      	cmp	r3, #9
 800837e:	d80b      	bhi.n	8008398 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	0f1b      	lsrs	r3, r3, #28
 8008384:	b2da      	uxtb	r2, r3
 8008386:	7dfb      	ldrb	r3, [r7, #23]
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	4619      	mov	r1, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	440b      	add	r3, r1
 8008390:	3230      	adds	r2, #48	; 0x30
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e00a      	b.n	80083ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	0f1b      	lsrs	r3, r3, #28
 800839c:	b2da      	uxtb	r2, r3
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	005b      	lsls	r3, r3, #1
 80083a2:	4619      	mov	r1, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	440b      	add	r3, r1
 80083a8:	3237      	adds	r2, #55	; 0x37
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	3301      	adds	r3, #1
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	4413      	add	r3, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80083c2:	7dfb      	ldrb	r3, [r7, #23]
 80083c4:	3301      	adds	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
 80083c8:	7dfa      	ldrb	r2, [r7, #23]
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d3d3      	bcc.n	8008378 <IntToUnicode+0x18>
  }
}
 80083d0:	bf00      	nop
 80083d2:	371c      	adds	r7, #28
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr
	...

080083dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a0d      	ldr	r2, [pc, #52]	; (8008420 <HAL_PCD_MspInit+0x44>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d113      	bne.n	8008416 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <HAL_PCD_MspInit+0x48>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	4a0c      	ldr	r2, [pc, #48]	; (8008424 <HAL_PCD_MspInit+0x48>)
 80083f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083f8:	61d3      	str	r3, [r2, #28]
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <HAL_PCD_MspInit+0x48>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008402:	60fb      	str	r3, [r7, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	2014      	movs	r0, #20
 800840c:	f7f9 fd1f 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008410:	2014      	movs	r0, #20
 8008412:	f7f9 fd38 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40005c00 	.word	0x40005c00
 8008424:	40021000 	.word	0x40021000

08008428 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f7fe feb6 	bl	80071b0 <USBD_LL_SetupStage>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800845e:	78fa      	ldrb	r2, [r7, #3]
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	440b      	add	r3, r1
 800846c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	4619      	mov	r1, r3
 8008476:	f7fe fee6 	bl	8007246 <USBD_LL_DataOutStage>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	460b      	mov	r3, r1
 800848c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	440b      	add	r3, r1
 80084a2:	333c      	adds	r3, #60	; 0x3c
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	78fb      	ldrb	r3, [r7, #3]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f7fe ff3d 	bl	8007328 <USBD_LL_DataInStage>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff f84d 	bl	8007564 <USBD_LL_SOF>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084da:	2301      	movs	r3, #1
 80084dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d001      	beq.n	80084ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80084e6:	f7f8 ff86 	bl	80013f6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084f0:	7bfa      	ldrb	r2, [r7, #15]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe fffd 	bl	80074f4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe ffb6 	bl	8007472 <USBD_LL_Reset>
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe fff8 	bl	8007512 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */

  // Entering SLEEP
  USBD_Sleep_Callback(1);
 8008522:	2001      	movs	r0, #1
 8008524:	f7f9 f8e8 	bl	80016f8 <USBD_Sleep_Callback>
//  {
//    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
//    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
//  }
  /* USER CODE END 2 */
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
		// Waking Up from Sleep
	  USBD_Sleep_Callback(0);
 8008538:	2000      	movs	r0, #0
 800853a:	f7f9 f8dd 	bl	80016f8 <USBD_Sleep_Callback>

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe fff8 	bl	800753a <USBD_LL_Resume>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
	...

08008554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800855c:	4a1f      	ldr	r2, [pc, #124]	; (80085dc <USBD_LL_Init+0x88>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <USBD_LL_Init+0x88>)
 8008568:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800856c:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <USBD_LL_Init+0x88>)
 800856e:	4a1c      	ldr	r2, [pc, #112]	; (80085e0 <USBD_LL_Init+0x8c>)
 8008570:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008572:	4b1a      	ldr	r3, [pc, #104]	; (80085dc <USBD_LL_Init+0x88>)
 8008574:	2208      	movs	r2, #8
 8008576:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008578:	4b18      	ldr	r3, [pc, #96]	; (80085dc <USBD_LL_Init+0x88>)
 800857a:	2202      	movs	r2, #2
 800857c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800857e:	4b17      	ldr	r3, [pc, #92]	; (80085dc <USBD_LL_Init+0x88>)
 8008580:	2200      	movs	r2, #0
 8008582:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008584:	4b15      	ldr	r3, [pc, #84]	; (80085dc <USBD_LL_Init+0x88>)
 8008586:	2200      	movs	r2, #0
 8008588:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800858a:	4b14      	ldr	r3, [pc, #80]	; (80085dc <USBD_LL_Init+0x88>)
 800858c:	2200      	movs	r2, #0
 800858e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008590:	4812      	ldr	r0, [pc, #72]	; (80085dc <USBD_LL_Init+0x88>)
 8008592:	f7fa f835 	bl	8002600 <HAL_PCD_Init>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800859c:	f7f8 ff2b 	bl	80013f6 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085a6:	2318      	movs	r3, #24
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	f7fb fb52 	bl	8003c54 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085b6:	2358      	movs	r3, #88	; 0x58
 80085b8:	2200      	movs	r2, #0
 80085ba:	2180      	movs	r1, #128	; 0x80
 80085bc:	f7fb fb4a 	bl	8003c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80085c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085ca:	2200      	movs	r2, #0
 80085cc:	2181      	movs	r1, #129	; 0x81
 80085ce:	f7fb fb41 	bl	8003c54 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	2000084c 	.word	0x2000084c
 80085e0:	40005c00 	.word	0x40005c00

080085e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7fa f90b 	bl	8002816 <HAL_PCD_Start>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f93c 	bl	8008884 <USBD_Get_USB_Status>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	4608      	mov	r0, r1
 8008624:	4611      	mov	r1, r2
 8008626:	461a      	mov	r2, r3
 8008628:	4603      	mov	r3, r0
 800862a:	70fb      	strb	r3, [r7, #3]
 800862c:	460b      	mov	r3, r1
 800862e:	70bb      	strb	r3, [r7, #2]
 8008630:	4613      	mov	r3, r2
 8008632:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008642:	78bb      	ldrb	r3, [r7, #2]
 8008644:	883a      	ldrh	r2, [r7, #0]
 8008646:	78f9      	ldrb	r1, [r7, #3]
 8008648:	f7fa fa85 	bl	8002b56 <HAL_PCD_EP_Open>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f916 	bl	8008884 <USBD_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	460b      	mov	r3, r1
 8008670:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008680:	78fa      	ldrb	r2, [r7, #3]
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7fa facc 	bl	8002c22 <HAL_PCD_EP_Close>
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 f8f7 	bl	8008884 <USBD_Get_USB_Status>
 8008696:	4603      	mov	r3, r0
 8008698:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869a:	7bbb      	ldrb	r3, [r7, #14]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	460b      	mov	r3, r1
 80086ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086be:	78fa      	ldrb	r2, [r7, #3]
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fa fb75 	bl	8002db2 <HAL_PCD_EP_SetStall>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f8d8 	bl	8008884 <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7fa fbb6 	bl	8002e72 <HAL_PCD_EP_ClrStall>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f8b9 	bl	8008884 <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008732:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008738:	2b00      	cmp	r3, #0
 800873a:	da0c      	bge.n	8008756 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800873c:	78fb      	ldrb	r3, [r7, #3]
 800873e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008742:	68f9      	ldr	r1, [r7, #12]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	4613      	mov	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	4413      	add	r3, r2
 800874c:	00db      	lsls	r3, r3, #3
 800874e:	440b      	add	r3, r1
 8008750:	3302      	adds	r3, #2
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	e00b      	b.n	800876e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800875c:	68f9      	ldr	r1, [r7, #12]
 800875e:	4613      	mov	r3, r2
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	00db      	lsls	r3, r3, #3
 8008766:	440b      	add	r3, r1
 8008768:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800876c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008792:	78fa      	ldrb	r2, [r7, #3]
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f7fa f9b8 	bl	8002b0c <HAL_PCD_SetAddress>
 800879c:	4603      	mov	r3, r0
 800879e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 f86e 	bl	8008884 <USBD_Get_USB_Status>
 80087a8:	4603      	mov	r3, r0
 80087aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	461a      	mov	r2, r3
 80087c2:	460b      	mov	r3, r1
 80087c4:	72fb      	strb	r3, [r7, #11]
 80087c6:	4613      	mov	r3, r2
 80087c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087d8:	893b      	ldrh	r3, [r7, #8]
 80087da:	7af9      	ldrb	r1, [r7, #11]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	f7fa faa5 	bl	8002d2c <HAL_PCD_EP_Transmit>
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 f84b 	bl	8008884 <USBD_Get_USB_Status>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80087f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	461a      	mov	r2, r3
 8008808:	460b      	mov	r3, r1
 800880a:	72fb      	strb	r3, [r7, #11]
 800880c:	4613      	mov	r3, r2
 800880e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881e:	893b      	ldrh	r3, [r7, #8]
 8008820:	7af9      	ldrb	r1, [r7, #11]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	f7fa fa45 	bl	8002cb2 <HAL_PCD_EP_Receive>
 8008828:	4603      	mov	r3, r0
 800882a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	4618      	mov	r0, r3
 8008830:	f000 f828 	bl	8008884 <USBD_Get_USB_Status>
 8008834:	4603      	mov	r3, r0
 8008836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008838:	7dbb      	ldrb	r3, [r7, #22]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800884c:	4b02      	ldr	r3, [pc, #8]	; (8008858 <USBD_static_malloc+0x14>)
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr
 8008858:	20000228 	.word	0x20000228

0800885c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]

}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr

0800886e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	2b03      	cmp	r3, #3
 8008896:	d817      	bhi.n	80088c8 <USBD_Get_USB_Status+0x44>
 8008898:	a201      	add	r2, pc, #4	; (adr r2, 80088a0 <USBD_Get_USB_Status+0x1c>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088b1 	.word	0x080088b1
 80088a4:	080088b7 	.word	0x080088b7
 80088a8:	080088bd 	.word	0x080088bd
 80088ac:	080088c3 	.word	0x080088c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
    break;
 80088b4:	e00b      	b.n	80088ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088b6:	2302      	movs	r3, #2
 80088b8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ba:	e008      	b.n	80088ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088bc:	2301      	movs	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	e005      	b.n	80088ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088c2:	2302      	movs	r3, #2
 80088c4:	73fb      	strb	r3, [r7, #15]
    break;
 80088c6:	e002      	b.n	80088ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	73fb      	strb	r3, [r7, #15]
    break;
 80088cc:	bf00      	nop
  }
  return usb_status;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop

080088dc <__libc_init_array>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	2500      	movs	r5, #0
 80088e0:	4e0c      	ldr	r6, [pc, #48]	; (8008914 <__libc_init_array+0x38>)
 80088e2:	4c0d      	ldr	r4, [pc, #52]	; (8008918 <__libc_init_array+0x3c>)
 80088e4:	1ba4      	subs	r4, r4, r6
 80088e6:	10a4      	asrs	r4, r4, #2
 80088e8:	42a5      	cmp	r5, r4
 80088ea:	d109      	bne.n	8008900 <__libc_init_array+0x24>
 80088ec:	f000 f822 	bl	8008934 <_init>
 80088f0:	2500      	movs	r5, #0
 80088f2:	4e0a      	ldr	r6, [pc, #40]	; (800891c <__libc_init_array+0x40>)
 80088f4:	4c0a      	ldr	r4, [pc, #40]	; (8008920 <__libc_init_array+0x44>)
 80088f6:	1ba4      	subs	r4, r4, r6
 80088f8:	10a4      	asrs	r4, r4, #2
 80088fa:	42a5      	cmp	r5, r4
 80088fc:	d105      	bne.n	800890a <__libc_init_array+0x2e>
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008904:	4798      	blx	r3
 8008906:	3501      	adds	r5, #1
 8008908:	e7ee      	b.n	80088e8 <__libc_init_array+0xc>
 800890a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800890e:	4798      	blx	r3
 8008910:	3501      	adds	r5, #1
 8008912:	e7f2      	b.n	80088fa <__libc_init_array+0x1e>
 8008914:	08008ab4 	.word	0x08008ab4
 8008918:	08008ab4 	.word	0x08008ab4
 800891c:	08008ab4 	.word	0x08008ab4
 8008920:	08008ab8 	.word	0x08008ab8

08008924 <memset>:
 8008924:	4603      	mov	r3, r0
 8008926:	4402      	add	r2, r0
 8008928:	4293      	cmp	r3, r2
 800892a:	d100      	bne.n	800892e <memset+0xa>
 800892c:	4770      	bx	lr
 800892e:	f803 1b01 	strb.w	r1, [r3], #1
 8008932:	e7f9      	b.n	8008928 <memset+0x4>

08008934 <_init>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr

08008940 <_fini>:
 8008940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008942:	bf00      	nop
 8008944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008946:	bc08      	pop	{r3}
 8008948:	469e      	mov	lr, r3
 800894a:	4770      	bx	lr
